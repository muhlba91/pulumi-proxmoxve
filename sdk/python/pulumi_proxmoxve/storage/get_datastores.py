# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetDatastoresResult',
    'AwaitableGetDatastoresResult',
    'get_datastores',
    'get_datastores_output',
]

@pulumi.output_type
class GetDatastoresResult:
    """
    A collection of values returned by getDatastores.
    """
    def __init__(__self__, datastores=None, filters=None, id=None, node_name=None):
        if datastores and not isinstance(datastores, list):
            raise TypeError("Expected argument 'datastores' to be a list")
        pulumi.set(__self__, "datastores", datastores)
        if filters and not isinstance(filters, dict):
            raise TypeError("Expected argument 'filters' to be a dict")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if node_name and not isinstance(node_name, str):
            raise TypeError("Expected argument 'node_name' to be a str")
        pulumi.set(__self__, "node_name", node_name)

    @property
    @pulumi.getter
    def datastores(self) -> Optional[Sequence['outputs.GetDatastoresDatastoreResult']]:
        """
        The list of datastores.
        """
        return pulumi.get(self, "datastores")

    @property
    @pulumi.getter
    def filters(self) -> Optional['outputs.GetDatastoresFiltersResult']:
        """
        The filters to apply to the stores.
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> builtins.str:
        """
        The name of the node to retrieve the stores from.
        """
        return pulumi.get(self, "node_name")


class AwaitableGetDatastoresResult(GetDatastoresResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDatastoresResult(
            datastores=self.datastores,
            filters=self.filters,
            id=self.id,
            node_name=self.node_name)


def get_datastores(datastores: Optional[Sequence[Union['GetDatastoresDatastoreArgs', 'GetDatastoresDatastoreArgsDict']]] = None,
                   filters: Optional[Union['GetDatastoresFiltersArgs', 'GetDatastoresFiltersArgsDict']] = None,
                   node_name: Optional[builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDatastoresResult:
    """
    Retrieves information about all the datastores available to a specific node.


    :param Sequence[Union['GetDatastoresDatastoreArgs', 'GetDatastoresDatastoreArgsDict']] datastores: The list of datastores.
    :param Union['GetDatastoresFiltersArgs', 'GetDatastoresFiltersArgsDict'] filters: The filters to apply to the stores.
    :param builtins.str node_name: The name of the node to retrieve the stores from.
    """
    __args__ = dict()
    __args__['datastores'] = datastores
    __args__['filters'] = filters
    __args__['nodeName'] = node_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('proxmoxve:Storage/getDatastores:getDatastores', __args__, opts=opts, typ=GetDatastoresResult).value

    return AwaitableGetDatastoresResult(
        datastores=pulumi.get(__ret__, 'datastores'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        node_name=pulumi.get(__ret__, 'node_name'))
def get_datastores_output(datastores: Optional[pulumi.Input[Optional[Sequence[Union['GetDatastoresDatastoreArgs', 'GetDatastoresDatastoreArgsDict']]]]] = None,
                          filters: Optional[pulumi.Input[Optional[Union['GetDatastoresFiltersArgs', 'GetDatastoresFiltersArgsDict']]]] = None,
                          node_name: Optional[pulumi.Input[builtins.str]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDatastoresResult]:
    """
    Retrieves information about all the datastores available to a specific node.


    :param Sequence[Union['GetDatastoresDatastoreArgs', 'GetDatastoresDatastoreArgsDict']] datastores: The list of datastores.
    :param Union['GetDatastoresFiltersArgs', 'GetDatastoresFiltersArgsDict'] filters: The filters to apply to the stores.
    :param builtins.str node_name: The name of the node to retrieve the stores from.
    """
    __args__ = dict()
    __args__['datastores'] = datastores
    __args__['filters'] = filters
    __args__['nodeName'] = node_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('proxmoxve:Storage/getDatastores:getDatastores', __args__, opts=opts, typ=GetDatastoresResult)
    return __ret__.apply(lambda __response__: GetDatastoresResult(
        datastores=pulumi.get(__response__, 'datastores'),
        filters=pulumi.get(__response__, 'filters'),
        id=pulumi.get(__response__, 'id'),
        node_name=pulumi.get(__response__, 'node_name')))

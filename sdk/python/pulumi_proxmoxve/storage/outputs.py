# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'FileSourceFile',
    'FileSourceRaw',
    'GetDatastoresDatastoreResult',
    'GetDatastoresFiltersResult',
]

@pulumi.output_type
class FileSourceFile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileName":
            suggest = "file_name"
        elif key == "minTls":
            suggest = "min_tls"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FileSourceFile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FileSourceFile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FileSourceFile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 path: _builtins.str,
                 changed: Optional[_builtins.bool] = None,
                 checksum: Optional[_builtins.str] = None,
                 file_name: Optional[_builtins.str] = None,
                 insecure: Optional[_builtins.bool] = None,
                 min_tls: Optional[_builtins.str] = None):
        """
        :param _builtins.str path: A path to a local file or a URL.
        :param _builtins.bool changed: Whether the source file has changed since the last run
        :param _builtins.str checksum: The SHA256 checksum of the source file.
        :param _builtins.str file_name: The file name to use instead of the source file
               name. Useful when the source file does not have a valid file extension,
               for example when the source file is a URL referencing a `.qcow2` image.
        :param _builtins.bool insecure: Whether to skip the TLS verification step for
               HTTPS sources (defaults to `false`).
        :param _builtins.str min_tls: The minimum required TLS version for HTTPS
               sources. "Supported values: `1.0|1.1|1.2|1.3` (defaults to `1.3`).
        """
        pulumi.set(__self__, "path", path)
        if changed is not None:
            pulumi.set(__self__, "changed", changed)
        if checksum is not None:
            pulumi.set(__self__, "checksum", checksum)
        if file_name is not None:
            pulumi.set(__self__, "file_name", file_name)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if min_tls is not None:
            pulumi.set(__self__, "min_tls", min_tls)

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        A path to a local file or a URL.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def changed(self) -> Optional[_builtins.bool]:
        """
        Whether the source file has changed since the last run
        """
        return pulumi.get(self, "changed")

    @_builtins.property
    @pulumi.getter
    def checksum(self) -> Optional[_builtins.str]:
        """
        The SHA256 checksum of the source file.
        """
        return pulumi.get(self, "checksum")

    @_builtins.property
    @pulumi.getter(name="fileName")
    def file_name(self) -> Optional[_builtins.str]:
        """
        The file name to use instead of the source file
        name. Useful when the source file does not have a valid file extension,
        for example when the source file is a URL referencing a `.qcow2` image.
        """
        return pulumi.get(self, "file_name")

    @_builtins.property
    @pulumi.getter
    def insecure(self) -> Optional[_builtins.bool]:
        """
        Whether to skip the TLS verification step for
        HTTPS sources (defaults to `false`).
        """
        return pulumi.get(self, "insecure")

    @_builtins.property
    @pulumi.getter(name="minTls")
    def min_tls(self) -> Optional[_builtins.str]:
        """
        The minimum required TLS version for HTTPS
        sources. "Supported values: `1.0|1.1|1.2|1.3` (defaults to `1.3`).
        """
        return pulumi.get(self, "min_tls")


@pulumi.output_type
class FileSourceRaw(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileName":
            suggest = "file_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FileSourceRaw. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FileSourceRaw.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FileSourceRaw.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data: _builtins.str,
                 file_name: _builtins.str,
                 resize: Optional[_builtins.int] = None):
        """
        :param _builtins.str data: The raw data.
        :param _builtins.str file_name: The file name.
        :param _builtins.int resize: The number of bytes to resize the file to.
        """
        pulumi.set(__self__, "data", data)
        pulumi.set(__self__, "file_name", file_name)
        if resize is not None:
            pulumi.set(__self__, "resize", resize)

    @_builtins.property
    @pulumi.getter
    def data(self) -> _builtins.str:
        """
        The raw data.
        """
        return pulumi.get(self, "data")

    @_builtins.property
    @pulumi.getter(name="fileName")
    def file_name(self) -> _builtins.str:
        """
        The file name.
        """
        return pulumi.get(self, "file_name")

    @_builtins.property
    @pulumi.getter
    def resize(self) -> Optional[_builtins.int]:
        """
        The number of bytes to resize the file to.
        """
        return pulumi.get(self, "resize")


@pulumi.output_type
class GetDatastoresDatastoreResult(dict):
    def __init__(__self__, *,
                 content_types: Sequence[_builtins.str],
                 id: _builtins.str,
                 node_name: _builtins.str,
                 type: _builtins.str,
                 active: Optional[_builtins.bool] = None,
                 enabled: Optional[_builtins.bool] = None,
                 shared: Optional[_builtins.bool] = None,
                 space_available: Optional[_builtins.int] = None,
                 space_total: Optional[_builtins.int] = None,
                 space_used: Optional[_builtins.int] = None,
                 space_used_fraction: Optional[_builtins.float] = None):
        """
        :param Sequence[_builtins.str] content_types: Allowed store content types.
        :param _builtins.str id: The ID of the store.
        :param _builtins.str node_name: The name of the node the store is on.
        :param _builtins.str type: Store type.
        :param _builtins.bool active: Whether the store is active.
        :param _builtins.bool enabled: Whether the store is enabled.
        :param _builtins.bool shared: Shared flag from store configuration.
        :param _builtins.int space_available: Available store space in bytes.
        :param _builtins.int space_total: Total store space in bytes.
        :param _builtins.int space_used: Used store space in bytes.
        :param _builtins.float space_used_fraction: Used fraction (used/total).
        """
        pulumi.set(__self__, "content_types", content_types)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "node_name", node_name)
        pulumi.set(__self__, "type", type)
        if active is not None:
            pulumi.set(__self__, "active", active)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if shared is not None:
            pulumi.set(__self__, "shared", shared)
        if space_available is not None:
            pulumi.set(__self__, "space_available", space_available)
        if space_total is not None:
            pulumi.set(__self__, "space_total", space_total)
        if space_used is not None:
            pulumi.set(__self__, "space_used", space_used)
        if space_used_fraction is not None:
            pulumi.set(__self__, "space_used_fraction", space_used_fraction)

    @_builtins.property
    @pulumi.getter(name="contentTypes")
    def content_types(self) -> Sequence[_builtins.str]:
        """
        Allowed store content types.
        """
        return pulumi.get(self, "content_types")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the store.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> _builtins.str:
        """
        The name of the node the store is on.
        """
        return pulumi.get(self, "node_name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Store type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def active(self) -> Optional[_builtins.bool]:
        """
        Whether the store is active.
        """
        return pulumi.get(self, "active")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[_builtins.bool]:
        """
        Whether the store is enabled.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def shared(self) -> Optional[_builtins.bool]:
        """
        Shared flag from store configuration.
        """
        return pulumi.get(self, "shared")

    @_builtins.property
    @pulumi.getter(name="spaceAvailable")
    def space_available(self) -> Optional[_builtins.int]:
        """
        Available store space in bytes.
        """
        return pulumi.get(self, "space_available")

    @_builtins.property
    @pulumi.getter(name="spaceTotal")
    def space_total(self) -> Optional[_builtins.int]:
        """
        Total store space in bytes.
        """
        return pulumi.get(self, "space_total")

    @_builtins.property
    @pulumi.getter(name="spaceUsed")
    def space_used(self) -> Optional[_builtins.int]:
        """
        Used store space in bytes.
        """
        return pulumi.get(self, "space_used")

    @_builtins.property
    @pulumi.getter(name="spaceUsedFraction")
    def space_used_fraction(self) -> Optional[_builtins.float]:
        """
        Used fraction (used/total).
        """
        return pulumi.get(self, "space_used_fraction")


@pulumi.output_type
class GetDatastoresFiltersResult(dict):
    def __init__(__self__, *,
                 content_types: Optional[Sequence[_builtins.str]] = None,
                 id: Optional[_builtins.str] = None,
                 target: Optional[_builtins.str] = None):
        """
        :param Sequence[_builtins.str] content_types: Only list stores with the given content types.
        :param _builtins.str id: Only list stores with the given ID.
        :param _builtins.str target: If `target` is different to `node_name`, then only lists shared stores which content is accessible on this node and the specified `target` node.
        """
        if content_types is not None:
            pulumi.set(__self__, "content_types", content_types)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @_builtins.property
    @pulumi.getter(name="contentTypes")
    def content_types(self) -> Optional[Sequence[_builtins.str]]:
        """
        Only list stores with the given content types.
        """
        return pulumi.get(self, "content_types")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Only list stores with the given ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def target(self) -> Optional[_builtins.str]:
        """
        If `target` is different to `node_name`, then only lists shared stores which content is accessible on this node and the specified `target` node.
        """
        return pulumi.get(self, "target")



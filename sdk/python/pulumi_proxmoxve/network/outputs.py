# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'FirewallIPSetCidr',
    'FirewallLogRatelimit',
    'FirewallRulesRule',
    'FirewallSecurityGroupRule',
    'GetHostsEntryResult',
]

@pulumi.output_type
class FirewallIPSetCidr(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 comment: Optional[builtins.str] = None,
                 nomatch: Optional[builtins.bool] = None):
        """
        :param builtins.str name: Network/IP specification in CIDR format.
        :param builtins.str comment: Arbitrary string annotation.
        :param builtins.bool nomatch: Entries marked as `nomatch` are skipped as if those
               were not added to the set.
        """
        pulumi.set(__self__, "name", name)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if nomatch is not None:
            pulumi.set(__self__, "nomatch", nomatch)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Network/IP specification in CIDR format.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def comment(self) -> Optional[builtins.str]:
        """
        Arbitrary string annotation.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def nomatch(self) -> Optional[builtins.bool]:
        """
        Entries marked as `nomatch` are skipped as if those
        were not added to the set.
        """
        return pulumi.get(self, "nomatch")


@pulumi.output_type
class FirewallLogRatelimit(dict):
    def __init__(__self__, *,
                 burst: Optional[builtins.int] = None,
                 enabled: Optional[builtins.bool] = None,
                 rate: Optional[builtins.str] = None):
        """
        :param builtins.int burst: Initial burst of packages which will always get
               logged before the rate is applied (defaults to `5`).
        :param builtins.bool enabled: Enable or disable the log rate limit.
        :param builtins.str rate: Frequency with which the burst bucket gets refilled
               (defaults to `1/second`).
        """
        if burst is not None:
            pulumi.set(__self__, "burst", burst)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if rate is not None:
            pulumi.set(__self__, "rate", rate)

    @property
    @pulumi.getter
    def burst(self) -> Optional[builtins.int]:
        """
        Initial burst of packages which will always get
        logged before the rate is applied (defaults to `5`).
        """
        return pulumi.get(self, "burst")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[builtins.bool]:
        """
        Enable or disable the log rate limit.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def rate(self) -> Optional[builtins.str]:
        """
        Frequency with which the burst bucket gets refilled
        (defaults to `1/second`).
        """
        return pulumi.get(self, "rate")


@pulumi.output_type
class FirewallRulesRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityGroup":
            suggest = "security_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallRulesRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallRulesRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallRulesRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[builtins.str] = None,
                 comment: Optional[builtins.str] = None,
                 dest: Optional[builtins.str] = None,
                 dport: Optional[builtins.str] = None,
                 enabled: Optional[builtins.bool] = None,
                 iface: Optional[builtins.str] = None,
                 log: Optional[builtins.str] = None,
                 macro: Optional[builtins.str] = None,
                 pos: Optional[builtins.int] = None,
                 proto: Optional[builtins.str] = None,
                 security_group: Optional[builtins.str] = None,
                 source: Optional[builtins.str] = None,
                 sport: Optional[builtins.str] = None,
                 type: Optional[builtins.str] = None):
        """
        :param builtins.str action: Rule action (`ACCEPT`, `DROP`, `REJECT`).
        :param builtins.str comment: Rule comment.
        :param builtins.str dest: Restrict packet destination address. This can
               refer to a single IP address, an IP set ('+ipsetname') or an IP
               alias definition. You can also specify an address range
               like `20.34.101.207-201.3.9.99`, or a list of IP addresses and
               networks (entries are separated by comma). Please do not mix IPv4
               and IPv6 addresses inside such lists.
        :param builtins.str dport: Restrict TCP/UDP destination port. You can use
               service names or simple numbers (0-65535), as defined
               in `/etc/services`. Port ranges can be specified with '\\d+:\\d+', for
               example `80:85`, and you can use comma separated list to match
               several ports or ranges.
        :param builtins.bool enabled: Enable this rule. Defaults to `true`.
        :param builtins.str iface: Network interface name. You have to use network
               configuration key names for VMs and containers ('net\\d+'). Host
               related rules can use arbitrary strings.
        :param builtins.str log: Log level for this rule (`emerg`, `alert`, `crit`,
               `err`, `warning`, `notice`, `info`, `debug`, `nolog`).
        :param builtins.str macro: Macro name. Use predefined standard macro
               from <https://pve.proxmox.com/pve-docs/pve-admin-guide.html#_firewall_macro_definitions>
        :param builtins.int pos: Position of the rule in the list.
        :param builtins.str proto: Restrict packet protocol. You can use protocol
               names as defined in '/etc/protocols'.
        :param builtins.str security_group: Security group name.
        :param builtins.str source: Restrict packet source address. This can refer
               to a single IP address, an IP set ('+ipsetname') or an IP alias
               definition. You can also specify an address range
               like `20.34.101.207-201.3.9.99`, or a list of IP addresses and
               networks (entries are separated by comma). Please do not mix IPv4
               and IPv6 addresses inside such lists.
        :param builtins.str sport: Restrict TCP/UDP source port. You can use
               service names or simple numbers (0-65535), as defined
               in `/etc/services`. Port ranges can be specified with '\\d+:\\d+', for
               example `80:85`, and you can use comma separated list to match
               several ports or ranges.
               - a security group insertion block, which includes the following arguments:
        :param builtins.str type: Rule type (`in`, `out`).
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dest is not None:
            pulumi.set(__self__, "dest", dest)
        if dport is not None:
            pulumi.set(__self__, "dport", dport)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if iface is not None:
            pulumi.set(__self__, "iface", iface)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if macro is not None:
            pulumi.set(__self__, "macro", macro)
        if pos is not None:
            pulumi.set(__self__, "pos", pos)
        if proto is not None:
            pulumi.set(__self__, "proto", proto)
        if security_group is not None:
            pulumi.set(__self__, "security_group", security_group)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if sport is not None:
            pulumi.set(__self__, "sport", sport)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[builtins.str]:
        """
        Rule action (`ACCEPT`, `DROP`, `REJECT`).
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def comment(self) -> Optional[builtins.str]:
        """
        Rule comment.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def dest(self) -> Optional[builtins.str]:
        """
        Restrict packet destination address. This can
        refer to a single IP address, an IP set ('+ipsetname') or an IP
        alias definition. You can also specify an address range
        like `20.34.101.207-201.3.9.99`, or a list of IP addresses and
        networks (entries are separated by comma). Please do not mix IPv4
        and IPv6 addresses inside such lists.
        """
        return pulumi.get(self, "dest")

    @property
    @pulumi.getter
    def dport(self) -> Optional[builtins.str]:
        """
        Restrict TCP/UDP destination port. You can use
        service names or simple numbers (0-65535), as defined
        in `/etc/services`. Port ranges can be specified with '\\d+:\\d+', for
        example `80:85`, and you can use comma separated list to match
        several ports or ranges.
        """
        return pulumi.get(self, "dport")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[builtins.bool]:
        """
        Enable this rule. Defaults to `true`.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def iface(self) -> Optional[builtins.str]:
        """
        Network interface name. You have to use network
        configuration key names for VMs and containers ('net\\d+'). Host
        related rules can use arbitrary strings.
        """
        return pulumi.get(self, "iface")

    @property
    @pulumi.getter
    def log(self) -> Optional[builtins.str]:
        """
        Log level for this rule (`emerg`, `alert`, `crit`,
        `err`, `warning`, `notice`, `info`, `debug`, `nolog`).
        """
        return pulumi.get(self, "log")

    @property
    @pulumi.getter
    def macro(self) -> Optional[builtins.str]:
        """
        Macro name. Use predefined standard macro
        from <https://pve.proxmox.com/pve-docs/pve-admin-guide.html#_firewall_macro_definitions>
        """
        return pulumi.get(self, "macro")

    @property
    @pulumi.getter
    def pos(self) -> Optional[builtins.int]:
        """
        Position of the rule in the list.
        """
        return pulumi.get(self, "pos")

    @property
    @pulumi.getter
    def proto(self) -> Optional[builtins.str]:
        """
        Restrict packet protocol. You can use protocol
        names as defined in '/etc/protocols'.
        """
        return pulumi.get(self, "proto")

    @property
    @pulumi.getter(name="securityGroup")
    def security_group(self) -> Optional[builtins.str]:
        """
        Security group name.
        """
        return pulumi.get(self, "security_group")

    @property
    @pulumi.getter
    def source(self) -> Optional[builtins.str]:
        """
        Restrict packet source address. This can refer
        to a single IP address, an IP set ('+ipsetname') or an IP alias
        definition. You can also specify an address range
        like `20.34.101.207-201.3.9.99`, or a list of IP addresses and
        networks (entries are separated by comma). Please do not mix IPv4
        and IPv6 addresses inside such lists.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def sport(self) -> Optional[builtins.str]:
        """
        Restrict TCP/UDP source port. You can use
        service names or simple numbers (0-65535), as defined
        in `/etc/services`. Port ranges can be specified with '\\d+:\\d+', for
        example `80:85`, and you can use comma separated list to match
        several ports or ranges.
        - a security group insertion block, which includes the following arguments:
        """
        return pulumi.get(self, "sport")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        """
        Rule type (`in`, `out`).
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class FirewallSecurityGroupRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityGroup":
            suggest = "security_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallSecurityGroupRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallSecurityGroupRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallSecurityGroupRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[builtins.str] = None,
                 comment: Optional[builtins.str] = None,
                 dest: Optional[builtins.str] = None,
                 dport: Optional[builtins.str] = None,
                 enabled: Optional[builtins.bool] = None,
                 iface: Optional[builtins.str] = None,
                 log: Optional[builtins.str] = None,
                 macro: Optional[builtins.str] = None,
                 pos: Optional[builtins.int] = None,
                 proto: Optional[builtins.str] = None,
                 security_group: Optional[builtins.str] = None,
                 source: Optional[builtins.str] = None,
                 sport: Optional[builtins.str] = None,
                 type: Optional[builtins.str] = None):
        """
        :param builtins.str action: Rule action (`ACCEPT`, `DROP`, `REJECT`).
        :param builtins.str comment: Rule comment.
        :param builtins.str dest: Restrict packet destination address. This can refer to
               a single IP address, an IP set ('+ipsetname') or an IP alias
               definition. You can also specify an address range like
               `20.34.101.207-201.3.9.99`, or a list of IP addresses and networks
               (entries are separated by comma). Please do not mix IPv4 and IPv6
               addresses inside such lists.
        :param builtins.str dport: Restrict TCP/UDP destination port. You can use
               service names or simple numbers (0-65535), as defined in '/etc/
               services'. Port ranges can be specified with '\\d+:\\d+', for example
               `80:85`, and you can use comma separated list to match several ports or
               ranges.
        :param builtins.bool enabled: Enable rule
        :param builtins.str iface: Network interface name. You have to use network
               configuration key names for VMs and containers ('net\\d+'). Host related
               rules can use arbitrary strings.
        :param builtins.str log: Log level for this rule (`emerg`, `alert`, `crit`,
               `err`, `warning`, `notice`, `info`, `debug`, `nolog`).
        :param builtins.str macro: Macro name. Use predefined standard macro
               from <https://pve.proxmox.com/pve-docs/pve-admin-guide.html#_firewall_macro_definitions>
        :param builtins.int pos: Position of the rule in the list.
        :param builtins.str proto: Restrict packet protocol. You can use protocol names
               as defined in '/etc/protocols'.
        :param builtins.str security_group: Security group name
        :param builtins.str source: Restrict packet source address. This can refer
               to a single IP address, an IP set ('+ipsetname') or an IP alias
               definition. You can also specify an address range like
               `20.34.101.207-201.3.9.99`, or a list of IP addresses and networks (
               entries are separated by comma). Please do not mix IPv4 and IPv6
               addresses inside such lists.
        :param builtins.str sport: Restrict TCP/UDP source port. You can use
               service names or simple numbers (0-65535), as defined in '/etc/
               services'. Port ranges can be specified with '\\d+:\\d+', for example
               `80:85`, and you can use comma separated list to match several ports or
               ranges.
        :param builtins.str type: Rule type (`in`, `out`).
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dest is not None:
            pulumi.set(__self__, "dest", dest)
        if dport is not None:
            pulumi.set(__self__, "dport", dport)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if iface is not None:
            pulumi.set(__self__, "iface", iface)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if macro is not None:
            pulumi.set(__self__, "macro", macro)
        if pos is not None:
            pulumi.set(__self__, "pos", pos)
        if proto is not None:
            pulumi.set(__self__, "proto", proto)
        if security_group is not None:
            pulumi.set(__self__, "security_group", security_group)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if sport is not None:
            pulumi.set(__self__, "sport", sport)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[builtins.str]:
        """
        Rule action (`ACCEPT`, `DROP`, `REJECT`).
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def comment(self) -> Optional[builtins.str]:
        """
        Rule comment.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def dest(self) -> Optional[builtins.str]:
        """
        Restrict packet destination address. This can refer to
        a single IP address, an IP set ('+ipsetname') or an IP alias
        definition. You can also specify an address range like
        `20.34.101.207-201.3.9.99`, or a list of IP addresses and networks
        (entries are separated by comma). Please do not mix IPv4 and IPv6
        addresses inside such lists.
        """
        return pulumi.get(self, "dest")

    @property
    @pulumi.getter
    def dport(self) -> Optional[builtins.str]:
        """
        Restrict TCP/UDP destination port. You can use
        service names or simple numbers (0-65535), as defined in '/etc/
        services'. Port ranges can be specified with '\\d+:\\d+', for example
        `80:85`, and you can use comma separated list to match several ports or
        ranges.
        """
        return pulumi.get(self, "dport")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[builtins.bool]:
        """
        Enable rule
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def iface(self) -> Optional[builtins.str]:
        """
        Network interface name. You have to use network
        configuration key names for VMs and containers ('net\\d+'). Host related
        rules can use arbitrary strings.
        """
        return pulumi.get(self, "iface")

    @property
    @pulumi.getter
    def log(self) -> Optional[builtins.str]:
        """
        Log level for this rule (`emerg`, `alert`, `crit`,
        `err`, `warning`, `notice`, `info`, `debug`, `nolog`).
        """
        return pulumi.get(self, "log")

    @property
    @pulumi.getter
    def macro(self) -> Optional[builtins.str]:
        """
        Macro name. Use predefined standard macro
        from <https://pve.proxmox.com/pve-docs/pve-admin-guide.html#_firewall_macro_definitions>
        """
        return pulumi.get(self, "macro")

    @property
    @pulumi.getter
    def pos(self) -> Optional[builtins.int]:
        """
        Position of the rule in the list.
        """
        return pulumi.get(self, "pos")

    @property
    @pulumi.getter
    def proto(self) -> Optional[builtins.str]:
        """
        Restrict packet protocol. You can use protocol names
        as defined in '/etc/protocols'.
        """
        return pulumi.get(self, "proto")

    @property
    @pulumi.getter(name="securityGroup")
    def security_group(self) -> Optional[builtins.str]:
        """
        Security group name
        """
        return pulumi.get(self, "security_group")

    @property
    @pulumi.getter
    def source(self) -> Optional[builtins.str]:
        """
        Restrict packet source address. This can refer
        to a single IP address, an IP set ('+ipsetname') or an IP alias
        definition. You can also specify an address range like
        `20.34.101.207-201.3.9.99`, or a list of IP addresses and networks (
        entries are separated by comma). Please do not mix IPv4 and IPv6
        addresses inside such lists.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def sport(self) -> Optional[builtins.str]:
        """
        Restrict TCP/UDP source port. You can use
        service names or simple numbers (0-65535), as defined in '/etc/
        services'. Port ranges can be specified with '\\d+:\\d+', for example
        `80:85`, and you can use comma separated list to match several ports or
        ranges.
        """
        return pulumi.get(self, "sport")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        """
        Rule type (`in`, `out`).
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetHostsEntryResult(dict):
    def __init__(__self__, *,
                 address: builtins.str,
                 hostnames: Sequence[builtins.str]):
        """
        :param builtins.str address: The address
        :param Sequence[builtins.str] hostnames: The hostnames associated with each of the IP addresses.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "hostnames", hostnames)

    @property
    @pulumi.getter
    def address(self) -> builtins.str:
        """
        The address
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def hostnames(self) -> Sequence[builtins.str]:
        """
        The hostnames associated with each of the IP addresses.
        """
        return pulumi.get(self, "hostnames")



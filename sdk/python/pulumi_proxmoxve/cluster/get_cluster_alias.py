# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetClusterAliasResult',
    'AwaitableGetClusterAliasResult',
    'get_cluster_alias',
    'get_cluster_alias_output',
]

@pulumi.output_type
class GetClusterAliasResult:
    """
    A collection of values returned by getClusterAlias.
    """
    def __init__(__self__, cidr=None, comment=None, id=None, name=None):
        if cidr and not isinstance(cidr, str):
            raise TypeError("Expected argument 'cidr' to be a str")
        pulumi.set(__self__, "cidr", cidr)
        if comment and not isinstance(comment, str):
            raise TypeError("Expected argument 'comment' to be a str")
        pulumi.set(__self__, "comment", comment)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def cidr(self) -> str:
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


class AwaitableGetClusterAliasResult(GetClusterAliasResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetClusterAliasResult(
            cidr=self.cidr,
            comment=self.comment,
            id=self.id,
            name=self.name)


def get_cluster_alias(name: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetClusterAliasResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('proxmoxve:Cluster/getClusterAlias:getClusterAlias', __args__, opts=opts, typ=GetClusterAliasResult).value

    return AwaitableGetClusterAliasResult(
        cidr=__ret__.cidr,
        comment=__ret__.comment,
        id=__ret__.id,
        name=__ret__.name)


@_utilities.lift_output_func(get_cluster_alias)
def get_cluster_alias_output(name: Optional[pulumi.Input[str]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetClusterAliasResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...

# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'OptionsNextIdArgs',
    'OptionsNextIdArgsDict',
    'OptionsNotifyArgs',
    'OptionsNotifyArgsDict',
]

MYPY = False

if not MYPY:
    class OptionsNextIdArgsDict(TypedDict):
        lower: NotRequired[pulumi.Input[builtins.int]]
        """
        The minimum number for the next free VM ID. Must be higher or equal to 100
        """
        upper: NotRequired[pulumi.Input[builtins.int]]
        """
        The maximum number for the next free VM ID. Must be less or equal to 999999999
        """
elif False:
    OptionsNextIdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OptionsNextIdArgs:
    def __init__(__self__, *,
                 lower: Optional[pulumi.Input[builtins.int]] = None,
                 upper: Optional[pulumi.Input[builtins.int]] = None):
        """
        :param pulumi.Input[builtins.int] lower: The minimum number for the next free VM ID. Must be higher or equal to 100
        :param pulumi.Input[builtins.int] upper: The maximum number for the next free VM ID. Must be less or equal to 999999999
        """
        if lower is not None:
            pulumi.set(__self__, "lower", lower)
        if upper is not None:
            pulumi.set(__self__, "upper", upper)

    @property
    @pulumi.getter
    def lower(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The minimum number for the next free VM ID. Must be higher or equal to 100
        """
        return pulumi.get(self, "lower")

    @lower.setter
    def lower(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "lower", value)

    @property
    @pulumi.getter
    def upper(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The maximum number for the next free VM ID. Must be less or equal to 999999999
        """
        return pulumi.get(self, "upper")

    @upper.setter
    def upper(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "upper", value)


if not MYPY:
    class OptionsNotifyArgsDict(TypedDict):
        ha_fencing_mode: NotRequired[pulumi.Input[builtins.str]]
        """
        Cluster-wide notification settings for the HA fencing mode. Must be `always` | `never`.
        """
        ha_fencing_target: NotRequired[pulumi.Input[builtins.str]]
        """
        Cluster-wide notification settings for the HA fencing target.
        """
        package_updates: NotRequired[pulumi.Input[builtins.str]]
        """
        Cluster-wide notification settings for package updates. Must be `auto` | `always` | `never`.
        """
        package_updates_target: NotRequired[pulumi.Input[builtins.str]]
        """
        Cluster-wide notification settings for the package updates target.
        """
        replication: NotRequired[pulumi.Input[builtins.str]]
        """
        Cluster-wide notification settings for replication. Must be `always` | `never`.
        """
        replication_target: NotRequired[pulumi.Input[builtins.str]]
        """
        Cluster-wide notification settings for the replication target.
        """
elif False:
    OptionsNotifyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OptionsNotifyArgs:
    def __init__(__self__, *,
                 ha_fencing_mode: Optional[pulumi.Input[builtins.str]] = None,
                 ha_fencing_target: Optional[pulumi.Input[builtins.str]] = None,
                 package_updates: Optional[pulumi.Input[builtins.str]] = None,
                 package_updates_target: Optional[pulumi.Input[builtins.str]] = None,
                 replication: Optional[pulumi.Input[builtins.str]] = None,
                 replication_target: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] ha_fencing_mode: Cluster-wide notification settings for the HA fencing mode. Must be `always` | `never`.
        :param pulumi.Input[builtins.str] ha_fencing_target: Cluster-wide notification settings for the HA fencing target.
        :param pulumi.Input[builtins.str] package_updates: Cluster-wide notification settings for package updates. Must be `auto` | `always` | `never`.
        :param pulumi.Input[builtins.str] package_updates_target: Cluster-wide notification settings for the package updates target.
        :param pulumi.Input[builtins.str] replication: Cluster-wide notification settings for replication. Must be `always` | `never`.
        :param pulumi.Input[builtins.str] replication_target: Cluster-wide notification settings for the replication target.
        """
        if ha_fencing_mode is not None:
            pulumi.set(__self__, "ha_fencing_mode", ha_fencing_mode)
        if ha_fencing_target is not None:
            pulumi.set(__self__, "ha_fencing_target", ha_fencing_target)
        if package_updates is not None:
            pulumi.set(__self__, "package_updates", package_updates)
        if package_updates_target is not None:
            pulumi.set(__self__, "package_updates_target", package_updates_target)
        if replication is not None:
            pulumi.set(__self__, "replication", replication)
        if replication_target is not None:
            pulumi.set(__self__, "replication_target", replication_target)

    @property
    @pulumi.getter(name="haFencingMode")
    def ha_fencing_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Cluster-wide notification settings for the HA fencing mode. Must be `always` | `never`.
        """
        return pulumi.get(self, "ha_fencing_mode")

    @ha_fencing_mode.setter
    def ha_fencing_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ha_fencing_mode", value)

    @property
    @pulumi.getter(name="haFencingTarget")
    def ha_fencing_target(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Cluster-wide notification settings for the HA fencing target.
        """
        return pulumi.get(self, "ha_fencing_target")

    @ha_fencing_target.setter
    def ha_fencing_target(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ha_fencing_target", value)

    @property
    @pulumi.getter(name="packageUpdates")
    def package_updates(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Cluster-wide notification settings for package updates. Must be `auto` | `always` | `never`.
        """
        return pulumi.get(self, "package_updates")

    @package_updates.setter
    def package_updates(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "package_updates", value)

    @property
    @pulumi.getter(name="packageUpdatesTarget")
    def package_updates_target(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Cluster-wide notification settings for the package updates target.
        """
        return pulumi.get(self, "package_updates_target")

    @package_updates_target.setter
    def package_updates_target(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "package_updates_target", value)

    @property
    @pulumi.getter
    def replication(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Cluster-wide notification settings for replication. Must be `always` | `never`.
        """
        return pulumi.get(self, "replication")

    @replication.setter
    def replication(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "replication", value)

    @property
    @pulumi.getter(name="replicationTarget")
    def replication_target(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Cluster-wide notification settings for the replication target.
        """
        return pulumi.get(self, "replication_target")

    @replication_target.setter
    def replication_target(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "replication_target", value)



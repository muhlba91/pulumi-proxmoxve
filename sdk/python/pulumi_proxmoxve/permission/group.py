# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['GroupArgs', 'Group']

@pulumi.input_type
class GroupArgs:
    def __init__(__self__, *,
                 group_id: pulumi.Input[str],
                 acls: Optional[pulumi.Input[Sequence[pulumi.Input['GroupAclArgs']]]] = None,
                 comment: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Group resource.
        :param pulumi.Input[str] group_id: The group identifier.
        :param pulumi.Input[Sequence[pulumi.Input['GroupAclArgs']]] acls: The access control list (multiple blocks supported).
        :param pulumi.Input[str] comment: The group comment.
        """
        GroupArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            group_id=group_id,
            acls=acls,
            comment=comment,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             group_id: pulumi.Input[str],
             acls: Optional[pulumi.Input[Sequence[pulumi.Input['GroupAclArgs']]]] = None,
             comment: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'groupId' in kwargs:
            group_id = kwargs['groupId']

        _setter("group_id", group_id)
        if acls is not None:
            _setter("acls", acls)
        if comment is not None:
            _setter("comment", comment)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Input[str]:
        """
        The group identifier.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter
    def acls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GroupAclArgs']]]]:
        """
        The access control list (multiple blocks supported).
        """
        return pulumi.get(self, "acls")

    @acls.setter
    def acls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GroupAclArgs']]]]):
        pulumi.set(self, "acls", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        The group comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)


@pulumi.input_type
class _GroupState:
    def __init__(__self__, *,
                 acls: Optional[pulumi.Input[Sequence[pulumi.Input['GroupAclArgs']]]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering Group resources.
        :param pulumi.Input[Sequence[pulumi.Input['GroupAclArgs']]] acls: The access control list (multiple blocks supported).
        :param pulumi.Input[str] comment: The group comment.
        :param pulumi.Input[str] group_id: The group identifier.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] members: The group members as a list of `username@realm` entries
        """
        _GroupState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            acls=acls,
            comment=comment,
            group_id=group_id,
            members=members,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             acls: Optional[pulumi.Input[Sequence[pulumi.Input['GroupAclArgs']]]] = None,
             comment: Optional[pulumi.Input[str]] = None,
             group_id: Optional[pulumi.Input[str]] = None,
             members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'groupId' in kwargs:
            group_id = kwargs['groupId']

        if acls is not None:
            _setter("acls", acls)
        if comment is not None:
            _setter("comment", comment)
        if group_id is not None:
            _setter("group_id", group_id)
        if members is not None:
            _setter("members", members)

    @property
    @pulumi.getter
    def acls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GroupAclArgs']]]]:
        """
        The access control list (multiple blocks supported).
        """
        return pulumi.get(self, "acls")

    @acls.setter
    def acls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GroupAclArgs']]]]):
        pulumi.set(self, "acls", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        The group comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The group identifier.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The group members as a list of `username@realm` entries
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "members", value)


class Group(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acls: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GroupAclArgs']]]]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages a user group.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_proxmoxve as proxmoxve

        operations_team = proxmoxve.permission.Group("operationsTeam",
            comment="Managed by Terraform",
            group_id="operations-team")
        ```

        ## Import

        Instances can be imported using the `group_id`, e.g., bash

        ```sh
         $ pulumi import proxmoxve:Permission/group:Group operations_team operations-team
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GroupAclArgs']]]] acls: The access control list (multiple blocks supported).
        :param pulumi.Input[str] comment: The group comment.
        :param pulumi.Input[str] group_id: The group identifier.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a user group.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_proxmoxve as proxmoxve

        operations_team = proxmoxve.permission.Group("operationsTeam",
            comment="Managed by Terraform",
            group_id="operations-team")
        ```

        ## Import

        Instances can be imported using the `group_id`, e.g., bash

        ```sh
         $ pulumi import proxmoxve:Permission/group:Group operations_team operations-team
        ```

        :param str resource_name: The name of the resource.
        :param GroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            GroupArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acls: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GroupAclArgs']]]]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GroupArgs.__new__(GroupArgs)

            __props__.__dict__["acls"] = acls
            __props__.__dict__["comment"] = comment
            if group_id is None and not opts.urn:
                raise TypeError("Missing required property 'group_id'")
            __props__.__dict__["group_id"] = group_id
            __props__.__dict__["members"] = None
        super(Group, __self__).__init__(
            'proxmoxve:Permission/group:Group',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            acls: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GroupAclArgs']]]]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            group_id: Optional[pulumi.Input[str]] = None,
            members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'Group':
        """
        Get an existing Group resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GroupAclArgs']]]] acls: The access control list (multiple blocks supported).
        :param pulumi.Input[str] comment: The group comment.
        :param pulumi.Input[str] group_id: The group identifier.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] members: The group members as a list of `username@realm` entries
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GroupState.__new__(_GroupState)

        __props__.__dict__["acls"] = acls
        __props__.__dict__["comment"] = comment
        __props__.__dict__["group_id"] = group_id
        __props__.__dict__["members"] = members
        return Group(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def acls(self) -> pulumi.Output[Optional[Sequence['outputs.GroupAcl']]]:
        """
        The access control list (multiple blocks supported).
        """
        return pulumi.get(self, "acls")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        """
        The group comment.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Output[str]:
        """
        The group identifier.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def members(self) -> pulumi.Output[Sequence[str]]:
        """
        The group members as a list of `username@realm` entries
        """
        return pulumi.get(self, "members")


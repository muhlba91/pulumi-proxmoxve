# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GroupAclArgs',
    'GroupAclArgsDict',
    'PoolMemberArgs',
    'PoolMemberArgsDict',
    'UserAclArgs',
    'UserAclArgsDict',
]

MYPY = False

if not MYPY:
    class GroupAclArgsDict(TypedDict):
        path: pulumi.Input[builtins.str]
        """
        The path.
        """
        role_id: pulumi.Input[builtins.str]
        """
        The role identifier.
        """
        propagate: NotRequired[pulumi.Input[builtins.bool]]
        """
        Whether to propagate to child paths.
        """
elif False:
    GroupAclArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GroupAclArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[builtins.str],
                 role_id: pulumi.Input[builtins.str],
                 propagate: Optional[pulumi.Input[builtins.bool]] = None):
        """
        :param pulumi.Input[builtins.str] path: The path.
        :param pulumi.Input[builtins.str] role_id: The role identifier.
        :param pulumi.Input[builtins.bool] propagate: Whether to propagate to child paths.
        """
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "role_id", role_id)
        if propagate is not None:
            pulumi.set(__self__, "propagate", propagate)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[builtins.str]:
        """
        The path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> pulumi.Input[builtins.str]:
        """
        The role identifier.
        """
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "role_id", value)

    @property
    @pulumi.getter
    def propagate(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to propagate to child paths.
        """
        return pulumi.get(self, "propagate")

    @propagate.setter
    def propagate(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "propagate", value)


if not MYPY:
    class PoolMemberArgsDict(TypedDict):
        datastore_id: NotRequired[pulumi.Input[builtins.str]]
        """
        The datastore identifier.
        """
        id: NotRequired[pulumi.Input[builtins.str]]
        """
        The member identifier.
        """
        node_name: NotRequired[pulumi.Input[builtins.str]]
        """
        The node name.
        """
        type: NotRequired[pulumi.Input[builtins.str]]
        """
        The member type.
        """
        vm_id: NotRequired[pulumi.Input[builtins.int]]
        """
        The virtual machine identifier.
        """
elif False:
    PoolMemberArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PoolMemberArgs:
    def __init__(__self__, *,
                 datastore_id: Optional[pulumi.Input[builtins.str]] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 node_name: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 vm_id: Optional[pulumi.Input[builtins.int]] = None):
        """
        :param pulumi.Input[builtins.str] datastore_id: The datastore identifier.
        :param pulumi.Input[builtins.str] id: The member identifier.
        :param pulumi.Input[builtins.str] node_name: The node name.
        :param pulumi.Input[builtins.str] type: The member type.
        :param pulumi.Input[builtins.int] vm_id: The virtual machine identifier.
        """
        if datastore_id is not None:
            pulumi.set(__self__, "datastore_id", datastore_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if node_name is not None:
            pulumi.set(__self__, "node_name", node_name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vm_id is not None:
            pulumi.set(__self__, "vm_id", vm_id)

    @property
    @pulumi.getter(name="datastoreId")
    def datastore_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The datastore identifier.
        """
        return pulumi.get(self, "datastore_id")

    @datastore_id.setter
    def datastore_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "datastore_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The member identifier.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The node name.
        """
        return pulumi.get(self, "node_name")

    @node_name.setter
    def node_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "node_name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The member type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The virtual machine identifier.
        """
        return pulumi.get(self, "vm_id")

    @vm_id.setter
    def vm_id(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "vm_id", value)


if not MYPY:
    class UserAclArgsDict(TypedDict):
        path: pulumi.Input[builtins.str]
        """
        The path.
        """
        role_id: pulumi.Input[builtins.str]
        """
        The role identifier.
        """
        propagate: NotRequired[pulumi.Input[builtins.bool]]
        """
        Whether to propagate to child paths.
        """
elif False:
    UserAclArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserAclArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[builtins.str],
                 role_id: pulumi.Input[builtins.str],
                 propagate: Optional[pulumi.Input[builtins.bool]] = None):
        """
        :param pulumi.Input[builtins.str] path: The path.
        :param pulumi.Input[builtins.str] role_id: The role identifier.
        :param pulumi.Input[builtins.bool] propagate: Whether to propagate to child paths.
        """
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "role_id", role_id)
        if propagate is not None:
            pulumi.set(__self__, "propagate", propagate)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[builtins.str]:
        """
        The path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> pulumi.Input[builtins.str]:
        """
        The role identifier.
        """
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "role_id", value)

    @property
    @pulumi.getter
    def propagate(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to propagate to child paths.
        """
        return pulumi.get(self, "propagate")

    @propagate.setter
    def propagate(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "propagate", value)



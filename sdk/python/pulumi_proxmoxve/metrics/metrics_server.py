# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['MetricsServerArgs', 'MetricsServer']

@pulumi.input_type
class MetricsServerArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 server: pulumi.Input[str],
                 type: pulumi.Input[str],
                 disable: Optional[pulumi.Input[bool]] = None,
                 graphite_path: Optional[pulumi.Input[str]] = None,
                 graphite_proto: Optional[pulumi.Input[str]] = None,
                 influx_api_path_prefix: Optional[pulumi.Input[str]] = None,
                 influx_bucket: Optional[pulumi.Input[str]] = None,
                 influx_db_proto: Optional[pulumi.Input[str]] = None,
                 influx_max_body_size: Optional[pulumi.Input[int]] = None,
                 influx_organization: Optional[pulumi.Input[str]] = None,
                 influx_token: Optional[pulumi.Input[str]] = None,
                 influx_verify: Optional[pulumi.Input[bool]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a MetricsServer resource.
        :param pulumi.Input[int] port: Server network port.
        :param pulumi.Input[str] server: Server dns name or IP address.
        :param pulumi.Input[str] type: Plugin type. Choice is between `graphite` | `influxdb`.
        :param pulumi.Input[bool] disable: Set this to `true` to disable this metric server.
        :param pulumi.Input[str] graphite_path: Root graphite path (ex: `proxmox.mycluster.mykey`).
        :param pulumi.Input[str] graphite_proto: Protocol to send graphite data. Choice is between `udp` | `tcp`. If not set, PVE default is `udp`.
        :param pulumi.Input[str] influx_api_path_prefix: An API path prefix inserted between `<host>:<port>/` and `/api2/`. Can be useful if the InfluxDB service runs behind a reverse proxy.
        :param pulumi.Input[str] influx_bucket: The InfluxDB bucket/db. Only necessary when using the http v2 api.
        :param pulumi.Input[str] influx_db_proto: Protocol for InfluxDB. Choice is between `udp` | `http` | `https`. If not set, PVE default is `udp`.
        :param pulumi.Input[int] influx_max_body_size: InfluxDB max-body-size in bytes. Requests are batched up to this size. If not set, PVE default is `25000000`.
        :param pulumi.Input[str] influx_organization: The InfluxDB organization. Only necessary when using the http v2 api. Has no meaning when using v2 compatibility api.
        :param pulumi.Input[str] influx_token: The InfluxDB access token. Only necessary when using the http v2 api. If the v2 compatibility api is used, use `user:password` instead.
        :param pulumi.Input[bool] influx_verify: Set to `false` to disable certificate verification for https endpoints.
        :param pulumi.Input[int] mtu: MTU (maximum transmission unit) for metrics transmission over UDP. If not set, PVE default is `1500` (allowed `512` - `65536`).
        :param pulumi.Input[str] name: Unique name that will be ID of this metric server in PVE.
        :param pulumi.Input[int] timeout: TCP socket timeout in seconds. If not set, PVE default is `1`.
        """
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "server", server)
        pulumi.set(__self__, "type", type)
        if disable is not None:
            pulumi.set(__self__, "disable", disable)
        if graphite_path is not None:
            pulumi.set(__self__, "graphite_path", graphite_path)
        if graphite_proto is not None:
            pulumi.set(__self__, "graphite_proto", graphite_proto)
        if influx_api_path_prefix is not None:
            pulumi.set(__self__, "influx_api_path_prefix", influx_api_path_prefix)
        if influx_bucket is not None:
            pulumi.set(__self__, "influx_bucket", influx_bucket)
        if influx_db_proto is not None:
            pulumi.set(__self__, "influx_db_proto", influx_db_proto)
        if influx_max_body_size is not None:
            pulumi.set(__self__, "influx_max_body_size", influx_max_body_size)
        if influx_organization is not None:
            pulumi.set(__self__, "influx_organization", influx_organization)
        if influx_token is not None:
            pulumi.set(__self__, "influx_token", influx_token)
        if influx_verify is not None:
            pulumi.set(__self__, "influx_verify", influx_verify)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        Server network port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def server(self) -> pulumi.Input[str]:
        """
        Server dns name or IP address.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input[str]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Plugin type. Choice is between `graphite` | `influxdb`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def disable(self) -> Optional[pulumi.Input[bool]]:
        """
        Set this to `true` to disable this metric server.
        """
        return pulumi.get(self, "disable")

    @disable.setter
    def disable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable", value)

    @property
    @pulumi.getter(name="graphitePath")
    def graphite_path(self) -> Optional[pulumi.Input[str]]:
        """
        Root graphite path (ex: `proxmox.mycluster.mykey`).
        """
        return pulumi.get(self, "graphite_path")

    @graphite_path.setter
    def graphite_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "graphite_path", value)

    @property
    @pulumi.getter(name="graphiteProto")
    def graphite_proto(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol to send graphite data. Choice is between `udp` | `tcp`. If not set, PVE default is `udp`.
        """
        return pulumi.get(self, "graphite_proto")

    @graphite_proto.setter
    def graphite_proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "graphite_proto", value)

    @property
    @pulumi.getter(name="influxApiPathPrefix")
    def influx_api_path_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        An API path prefix inserted between `<host>:<port>/` and `/api2/`. Can be useful if the InfluxDB service runs behind a reverse proxy.
        """
        return pulumi.get(self, "influx_api_path_prefix")

    @influx_api_path_prefix.setter
    def influx_api_path_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "influx_api_path_prefix", value)

    @property
    @pulumi.getter(name="influxBucket")
    def influx_bucket(self) -> Optional[pulumi.Input[str]]:
        """
        The InfluxDB bucket/db. Only necessary when using the http v2 api.
        """
        return pulumi.get(self, "influx_bucket")

    @influx_bucket.setter
    def influx_bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "influx_bucket", value)

    @property
    @pulumi.getter(name="influxDbProto")
    def influx_db_proto(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol for InfluxDB. Choice is between `udp` | `http` | `https`. If not set, PVE default is `udp`.
        """
        return pulumi.get(self, "influx_db_proto")

    @influx_db_proto.setter
    def influx_db_proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "influx_db_proto", value)

    @property
    @pulumi.getter(name="influxMaxBodySize")
    def influx_max_body_size(self) -> Optional[pulumi.Input[int]]:
        """
        InfluxDB max-body-size in bytes. Requests are batched up to this size. If not set, PVE default is `25000000`.
        """
        return pulumi.get(self, "influx_max_body_size")

    @influx_max_body_size.setter
    def influx_max_body_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "influx_max_body_size", value)

    @property
    @pulumi.getter(name="influxOrganization")
    def influx_organization(self) -> Optional[pulumi.Input[str]]:
        """
        The InfluxDB organization. Only necessary when using the http v2 api. Has no meaning when using v2 compatibility api.
        """
        return pulumi.get(self, "influx_organization")

    @influx_organization.setter
    def influx_organization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "influx_organization", value)

    @property
    @pulumi.getter(name="influxToken")
    def influx_token(self) -> Optional[pulumi.Input[str]]:
        """
        The InfluxDB access token. Only necessary when using the http v2 api. If the v2 compatibility api is used, use `user:password` instead.
        """
        return pulumi.get(self, "influx_token")

    @influx_token.setter
    def influx_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "influx_token", value)

    @property
    @pulumi.getter(name="influxVerify")
    def influx_verify(self) -> Optional[pulumi.Input[bool]]:
        """
        Set to `false` to disable certificate verification for https endpoints.
        """
        return pulumi.get(self, "influx_verify")

    @influx_verify.setter
    def influx_verify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "influx_verify", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        """
        MTU (maximum transmission unit) for metrics transmission over UDP. If not set, PVE default is `1500` (allowed `512` - `65536`).
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Unique name that will be ID of this metric server in PVE.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        TCP socket timeout in seconds. If not set, PVE default is `1`.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class _MetricsServerState:
    def __init__(__self__, *,
                 disable: Optional[pulumi.Input[bool]] = None,
                 graphite_path: Optional[pulumi.Input[str]] = None,
                 graphite_proto: Optional[pulumi.Input[str]] = None,
                 influx_api_path_prefix: Optional[pulumi.Input[str]] = None,
                 influx_bucket: Optional[pulumi.Input[str]] = None,
                 influx_db_proto: Optional[pulumi.Input[str]] = None,
                 influx_max_body_size: Optional[pulumi.Input[int]] = None,
                 influx_organization: Optional[pulumi.Input[str]] = None,
                 influx_token: Optional[pulumi.Input[str]] = None,
                 influx_verify: Optional[pulumi.Input[bool]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering MetricsServer resources.
        :param pulumi.Input[bool] disable: Set this to `true` to disable this metric server.
        :param pulumi.Input[str] graphite_path: Root graphite path (ex: `proxmox.mycluster.mykey`).
        :param pulumi.Input[str] graphite_proto: Protocol to send graphite data. Choice is between `udp` | `tcp`. If not set, PVE default is `udp`.
        :param pulumi.Input[str] influx_api_path_prefix: An API path prefix inserted between `<host>:<port>/` and `/api2/`. Can be useful if the InfluxDB service runs behind a reverse proxy.
        :param pulumi.Input[str] influx_bucket: The InfluxDB bucket/db. Only necessary when using the http v2 api.
        :param pulumi.Input[str] influx_db_proto: Protocol for InfluxDB. Choice is between `udp` | `http` | `https`. If not set, PVE default is `udp`.
        :param pulumi.Input[int] influx_max_body_size: InfluxDB max-body-size in bytes. Requests are batched up to this size. If not set, PVE default is `25000000`.
        :param pulumi.Input[str] influx_organization: The InfluxDB organization. Only necessary when using the http v2 api. Has no meaning when using v2 compatibility api.
        :param pulumi.Input[str] influx_token: The InfluxDB access token. Only necessary when using the http v2 api. If the v2 compatibility api is used, use `user:password` instead.
        :param pulumi.Input[bool] influx_verify: Set to `false` to disable certificate verification for https endpoints.
        :param pulumi.Input[int] mtu: MTU (maximum transmission unit) for metrics transmission over UDP. If not set, PVE default is `1500` (allowed `512` - `65536`).
        :param pulumi.Input[str] name: Unique name that will be ID of this metric server in PVE.
        :param pulumi.Input[int] port: Server network port.
        :param pulumi.Input[str] server: Server dns name or IP address.
        :param pulumi.Input[int] timeout: TCP socket timeout in seconds. If not set, PVE default is `1`.
        :param pulumi.Input[str] type: Plugin type. Choice is between `graphite` | `influxdb`.
        """
        if disable is not None:
            pulumi.set(__self__, "disable", disable)
        if graphite_path is not None:
            pulumi.set(__self__, "graphite_path", graphite_path)
        if graphite_proto is not None:
            pulumi.set(__self__, "graphite_proto", graphite_proto)
        if influx_api_path_prefix is not None:
            pulumi.set(__self__, "influx_api_path_prefix", influx_api_path_prefix)
        if influx_bucket is not None:
            pulumi.set(__self__, "influx_bucket", influx_bucket)
        if influx_db_proto is not None:
            pulumi.set(__self__, "influx_db_proto", influx_db_proto)
        if influx_max_body_size is not None:
            pulumi.set(__self__, "influx_max_body_size", influx_max_body_size)
        if influx_organization is not None:
            pulumi.set(__self__, "influx_organization", influx_organization)
        if influx_token is not None:
            pulumi.set(__self__, "influx_token", influx_token)
        if influx_verify is not None:
            pulumi.set(__self__, "influx_verify", influx_verify)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def disable(self) -> Optional[pulumi.Input[bool]]:
        """
        Set this to `true` to disable this metric server.
        """
        return pulumi.get(self, "disable")

    @disable.setter
    def disable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable", value)

    @property
    @pulumi.getter(name="graphitePath")
    def graphite_path(self) -> Optional[pulumi.Input[str]]:
        """
        Root graphite path (ex: `proxmox.mycluster.mykey`).
        """
        return pulumi.get(self, "graphite_path")

    @graphite_path.setter
    def graphite_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "graphite_path", value)

    @property
    @pulumi.getter(name="graphiteProto")
    def graphite_proto(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol to send graphite data. Choice is between `udp` | `tcp`. If not set, PVE default is `udp`.
        """
        return pulumi.get(self, "graphite_proto")

    @graphite_proto.setter
    def graphite_proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "graphite_proto", value)

    @property
    @pulumi.getter(name="influxApiPathPrefix")
    def influx_api_path_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        An API path prefix inserted between `<host>:<port>/` and `/api2/`. Can be useful if the InfluxDB service runs behind a reverse proxy.
        """
        return pulumi.get(self, "influx_api_path_prefix")

    @influx_api_path_prefix.setter
    def influx_api_path_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "influx_api_path_prefix", value)

    @property
    @pulumi.getter(name="influxBucket")
    def influx_bucket(self) -> Optional[pulumi.Input[str]]:
        """
        The InfluxDB bucket/db. Only necessary when using the http v2 api.
        """
        return pulumi.get(self, "influx_bucket")

    @influx_bucket.setter
    def influx_bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "influx_bucket", value)

    @property
    @pulumi.getter(name="influxDbProto")
    def influx_db_proto(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol for InfluxDB. Choice is between `udp` | `http` | `https`. If not set, PVE default is `udp`.
        """
        return pulumi.get(self, "influx_db_proto")

    @influx_db_proto.setter
    def influx_db_proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "influx_db_proto", value)

    @property
    @pulumi.getter(name="influxMaxBodySize")
    def influx_max_body_size(self) -> Optional[pulumi.Input[int]]:
        """
        InfluxDB max-body-size in bytes. Requests are batched up to this size. If not set, PVE default is `25000000`.
        """
        return pulumi.get(self, "influx_max_body_size")

    @influx_max_body_size.setter
    def influx_max_body_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "influx_max_body_size", value)

    @property
    @pulumi.getter(name="influxOrganization")
    def influx_organization(self) -> Optional[pulumi.Input[str]]:
        """
        The InfluxDB organization. Only necessary when using the http v2 api. Has no meaning when using v2 compatibility api.
        """
        return pulumi.get(self, "influx_organization")

    @influx_organization.setter
    def influx_organization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "influx_organization", value)

    @property
    @pulumi.getter(name="influxToken")
    def influx_token(self) -> Optional[pulumi.Input[str]]:
        """
        The InfluxDB access token. Only necessary when using the http v2 api. If the v2 compatibility api is used, use `user:password` instead.
        """
        return pulumi.get(self, "influx_token")

    @influx_token.setter
    def influx_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "influx_token", value)

    @property
    @pulumi.getter(name="influxVerify")
    def influx_verify(self) -> Optional[pulumi.Input[bool]]:
        """
        Set to `false` to disable certificate verification for https endpoints.
        """
        return pulumi.get(self, "influx_verify")

    @influx_verify.setter
    def influx_verify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "influx_verify", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        """
        MTU (maximum transmission unit) for metrics transmission over UDP. If not set, PVE default is `1500` (allowed `512` - `65536`).
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Unique name that will be ID of this metric server in PVE.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Server network port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        Server dns name or IP address.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        TCP socket timeout in seconds. If not set, PVE default is `1`.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Plugin type. Choice is between `graphite` | `influxdb`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class MetricsServer(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 disable: Optional[pulumi.Input[bool]] = None,
                 graphite_path: Optional[pulumi.Input[str]] = None,
                 graphite_proto: Optional[pulumi.Input[str]] = None,
                 influx_api_path_prefix: Optional[pulumi.Input[str]] = None,
                 influx_bucket: Optional[pulumi.Input[str]] = None,
                 influx_db_proto: Optional[pulumi.Input[str]] = None,
                 influx_max_body_size: Optional[pulumi.Input[int]] = None,
                 influx_organization: Optional[pulumi.Input[str]] = None,
                 influx_token: Optional[pulumi.Input[str]] = None,
                 influx_verify: Optional[pulumi.Input[bool]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages PVE metrics server.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_proxmoxve as proxmoxve

        influxdb_server = proxmoxve.metrics.MetricsServer("influxdbServer",
            port=8089,
            server="192.168.3.2",
            type="influxdb")
        graphite_server = proxmoxve.metrics.MetricsServer("graphiteServer",
            port=2003,
            server="192.168.4.2",
            type="graphite")
        ```

        ## Import

        #!/usr/bin/env sh

        ```sh
        $ pulumi import proxmoxve:Metrics/metricsServer:MetricsServer example example
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] disable: Set this to `true` to disable this metric server.
        :param pulumi.Input[str] graphite_path: Root graphite path (ex: `proxmox.mycluster.mykey`).
        :param pulumi.Input[str] graphite_proto: Protocol to send graphite data. Choice is between `udp` | `tcp`. If not set, PVE default is `udp`.
        :param pulumi.Input[str] influx_api_path_prefix: An API path prefix inserted between `<host>:<port>/` and `/api2/`. Can be useful if the InfluxDB service runs behind a reverse proxy.
        :param pulumi.Input[str] influx_bucket: The InfluxDB bucket/db. Only necessary when using the http v2 api.
        :param pulumi.Input[str] influx_db_proto: Protocol for InfluxDB. Choice is between `udp` | `http` | `https`. If not set, PVE default is `udp`.
        :param pulumi.Input[int] influx_max_body_size: InfluxDB max-body-size in bytes. Requests are batched up to this size. If not set, PVE default is `25000000`.
        :param pulumi.Input[str] influx_organization: The InfluxDB organization. Only necessary when using the http v2 api. Has no meaning when using v2 compatibility api.
        :param pulumi.Input[str] influx_token: The InfluxDB access token. Only necessary when using the http v2 api. If the v2 compatibility api is used, use `user:password` instead.
        :param pulumi.Input[bool] influx_verify: Set to `false` to disable certificate verification for https endpoints.
        :param pulumi.Input[int] mtu: MTU (maximum transmission unit) for metrics transmission over UDP. If not set, PVE default is `1500` (allowed `512` - `65536`).
        :param pulumi.Input[str] name: Unique name that will be ID of this metric server in PVE.
        :param pulumi.Input[int] port: Server network port.
        :param pulumi.Input[str] server: Server dns name or IP address.
        :param pulumi.Input[int] timeout: TCP socket timeout in seconds. If not set, PVE default is `1`.
        :param pulumi.Input[str] type: Plugin type. Choice is between `graphite` | `influxdb`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MetricsServerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages PVE metrics server.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_proxmoxve as proxmoxve

        influxdb_server = proxmoxve.metrics.MetricsServer("influxdbServer",
            port=8089,
            server="192.168.3.2",
            type="influxdb")
        graphite_server = proxmoxve.metrics.MetricsServer("graphiteServer",
            port=2003,
            server="192.168.4.2",
            type="graphite")
        ```

        ## Import

        #!/usr/bin/env sh

        ```sh
        $ pulumi import proxmoxve:Metrics/metricsServer:MetricsServer example example
        ```

        :param str resource_name: The name of the resource.
        :param MetricsServerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MetricsServerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 disable: Optional[pulumi.Input[bool]] = None,
                 graphite_path: Optional[pulumi.Input[str]] = None,
                 graphite_proto: Optional[pulumi.Input[str]] = None,
                 influx_api_path_prefix: Optional[pulumi.Input[str]] = None,
                 influx_bucket: Optional[pulumi.Input[str]] = None,
                 influx_db_proto: Optional[pulumi.Input[str]] = None,
                 influx_max_body_size: Optional[pulumi.Input[int]] = None,
                 influx_organization: Optional[pulumi.Input[str]] = None,
                 influx_token: Optional[pulumi.Input[str]] = None,
                 influx_verify: Optional[pulumi.Input[bool]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MetricsServerArgs.__new__(MetricsServerArgs)

            __props__.__dict__["disable"] = disable
            __props__.__dict__["graphite_path"] = graphite_path
            __props__.__dict__["graphite_proto"] = graphite_proto
            __props__.__dict__["influx_api_path_prefix"] = influx_api_path_prefix
            __props__.__dict__["influx_bucket"] = influx_bucket
            __props__.__dict__["influx_db_proto"] = influx_db_proto
            __props__.__dict__["influx_max_body_size"] = influx_max_body_size
            __props__.__dict__["influx_organization"] = influx_organization
            __props__.__dict__["influx_token"] = None if influx_token is None else pulumi.Output.secret(influx_token)
            __props__.__dict__["influx_verify"] = influx_verify
            __props__.__dict__["mtu"] = mtu
            __props__.__dict__["name"] = name
            if port is None and not opts.urn:
                raise TypeError("Missing required property 'port'")
            __props__.__dict__["port"] = port
            if server is None and not opts.urn:
                raise TypeError("Missing required property 'server'")
            __props__.__dict__["server"] = server
            __props__.__dict__["timeout"] = timeout
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["influxToken"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(MetricsServer, __self__).__init__(
            'proxmoxve:Metrics/metricsServer:MetricsServer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            disable: Optional[pulumi.Input[bool]] = None,
            graphite_path: Optional[pulumi.Input[str]] = None,
            graphite_proto: Optional[pulumi.Input[str]] = None,
            influx_api_path_prefix: Optional[pulumi.Input[str]] = None,
            influx_bucket: Optional[pulumi.Input[str]] = None,
            influx_db_proto: Optional[pulumi.Input[str]] = None,
            influx_max_body_size: Optional[pulumi.Input[int]] = None,
            influx_organization: Optional[pulumi.Input[str]] = None,
            influx_token: Optional[pulumi.Input[str]] = None,
            influx_verify: Optional[pulumi.Input[bool]] = None,
            mtu: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            port: Optional[pulumi.Input[int]] = None,
            server: Optional[pulumi.Input[str]] = None,
            timeout: Optional[pulumi.Input[int]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'MetricsServer':
        """
        Get an existing MetricsServer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] disable: Set this to `true` to disable this metric server.
        :param pulumi.Input[str] graphite_path: Root graphite path (ex: `proxmox.mycluster.mykey`).
        :param pulumi.Input[str] graphite_proto: Protocol to send graphite data. Choice is between `udp` | `tcp`. If not set, PVE default is `udp`.
        :param pulumi.Input[str] influx_api_path_prefix: An API path prefix inserted between `<host>:<port>/` and `/api2/`. Can be useful if the InfluxDB service runs behind a reverse proxy.
        :param pulumi.Input[str] influx_bucket: The InfluxDB bucket/db. Only necessary when using the http v2 api.
        :param pulumi.Input[str] influx_db_proto: Protocol for InfluxDB. Choice is between `udp` | `http` | `https`. If not set, PVE default is `udp`.
        :param pulumi.Input[int] influx_max_body_size: InfluxDB max-body-size in bytes. Requests are batched up to this size. If not set, PVE default is `25000000`.
        :param pulumi.Input[str] influx_organization: The InfluxDB organization. Only necessary when using the http v2 api. Has no meaning when using v2 compatibility api.
        :param pulumi.Input[str] influx_token: The InfluxDB access token. Only necessary when using the http v2 api. If the v2 compatibility api is used, use `user:password` instead.
        :param pulumi.Input[bool] influx_verify: Set to `false` to disable certificate verification for https endpoints.
        :param pulumi.Input[int] mtu: MTU (maximum transmission unit) for metrics transmission over UDP. If not set, PVE default is `1500` (allowed `512` - `65536`).
        :param pulumi.Input[str] name: Unique name that will be ID of this metric server in PVE.
        :param pulumi.Input[int] port: Server network port.
        :param pulumi.Input[str] server: Server dns name or IP address.
        :param pulumi.Input[int] timeout: TCP socket timeout in seconds. If not set, PVE default is `1`.
        :param pulumi.Input[str] type: Plugin type. Choice is between `graphite` | `influxdb`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MetricsServerState.__new__(_MetricsServerState)

        __props__.__dict__["disable"] = disable
        __props__.__dict__["graphite_path"] = graphite_path
        __props__.__dict__["graphite_proto"] = graphite_proto
        __props__.__dict__["influx_api_path_prefix"] = influx_api_path_prefix
        __props__.__dict__["influx_bucket"] = influx_bucket
        __props__.__dict__["influx_db_proto"] = influx_db_proto
        __props__.__dict__["influx_max_body_size"] = influx_max_body_size
        __props__.__dict__["influx_organization"] = influx_organization
        __props__.__dict__["influx_token"] = influx_token
        __props__.__dict__["influx_verify"] = influx_verify
        __props__.__dict__["mtu"] = mtu
        __props__.__dict__["name"] = name
        __props__.__dict__["port"] = port
        __props__.__dict__["server"] = server
        __props__.__dict__["timeout"] = timeout
        __props__.__dict__["type"] = type
        return MetricsServer(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def disable(self) -> pulumi.Output[Optional[bool]]:
        """
        Set this to `true` to disable this metric server.
        """
        return pulumi.get(self, "disable")

    @property
    @pulumi.getter(name="graphitePath")
    def graphite_path(self) -> pulumi.Output[Optional[str]]:
        """
        Root graphite path (ex: `proxmox.mycluster.mykey`).
        """
        return pulumi.get(self, "graphite_path")

    @property
    @pulumi.getter(name="graphiteProto")
    def graphite_proto(self) -> pulumi.Output[Optional[str]]:
        """
        Protocol to send graphite data. Choice is between `udp` | `tcp`. If not set, PVE default is `udp`.
        """
        return pulumi.get(self, "graphite_proto")

    @property
    @pulumi.getter(name="influxApiPathPrefix")
    def influx_api_path_prefix(self) -> pulumi.Output[Optional[str]]:
        """
        An API path prefix inserted between `<host>:<port>/` and `/api2/`. Can be useful if the InfluxDB service runs behind a reverse proxy.
        """
        return pulumi.get(self, "influx_api_path_prefix")

    @property
    @pulumi.getter(name="influxBucket")
    def influx_bucket(self) -> pulumi.Output[Optional[str]]:
        """
        The InfluxDB bucket/db. Only necessary when using the http v2 api.
        """
        return pulumi.get(self, "influx_bucket")

    @property
    @pulumi.getter(name="influxDbProto")
    def influx_db_proto(self) -> pulumi.Output[Optional[str]]:
        """
        Protocol for InfluxDB. Choice is between `udp` | `http` | `https`. If not set, PVE default is `udp`.
        """
        return pulumi.get(self, "influx_db_proto")

    @property
    @pulumi.getter(name="influxMaxBodySize")
    def influx_max_body_size(self) -> pulumi.Output[Optional[int]]:
        """
        InfluxDB max-body-size in bytes. Requests are batched up to this size. If not set, PVE default is `25000000`.
        """
        return pulumi.get(self, "influx_max_body_size")

    @property
    @pulumi.getter(name="influxOrganization")
    def influx_organization(self) -> pulumi.Output[Optional[str]]:
        """
        The InfluxDB organization. Only necessary when using the http v2 api. Has no meaning when using v2 compatibility api.
        """
        return pulumi.get(self, "influx_organization")

    @property
    @pulumi.getter(name="influxToken")
    def influx_token(self) -> pulumi.Output[Optional[str]]:
        """
        The InfluxDB access token. Only necessary when using the http v2 api. If the v2 compatibility api is used, use `user:password` instead.
        """
        return pulumi.get(self, "influx_token")

    @property
    @pulumi.getter(name="influxVerify")
    def influx_verify(self) -> pulumi.Output[Optional[bool]]:
        """
        Set to `false` to disable certificate verification for https endpoints.
        """
        return pulumi.get(self, "influx_verify")

    @property
    @pulumi.getter
    def mtu(self) -> pulumi.Output[Optional[int]]:
        """
        MTU (maximum transmission unit) for metrics transmission over UDP. If not set, PVE default is `1500` (allowed `512` - `65536`).
        """
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Unique name that will be ID of this metric server in PVE.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[int]:
        """
        Server network port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def server(self) -> pulumi.Output[str]:
        """
        Server dns name or IP address.
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter
    def timeout(self) -> pulumi.Output[Optional[int]]:
        """
        TCP socket timeout in seconds. If not set, PVE default is `1`.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Plugin type. Choice is between `graphite` | `influxdb`.
        """
        return pulumi.get(self, "type")


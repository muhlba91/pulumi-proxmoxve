# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities

__all__ = [
    'GetRepositoryResult',
    'AwaitableGetRepositoryResult',
    'get_repository',
    'get_repository_output',
]

@pulumi.output_type
class GetRepositoryResult:
    """
    A collection of values returned by getRepository.
    """
    def __init__(__self__, description=None, file_path=None, handle=None, id=None, index=None, name=None, node=None, status=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if file_path and not isinstance(file_path, str):
            raise TypeError("Expected argument 'file_path' to be a str")
        pulumi.set(__self__, "file_path", file_path)
        if handle and not isinstance(handle, str):
            raise TypeError("Expected argument 'handle' to be a str")
        pulumi.set(__self__, "handle", handle)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if index and not isinstance(index, int):
            raise TypeError("Expected argument 'index' to be a int")
        pulumi.set(__self__, "index", index)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if node and not isinstance(node, str):
            raise TypeError("Expected argument 'node' to be a str")
        pulumi.set(__self__, "node", node)
        if status and not isinstance(status, int):
            raise TypeError("Expected argument 'status' to be a int")
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        The description of the APT standard repository.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="filePath")
    def file_path(self) -> builtins.str:
        """
        The absolute path of the source list file that contains this standard repository.
        """
        return pulumi.get(self, "file_path")

    @property
    @pulumi.getter
    def handle(self) -> builtins.str:
        """
        The handle of the APT standard repository.
        """
        return pulumi.get(self, "handle")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The unique identifier of this APT standard repository data source.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def index(self) -> builtins.int:
        """
        The index within the defining source list file.
        """
        return pulumi.get(self, "index")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the APT standard repository.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def node(self) -> builtins.str:
        """
        The name of the target Proxmox VE node.
        """
        return pulumi.get(self, "node")

    @property
    @pulumi.getter
    def status(self) -> builtins.int:
        """
        Indicates the activation status.
        """
        return pulumi.get(self, "status")


class AwaitableGetRepositoryResult(GetRepositoryResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRepositoryResult(
            description=self.description,
            file_path=self.file_path,
            handle=self.handle,
            id=self.id,
            index=self.index,
            name=self.name,
            node=self.node,
            status=self.status)


def get_repository(handle: Optional[builtins.str] = None,
                   node: Optional[builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRepositoryResult:
    """
    Retrieves an APT standard repository from a Proxmox VE cluster.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_proxmoxve as proxmoxve

    example = proxmoxve.Apt.standard.get_repository(handle="no-subscription",
        node="pve")
    pulumi.export("proxmoxVirtualEnvironmentAptStandardRepository", example)
    ```


    :param builtins.str handle: The handle of the APT standard repository.
    :param builtins.str node: The name of the target Proxmox VE node.
    """
    __args__ = dict()
    __args__['handle'] = handle
    __args__['node'] = node
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('proxmoxve:Apt/standard/getRepository:getRepository', __args__, opts=opts, typ=GetRepositoryResult).value

    return AwaitableGetRepositoryResult(
        description=pulumi.get(__ret__, 'description'),
        file_path=pulumi.get(__ret__, 'file_path'),
        handle=pulumi.get(__ret__, 'handle'),
        id=pulumi.get(__ret__, 'id'),
        index=pulumi.get(__ret__, 'index'),
        name=pulumi.get(__ret__, 'name'),
        node=pulumi.get(__ret__, 'node'),
        status=pulumi.get(__ret__, 'status'))
def get_repository_output(handle: Optional[pulumi.Input[builtins.str]] = None,
                          node: Optional[pulumi.Input[builtins.str]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetRepositoryResult]:
    """
    Retrieves an APT standard repository from a Proxmox VE cluster.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_proxmoxve as proxmoxve

    example = proxmoxve.Apt.standard.get_repository(handle="no-subscription",
        node="pve")
    pulumi.export("proxmoxVirtualEnvironmentAptStandardRepository", example)
    ```


    :param builtins.str handle: The handle of the APT standard repository.
    :param builtins.str node: The name of the target Proxmox VE node.
    """
    __args__ = dict()
    __args__['handle'] = handle
    __args__['node'] = node
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('proxmoxve:Apt/standard/getRepository:getRepository', __args__, opts=opts, typ=GetRepositoryResult)
    return __ret__.apply(lambda __response__: GetRepositoryResult(
        description=pulumi.get(__response__, 'description'),
        file_path=pulumi.get(__response__, 'file_path'),
        handle=pulumi.get(__response__, 'handle'),
        id=pulumi.get(__response__, 'id'),
        index=pulumi.get(__response__, 'index'),
        name=pulumi.get(__response__, 'name'),
        node=pulumi.get(__response__, 'node'),
        status=pulumi.get(__response__, 'status')))

# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs

__all__ = [
    'GetDirResult',
    'AwaitableGetDirResult',
    'get_dir',
    'get_dir_output',
]

@pulumi.output_type
class GetDirResult:
    """
    A collection of values returned by getDir.
    """
    def __init__(__self__, comment=None, id=None, maps=None, name=None):
        if comment and not isinstance(comment, str):
            raise TypeError("Expected argument 'comment' to be a str")
        pulumi.set(__self__, "comment", comment)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if maps and not isinstance(maps, list):
            raise TypeError("Expected argument 'maps' to be a list")
        pulumi.set(__self__, "maps", maps)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def comment(self) -> builtins.str:
        """
        The comment of this directory mapping.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The unique identifier of this directory mapping data source.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def maps(self) -> Sequence['outputs.GetDirMapResult']:
        """
        The actual map of devices for the directory mapping.
        """
        return pulumi.get(self, "maps")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of this directory mapping.
        """
        return pulumi.get(self, "name")


class AwaitableGetDirResult(GetDirResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDirResult(
            comment=self.comment,
            id=self.id,
            maps=self.maps,
            name=self.name)


def get_dir(name: Optional[builtins.str] = None,
            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDirResult:
    """
    Retrieves a directory mapping from a Proxmox VE cluster.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_proxmoxve as proxmoxve

    example = proxmoxve.Hardware.mapping.get_dir(name="example")
    pulumi.export("dataProxmoxVirtualEnvironmentHardwareMappingDir", example)
    ```


    :param builtins.str name: The name of this directory mapping.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('proxmoxve:Hardware/mapping/getDir:getDir', __args__, opts=opts, typ=GetDirResult).value

    return AwaitableGetDirResult(
        comment=pulumi.get(__ret__, 'comment'),
        id=pulumi.get(__ret__, 'id'),
        maps=pulumi.get(__ret__, 'maps'),
        name=pulumi.get(__ret__, 'name'))
def get_dir_output(name: Optional[pulumi.Input[builtins.str]] = None,
                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDirResult]:
    """
    Retrieves a directory mapping from a Proxmox VE cluster.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_proxmoxve as proxmoxve

    example = proxmoxve.Hardware.mapping.get_dir(name="example")
    pulumi.export("dataProxmoxVirtualEnvironmentHardwareMappingDir", example)
    ```


    :param builtins.str name: The name of this directory mapping.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('proxmoxve:Hardware/mapping/getDir:getDir', __args__, opts=opts, typ=GetDirResult)
    return __ret__.apply(lambda __response__: GetDirResult(
        comment=pulumi.get(__response__, 'comment'),
        id=pulumi.get(__response__, 'id'),
        maps=pulumi.get(__response__, 'maps'),
        name=pulumi.get(__response__, 'name')))

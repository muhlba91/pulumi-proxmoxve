# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetMappingsResult',
    'AwaitableGetMappingsResult',
    'get_mappings',
    'get_mappings_output',
]

@pulumi.output_type
class GetMappingsResult:
    """
    A collection of values returned by getMappings.
    """
    def __init__(__self__, check_node=None, checks=None, id=None, ids=None, type=None):
        if check_node and not isinstance(check_node, str):
            raise TypeError("Expected argument 'check_node' to be a str")
        pulumi.set(__self__, "check_node", check_node)
        if checks and not isinstance(checks, list):
            raise TypeError("Expected argument 'checks' to be a list")
        pulumi.set(__self__, "checks", checks)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="checkNode")
    def check_node(self) -> Optional[builtins.str]:
        """
        The name of the node whose configurations should be checked for correctness.
        """
        return pulumi.get(self, "check_node")

    @property
    @pulumi.getter
    def checks(self) -> Sequence['outputs.GetMappingsCheckResult']:
        """
        Might contain relevant diagnostics about incorrect configurations.
        """
        return pulumi.get(self, "checks")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The unique identifier of this hardware mappings data source.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Sequence[builtins.str]:
        """
        The identifiers of the hardware mappings.
        """
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the hardware mappings.
        """
        return pulumi.get(self, "type")


class AwaitableGetMappingsResult(GetMappingsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMappingsResult(
            check_node=self.check_node,
            checks=self.checks,
            id=self.id,
            ids=self.ids,
            type=self.type)


def get_mappings(check_node: Optional[builtins.str] = None,
                 type: Optional[builtins.str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMappingsResult:
    """
    Retrieves a list of hardware mapping resources.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_proxmoxve as proxmoxve

    example_dir = proxmoxve.Hardware.get_mappings(check_node="pve",
        type="dir")
    example_pci = proxmoxve.Hardware.get_mappings(check_node="pve",
        type="pci")
    example_usb = proxmoxve.Hardware.get_mappings(check_node="pve",
        type="usb")
    pulumi.export("dataProxmoxVirtualEnvironmentHardwareMappingsPci", example_pci)
    pulumi.export("dataProxmoxVirtualEnvironmentHardwareMappingsUsb", example_usb)
    ```


    :param builtins.str check_node: The name of the node whose configurations should be checked for correctness.
    :param builtins.str type: The type of the hardware mappings.
    """
    __args__ = dict()
    __args__['checkNode'] = check_node
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('proxmoxve:Hardware/getMappings:getMappings', __args__, opts=opts, typ=GetMappingsResult).value

    return AwaitableGetMappingsResult(
        check_node=pulumi.get(__ret__, 'check_node'),
        checks=pulumi.get(__ret__, 'checks'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        type=pulumi.get(__ret__, 'type'))
def get_mappings_output(check_node: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                        type: Optional[pulumi.Input[builtins.str]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMappingsResult]:
    """
    Retrieves a list of hardware mapping resources.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_proxmoxve as proxmoxve

    example_dir = proxmoxve.Hardware.get_mappings(check_node="pve",
        type="dir")
    example_pci = proxmoxve.Hardware.get_mappings(check_node="pve",
        type="pci")
    example_usb = proxmoxve.Hardware.get_mappings(check_node="pve",
        type="usb")
    pulumi.export("dataProxmoxVirtualEnvironmentHardwareMappingsPci", example_pci)
    pulumi.export("dataProxmoxVirtualEnvironmentHardwareMappingsUsb", example_usb)
    ```


    :param builtins.str check_node: The name of the node whose configurations should be checked for correctness.
    :param builtins.str type: The type of the hardware mappings.
    """
    __args__ = dict()
    __args__['checkNode'] = check_node
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('proxmoxve:Hardware/getMappings:getMappings', __args__, opts=opts, typ=GetMappingsResult)
    return __ret__.apply(lambda __response__: GetMappingsResult(
        check_node=pulumi.get(__response__, 'check_node'),
        checks=pulumi.get(__response__, 'checks'),
        id=pulumi.get(__response__, 'id'),
        ids=pulumi.get(__response__, 'ids'),
        type=pulumi.get(__response__, 'type')))

# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetContainersResult',
    'AwaitableGetContainersResult',
    'get_containers',
    'get_containers_output',
]

@pulumi.output_type
class GetContainersResult:
    """
    A collection of values returned by getContainers.
    """
    def __init__(__self__, containers=None, filters=None, id=None, node_name=None, tags=None):
        if containers and not isinstance(containers, list):
            raise TypeError("Expected argument 'containers' to be a list")
        pulumi.set(__self__, "containers", containers)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if node_name and not isinstance(node_name, str):
            raise TypeError("Expected argument 'node_name' to be a str")
        pulumi.set(__self__, "node_name", node_name)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def containers(self) -> Sequence['outputs.GetContainersContainerResult']:
        """
        The containers list.
        """
        return pulumi.get(self, "containers")

    @_builtins.property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetContainersFilterResult']]:
        return pulumi.get(self, "filters")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> Optional[_builtins.str]:
        """
        The node name.
        """
        return pulumi.get(self, "node_name")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[_builtins.str]]:
        """
        A list of tags of the container.
        """
        return pulumi.get(self, "tags")


class AwaitableGetContainersResult(GetContainersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetContainersResult(
            containers=self.containers,
            filters=self.filters,
            id=self.id,
            node_name=self.node_name,
            tags=self.tags)


def get_containers(filters: Optional[Sequence[Union['GetContainersFilterArgs', 'GetContainersFilterArgsDict']]] = None,
                   node_name: Optional[_builtins.str] = None,
                   tags: Optional[Sequence[_builtins.str]] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetContainersResult:
    """
    Retrieves information about all containers in the Proxmox cluster.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_proxmoxve as proxmoxve

    ubuntu_containers = proxmoxve.get_containers(tags=["ubuntu"])
    ubuntu_templates = proxmoxve.get_containers(filters=[
            {
                "name": "template",
                "values": ["true"],
            },
            {
                "name": "status",
                "values": ["stopped"],
            },
            {
                "name": "name",
                "regex": True,
                "values": ["^ubuntu-20.*$"],
            },
            {
                "name": "node_name",
                "regex": True,
                "values": [
                    "node_us_[1-3]",
                    "node_eu_[1-3]",
                ],
            },
        ],
        tags=[
            "template",
            "latest",
        ])
    ```


    :param Sequence[Union['GetContainersFilterArgs', 'GetContainersFilterArgsDict']] filters: Filter blocks. The container must satisfy all filter blocks to be included in the result.
    :param _builtins.str node_name: The node name. All cluster nodes will be queried in case this is omitted
    :param Sequence[_builtins.str] tags: A list of tags to filter the containers. The container must have all
           the tags to be included in the result.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['nodeName'] = node_name
    __args__['tags'] = tags
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('proxmoxve:index/getContainers:getContainers', __args__, opts=opts, typ=GetContainersResult).value

    return AwaitableGetContainersResult(
        containers=pulumi.get(__ret__, 'containers'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        node_name=pulumi.get(__ret__, 'node_name'),
        tags=pulumi.get(__ret__, 'tags'))
def get_containers_output(filters: Optional[pulumi.Input[Optional[Sequence[Union['GetContainersFilterArgs', 'GetContainersFilterArgsDict']]]]] = None,
                          node_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          tags: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetContainersResult]:
    """
    Retrieves information about all containers in the Proxmox cluster.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_proxmoxve as proxmoxve

    ubuntu_containers = proxmoxve.get_containers(tags=["ubuntu"])
    ubuntu_templates = proxmoxve.get_containers(filters=[
            {
                "name": "template",
                "values": ["true"],
            },
            {
                "name": "status",
                "values": ["stopped"],
            },
            {
                "name": "name",
                "regex": True,
                "values": ["^ubuntu-20.*$"],
            },
            {
                "name": "node_name",
                "regex": True,
                "values": [
                    "node_us_[1-3]",
                    "node_eu_[1-3]",
                ],
            },
        ],
        tags=[
            "template",
            "latest",
        ])
    ```


    :param Sequence[Union['GetContainersFilterArgs', 'GetContainersFilterArgsDict']] filters: Filter blocks. The container must satisfy all filter blocks to be included in the result.
    :param _builtins.str node_name: The node name. All cluster nodes will be queried in case this is omitted
    :param Sequence[_builtins.str] tags: A list of tags to filter the containers. The container must have all
           the tags to be included in the result.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['nodeName'] = node_name
    __args__['tags'] = tags
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('proxmoxve:index/getContainers:getContainers', __args__, opts=opts, typ=GetContainersResult)
    return __ret__.apply(lambda __response__: GetContainersResult(
        containers=pulumi.get(__response__, 'containers'),
        filters=pulumi.get(__response__, 'filters'),
        id=pulumi.get(__response__, 'id'),
        node_name=pulumi.get(__response__, 'node_name'),
        tags=pulumi.get(__response__, 'tags')))

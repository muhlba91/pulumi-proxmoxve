# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'HostsEntryArgs',
    'HostsEntryArgsDict',
    'ProviderSshArgs',
    'ProviderSshArgsDict',
    'ProviderSshNodeArgs',
    'ProviderSshNodeArgsDict',
    'GetVm2CloneArgs',
    'GetVm2CloneArgsDict',
    'GetVm2CpuArgs',
    'GetVm2CpuArgsDict',
    'GetVm2RngArgs',
    'GetVm2RngArgsDict',
    'GetVm2TimeoutsArgs',
    'GetVm2TimeoutsArgsDict',
    'GetVm2VgaArgs',
    'GetVm2VgaArgsDict',
]

MYPY = False

if not MYPY:
    class HostsEntryArgsDict(TypedDict):
        address: pulumi.Input[_builtins.str]
        """
        The IP address.
        """
        hostnames: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        """
        The hostnames.
        """
elif False:
    HostsEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HostsEntryArgs:
    def __init__(__self__, *,
                 address: pulumi.Input[_builtins.str],
                 hostnames: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        """
        :param pulumi.Input[_builtins.str] address: The IP address.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] hostnames: The hostnames.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "hostnames", hostnames)

    @_builtins.property
    @pulumi.getter
    def address(self) -> pulumi.Input[_builtins.str]:
        """
        The IP address.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter
    def hostnames(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        The hostnames.
        """
        return pulumi.get(self, "hostnames")

    @hostnames.setter
    def hostnames(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "hostnames", value)


if not MYPY:
    class ProviderSshArgsDict(TypedDict):
        agent: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Whether to use the SSH agent for authentication. Takes precedence over the `private_key` and `password` fields. Defaults to the value of the `PROXMOX_VE_SSH_AGENT` environment variable, or `false` if not set.
        """
        agent_forwarding: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Whether to enable SSH agent forwarding. Defaults to the value of the `PROXMOX_VE_SSH_AGENT_FORWARDING` environment variable, or `false` if not set.
        """
        agent_socket: NotRequired[pulumi.Input[_builtins.str]]
        """
        The path to the SSH agent socket. Defaults to the value of the `SSH_AUTH_SOCK` environment variable.
        """
        nodes: NotRequired[pulumi.Input[Sequence[pulumi.Input['ProviderSshNodeArgsDict']]]]
        """
        Overrides for SSH connection configuration for a Proxmox VE node.
        """
        password: NotRequired[pulumi.Input[_builtins.str]]
        """
        The password used for the SSH connection. Defaults to the value of the `password` field of the `provider` block.
        """
        private_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        The unencrypted private key (in PEM format) used for the SSH connection. Defaults to the value of the `PROXMOX_VE_SSH_PRIVATE_KEY` environment variable.
        """
        socks5_password: NotRequired[pulumi.Input[_builtins.str]]
        """
        The password for the SOCKS5 proxy server. Defaults to the value of the `PROXMOX_VE_SSH_SOCKS5_PASSWORD` environment variable.
        """
        socks5_server: NotRequired[pulumi.Input[_builtins.str]]
        """
        The address:port of the SOCKS5 proxy server. Defaults to the value of the `PROXMOX_VE_SSH_SOCKS5_SERVER` environment variable.
        """
        socks5_username: NotRequired[pulumi.Input[_builtins.str]]
        """
        The username for the SOCKS5 proxy server. Defaults to the value of the `PROXMOX_VE_SSH_SOCKS5_USERNAME` environment variable.
        """
        username: NotRequired[pulumi.Input[_builtins.str]]
        """
        The username used for the SSH connection. Defaults to the value of the `username` field of the `provider` block.
        """
elif False:
    ProviderSshArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProviderSshArgs:
    def __init__(__self__, *,
                 agent: Optional[pulumi.Input[_builtins.bool]] = None,
                 agent_forwarding: Optional[pulumi.Input[_builtins.bool]] = None,
                 agent_socket: Optional[pulumi.Input[_builtins.str]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input['ProviderSshNodeArgs']]]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 private_key: Optional[pulumi.Input[_builtins.str]] = None,
                 socks5_password: Optional[pulumi.Input[_builtins.str]] = None,
                 socks5_server: Optional[pulumi.Input[_builtins.str]] = None,
                 socks5_username: Optional[pulumi.Input[_builtins.str]] = None,
                 username: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] agent: Whether to use the SSH agent for authentication. Takes precedence over the `private_key` and `password` fields. Defaults to the value of the `PROXMOX_VE_SSH_AGENT` environment variable, or `false` if not set.
        :param pulumi.Input[_builtins.bool] agent_forwarding: Whether to enable SSH agent forwarding. Defaults to the value of the `PROXMOX_VE_SSH_AGENT_FORWARDING` environment variable, or `false` if not set.
        :param pulumi.Input[_builtins.str] agent_socket: The path to the SSH agent socket. Defaults to the value of the `SSH_AUTH_SOCK` environment variable.
        :param pulumi.Input[Sequence[pulumi.Input['ProviderSshNodeArgs']]] nodes: Overrides for SSH connection configuration for a Proxmox VE node.
        :param pulumi.Input[_builtins.str] password: The password used for the SSH connection. Defaults to the value of the `password` field of the `provider` block.
        :param pulumi.Input[_builtins.str] private_key: The unencrypted private key (in PEM format) used for the SSH connection. Defaults to the value of the `PROXMOX_VE_SSH_PRIVATE_KEY` environment variable.
        :param pulumi.Input[_builtins.str] socks5_password: The password for the SOCKS5 proxy server. Defaults to the value of the `PROXMOX_VE_SSH_SOCKS5_PASSWORD` environment variable.
        :param pulumi.Input[_builtins.str] socks5_server: The address:port of the SOCKS5 proxy server. Defaults to the value of the `PROXMOX_VE_SSH_SOCKS5_SERVER` environment variable.
        :param pulumi.Input[_builtins.str] socks5_username: The username for the SOCKS5 proxy server. Defaults to the value of the `PROXMOX_VE_SSH_SOCKS5_USERNAME` environment variable.
        :param pulumi.Input[_builtins.str] username: The username used for the SSH connection. Defaults to the value of the `username` field of the `provider` block.
        """
        if agent is not None:
            pulumi.set(__self__, "agent", agent)
        if agent_forwarding is not None:
            pulumi.set(__self__, "agent_forwarding", agent_forwarding)
        if agent_socket is not None:
            pulumi.set(__self__, "agent_socket", agent_socket)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if socks5_password is not None:
            pulumi.set(__self__, "socks5_password", socks5_password)
        if socks5_server is not None:
            pulumi.set(__self__, "socks5_server", socks5_server)
        if socks5_username is not None:
            pulumi.set(__self__, "socks5_username", socks5_username)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter
    def agent(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to use the SSH agent for authentication. Takes precedence over the `private_key` and `password` fields. Defaults to the value of the `PROXMOX_VE_SSH_AGENT` environment variable, or `false` if not set.
        """
        return pulumi.get(self, "agent")

    @agent.setter
    def agent(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "agent", value)

    @_builtins.property
    @pulumi.getter(name="agentForwarding")
    def agent_forwarding(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to enable SSH agent forwarding. Defaults to the value of the `PROXMOX_VE_SSH_AGENT_FORWARDING` environment variable, or `false` if not set.
        """
        return pulumi.get(self, "agent_forwarding")

    @agent_forwarding.setter
    def agent_forwarding(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "agent_forwarding", value)

    @_builtins.property
    @pulumi.getter(name="agentSocket")
    def agent_socket(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The path to the SSH agent socket. Defaults to the value of the `SSH_AUTH_SOCK` environment variable.
        """
        return pulumi.get(self, "agent_socket")

    @agent_socket.setter
    def agent_socket(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "agent_socket", value)

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProviderSshNodeArgs']]]]:
        """
        Overrides for SSH connection configuration for a Proxmox VE node.
        """
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProviderSshNodeArgs']]]]):
        pulumi.set(self, "nodes", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The password used for the SSH connection. Defaults to the value of the `password` field of the `provider` block.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unencrypted private key (in PEM format) used for the SSH connection. Defaults to the value of the `PROXMOX_VE_SSH_PRIVATE_KEY` environment variable.
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_key", value)

    @_builtins.property
    @pulumi.getter(name="socks5Password")
    def socks5_password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The password for the SOCKS5 proxy server. Defaults to the value of the `PROXMOX_VE_SSH_SOCKS5_PASSWORD` environment variable.
        """
        return pulumi.get(self, "socks5_password")

    @socks5_password.setter
    def socks5_password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "socks5_password", value)

    @_builtins.property
    @pulumi.getter(name="socks5Server")
    def socks5_server(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The address:port of the SOCKS5 proxy server. Defaults to the value of the `PROXMOX_VE_SSH_SOCKS5_SERVER` environment variable.
        """
        return pulumi.get(self, "socks5_server")

    @socks5_server.setter
    def socks5_server(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "socks5_server", value)

    @_builtins.property
    @pulumi.getter(name="socks5Username")
    def socks5_username(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The username for the SOCKS5 proxy server. Defaults to the value of the `PROXMOX_VE_SSH_SOCKS5_USERNAME` environment variable.
        """
        return pulumi.get(self, "socks5_username")

    @socks5_username.setter
    def socks5_username(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "socks5_username", value)

    @_builtins.property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The username used for the SSH connection. Defaults to the value of the `username` field of the `provider` block.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "username", value)


if not MYPY:
    class ProviderSshNodeArgsDict(TypedDict):
        address: pulumi.Input[_builtins.str]
        """
        The address of the Proxmox VE node.
        """
        name: pulumi.Input[_builtins.str]
        """
        The name of the Proxmox VE node.
        """
        port: NotRequired[pulumi.Input[_builtins.int]]
        """
        The port of the Proxmox VE node.
        """
elif False:
    ProviderSshNodeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProviderSshNodeArgs:
    def __init__(__self__, *,
                 address: pulumi.Input[_builtins.str],
                 name: pulumi.Input[_builtins.str],
                 port: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] address: The address of the Proxmox VE node.
        :param pulumi.Input[_builtins.str] name: The name of the Proxmox VE node.
        :param pulumi.Input[_builtins.int] port: The port of the Proxmox VE node.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def address(self) -> pulumi.Input[_builtins.str]:
        """
        The address of the Proxmox VE node.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        The name of the Proxmox VE node.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The port of the Proxmox VE node.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port", value)


if not MYPY:
    class GetVm2CloneArgsDict(TypedDict):
        id: _builtins.int
        """
        The ID of the VM to clone.
        """
        retries: _builtins.int
        """
        The number of retries to perform when cloning the VM (default: 3).
        """
elif False:
    GetVm2CloneArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetVm2CloneArgs:
    def __init__(__self__, *,
                 id: _builtins.int,
                 retries: _builtins.int):
        """
        :param _builtins.int id: The ID of the VM to clone.
        :param _builtins.int retries: The number of retries to perform when cloning the VM (default: 3).
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "retries", retries)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        """
        The ID of the VM to clone.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: _builtins.int):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def retries(self) -> _builtins.int:
        """
        The number of retries to perform when cloning the VM (default: 3).
        """
        return pulumi.get(self, "retries")

    @retries.setter
    def retries(self, value: _builtins.int):
        pulumi.set(self, "retries", value)


if not MYPY:
    class GetVm2CpuArgsDict(TypedDict):
        affinity: _builtins.str
        """
        List of host cores used to execute guest processes, for example: '0,5,8-11'
        """
        architecture: _builtins.str
        """
        The CPU architecture.
        """
        cores: _builtins.int
        """
        The number of CPU cores per socket.
        """
        flags: Sequence[_builtins.str]
        """
        Set of additional CPU flags.
        """
        hotplugged: _builtins.int
        """
        The number of hotplugged vCPUs.
        """
        limit: _builtins.int
        """
        Limit of CPU usage.
        """
        numa: _builtins.bool
        """
        Enable NUMA.
        """
        sockets: _builtins.int
        """
        The number of CPU sockets.
        """
        type: _builtins.str
        """
        Emulated CPU type.
        """
        units: _builtins.int
        """
        CPU weight for a VM
        """
elif False:
    GetVm2CpuArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetVm2CpuArgs:
    def __init__(__self__, *,
                 affinity: _builtins.str,
                 architecture: _builtins.str,
                 cores: _builtins.int,
                 flags: Sequence[_builtins.str],
                 hotplugged: _builtins.int,
                 limit: _builtins.int,
                 numa: _builtins.bool,
                 sockets: _builtins.int,
                 type: _builtins.str,
                 units: _builtins.int):
        """
        :param _builtins.str affinity: List of host cores used to execute guest processes, for example: '0,5,8-11'
        :param _builtins.str architecture: The CPU architecture.
        :param _builtins.int cores: The number of CPU cores per socket.
        :param Sequence[_builtins.str] flags: Set of additional CPU flags.
        :param _builtins.int hotplugged: The number of hotplugged vCPUs.
        :param _builtins.int limit: Limit of CPU usage.
        :param _builtins.bool numa: Enable NUMA.
        :param _builtins.int sockets: The number of CPU sockets.
        :param _builtins.str type: Emulated CPU type.
        :param _builtins.int units: CPU weight for a VM
        """
        pulumi.set(__self__, "affinity", affinity)
        pulumi.set(__self__, "architecture", architecture)
        pulumi.set(__self__, "cores", cores)
        pulumi.set(__self__, "flags", flags)
        pulumi.set(__self__, "hotplugged", hotplugged)
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "numa", numa)
        pulumi.set(__self__, "sockets", sockets)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "units", units)

    @_builtins.property
    @pulumi.getter
    def affinity(self) -> _builtins.str:
        """
        List of host cores used to execute guest processes, for example: '0,5,8-11'
        """
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(self, value: _builtins.str):
        pulumi.set(self, "affinity", value)

    @_builtins.property
    @pulumi.getter
    def architecture(self) -> _builtins.str:
        """
        The CPU architecture.
        """
        return pulumi.get(self, "architecture")

    @architecture.setter
    def architecture(self, value: _builtins.str):
        pulumi.set(self, "architecture", value)

    @_builtins.property
    @pulumi.getter
    def cores(self) -> _builtins.int:
        """
        The number of CPU cores per socket.
        """
        return pulumi.get(self, "cores")

    @cores.setter
    def cores(self, value: _builtins.int):
        pulumi.set(self, "cores", value)

    @_builtins.property
    @pulumi.getter
    def flags(self) -> Sequence[_builtins.str]:
        """
        Set of additional CPU flags.
        """
        return pulumi.get(self, "flags")

    @flags.setter
    def flags(self, value: Sequence[_builtins.str]):
        pulumi.set(self, "flags", value)

    @_builtins.property
    @pulumi.getter
    def hotplugged(self) -> _builtins.int:
        """
        The number of hotplugged vCPUs.
        """
        return pulumi.get(self, "hotplugged")

    @hotplugged.setter
    def hotplugged(self, value: _builtins.int):
        pulumi.set(self, "hotplugged", value)

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.int:
        """
        Limit of CPU usage.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: _builtins.int):
        pulumi.set(self, "limit", value)

    @_builtins.property
    @pulumi.getter
    def numa(self) -> _builtins.bool:
        """
        Enable NUMA.
        """
        return pulumi.get(self, "numa")

    @numa.setter
    def numa(self, value: _builtins.bool):
        pulumi.set(self, "numa", value)

    @_builtins.property
    @pulumi.getter
    def sockets(self) -> _builtins.int:
        """
        The number of CPU sockets.
        """
        return pulumi.get(self, "sockets")

    @sockets.setter
    def sockets(self, value: _builtins.int):
        pulumi.set(self, "sockets", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Emulated CPU type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: _builtins.str):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def units(self) -> _builtins.int:
        """
        CPU weight for a VM
        """
        return pulumi.get(self, "units")

    @units.setter
    def units(self, value: _builtins.int):
        pulumi.set(self, "units", value)


if not MYPY:
    class GetVm2RngArgsDict(TypedDict):
        max_bytes: _builtins.int
        """
        Maximum bytes of entropy allowed to get injected into the guest every period.
        """
        period: _builtins.int
        """
        Period in milliseconds to limit entropy injection to the guest.
        """
        source: _builtins.str
        """
        The entropy source for the RNG device.
        """
elif False:
    GetVm2RngArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetVm2RngArgs:
    def __init__(__self__, *,
                 max_bytes: _builtins.int,
                 period: _builtins.int,
                 source: _builtins.str):
        """
        :param _builtins.int max_bytes: Maximum bytes of entropy allowed to get injected into the guest every period.
        :param _builtins.int period: Period in milliseconds to limit entropy injection to the guest.
        :param _builtins.str source: The entropy source for the RNG device.
        """
        pulumi.set(__self__, "max_bytes", max_bytes)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "source", source)

    @_builtins.property
    @pulumi.getter(name="maxBytes")
    def max_bytes(self) -> _builtins.int:
        """
        Maximum bytes of entropy allowed to get injected into the guest every period.
        """
        return pulumi.get(self, "max_bytes")

    @max_bytes.setter
    def max_bytes(self, value: _builtins.int):
        pulumi.set(self, "max_bytes", value)

    @_builtins.property
    @pulumi.getter
    def period(self) -> _builtins.int:
        """
        Period in milliseconds to limit entropy injection to the guest.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: _builtins.int):
        pulumi.set(self, "period", value)

    @_builtins.property
    @pulumi.getter
    def source(self) -> _builtins.str:
        """
        The entropy source for the RNG device.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: _builtins.str):
        pulumi.set(self, "source", value)


if not MYPY:
    class GetVm2TimeoutsArgsDict(TypedDict):
        read: NotRequired[_builtins.str]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        """
elif False:
    GetVm2TimeoutsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetVm2TimeoutsArgs:
    def __init__(__self__, *,
                 read: Optional[_builtins.str] = None):
        """
        :param _builtins.str read: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        """
        if read is not None:
            pulumi.set(__self__, "read", read)

    @_builtins.property
    @pulumi.getter
    def read(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        """
        return pulumi.get(self, "read")

    @read.setter
    def read(self, value: Optional[_builtins.str]):
        pulumi.set(self, "read", value)


if not MYPY:
    class GetVm2VgaArgsDict(TypedDict):
        clipboard: _builtins.str
        """
        Enable a specific clipboard.
        """
        memory: _builtins.int
        """
        The VGA memory in megabytes (4-512 MB). Has no effect with serial display.
        """
        type: _builtins.str
        """
        The VGA type.
        """
elif False:
    GetVm2VgaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetVm2VgaArgs:
    def __init__(__self__, *,
                 clipboard: _builtins.str,
                 memory: _builtins.int,
                 type: _builtins.str):
        """
        :param _builtins.str clipboard: Enable a specific clipboard.
        :param _builtins.int memory: The VGA memory in megabytes (4-512 MB). Has no effect with serial display.
        :param _builtins.str type: The VGA type.
        """
        pulumi.set(__self__, "clipboard", clipboard)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def clipboard(self) -> _builtins.str:
        """
        Enable a specific clipboard.
        """
        return pulumi.get(self, "clipboard")

    @clipboard.setter
    def clipboard(self, value: _builtins.str):
        pulumi.set(self, "clipboard", value)

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.int:
        """
        The VGA memory in megabytes (4-512 MB). Has no effect with serial display.
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: _builtins.int):
        pulumi.set(self, "memory", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The VGA type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: _builtins.str):
        pulumi.set(self, "type", value)



# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['ApplierArgs', 'Applier']

@pulumi.input_type
class ApplierArgs:
    def __init__(__self__):
        """
        The set of arguments for constructing a Applier resource.
        """
        pass


@pulumi.type_token("proxmoxve:Sdn/applier:Applier")
class Applier(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 __props__=None):
        """
        **EXPERIMENTAL** Triggers Proxmox's SDN **Apply** (equivalent to `PUT /cluster/sdn`).Intended to be used with `replace_triggered_by` so it runs after SDN objects change.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_proxmoxve as proxmoxve

        finalizer = proxmoxve.sdn.Applier("finalizer")
        # SDN Zone (Simple) - First zone for applier demonstration
        example_zone1 = proxmoxve.sdnzone.Simple("exampleZone1",
            zone_id="zone1",
            nodes=["pve"],
            mtu=1500,
            dns="1.1.1.1",
            dns_zone="example.com",
            ipam="pve",
            reverse_dns="1.1.1.1",
            opts = pulumi.ResourceOptions(depends_on=[finalizer]))
        # SDN Zone (Simple) - Second zone for applier demonstration
        example_zone2 = proxmoxve.sdnzone.Simple("exampleZone2",
            zone_id="zone2",
            nodes=["pve"],
            mtu=1500,
            opts = pulumi.ResourceOptions(depends_on=[finalizer]))
        # SDN Applier - Applies SDN configuration changes
        example_applier = proxmoxve.sdn.Applier("exampleApplier", opts = pulumi.ResourceOptions(depends_on=[
                example_zone1,
                example_zone2,
            ]))
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ApplierArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        **EXPERIMENTAL** Triggers Proxmox's SDN **Apply** (equivalent to `PUT /cluster/sdn`).Intended to be used with `replace_triggered_by` so it runs after SDN objects change.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_proxmoxve as proxmoxve

        finalizer = proxmoxve.sdn.Applier("finalizer")
        # SDN Zone (Simple) - First zone for applier demonstration
        example_zone1 = proxmoxve.sdnzone.Simple("exampleZone1",
            zone_id="zone1",
            nodes=["pve"],
            mtu=1500,
            dns="1.1.1.1",
            dns_zone="example.com",
            ipam="pve",
            reverse_dns="1.1.1.1",
            opts = pulumi.ResourceOptions(depends_on=[finalizer]))
        # SDN Zone (Simple) - Second zone for applier demonstration
        example_zone2 = proxmoxve.sdnzone.Simple("exampleZone2",
            zone_id="zone2",
            nodes=["pve"],
            mtu=1500,
            opts = pulumi.ResourceOptions(depends_on=[finalizer]))
        # SDN Applier - Applies SDN configuration changes
        example_applier = proxmoxve.sdn.Applier("exampleApplier", opts = pulumi.ResourceOptions(depends_on=[
                example_zone1,
                example_zone2,
            ]))
        ```

        :param str resource_name: The name of the resource.
        :param ApplierArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApplierArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApplierArgs.__new__(ApplierArgs)

        super(Applier, __self__).__init__(
            'proxmoxve:Sdn/applier:Applier',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Applier':
        """
        Get an existing Applier resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ApplierArgs.__new__(ApplierArgs)

        return Applier(resource_name, opts=opts, __props__=__props__)


# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SubnetArgs', 'Subnet']

@pulumi.input_type
class SubnetArgs:
    def __init__(__self__, *,
                 cidr: pulumi.Input[_builtins.str],
                 vnet: pulumi.Input[_builtins.str],
                 dhcp_dns_server: Optional[pulumi.Input[_builtins.str]] = None,
                 dhcp_range: Optional[pulumi.Input['SubnetDhcpRangeArgs']] = None,
                 dns_zone_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 snat: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a Subnet resource.
        :param pulumi.Input[_builtins.str] cidr: A CIDR network address, for example 10.0.0.0/8
        :param pulumi.Input[_builtins.str] vnet: The VNet to which this subnet belongs.
        :param pulumi.Input[_builtins.str] dhcp_dns_server: The DNS server used for DHCP.
        :param pulumi.Input['SubnetDhcpRangeArgs'] dhcp_range: DHCP range (start and end IPs).
        :param pulumi.Input[_builtins.str] dns_zone_prefix: Prefix used for DNS zone delegation.
        :param pulumi.Input[_builtins.str] gateway: The gateway address for the subnet.
        :param pulumi.Input[_builtins.bool] snat: Whether SNAT is enabled for the subnet.
        """
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "vnet", vnet)
        if dhcp_dns_server is not None:
            pulumi.set(__self__, "dhcp_dns_server", dhcp_dns_server)
        if dhcp_range is not None:
            pulumi.set(__self__, "dhcp_range", dhcp_range)
        if dns_zone_prefix is not None:
            pulumi.set(__self__, "dns_zone_prefix", dns_zone_prefix)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if snat is not None:
            pulumi.set(__self__, "snat", snat)

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> pulumi.Input[_builtins.str]:
        """
        A CIDR network address, for example 10.0.0.0/8
        """
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cidr", value)

    @_builtins.property
    @pulumi.getter
    def vnet(self) -> pulumi.Input[_builtins.str]:
        """
        The VNet to which this subnet belongs.
        """
        return pulumi.get(self, "vnet")

    @vnet.setter
    def vnet(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vnet", value)

    @_builtins.property
    @pulumi.getter(name="dhcpDnsServer")
    def dhcp_dns_server(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The DNS server used for DHCP.
        """
        return pulumi.get(self, "dhcp_dns_server")

    @dhcp_dns_server.setter
    def dhcp_dns_server(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dhcp_dns_server", value)

    @_builtins.property
    @pulumi.getter(name="dhcpRange")
    def dhcp_range(self) -> Optional[pulumi.Input['SubnetDhcpRangeArgs']]:
        """
        DHCP range (start and end IPs).
        """
        return pulumi.get(self, "dhcp_range")

    @dhcp_range.setter
    def dhcp_range(self, value: Optional[pulumi.Input['SubnetDhcpRangeArgs']]):
        pulumi.set(self, "dhcp_range", value)

    @_builtins.property
    @pulumi.getter(name="dnsZonePrefix")
    def dns_zone_prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Prefix used for DNS zone delegation.
        """
        return pulumi.get(self, "dns_zone_prefix")

    @dns_zone_prefix.setter
    def dns_zone_prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns_zone_prefix", value)

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The gateway address for the subnet.
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gateway", value)

    @_builtins.property
    @pulumi.getter
    def snat(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether SNAT is enabled for the subnet.
        """
        return pulumi.get(self, "snat")

    @snat.setter
    def snat(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "snat", value)


@pulumi.input_type
class _SubnetState:
    def __init__(__self__, *,
                 cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 dhcp_dns_server: Optional[pulumi.Input[_builtins.str]] = None,
                 dhcp_range: Optional[pulumi.Input['SubnetDhcpRangeArgs']] = None,
                 dns_zone_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 snat: Optional[pulumi.Input[_builtins.bool]] = None,
                 vnet: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Subnet resources.
        :param pulumi.Input[_builtins.str] cidr: A CIDR network address, for example 10.0.0.0/8
        :param pulumi.Input[_builtins.str] dhcp_dns_server: The DNS server used for DHCP.
        :param pulumi.Input['SubnetDhcpRangeArgs'] dhcp_range: DHCP range (start and end IPs).
        :param pulumi.Input[_builtins.str] dns_zone_prefix: Prefix used for DNS zone delegation.
        :param pulumi.Input[_builtins.str] gateway: The gateway address for the subnet.
        :param pulumi.Input[_builtins.bool] snat: Whether SNAT is enabled for the subnet.
        :param pulumi.Input[_builtins.str] vnet: The VNet to which this subnet belongs.
        """
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if dhcp_dns_server is not None:
            pulumi.set(__self__, "dhcp_dns_server", dhcp_dns_server)
        if dhcp_range is not None:
            pulumi.set(__self__, "dhcp_range", dhcp_range)
        if dns_zone_prefix is not None:
            pulumi.set(__self__, "dns_zone_prefix", dns_zone_prefix)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if snat is not None:
            pulumi.set(__self__, "snat", snat)
        if vnet is not None:
            pulumi.set(__self__, "vnet", vnet)

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A CIDR network address, for example 10.0.0.0/8
        """
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cidr", value)

    @_builtins.property
    @pulumi.getter(name="dhcpDnsServer")
    def dhcp_dns_server(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The DNS server used for DHCP.
        """
        return pulumi.get(self, "dhcp_dns_server")

    @dhcp_dns_server.setter
    def dhcp_dns_server(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dhcp_dns_server", value)

    @_builtins.property
    @pulumi.getter(name="dhcpRange")
    def dhcp_range(self) -> Optional[pulumi.Input['SubnetDhcpRangeArgs']]:
        """
        DHCP range (start and end IPs).
        """
        return pulumi.get(self, "dhcp_range")

    @dhcp_range.setter
    def dhcp_range(self, value: Optional[pulumi.Input['SubnetDhcpRangeArgs']]):
        pulumi.set(self, "dhcp_range", value)

    @_builtins.property
    @pulumi.getter(name="dnsZonePrefix")
    def dns_zone_prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Prefix used for DNS zone delegation.
        """
        return pulumi.get(self, "dns_zone_prefix")

    @dns_zone_prefix.setter
    def dns_zone_prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns_zone_prefix", value)

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The gateway address for the subnet.
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gateway", value)

    @_builtins.property
    @pulumi.getter
    def snat(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether SNAT is enabled for the subnet.
        """
        return pulumi.get(self, "snat")

    @snat.setter
    def snat(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "snat", value)

    @_builtins.property
    @pulumi.getter
    def vnet(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The VNet to which this subnet belongs.
        """
        return pulumi.get(self, "vnet")

    @vnet.setter
    def vnet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vnet", value)


@pulumi.type_token("proxmoxve:Sdn/subnet:Subnet")
class Subnet(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 dhcp_dns_server: Optional[pulumi.Input[_builtins.str]] = None,
                 dhcp_range: Optional[pulumi.Input[Union['SubnetDhcpRangeArgs', 'SubnetDhcpRangeArgsDict']]] = None,
                 dns_zone_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 snat: Optional[pulumi.Input[_builtins.bool]] = None,
                 vnet: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages SDN Subnets in Proxmox VE.

        ## Import

        #!/usr/bin/env sh

        SDN subnet can be imported using its unique identifier in the format: <vnet>/<subnet-id>

        The <subnet-id> is the canonical ID from Proxmox, e.g., "zone1-192.168.1.0-24"

        ```sh
        $ pulumi import proxmoxve:Sdn/subnet:Subnet basic_subnet vnet1/zone1-192.168.1.0-24
        ```

        ```sh
        $ pulumi import proxmoxve:Sdn/subnet:Subnet dhcp_subnet vnet2/zone2-192.168.2.0-24
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cidr: A CIDR network address, for example 10.0.0.0/8
        :param pulumi.Input[_builtins.str] dhcp_dns_server: The DNS server used for DHCP.
        :param pulumi.Input[Union['SubnetDhcpRangeArgs', 'SubnetDhcpRangeArgsDict']] dhcp_range: DHCP range (start and end IPs).
        :param pulumi.Input[_builtins.str] dns_zone_prefix: Prefix used for DNS zone delegation.
        :param pulumi.Input[_builtins.str] gateway: The gateway address for the subnet.
        :param pulumi.Input[_builtins.bool] snat: Whether SNAT is enabled for the subnet.
        :param pulumi.Input[_builtins.str] vnet: The VNet to which this subnet belongs.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SubnetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages SDN Subnets in Proxmox VE.

        ## Import

        #!/usr/bin/env sh

        SDN subnet can be imported using its unique identifier in the format: <vnet>/<subnet-id>

        The <subnet-id> is the canonical ID from Proxmox, e.g., "zone1-192.168.1.0-24"

        ```sh
        $ pulumi import proxmoxve:Sdn/subnet:Subnet basic_subnet vnet1/zone1-192.168.1.0-24
        ```

        ```sh
        $ pulumi import proxmoxve:Sdn/subnet:Subnet dhcp_subnet vnet2/zone2-192.168.2.0-24
        ```

        :param str resource_name: The name of the resource.
        :param SubnetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SubnetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 dhcp_dns_server: Optional[pulumi.Input[_builtins.str]] = None,
                 dhcp_range: Optional[pulumi.Input[Union['SubnetDhcpRangeArgs', 'SubnetDhcpRangeArgsDict']]] = None,
                 dns_zone_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 snat: Optional[pulumi.Input[_builtins.bool]] = None,
                 vnet: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SubnetArgs.__new__(SubnetArgs)

            if cidr is None and not opts.urn:
                raise TypeError("Missing required property 'cidr'")
            __props__.__dict__["cidr"] = cidr
            __props__.__dict__["dhcp_dns_server"] = dhcp_dns_server
            __props__.__dict__["dhcp_range"] = dhcp_range
            __props__.__dict__["dns_zone_prefix"] = dns_zone_prefix
            __props__.__dict__["gateway"] = gateway
            __props__.__dict__["snat"] = snat
            if vnet is None and not opts.urn:
                raise TypeError("Missing required property 'vnet'")
            __props__.__dict__["vnet"] = vnet
        super(Subnet, __self__).__init__(
            'proxmoxve:Sdn/subnet:Subnet',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cidr: Optional[pulumi.Input[_builtins.str]] = None,
            dhcp_dns_server: Optional[pulumi.Input[_builtins.str]] = None,
            dhcp_range: Optional[pulumi.Input[Union['SubnetDhcpRangeArgs', 'SubnetDhcpRangeArgsDict']]] = None,
            dns_zone_prefix: Optional[pulumi.Input[_builtins.str]] = None,
            gateway: Optional[pulumi.Input[_builtins.str]] = None,
            snat: Optional[pulumi.Input[_builtins.bool]] = None,
            vnet: Optional[pulumi.Input[_builtins.str]] = None) -> 'Subnet':
        """
        Get an existing Subnet resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cidr: A CIDR network address, for example 10.0.0.0/8
        :param pulumi.Input[_builtins.str] dhcp_dns_server: The DNS server used for DHCP.
        :param pulumi.Input[Union['SubnetDhcpRangeArgs', 'SubnetDhcpRangeArgsDict']] dhcp_range: DHCP range (start and end IPs).
        :param pulumi.Input[_builtins.str] dns_zone_prefix: Prefix used for DNS zone delegation.
        :param pulumi.Input[_builtins.str] gateway: The gateway address for the subnet.
        :param pulumi.Input[_builtins.bool] snat: Whether SNAT is enabled for the subnet.
        :param pulumi.Input[_builtins.str] vnet: The VNet to which this subnet belongs.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SubnetState.__new__(_SubnetState)

        __props__.__dict__["cidr"] = cidr
        __props__.__dict__["dhcp_dns_server"] = dhcp_dns_server
        __props__.__dict__["dhcp_range"] = dhcp_range
        __props__.__dict__["dns_zone_prefix"] = dns_zone_prefix
        __props__.__dict__["gateway"] = gateway
        __props__.__dict__["snat"] = snat
        __props__.__dict__["vnet"] = vnet
        return Subnet(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> pulumi.Output[_builtins.str]:
        """
        A CIDR network address, for example 10.0.0.0/8
        """
        return pulumi.get(self, "cidr")

    @_builtins.property
    @pulumi.getter(name="dhcpDnsServer")
    def dhcp_dns_server(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The DNS server used for DHCP.
        """
        return pulumi.get(self, "dhcp_dns_server")

    @_builtins.property
    @pulumi.getter(name="dhcpRange")
    def dhcp_range(self) -> pulumi.Output[Optional['outputs.SubnetDhcpRange']]:
        """
        DHCP range (start and end IPs).
        """
        return pulumi.get(self, "dhcp_range")

    @_builtins.property
    @pulumi.getter(name="dnsZonePrefix")
    def dns_zone_prefix(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Prefix used for DNS zone delegation.
        """
        return pulumi.get(self, "dns_zone_prefix")

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The gateway address for the subnet.
        """
        return pulumi.get(self, "gateway")

    @_builtins.property
    @pulumi.getter
    def snat(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Whether SNAT is enabled for the subnet.
        """
        return pulumi.get(self, "snat")

    @_builtins.property
    @pulumi.getter
    def vnet(self) -> pulumi.Output[_builtins.str]:
        """
        The VNet to which this subnet belongs.
        """
        return pulumi.get(self, "vnet")


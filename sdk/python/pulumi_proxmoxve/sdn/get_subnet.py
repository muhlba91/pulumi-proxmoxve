# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetSubnetResult',
    'AwaitableGetSubnetResult',
    'get_subnet',
    'get_subnet_output',
]

@pulumi.output_type
class GetSubnetResult:
    """
    A collection of values returned by getSubnet.
    """
    def __init__(__self__, cidr=None, dhcp_dns_server=None, dhcp_range=None, dns_zone_prefix=None, gateway=None, id=None, snat=None, vnet=None):
        if cidr and not isinstance(cidr, str):
            raise TypeError("Expected argument 'cidr' to be a str")
        pulumi.set(__self__, "cidr", cidr)
        if dhcp_dns_server and not isinstance(dhcp_dns_server, str):
            raise TypeError("Expected argument 'dhcp_dns_server' to be a str")
        pulumi.set(__self__, "dhcp_dns_server", dhcp_dns_server)
        if dhcp_range and not isinstance(dhcp_range, dict):
            raise TypeError("Expected argument 'dhcp_range' to be a dict")
        pulumi.set(__self__, "dhcp_range", dhcp_range)
        if dns_zone_prefix and not isinstance(dns_zone_prefix, str):
            raise TypeError("Expected argument 'dns_zone_prefix' to be a str")
        pulumi.set(__self__, "dns_zone_prefix", dns_zone_prefix)
        if gateway and not isinstance(gateway, str):
            raise TypeError("Expected argument 'gateway' to be a str")
        pulumi.set(__self__, "gateway", gateway)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if snat and not isinstance(snat, bool):
            raise TypeError("Expected argument 'snat' to be a bool")
        pulumi.set(__self__, "snat", snat)
        if vnet and not isinstance(vnet, str):
            raise TypeError("Expected argument 'vnet' to be a str")
        pulumi.set(__self__, "vnet", vnet)

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> _builtins.str:
        """
        A CIDR network address, for example 10.0.0.0/8
        """
        return pulumi.get(self, "cidr")

    @_builtins.property
    @pulumi.getter(name="dhcpDnsServer")
    def dhcp_dns_server(self) -> _builtins.str:
        """
        The DNS server used for DHCP.
        """
        return pulumi.get(self, "dhcp_dns_server")

    @_builtins.property
    @pulumi.getter(name="dhcpRange")
    def dhcp_range(self) -> 'outputs.GetSubnetDhcpRangeResult':
        """
        DHCP range (start and end IPs).
        """
        return pulumi.get(self, "dhcp_range")

    @_builtins.property
    @pulumi.getter(name="dnsZonePrefix")
    def dns_zone_prefix(self) -> _builtins.str:
        """
        Prefix used for DNS zone delegation.
        """
        return pulumi.get(self, "dns_zone_prefix")

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> _builtins.str:
        """
        The gateway address for the subnet.
        """
        return pulumi.get(self, "gateway")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The full ID in the format 'vnet-id/subnet-id'.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def snat(self) -> _builtins.bool:
        """
        Whether SNAT is enabled for the subnet.
        """
        return pulumi.get(self, "snat")

    @_builtins.property
    @pulumi.getter
    def vnet(self) -> _builtins.str:
        """
        The VNet this subnet belongs to.
        """
        return pulumi.get(self, "vnet")


class AwaitableGetSubnetResult(GetSubnetResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSubnetResult(
            cidr=self.cidr,
            dhcp_dns_server=self.dhcp_dns_server,
            dhcp_range=self.dhcp_range,
            dns_zone_prefix=self.dns_zone_prefix,
            gateway=self.gateway,
            id=self.id,
            snat=self.snat,
            vnet=self.vnet)


def get_subnet(cidr: Optional[_builtins.str] = None,
               dhcp_range: Optional[Union['GetSubnetDhcpRangeArgs', 'GetSubnetDhcpRangeArgsDict']] = None,
               vnet: Optional[_builtins.str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSubnetResult:
    """
    Retrieve details about a specific SDN Subnet in Proxmox VE.


    :param _builtins.str cidr: A CIDR network address, for example 10.0.0.0/8
    :param Union['GetSubnetDhcpRangeArgs', 'GetSubnetDhcpRangeArgsDict'] dhcp_range: DHCP range (start and end IPs).
    :param _builtins.str vnet: The VNet this subnet belongs to.
    """
    __args__ = dict()
    __args__['cidr'] = cidr
    __args__['dhcpRange'] = dhcp_range
    __args__['vnet'] = vnet
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('proxmoxve:Sdn/getSubnet:getSubnet', __args__, opts=opts, typ=GetSubnetResult).value

    return AwaitableGetSubnetResult(
        cidr=pulumi.get(__ret__, 'cidr'),
        dhcp_dns_server=pulumi.get(__ret__, 'dhcp_dns_server'),
        dhcp_range=pulumi.get(__ret__, 'dhcp_range'),
        dns_zone_prefix=pulumi.get(__ret__, 'dns_zone_prefix'),
        gateway=pulumi.get(__ret__, 'gateway'),
        id=pulumi.get(__ret__, 'id'),
        snat=pulumi.get(__ret__, 'snat'),
        vnet=pulumi.get(__ret__, 'vnet'))
def get_subnet_output(cidr: Optional[pulumi.Input[_builtins.str]] = None,
                      dhcp_range: Optional[pulumi.Input[Optional[Union['GetSubnetDhcpRangeArgs', 'GetSubnetDhcpRangeArgsDict']]]] = None,
                      vnet: Optional[pulumi.Input[_builtins.str]] = None,
                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSubnetResult]:
    """
    Retrieve details about a specific SDN Subnet in Proxmox VE.


    :param _builtins.str cidr: A CIDR network address, for example 10.0.0.0/8
    :param Union['GetSubnetDhcpRangeArgs', 'GetSubnetDhcpRangeArgsDict'] dhcp_range: DHCP range (start and end IPs).
    :param _builtins.str vnet: The VNet this subnet belongs to.
    """
    __args__ = dict()
    __args__['cidr'] = cidr
    __args__['dhcpRange'] = dhcp_range
    __args__['vnet'] = vnet
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('proxmoxve:Sdn/getSubnet:getSubnet', __args__, opts=opts, typ=GetSubnetResult)
    return __ret__.apply(lambda __response__: GetSubnetResult(
        cidr=pulumi.get(__response__, 'cidr'),
        dhcp_dns_server=pulumi.get(__response__, 'dhcp_dns_server'),
        dhcp_range=pulumi.get(__response__, 'dhcp_range'),
        dns_zone_prefix=pulumi.get(__response__, 'dns_zone_prefix'),
        gateway=pulumi.get(__response__, 'gateway'),
        id=pulumi.get(__response__, 'id'),
        snat=pulumi.get(__response__, 'snat'),
        vnet=pulumi.get(__response__, 'vnet')))

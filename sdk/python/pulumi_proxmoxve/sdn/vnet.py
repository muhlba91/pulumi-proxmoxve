# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['VnetArgs', 'Vnet']

@pulumi.input_type
class VnetArgs:
    def __init__(__self__, *,
                 vnet_id: pulumi.Input[_builtins.str],
                 zone: pulumi.Input[_builtins.str],
                 alias: Optional[pulumi.Input[_builtins.str]] = None,
                 isolate_ports: Optional[pulumi.Input[_builtins.bool]] = None,
                 tag: Optional[pulumi.Input[_builtins.int]] = None,
                 vlan_aware: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a Vnet resource.
        :param pulumi.Input[_builtins.str] vnet_id: The unique identifier of the SDN VNet.
        :param pulumi.Input[_builtins.str] zone: The zone to which this VNet belongs.
        :param pulumi.Input[_builtins.str] alias: An optional alias for this VNet.
        :param pulumi.Input[_builtins.bool] isolate_ports: Isolate ports within this VNet.
        :param pulumi.Input[_builtins.int] tag: Tag value for VLAN/VXLAN (can't be used with other zone types).
        :param pulumi.Input[_builtins.bool] vlan_aware: Allow VM VLANs to pass through this VNet.
        """
        pulumi.set(__self__, "vnet_id", vnet_id)
        pulumi.set(__self__, "zone", zone)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if isolate_ports is not None:
            pulumi.set(__self__, "isolate_ports", isolate_ports)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vlan_aware is not None:
            pulumi.set(__self__, "vlan_aware", vlan_aware)

    @_builtins.property
    @pulumi.getter(name="vnetId")
    def vnet_id(self) -> pulumi.Input[_builtins.str]:
        """
        The unique identifier of the SDN VNet.
        """
        return pulumi.get(self, "vnet_id")

    @vnet_id.setter
    def vnet_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vnet_id", value)

    @_builtins.property
    @pulumi.getter
    def zone(self) -> pulumi.Input[_builtins.str]:
        """
        The zone to which this VNet belongs.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "zone", value)

    @_builtins.property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        An optional alias for this VNet.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alias", value)

    @_builtins.property
    @pulumi.getter(name="isolatePorts")
    def isolate_ports(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Isolate ports within this VNet.
        """
        return pulumi.get(self, "isolate_ports")

    @isolate_ports.setter
    def isolate_ports(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "isolate_ports", value)

    @_builtins.property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Tag value for VLAN/VXLAN (can't be used with other zone types).
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tag", value)

    @_builtins.property
    @pulumi.getter(name="vlanAware")
    def vlan_aware(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow VM VLANs to pass through this VNet.
        """
        return pulumi.get(self, "vlan_aware")

    @vlan_aware.setter
    def vlan_aware(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "vlan_aware", value)


@pulumi.input_type
class _VnetState:
    def __init__(__self__, *,
                 alias: Optional[pulumi.Input[_builtins.str]] = None,
                 isolate_ports: Optional[pulumi.Input[_builtins.bool]] = None,
                 tag: Optional[pulumi.Input[_builtins.int]] = None,
                 vlan_aware: Optional[pulumi.Input[_builtins.bool]] = None,
                 vnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Vnet resources.
        :param pulumi.Input[_builtins.str] alias: An optional alias for this VNet.
        :param pulumi.Input[_builtins.bool] isolate_ports: Isolate ports within this VNet.
        :param pulumi.Input[_builtins.int] tag: Tag value for VLAN/VXLAN (can't be used with other zone types).
        :param pulumi.Input[_builtins.bool] vlan_aware: Allow VM VLANs to pass through this VNet.
        :param pulumi.Input[_builtins.str] vnet_id: The unique identifier of the SDN VNet.
        :param pulumi.Input[_builtins.str] zone: The zone to which this VNet belongs.
        """
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if isolate_ports is not None:
            pulumi.set(__self__, "isolate_ports", isolate_ports)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vlan_aware is not None:
            pulumi.set(__self__, "vlan_aware", vlan_aware)
        if vnet_id is not None:
            pulumi.set(__self__, "vnet_id", vnet_id)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        An optional alias for this VNet.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alias", value)

    @_builtins.property
    @pulumi.getter(name="isolatePorts")
    def isolate_ports(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Isolate ports within this VNet.
        """
        return pulumi.get(self, "isolate_ports")

    @isolate_ports.setter
    def isolate_ports(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "isolate_ports", value)

    @_builtins.property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Tag value for VLAN/VXLAN (can't be used with other zone types).
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tag", value)

    @_builtins.property
    @pulumi.getter(name="vlanAware")
    def vlan_aware(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow VM VLANs to pass through this VNet.
        """
        return pulumi.get(self, "vlan_aware")

    @vlan_aware.setter
    def vlan_aware(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "vlan_aware", value)

    @_builtins.property
    @pulumi.getter(name="vnetId")
    def vnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier of the SDN VNet.
        """
        return pulumi.get(self, "vnet_id")

    @vnet_id.setter
    def vnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vnet_id", value)

    @_builtins.property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The zone to which this VNet belongs.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zone", value)


@pulumi.type_token("proxmoxve:Sdn/vnet:Vnet")
class Vnet(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alias: Optional[pulumi.Input[_builtins.str]] = None,
                 isolate_ports: Optional[pulumi.Input[_builtins.bool]] = None,
                 tag: Optional[pulumi.Input[_builtins.int]] = None,
                 vlan_aware: Optional[pulumi.Input[_builtins.bool]] = None,
                 vnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages Proxmox VE SDN VNet.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_proxmoxve as proxmoxve

        finalizer = proxmoxve.sdn.Applier("finalizer")
        # SDN Zone (Simple) - Basic zone for simple vnets
        example_zone1 = proxmoxve.sdnzone.Simple("exampleZone1",
            zone_id="zone1",
            nodes=["pve"],
            mtu=1500,
            dns="1.1.1.1",
            dns_zone="example.com",
            ipam="pve",
            reverse_dns="1.1.1.1",
            opts = pulumi.ResourceOptions(depends_on=[finalizer]))
        # SDN Zone (Simple) - Second zone for demonstration
        example_zone2 = proxmoxve.sdnzone.Simple("exampleZone2",
            zone_id="zone2",
            nodes=["pve"],
            mtu=1500,
            opts = pulumi.ResourceOptions(depends_on=[finalizer]))
        # Basic VNet (Simple)
        basic_vnet = proxmoxve.sdn.Vnet("basicVnet",
            vnet_id="vnet1",
            zone=example_zone1.zone_id,
            opts = pulumi.ResourceOptions(depends_on=[finalizer]))
        # VNet with Alias and Port Isolation
        isolated_vnet = proxmoxve.sdn.Vnet("isolatedVnet",
            vnet_id="vnet2",
            zone=example_zone2.zone_id,
            alias="Isolated VNet",
            isolate_ports=True,
            vlan_aware=False,
            opts = pulumi.ResourceOptions(depends_on=[finalizer]))
        # SDN Applier for all resources
        vnet_applier = proxmoxve.sdn.Applier("vnetApplier", opts = pulumi.ResourceOptions(depends_on=[
                example_zone1,
                example_zone2,
                basic_vnet,
                isolated_vnet,
            ]))
        ```

        ## Import

        #!/usr/bin/env sh

        SDN vnet can be imported using its unique identifier (vnet ID)

        ```sh
        $ pulumi import proxmoxve:Sdn/vnet:Vnet basic_vnet vnet1
        ```

        ```sh
        $ pulumi import proxmoxve:Sdn/vnet:Vnet isolated_vnet vnet2
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] alias: An optional alias for this VNet.
        :param pulumi.Input[_builtins.bool] isolate_ports: Isolate ports within this VNet.
        :param pulumi.Input[_builtins.int] tag: Tag value for VLAN/VXLAN (can't be used with other zone types).
        :param pulumi.Input[_builtins.bool] vlan_aware: Allow VM VLANs to pass through this VNet.
        :param pulumi.Input[_builtins.str] vnet_id: The unique identifier of the SDN VNet.
        :param pulumi.Input[_builtins.str] zone: The zone to which this VNet belongs.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VnetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages Proxmox VE SDN VNet.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_proxmoxve as proxmoxve

        finalizer = proxmoxve.sdn.Applier("finalizer")
        # SDN Zone (Simple) - Basic zone for simple vnets
        example_zone1 = proxmoxve.sdnzone.Simple("exampleZone1",
            zone_id="zone1",
            nodes=["pve"],
            mtu=1500,
            dns="1.1.1.1",
            dns_zone="example.com",
            ipam="pve",
            reverse_dns="1.1.1.1",
            opts = pulumi.ResourceOptions(depends_on=[finalizer]))
        # SDN Zone (Simple) - Second zone for demonstration
        example_zone2 = proxmoxve.sdnzone.Simple("exampleZone2",
            zone_id="zone2",
            nodes=["pve"],
            mtu=1500,
            opts = pulumi.ResourceOptions(depends_on=[finalizer]))
        # Basic VNet (Simple)
        basic_vnet = proxmoxve.sdn.Vnet("basicVnet",
            vnet_id="vnet1",
            zone=example_zone1.zone_id,
            opts = pulumi.ResourceOptions(depends_on=[finalizer]))
        # VNet with Alias and Port Isolation
        isolated_vnet = proxmoxve.sdn.Vnet("isolatedVnet",
            vnet_id="vnet2",
            zone=example_zone2.zone_id,
            alias="Isolated VNet",
            isolate_ports=True,
            vlan_aware=False,
            opts = pulumi.ResourceOptions(depends_on=[finalizer]))
        # SDN Applier for all resources
        vnet_applier = proxmoxve.sdn.Applier("vnetApplier", opts = pulumi.ResourceOptions(depends_on=[
                example_zone1,
                example_zone2,
                basic_vnet,
                isolated_vnet,
            ]))
        ```

        ## Import

        #!/usr/bin/env sh

        SDN vnet can be imported using its unique identifier (vnet ID)

        ```sh
        $ pulumi import proxmoxve:Sdn/vnet:Vnet basic_vnet vnet1
        ```

        ```sh
        $ pulumi import proxmoxve:Sdn/vnet:Vnet isolated_vnet vnet2
        ```

        :param str resource_name: The name of the resource.
        :param VnetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VnetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alias: Optional[pulumi.Input[_builtins.str]] = None,
                 isolate_ports: Optional[pulumi.Input[_builtins.bool]] = None,
                 tag: Optional[pulumi.Input[_builtins.int]] = None,
                 vlan_aware: Optional[pulumi.Input[_builtins.bool]] = None,
                 vnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VnetArgs.__new__(VnetArgs)

            __props__.__dict__["alias"] = alias
            __props__.__dict__["isolate_ports"] = isolate_ports
            __props__.__dict__["tag"] = tag
            __props__.__dict__["vlan_aware"] = vlan_aware
            if vnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'vnet_id'")
            __props__.__dict__["vnet_id"] = vnet_id
            if zone is None and not opts.urn:
                raise TypeError("Missing required property 'zone'")
            __props__.__dict__["zone"] = zone
        super(Vnet, __self__).__init__(
            'proxmoxve:Sdn/vnet:Vnet',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alias: Optional[pulumi.Input[_builtins.str]] = None,
            isolate_ports: Optional[pulumi.Input[_builtins.bool]] = None,
            tag: Optional[pulumi.Input[_builtins.int]] = None,
            vlan_aware: Optional[pulumi.Input[_builtins.bool]] = None,
            vnet_id: Optional[pulumi.Input[_builtins.str]] = None,
            zone: Optional[pulumi.Input[_builtins.str]] = None) -> 'Vnet':
        """
        Get an existing Vnet resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] alias: An optional alias for this VNet.
        :param pulumi.Input[_builtins.bool] isolate_ports: Isolate ports within this VNet.
        :param pulumi.Input[_builtins.int] tag: Tag value for VLAN/VXLAN (can't be used with other zone types).
        :param pulumi.Input[_builtins.bool] vlan_aware: Allow VM VLANs to pass through this VNet.
        :param pulumi.Input[_builtins.str] vnet_id: The unique identifier of the SDN VNet.
        :param pulumi.Input[_builtins.str] zone: The zone to which this VNet belongs.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VnetState.__new__(_VnetState)

        __props__.__dict__["alias"] = alias
        __props__.__dict__["isolate_ports"] = isolate_ports
        __props__.__dict__["tag"] = tag
        __props__.__dict__["vlan_aware"] = vlan_aware
        __props__.__dict__["vnet_id"] = vnet_id
        __props__.__dict__["zone"] = zone
        return Vnet(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def alias(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        An optional alias for this VNet.
        """
        return pulumi.get(self, "alias")

    @_builtins.property
    @pulumi.getter(name="isolatePorts")
    def isolate_ports(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Isolate ports within this VNet.
        """
        return pulumi.get(self, "isolate_ports")

    @_builtins.property
    @pulumi.getter
    def tag(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Tag value for VLAN/VXLAN (can't be used with other zone types).
        """
        return pulumi.get(self, "tag")

    @_builtins.property
    @pulumi.getter(name="vlanAware")
    def vlan_aware(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow VM VLANs to pass through this VNet.
        """
        return pulumi.get(self, "vlan_aware")

    @_builtins.property
    @pulumi.getter(name="vnetId")
    def vnet_id(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier of the SDN VNet.
        """
        return pulumi.get(self, "vnet_id")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> pulumi.Output[_builtins.str]:
        """
        The zone to which this VNet belongs.
        """
        return pulumi.get(self, "zone")


# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetVnetResult',
    'AwaitableGetVnetResult',
    'get_vnet',
    'get_vnet_output',
]

@pulumi.output_type
class GetVnetResult:
    """
    A collection of values returned by getVnet.
    """
    def __init__(__self__, alias=None, id=None, isolate_ports=None, tag=None, vlan_aware=None, zone=None):
        if alias and not isinstance(alias, str):
            raise TypeError("Expected argument 'alias' to be a str")
        pulumi.set(__self__, "alias", alias)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if isolate_ports and not isinstance(isolate_ports, bool):
            raise TypeError("Expected argument 'isolate_ports' to be a bool")
        pulumi.set(__self__, "isolate_ports", isolate_ports)
        if tag and not isinstance(tag, int):
            raise TypeError("Expected argument 'tag' to be a int")
        pulumi.set(__self__, "tag", tag)
        if vlan_aware and not isinstance(vlan_aware, bool):
            raise TypeError("Expected argument 'vlan_aware' to be a bool")
        pulumi.set(__self__, "vlan_aware", vlan_aware)
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter
    def alias(self) -> _builtins.str:
        """
        An optional alias for this VNet.
        """
        return pulumi.get(self, "alias")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The unique identifier of the SDN VNet.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isolatePorts")
    def isolate_ports(self) -> _builtins.bool:
        """
        Isolate ports within this VNet.
        """
        return pulumi.get(self, "isolate_ports")

    @_builtins.property
    @pulumi.getter
    def tag(self) -> _builtins.int:
        """
        Tag value for VLAN/VXLAN (can't be used with other zone types).
        """
        return pulumi.get(self, "tag")

    @_builtins.property
    @pulumi.getter(name="vlanAware")
    def vlan_aware(self) -> _builtins.bool:
        """
        Allow VM VLANs to pass through this VNet.
        """
        return pulumi.get(self, "vlan_aware")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> _builtins.str:
        """
        The zone to which this VNet belongs.
        """
        return pulumi.get(self, "zone")


class AwaitableGetVnetResult(GetVnetResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVnetResult(
            alias=self.alias,
            id=self.id,
            isolate_ports=self.isolate_ports,
            tag=self.tag,
            vlan_aware=self.vlan_aware,
            zone=self.zone)


def get_vnet(id: Optional[_builtins.str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVnetResult:
    """
    Retrieves information about an existing SDN VNet.


    :param _builtins.str id: The unique identifier of the SDN VNet.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('proxmoxve:Sdn/getVnet:getVnet', __args__, opts=opts, typ=GetVnetResult).value

    return AwaitableGetVnetResult(
        alias=pulumi.get(__ret__, 'alias'),
        id=pulumi.get(__ret__, 'id'),
        isolate_ports=pulumi.get(__ret__, 'isolate_ports'),
        tag=pulumi.get(__ret__, 'tag'),
        vlan_aware=pulumi.get(__ret__, 'vlan_aware'),
        zone=pulumi.get(__ret__, 'zone'))
def get_vnet_output(id: Optional[pulumi.Input[_builtins.str]] = None,
                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVnetResult]:
    """
    Retrieves information about an existing SDN VNet.


    :param _builtins.str id: The unique identifier of the SDN VNet.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('proxmoxve:Sdn/getVnet:getVnet', __args__, opts=opts, typ=GetVnetResult)
    return __ret__.apply(lambda __response__: GetVnetResult(
        alias=pulumi.get(__response__, 'alias'),
        id=pulumi.get(__response__, 'id'),
        isolate_ports=pulumi.get(__response__, 'isolate_ports'),
        tag=pulumi.get(__response__, 'tag'),
        vlan_aware=pulumi.get(__response__, 'vlan_aware'),
        zone=pulumi.get(__response__, 'zone')))

# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetZonesResult',
    'AwaitableGetZonesResult',
    'get_zones',
    'get_zones_output',
]

@pulumi.output_type
class GetZonesResult:
    """
    A collection of values returned by getZones.
    """
    def __init__(__self__, id=None, type=None, zones=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if zones and not isinstance(zones, list):
            raise TypeError("Expected argument 'zones' to be a list")
        pulumi.set(__self__, "zones", zones)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Filter zones by type (simple, vlan, qinq, vxlan, evpn).
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def zones(self) -> Sequence['outputs.GetZonesZoneResult']:
        """
        List of SDN zones.
        """
        return pulumi.get(self, "zones")


class AwaitableGetZonesResult(GetZonesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetZonesResult(
            id=self.id,
            type=self.type,
            zones=self.zones)


def get_zones(type: Optional[_builtins.str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetZonesResult:
    """
    Retrieves information about all SDN Zones in Proxmox. This data source can optionally filter zones by type.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_proxmoxve as proxmoxve

    all = proxmoxve.Sdn.get_zones()
    evpn_only = proxmoxve.Sdn.get_zones(type="evpn")
    simple_only = proxmoxve.Sdn.get_zones(type="simple")
    pulumi.export("dataProxmoxVirtualEnvironmentSdnZonesAll", {
        "zones": all.zones,
    })
    pulumi.export("dataProxmoxVirtualEnvironmentSdnZonesFiltered", {
        "evpn_zones": evpn_only.zones,
        "simple_zones": simple_only.zones,
    })
    ```


    :param _builtins.str type: Filter zones by type (simple, vlan, qinq, vxlan, evpn).
    """
    __args__ = dict()
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('proxmoxve:Sdn/getZones:getZones', __args__, opts=opts, typ=GetZonesResult).value

    return AwaitableGetZonesResult(
        id=pulumi.get(__ret__, 'id'),
        type=pulumi.get(__ret__, 'type'),
        zones=pulumi.get(__ret__, 'zones'))
def get_zones_output(type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetZonesResult]:
    """
    Retrieves information about all SDN Zones in Proxmox. This data source can optionally filter zones by type.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_proxmoxve as proxmoxve

    all = proxmoxve.Sdn.get_zones()
    evpn_only = proxmoxve.Sdn.get_zones(type="evpn")
    simple_only = proxmoxve.Sdn.get_zones(type="simple")
    pulumi.export("dataProxmoxVirtualEnvironmentSdnZonesAll", {
        "zones": all.zones,
    })
    pulumi.export("dataProxmoxVirtualEnvironmentSdnZonesFiltered", {
        "evpn_zones": evpn_only.zones,
        "simple_zones": simple_only.zones,
    })
    ```


    :param _builtins.str type: Filter zones by type (simple, vlan, qinq, vxlan, evpn).
    """
    __args__ = dict()
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('proxmoxve:Sdn/getZones:getZones', __args__, opts=opts, typ=GetZonesResult)
    return __ret__.apply(lambda __response__: GetZonesResult(
        id=pulumi.get(__response__, 'id'),
        type=pulumi.get(__response__, 'type'),
        zones=pulumi.get(__response__, 'zones')))

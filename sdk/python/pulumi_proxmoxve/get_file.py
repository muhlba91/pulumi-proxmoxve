# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetFileResult',
    'AwaitableGetFileResult',
    'get_file',
    'get_file_output',
]

@pulumi.output_type
class GetFileResult:
    """
    A collection of values returned by getFile.
    """
    def __init__(__self__, content_type=None, datastore_id=None, file_format=None, file_name=None, file_size=None, id=None, node_name=None, vmid=None):
        if content_type and not isinstance(content_type, str):
            raise TypeError("Expected argument 'content_type' to be a str")
        pulumi.set(__self__, "content_type", content_type)
        if datastore_id and not isinstance(datastore_id, str):
            raise TypeError("Expected argument 'datastore_id' to be a str")
        pulumi.set(__self__, "datastore_id", datastore_id)
        if file_format and not isinstance(file_format, str):
            raise TypeError("Expected argument 'file_format' to be a str")
        pulumi.set(__self__, "file_format", file_format)
        if file_name and not isinstance(file_name, str):
            raise TypeError("Expected argument 'file_name' to be a str")
        pulumi.set(__self__, "file_name", file_name)
        if file_size and not isinstance(file_size, int):
            raise TypeError("Expected argument 'file_size' to be a int")
        pulumi.set(__self__, "file_size", file_size)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if node_name and not isinstance(node_name, str):
            raise TypeError("Expected argument 'node_name' to be a str")
        pulumi.set(__self__, "node_name", node_name)
        if vmid and not isinstance(vmid, int):
            raise TypeError("Expected argument 'vmid' to be a int")
        pulumi.set(__self__, "vmid", vmid)

    @_builtins.property
    @pulumi.getter(name="contentType")
    def content_type(self) -> _builtins.str:
        """
        The content type of the file.
        """
        return pulumi.get(self, "content_type")

    @_builtins.property
    @pulumi.getter(name="datastoreId")
    def datastore_id(self) -> _builtins.str:
        """
        The identifier of the datastore.
        """
        return pulumi.get(self, "datastore_id")

    @_builtins.property
    @pulumi.getter(name="fileFormat")
    def file_format(self) -> _builtins.str:
        """
        The format of the file.
        """
        return pulumi.get(self, "file_format")

    @_builtins.property
    @pulumi.getter(name="fileName")
    def file_name(self) -> _builtins.str:
        """
        The name of the file.
        """
        return pulumi.get(self, "file_name")

    @_builtins.property
    @pulumi.getter(name="fileSize")
    def file_size(self) -> _builtins.int:
        """
        The size of the file in bytes.
        """
        return pulumi.get(self, "file_size")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The unique identifier of the file (volume ID).
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> _builtins.str:
        """
        The name of the node.
        """
        return pulumi.get(self, "node_name")

    @_builtins.property
    @pulumi.getter
    def vmid(self) -> _builtins.int:
        """
        The VM ID associated with the file (if applicable).
        """
        return pulumi.get(self, "vmid")


class AwaitableGetFileResult(GetFileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFileResult(
            content_type=self.content_type,
            datastore_id=self.datastore_id,
            file_format=self.file_format,
            file_name=self.file_name,
            file_size=self.file_size,
            id=self.id,
            node_name=self.node_name,
            vmid=self.vmid)


def get_file(content_type: Optional[_builtins.str] = None,
             datastore_id: Optional[_builtins.str] = None,
             file_name: Optional[_builtins.str] = None,
             node_name: Optional[_builtins.str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFileResult:
    """
    Retrieves information about an existing file in a Proxmox Virtual Environment node.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_proxmoxve as proxmoxve

    ubuntu_iso = proxmoxve.get_file(node_name="pve",
        datastore_id="local",
        content_type="iso",
        file_name="ubuntu-22.04.3-live-server-amd64.iso")
    ubuntu_container_template = proxmoxve.get_file(node_name="pve",
        datastore_id="local",
        content_type="vztmpl",
        file_name="ubuntu-22.04-standard_22.04-1_amd64.tar.zst")
    cloud_init_snippet = proxmoxve.get_file(node_name="pve",
        datastore_id="local",
        content_type="snippets",
        file_name="cloud-init-config.yaml")
    pulumi.export("ubuntuIsoId", ubuntu_iso.id)
    pulumi.export("ubuntuIsoSize", ubuntu_iso.file_size)
    pulumi.export("containerTemplateFormat", ubuntu_container_template.file_format)
    example = proxmoxve.vm.VirtualMachine("example",
        node_name="pve",
        vm_id=100,
        cdrom={
            "file_id": ubuntu_iso.id,
        },
        cpu={
            "cores": 2,
        },
        memory={
            "dedicated": 2048,
        },
        disks=[{
            "datastore_id": "local-lvm",
            "file_format": "qcow2",
            "size": 20,
        }],
        network_devices=[{
            "bridge": "vmbr0",
        }])
    ```


    :param _builtins.str content_type: The content type of the file.
    :param _builtins.str datastore_id: The identifier of the datastore.
    :param _builtins.str file_name: The name of the file.
    :param _builtins.str node_name: The name of the node.
    """
    __args__ = dict()
    __args__['contentType'] = content_type
    __args__['datastoreId'] = datastore_id
    __args__['fileName'] = file_name
    __args__['nodeName'] = node_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('proxmoxve:index/getFile:getFile', __args__, opts=opts, typ=GetFileResult).value

    return AwaitableGetFileResult(
        content_type=pulumi.get(__ret__, 'content_type'),
        datastore_id=pulumi.get(__ret__, 'datastore_id'),
        file_format=pulumi.get(__ret__, 'file_format'),
        file_name=pulumi.get(__ret__, 'file_name'),
        file_size=pulumi.get(__ret__, 'file_size'),
        id=pulumi.get(__ret__, 'id'),
        node_name=pulumi.get(__ret__, 'node_name'),
        vmid=pulumi.get(__ret__, 'vmid'))
def get_file_output(content_type: Optional[pulumi.Input[_builtins.str]] = None,
                    datastore_id: Optional[pulumi.Input[_builtins.str]] = None,
                    file_name: Optional[pulumi.Input[_builtins.str]] = None,
                    node_name: Optional[pulumi.Input[_builtins.str]] = None,
                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetFileResult]:
    """
    Retrieves information about an existing file in a Proxmox Virtual Environment node.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_proxmoxve as proxmoxve

    ubuntu_iso = proxmoxve.get_file(node_name="pve",
        datastore_id="local",
        content_type="iso",
        file_name="ubuntu-22.04.3-live-server-amd64.iso")
    ubuntu_container_template = proxmoxve.get_file(node_name="pve",
        datastore_id="local",
        content_type="vztmpl",
        file_name="ubuntu-22.04-standard_22.04-1_amd64.tar.zst")
    cloud_init_snippet = proxmoxve.get_file(node_name="pve",
        datastore_id="local",
        content_type="snippets",
        file_name="cloud-init-config.yaml")
    pulumi.export("ubuntuIsoId", ubuntu_iso.id)
    pulumi.export("ubuntuIsoSize", ubuntu_iso.file_size)
    pulumi.export("containerTemplateFormat", ubuntu_container_template.file_format)
    example = proxmoxve.vm.VirtualMachine("example",
        node_name="pve",
        vm_id=100,
        cdrom={
            "file_id": ubuntu_iso.id,
        },
        cpu={
            "cores": 2,
        },
        memory={
            "dedicated": 2048,
        },
        disks=[{
            "datastore_id": "local-lvm",
            "file_format": "qcow2",
            "size": 20,
        }],
        network_devices=[{
            "bridge": "vmbr0",
        }])
    ```


    :param _builtins.str content_type: The content type of the file.
    :param _builtins.str datastore_id: The identifier of the datastore.
    :param _builtins.str file_name: The name of the file.
    :param _builtins.str node_name: The name of the node.
    """
    __args__ = dict()
    __args__['contentType'] = content_type
    __args__['datastoreId'] = datastore_id
    __args__['fileName'] = file_name
    __args__['nodeName'] = node_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('proxmoxve:index/getFile:getFile', __args__, opts=opts, typ=GetFileResult)
    return __ret__.apply(lambda __response__: GetFileResult(
        content_type=pulumi.get(__response__, 'content_type'),
        datastore_id=pulumi.get(__response__, 'datastore_id'),
        file_format=pulumi.get(__response__, 'file_format'),
        file_name=pulumi.get(__response__, 'file_name'),
        file_size=pulumi.get(__response__, 'file_size'),
        id=pulumi.get(__response__, 'id'),
        node_name=pulumi.get(__response__, 'node_name'),
        vmid=pulumi.get(__response__, 'vmid')))

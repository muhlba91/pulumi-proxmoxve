# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetQinqResult',
    'AwaitableGetQinqResult',
    'get_qinq',
    'get_qinq_output',
]

@pulumi.output_type
class GetQinqResult:
    """
    A collection of values returned by getQinq.
    """
    def __init__(__self__, bridge=None, dns=None, dns_zone=None, id=None, ipam=None, mtu=None, nodes=None, reverse_dns=None, service_vlan=None, service_vlan_protocol=None):
        if bridge and not isinstance(bridge, str):
            raise TypeError("Expected argument 'bridge' to be a str")
        pulumi.set(__self__, "bridge", bridge)
        if dns and not isinstance(dns, str):
            raise TypeError("Expected argument 'dns' to be a str")
        pulumi.set(__self__, "dns", dns)
        if dns_zone and not isinstance(dns_zone, str):
            raise TypeError("Expected argument 'dns_zone' to be a str")
        pulumi.set(__self__, "dns_zone", dns_zone)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ipam and not isinstance(ipam, str):
            raise TypeError("Expected argument 'ipam' to be a str")
        pulumi.set(__self__, "ipam", ipam)
        if mtu and not isinstance(mtu, int):
            raise TypeError("Expected argument 'mtu' to be a int")
        pulumi.set(__self__, "mtu", mtu)
        if nodes and not isinstance(nodes, list):
            raise TypeError("Expected argument 'nodes' to be a list")
        pulumi.set(__self__, "nodes", nodes)
        if reverse_dns and not isinstance(reverse_dns, str):
            raise TypeError("Expected argument 'reverse_dns' to be a str")
        pulumi.set(__self__, "reverse_dns", reverse_dns)
        if service_vlan and not isinstance(service_vlan, int):
            raise TypeError("Expected argument 'service_vlan' to be a int")
        pulumi.set(__self__, "service_vlan", service_vlan)
        if service_vlan_protocol and not isinstance(service_vlan_protocol, str):
            raise TypeError("Expected argument 'service_vlan_protocol' to be a str")
        pulumi.set(__self__, "service_vlan_protocol", service_vlan_protocol)

    @_builtins.property
    @pulumi.getter
    def bridge(self) -> _builtins.str:
        """
        A local, VLAN-aware bridge that is already configured on each local node
        """
        return pulumi.get(self, "bridge")

    @_builtins.property
    @pulumi.getter
    def dns(self) -> _builtins.str:
        """
        DNS API server address.
        """
        return pulumi.get(self, "dns")

    @_builtins.property
    @pulumi.getter(name="dnsZone")
    def dns_zone(self) -> _builtins.str:
        """
        DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
        """
        return pulumi.get(self, "dns_zone")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The unique identifier of the SDN zone.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def ipam(self) -> _builtins.str:
        """
        IP Address Management system.
        """
        return pulumi.get(self, "ipam")

    @_builtins.property
    @pulumi.getter
    def mtu(self) -> _builtins.int:
        """
        MTU value for the zone.
        """
        return pulumi.get(self, "mtu")

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> Sequence[_builtins.str]:
        """
        The Proxmox nodes which the zone and associated VNets are deployed on
        """
        return pulumi.get(self, "nodes")

    @_builtins.property
    @pulumi.getter(name="reverseDns")
    def reverse_dns(self) -> _builtins.str:
        """
        Reverse DNS API server address.
        """
        return pulumi.get(self, "reverse_dns")

    @_builtins.property
    @pulumi.getter(name="serviceVlan")
    def service_vlan(self) -> _builtins.int:
        """
        Service VLAN tag for QinQ. The tag must be between `1` and `4094`.
        """
        return pulumi.get(self, "service_vlan")

    @_builtins.property
    @pulumi.getter(name="serviceVlanProtocol")
    def service_vlan_protocol(self) -> _builtins.str:
        """
        Service VLAN protocol for QinQ. The protocol must be `802.1ad` or `802.1q`.
        """
        return pulumi.get(self, "service_vlan_protocol")


class AwaitableGetQinqResult(GetQinqResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetQinqResult(
            bridge=self.bridge,
            dns=self.dns,
            dns_zone=self.dns_zone,
            id=self.id,
            ipam=self.ipam,
            mtu=self.mtu,
            nodes=self.nodes,
            reverse_dns=self.reverse_dns,
            service_vlan=self.service_vlan,
            service_vlan_protocol=self.service_vlan_protocol)


def get_qinq(id: Optional[_builtins.str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetQinqResult:
    """
    Retrieves information about a QinQ Zone in Proxmox SDN. QinQ also known as VLAN stacking, that uses multiple layers of VLAN tags for isolation. The QinQ zone defines the outer VLAN tag (the Service VLAN) whereas the inner VLAN tag is defined by the VNet. Your physical network switches must support stacked VLANs for this configuration. Due to the double stacking of tags, you need 4 more bytes for QinQ VLANs. For example, you must reduce the MTU to 1496 if you physical interface MTU is 1500.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_proxmoxve as proxmoxve

    example = proxmoxve.SDNZone.get_qinq(id="qinq1")
    pulumi.export("dataProxmoxVirtualEnvironmentSdnZoneQinq", {
        "id": example.id,
        "nodes": example.nodes,
        "bridge": example.bridge,
        "service_vlan": example.service_vlan,
        "service_vlan_protocol": example.service_vlan_protocol,
        "mtu": example.mtu,
        "dns": example.dns,
        "dns_zone": example.dns_zone,
        "ipam": example.ipam,
        "reverse_dns": example.reverse_dns,
    })
    ```


    :param _builtins.str id: The unique identifier of the SDN zone.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('proxmoxve:SDNZone/getQinq:getQinq', __args__, opts=opts, typ=GetQinqResult).value

    return AwaitableGetQinqResult(
        bridge=pulumi.get(__ret__, 'bridge'),
        dns=pulumi.get(__ret__, 'dns'),
        dns_zone=pulumi.get(__ret__, 'dns_zone'),
        id=pulumi.get(__ret__, 'id'),
        ipam=pulumi.get(__ret__, 'ipam'),
        mtu=pulumi.get(__ret__, 'mtu'),
        nodes=pulumi.get(__ret__, 'nodes'),
        reverse_dns=pulumi.get(__ret__, 'reverse_dns'),
        service_vlan=pulumi.get(__ret__, 'service_vlan'),
        service_vlan_protocol=pulumi.get(__ret__, 'service_vlan_protocol'))
def get_qinq_output(id: Optional[pulumi.Input[_builtins.str]] = None,
                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetQinqResult]:
    """
    Retrieves information about a QinQ Zone in Proxmox SDN. QinQ also known as VLAN stacking, that uses multiple layers of VLAN tags for isolation. The QinQ zone defines the outer VLAN tag (the Service VLAN) whereas the inner VLAN tag is defined by the VNet. Your physical network switches must support stacked VLANs for this configuration. Due to the double stacking of tags, you need 4 more bytes for QinQ VLANs. For example, you must reduce the MTU to 1496 if you physical interface MTU is 1500.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_proxmoxve as proxmoxve

    example = proxmoxve.SDNZone.get_qinq(id="qinq1")
    pulumi.export("dataProxmoxVirtualEnvironmentSdnZoneQinq", {
        "id": example.id,
        "nodes": example.nodes,
        "bridge": example.bridge,
        "service_vlan": example.service_vlan,
        "service_vlan_protocol": example.service_vlan_protocol,
        "mtu": example.mtu,
        "dns": example.dns,
        "dns_zone": example.dns_zone,
        "ipam": example.ipam,
        "reverse_dns": example.reverse_dns,
    })
    ```


    :param _builtins.str id: The unique identifier of the SDN zone.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('proxmoxve:SDNZone/getQinq:getQinq', __args__, opts=opts, typ=GetQinqResult)
    return __ret__.apply(lambda __response__: GetQinqResult(
        bridge=pulumi.get(__response__, 'bridge'),
        dns=pulumi.get(__response__, 'dns'),
        dns_zone=pulumi.get(__response__, 'dns_zone'),
        id=pulumi.get(__response__, 'id'),
        ipam=pulumi.get(__response__, 'ipam'),
        mtu=pulumi.get(__response__, 'mtu'),
        nodes=pulumi.get(__response__, 'nodes'),
        reverse_dns=pulumi.get(__response__, 'reverse_dns'),
        service_vlan=pulumi.get(__response__, 'service_vlan'),
        service_vlan_protocol=pulumi.get(__response__, 'service_vlan_protocol')))

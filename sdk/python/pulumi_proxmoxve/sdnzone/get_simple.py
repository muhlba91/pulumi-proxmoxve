# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetSimpleResult',
    'AwaitableGetSimpleResult',
    'get_simple',
    'get_simple_output',
]

@pulumi.output_type
class GetSimpleResult:
    """
    A collection of values returned by getSimple.
    """
    def __init__(__self__, dns=None, dns_zone=None, id=None, ipam=None, mtu=None, nodes=None, reverse_dns=None):
        if dns and not isinstance(dns, str):
            raise TypeError("Expected argument 'dns' to be a str")
        pulumi.set(__self__, "dns", dns)
        if dns_zone and not isinstance(dns_zone, str):
            raise TypeError("Expected argument 'dns_zone' to be a str")
        pulumi.set(__self__, "dns_zone", dns_zone)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ipam and not isinstance(ipam, str):
            raise TypeError("Expected argument 'ipam' to be a str")
        pulumi.set(__self__, "ipam", ipam)
        if mtu and not isinstance(mtu, int):
            raise TypeError("Expected argument 'mtu' to be a int")
        pulumi.set(__self__, "mtu", mtu)
        if nodes and not isinstance(nodes, list):
            raise TypeError("Expected argument 'nodes' to be a list")
        pulumi.set(__self__, "nodes", nodes)
        if reverse_dns and not isinstance(reverse_dns, str):
            raise TypeError("Expected argument 'reverse_dns' to be a str")
        pulumi.set(__self__, "reverse_dns", reverse_dns)

    @_builtins.property
    @pulumi.getter
    def dns(self) -> _builtins.str:
        """
        DNS API server address.
        """
        return pulumi.get(self, "dns")

    @_builtins.property
    @pulumi.getter(name="dnsZone")
    def dns_zone(self) -> _builtins.str:
        """
        DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
        """
        return pulumi.get(self, "dns_zone")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The unique identifier of the SDN zone.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def ipam(self) -> _builtins.str:
        """
        IP Address Management system.
        """
        return pulumi.get(self, "ipam")

    @_builtins.property
    @pulumi.getter
    def mtu(self) -> _builtins.int:
        """
        MTU value for the zone.
        """
        return pulumi.get(self, "mtu")

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> Sequence[_builtins.str]:
        """
        The Proxmox nodes which the zone and associated VNets are deployed on
        """
        return pulumi.get(self, "nodes")

    @_builtins.property
    @pulumi.getter(name="reverseDns")
    def reverse_dns(self) -> _builtins.str:
        """
        Reverse DNS API server address.
        """
        return pulumi.get(self, "reverse_dns")


class AwaitableGetSimpleResult(GetSimpleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSimpleResult(
            dns=self.dns,
            dns_zone=self.dns_zone,
            id=self.id,
            ipam=self.ipam,
            mtu=self.mtu,
            nodes=self.nodes,
            reverse_dns=self.reverse_dns)


def get_simple(id: Optional[_builtins.str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSimpleResult:
    """
    Retrieves information about a Simple Zone in Proxmox SDN. It will create an isolated VNet bridge. This bridge is not linked to a physical interface, and VM traffic is only local on each the node. It can be used in NAT or routed setups.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_proxmoxve as proxmoxve

    example = proxmoxve.SDNZone.get_simple(id="simple1")
    pulumi.export("dataProxmoxVirtualEnvironmentSdnZoneSimple", {
        "id": example.id,
        "nodes": example.nodes,
        "mtu": example.mtu,
        "dns": example.dns,
        "dns_zone": example.dns_zone,
        "ipam": example.ipam,
        "reverse_dns": example.reverse_dns,
    })
    ```


    :param _builtins.str id: The unique identifier of the SDN zone.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('proxmoxve:SDNZone/getSimple:getSimple', __args__, opts=opts, typ=GetSimpleResult).value

    return AwaitableGetSimpleResult(
        dns=pulumi.get(__ret__, 'dns'),
        dns_zone=pulumi.get(__ret__, 'dns_zone'),
        id=pulumi.get(__ret__, 'id'),
        ipam=pulumi.get(__ret__, 'ipam'),
        mtu=pulumi.get(__ret__, 'mtu'),
        nodes=pulumi.get(__ret__, 'nodes'),
        reverse_dns=pulumi.get(__ret__, 'reverse_dns'))
def get_simple_output(id: Optional[pulumi.Input[_builtins.str]] = None,
                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSimpleResult]:
    """
    Retrieves information about a Simple Zone in Proxmox SDN. It will create an isolated VNet bridge. This bridge is not linked to a physical interface, and VM traffic is only local on each the node. It can be used in NAT or routed setups.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_proxmoxve as proxmoxve

    example = proxmoxve.SDNZone.get_simple(id="simple1")
    pulumi.export("dataProxmoxVirtualEnvironmentSdnZoneSimple", {
        "id": example.id,
        "nodes": example.nodes,
        "mtu": example.mtu,
        "dns": example.dns,
        "dns_zone": example.dns_zone,
        "ipam": example.ipam,
        "reverse_dns": example.reverse_dns,
    })
    ```


    :param _builtins.str id: The unique identifier of the SDN zone.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('proxmoxve:SDNZone/getSimple:getSimple', __args__, opts=opts, typ=GetSimpleResult)
    return __ret__.apply(lambda __response__: GetSimpleResult(
        dns=pulumi.get(__response__, 'dns'),
        dns_zone=pulumi.get(__response__, 'dns_zone'),
        id=pulumi.get(__response__, 'id'),
        ipam=pulumi.get(__response__, 'ipam'),
        mtu=pulumi.get(__response__, 'mtu'),
        nodes=pulumi.get(__response__, 'nodes'),
        reverse_dns=pulumi.get(__response__, 'reverse_dns')))

# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['EvpnArgs', 'Evpn']

@pulumi.input_type
class EvpnArgs:
    def __init__(__self__, *,
                 controller: pulumi.Input[_builtins.str],
                 nodes: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 vrf_vxlan: pulumi.Input[_builtins.int],
                 zone_id: pulumi.Input[_builtins.str],
                 advertise_subnets: Optional[pulumi.Input[_builtins.bool]] = None,
                 disable_arp_nd_suppression: Optional[pulumi.Input[_builtins.bool]] = None,
                 dns: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 exit_nodes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 exit_nodes_local_routing: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipam: Optional[pulumi.Input[_builtins.str]] = None,
                 mtu: Optional[pulumi.Input[_builtins.int]] = None,
                 primary_exit_node: Optional[pulumi.Input[_builtins.str]] = None,
                 reverse_dns: Optional[pulumi.Input[_builtins.str]] = None,
                 rt_import: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Evpn resource.
        :param pulumi.Input[_builtins.str] controller: EVPN controller address.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] nodes: The Proxmox nodes which the zone and associated VNets should be deployed on
        :param pulumi.Input[_builtins.int] vrf_vxlan: VRF VXLAN-ID used for dedicated routing interconnect between VNets. It must be different than the VXLAN-ID of the VNets.
        :param pulumi.Input[_builtins.str] zone_id: The unique identifier of the SDN zone.
        :param pulumi.Input[_builtins.bool] advertise_subnets: Enable subnet advertisement for EVPN.
        :param pulumi.Input[_builtins.bool] disable_arp_nd_suppression: Disable ARP/ND suppression for EVPN.
        :param pulumi.Input[_builtins.str] dns: DNS API server address.
        :param pulumi.Input[_builtins.str] dns_zone: DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] exit_nodes: List of exit nodes for EVPN.
        :param pulumi.Input[_builtins.bool] exit_nodes_local_routing: Enable local routing for EVPN exit nodes.
        :param pulumi.Input[_builtins.str] ipam: IP Address Management system.
        :param pulumi.Input[_builtins.int] mtu: MTU value for the zone.
        :param pulumi.Input[_builtins.str] primary_exit_node: Primary exit node for EVPN.
        :param pulumi.Input[_builtins.str] reverse_dns: Reverse DNS API server address.
        :param pulumi.Input[_builtins.str] rt_import: Route target import for EVPN.
        """
        pulumi.set(__self__, "controller", controller)
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "vrf_vxlan", vrf_vxlan)
        pulumi.set(__self__, "zone_id", zone_id)
        if advertise_subnets is not None:
            pulumi.set(__self__, "advertise_subnets", advertise_subnets)
        if disable_arp_nd_suppression is not None:
            pulumi.set(__self__, "disable_arp_nd_suppression", disable_arp_nd_suppression)
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if dns_zone is not None:
            pulumi.set(__self__, "dns_zone", dns_zone)
        if exit_nodes is not None:
            pulumi.set(__self__, "exit_nodes", exit_nodes)
        if exit_nodes_local_routing is not None:
            pulumi.set(__self__, "exit_nodes_local_routing", exit_nodes_local_routing)
        if ipam is not None:
            pulumi.set(__self__, "ipam", ipam)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if primary_exit_node is not None:
            pulumi.set(__self__, "primary_exit_node", primary_exit_node)
        if reverse_dns is not None:
            pulumi.set(__self__, "reverse_dns", reverse_dns)
        if rt_import is not None:
            pulumi.set(__self__, "rt_import", rt_import)

    @_builtins.property
    @pulumi.getter
    def controller(self) -> pulumi.Input[_builtins.str]:
        """
        EVPN controller address.
        """
        return pulumi.get(self, "controller")

    @controller.setter
    def controller(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "controller", value)

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        The Proxmox nodes which the zone and associated VNets should be deployed on
        """
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "nodes", value)

    @_builtins.property
    @pulumi.getter(name="vrfVxlan")
    def vrf_vxlan(self) -> pulumi.Input[_builtins.int]:
        """
        VRF VXLAN-ID used for dedicated routing interconnect between VNets. It must be different than the VXLAN-ID of the VNets.
        """
        return pulumi.get(self, "vrf_vxlan")

    @vrf_vxlan.setter
    def vrf_vxlan(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "vrf_vxlan", value)

    @_builtins.property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Input[_builtins.str]:
        """
        The unique identifier of the SDN zone.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "zone_id", value)

    @_builtins.property
    @pulumi.getter(name="advertiseSubnets")
    def advertise_subnets(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable subnet advertisement for EVPN.
        """
        return pulumi.get(self, "advertise_subnets")

    @advertise_subnets.setter
    def advertise_subnets(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "advertise_subnets", value)

    @_builtins.property
    @pulumi.getter(name="disableArpNdSuppression")
    def disable_arp_nd_suppression(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Disable ARP/ND suppression for EVPN.
        """
        return pulumi.get(self, "disable_arp_nd_suppression")

    @disable_arp_nd_suppression.setter
    def disable_arp_nd_suppression(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disable_arp_nd_suppression", value)

    @_builtins.property
    @pulumi.getter
    def dns(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        DNS API server address.
        """
        return pulumi.get(self, "dns")

    @dns.setter
    def dns(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns", value)

    @_builtins.property
    @pulumi.getter(name="dnsZone")
    def dns_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
        """
        return pulumi.get(self, "dns_zone")

    @dns_zone.setter
    def dns_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns_zone", value)

    @_builtins.property
    @pulumi.getter(name="exitNodes")
    def exit_nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of exit nodes for EVPN.
        """
        return pulumi.get(self, "exit_nodes")

    @exit_nodes.setter
    def exit_nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "exit_nodes", value)

    @_builtins.property
    @pulumi.getter(name="exitNodesLocalRouting")
    def exit_nodes_local_routing(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable local routing for EVPN exit nodes.
        """
        return pulumi.get(self, "exit_nodes_local_routing")

    @exit_nodes_local_routing.setter
    def exit_nodes_local_routing(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "exit_nodes_local_routing", value)

    @_builtins.property
    @pulumi.getter
    def ipam(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP Address Management system.
        """
        return pulumi.get(self, "ipam")

    @ipam.setter
    def ipam(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipam", value)

    @_builtins.property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        MTU value for the zone.
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "mtu", value)

    @_builtins.property
    @pulumi.getter(name="primaryExitNode")
    def primary_exit_node(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Primary exit node for EVPN.
        """
        return pulumi.get(self, "primary_exit_node")

    @primary_exit_node.setter
    def primary_exit_node(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "primary_exit_node", value)

    @_builtins.property
    @pulumi.getter(name="reverseDns")
    def reverse_dns(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Reverse DNS API server address.
        """
        return pulumi.get(self, "reverse_dns")

    @reverse_dns.setter
    def reverse_dns(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "reverse_dns", value)

    @_builtins.property
    @pulumi.getter(name="rtImport")
    def rt_import(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Route target import for EVPN.
        """
        return pulumi.get(self, "rt_import")

    @rt_import.setter
    def rt_import(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rt_import", value)


@pulumi.input_type
class _EvpnState:
    def __init__(__self__, *,
                 advertise_subnets: Optional[pulumi.Input[_builtins.bool]] = None,
                 controller: Optional[pulumi.Input[_builtins.str]] = None,
                 disable_arp_nd_suppression: Optional[pulumi.Input[_builtins.bool]] = None,
                 dns: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 exit_nodes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 exit_nodes_local_routing: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipam: Optional[pulumi.Input[_builtins.str]] = None,
                 mtu: Optional[pulumi.Input[_builtins.int]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pending: Optional[pulumi.Input[_builtins.bool]] = None,
                 primary_exit_node: Optional[pulumi.Input[_builtins.str]] = None,
                 reverse_dns: Optional[pulumi.Input[_builtins.str]] = None,
                 rt_import: Optional[pulumi.Input[_builtins.str]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None,
                 vrf_vxlan: Optional[pulumi.Input[_builtins.int]] = None,
                 zone_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Evpn resources.
        :param pulumi.Input[_builtins.bool] advertise_subnets: Enable subnet advertisement for EVPN.
        :param pulumi.Input[_builtins.str] controller: EVPN controller address.
        :param pulumi.Input[_builtins.bool] disable_arp_nd_suppression: Disable ARP/ND suppression for EVPN.
        :param pulumi.Input[_builtins.str] dns: DNS API server address.
        :param pulumi.Input[_builtins.str] dns_zone: DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] exit_nodes: List of exit nodes for EVPN.
        :param pulumi.Input[_builtins.bool] exit_nodes_local_routing: Enable local routing for EVPN exit nodes.
        :param pulumi.Input[_builtins.str] ipam: IP Address Management system.
        :param pulumi.Input[_builtins.int] mtu: MTU value for the zone.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] nodes: The Proxmox nodes which the zone and associated VNets should be deployed on
        :param pulumi.Input[_builtins.bool] pending: Indicates if the zone has pending configuration changes that need to be applied.
        :param pulumi.Input[_builtins.str] primary_exit_node: Primary exit node for EVPN.
        :param pulumi.Input[_builtins.str] reverse_dns: Reverse DNS API server address.
        :param pulumi.Input[_builtins.str] rt_import: Route target import for EVPN.
        :param pulumi.Input[_builtins.str] state: Indicates the current state of the zone.
        :param pulumi.Input[_builtins.int] vrf_vxlan: VRF VXLAN-ID used for dedicated routing interconnect between VNets. It must be different than the VXLAN-ID of the VNets.
        :param pulumi.Input[_builtins.str] zone_id: The unique identifier of the SDN zone.
        """
        if advertise_subnets is not None:
            pulumi.set(__self__, "advertise_subnets", advertise_subnets)
        if controller is not None:
            pulumi.set(__self__, "controller", controller)
        if disable_arp_nd_suppression is not None:
            pulumi.set(__self__, "disable_arp_nd_suppression", disable_arp_nd_suppression)
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if dns_zone is not None:
            pulumi.set(__self__, "dns_zone", dns_zone)
        if exit_nodes is not None:
            pulumi.set(__self__, "exit_nodes", exit_nodes)
        if exit_nodes_local_routing is not None:
            pulumi.set(__self__, "exit_nodes_local_routing", exit_nodes_local_routing)
        if ipam is not None:
            pulumi.set(__self__, "ipam", ipam)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)
        if pending is not None:
            pulumi.set(__self__, "pending", pending)
        if primary_exit_node is not None:
            pulumi.set(__self__, "primary_exit_node", primary_exit_node)
        if reverse_dns is not None:
            pulumi.set(__self__, "reverse_dns", reverse_dns)
        if rt_import is not None:
            pulumi.set(__self__, "rt_import", rt_import)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if vrf_vxlan is not None:
            pulumi.set(__self__, "vrf_vxlan", vrf_vxlan)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @_builtins.property
    @pulumi.getter(name="advertiseSubnets")
    def advertise_subnets(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable subnet advertisement for EVPN.
        """
        return pulumi.get(self, "advertise_subnets")

    @advertise_subnets.setter
    def advertise_subnets(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "advertise_subnets", value)

    @_builtins.property
    @pulumi.getter
    def controller(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        EVPN controller address.
        """
        return pulumi.get(self, "controller")

    @controller.setter
    def controller(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "controller", value)

    @_builtins.property
    @pulumi.getter(name="disableArpNdSuppression")
    def disable_arp_nd_suppression(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Disable ARP/ND suppression for EVPN.
        """
        return pulumi.get(self, "disable_arp_nd_suppression")

    @disable_arp_nd_suppression.setter
    def disable_arp_nd_suppression(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disable_arp_nd_suppression", value)

    @_builtins.property
    @pulumi.getter
    def dns(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        DNS API server address.
        """
        return pulumi.get(self, "dns")

    @dns.setter
    def dns(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns", value)

    @_builtins.property
    @pulumi.getter(name="dnsZone")
    def dns_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
        """
        return pulumi.get(self, "dns_zone")

    @dns_zone.setter
    def dns_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns_zone", value)

    @_builtins.property
    @pulumi.getter(name="exitNodes")
    def exit_nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of exit nodes for EVPN.
        """
        return pulumi.get(self, "exit_nodes")

    @exit_nodes.setter
    def exit_nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "exit_nodes", value)

    @_builtins.property
    @pulumi.getter(name="exitNodesLocalRouting")
    def exit_nodes_local_routing(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable local routing for EVPN exit nodes.
        """
        return pulumi.get(self, "exit_nodes_local_routing")

    @exit_nodes_local_routing.setter
    def exit_nodes_local_routing(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "exit_nodes_local_routing", value)

    @_builtins.property
    @pulumi.getter
    def ipam(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP Address Management system.
        """
        return pulumi.get(self, "ipam")

    @ipam.setter
    def ipam(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipam", value)

    @_builtins.property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        MTU value for the zone.
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "mtu", value)

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The Proxmox nodes which the zone and associated VNets should be deployed on
        """
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "nodes", value)

    @_builtins.property
    @pulumi.getter
    def pending(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if the zone has pending configuration changes that need to be applied.
        """
        return pulumi.get(self, "pending")

    @pending.setter
    def pending(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pending", value)

    @_builtins.property
    @pulumi.getter(name="primaryExitNode")
    def primary_exit_node(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Primary exit node for EVPN.
        """
        return pulumi.get(self, "primary_exit_node")

    @primary_exit_node.setter
    def primary_exit_node(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "primary_exit_node", value)

    @_builtins.property
    @pulumi.getter(name="reverseDns")
    def reverse_dns(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Reverse DNS API server address.
        """
        return pulumi.get(self, "reverse_dns")

    @reverse_dns.setter
    def reverse_dns(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "reverse_dns", value)

    @_builtins.property
    @pulumi.getter(name="rtImport")
    def rt_import(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Route target import for EVPN.
        """
        return pulumi.get(self, "rt_import")

    @rt_import.setter
    def rt_import(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rt_import", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the current state of the zone.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "state", value)

    @_builtins.property
    @pulumi.getter(name="vrfVxlan")
    def vrf_vxlan(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        VRF VXLAN-ID used for dedicated routing interconnect between VNets. It must be different than the VXLAN-ID of the VNets.
        """
        return pulumi.get(self, "vrf_vxlan")

    @vrf_vxlan.setter
    def vrf_vxlan(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vrf_vxlan", value)

    @_builtins.property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier of the SDN zone.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zone_id", value)


@pulumi.type_token("proxmoxve:SDNZone/evpn:Evpn")
class Evpn(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 advertise_subnets: Optional[pulumi.Input[_builtins.bool]] = None,
                 controller: Optional[pulumi.Input[_builtins.str]] = None,
                 disable_arp_nd_suppression: Optional[pulumi.Input[_builtins.bool]] = None,
                 dns: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 exit_nodes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 exit_nodes_local_routing: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipam: Optional[pulumi.Input[_builtins.str]] = None,
                 mtu: Optional[pulumi.Input[_builtins.int]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 primary_exit_node: Optional[pulumi.Input[_builtins.str]] = None,
                 reverse_dns: Optional[pulumi.Input[_builtins.str]] = None,
                 rt_import: Optional[pulumi.Input[_builtins.str]] = None,
                 vrf_vxlan: Optional[pulumi.Input[_builtins.int]] = None,
                 zone_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        EVPN Zone in Proxmox SDN. The EVPN zone creates a routable Layer 3 network, capable of spanning across multiple clusters.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_proxmoxve as proxmoxve

        example = proxmoxve.sdnzone.Evpn("example",
            advertise_subnets=True,
            controller="evpn-controller1",
            disable_arp_nd_suppression=False,
            dns="1.1.1.1",
            dns_zone="example.com",
            exit_nodes=[
                "pve-exit1",
                "pve-exit2",
            ],
            exit_nodes_local_routing=True,
            zone_id="evpn1",
            ipam="pve",
            mtu=1450,
            nodes=["pve"],
            primary_exit_node="pve-exit1",
            reverse_dns="1.1.1.1",
            rt_import="65000:65000",
            vrf_vxlan=4000)
        ```

        ## Import

        #!/usr/bin/env sh

        EVPN SDN zone can be imported using its unique identifier (zone ID)

        ```sh
        $ pulumi import proxmoxve:SDNZone/evpn:Evpn example evpn1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] advertise_subnets: Enable subnet advertisement for EVPN.
        :param pulumi.Input[_builtins.str] controller: EVPN controller address.
        :param pulumi.Input[_builtins.bool] disable_arp_nd_suppression: Disable ARP/ND suppression for EVPN.
        :param pulumi.Input[_builtins.str] dns: DNS API server address.
        :param pulumi.Input[_builtins.str] dns_zone: DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] exit_nodes: List of exit nodes for EVPN.
        :param pulumi.Input[_builtins.bool] exit_nodes_local_routing: Enable local routing for EVPN exit nodes.
        :param pulumi.Input[_builtins.str] ipam: IP Address Management system.
        :param pulumi.Input[_builtins.int] mtu: MTU value for the zone.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] nodes: The Proxmox nodes which the zone and associated VNets should be deployed on
        :param pulumi.Input[_builtins.str] primary_exit_node: Primary exit node for EVPN.
        :param pulumi.Input[_builtins.str] reverse_dns: Reverse DNS API server address.
        :param pulumi.Input[_builtins.str] rt_import: Route target import for EVPN.
        :param pulumi.Input[_builtins.int] vrf_vxlan: VRF VXLAN-ID used for dedicated routing interconnect between VNets. It must be different than the VXLAN-ID of the VNets.
        :param pulumi.Input[_builtins.str] zone_id: The unique identifier of the SDN zone.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EvpnArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        EVPN Zone in Proxmox SDN. The EVPN zone creates a routable Layer 3 network, capable of spanning across multiple clusters.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_proxmoxve as proxmoxve

        example = proxmoxve.sdnzone.Evpn("example",
            advertise_subnets=True,
            controller="evpn-controller1",
            disable_arp_nd_suppression=False,
            dns="1.1.1.1",
            dns_zone="example.com",
            exit_nodes=[
                "pve-exit1",
                "pve-exit2",
            ],
            exit_nodes_local_routing=True,
            zone_id="evpn1",
            ipam="pve",
            mtu=1450,
            nodes=["pve"],
            primary_exit_node="pve-exit1",
            reverse_dns="1.1.1.1",
            rt_import="65000:65000",
            vrf_vxlan=4000)
        ```

        ## Import

        #!/usr/bin/env sh

        EVPN SDN zone can be imported using its unique identifier (zone ID)

        ```sh
        $ pulumi import proxmoxve:SDNZone/evpn:Evpn example evpn1
        ```

        :param str resource_name: The name of the resource.
        :param EvpnArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EvpnArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 advertise_subnets: Optional[pulumi.Input[_builtins.bool]] = None,
                 controller: Optional[pulumi.Input[_builtins.str]] = None,
                 disable_arp_nd_suppression: Optional[pulumi.Input[_builtins.bool]] = None,
                 dns: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 exit_nodes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 exit_nodes_local_routing: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipam: Optional[pulumi.Input[_builtins.str]] = None,
                 mtu: Optional[pulumi.Input[_builtins.int]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 primary_exit_node: Optional[pulumi.Input[_builtins.str]] = None,
                 reverse_dns: Optional[pulumi.Input[_builtins.str]] = None,
                 rt_import: Optional[pulumi.Input[_builtins.str]] = None,
                 vrf_vxlan: Optional[pulumi.Input[_builtins.int]] = None,
                 zone_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EvpnArgs.__new__(EvpnArgs)

            __props__.__dict__["advertise_subnets"] = advertise_subnets
            if controller is None and not opts.urn:
                raise TypeError("Missing required property 'controller'")
            __props__.__dict__["controller"] = controller
            __props__.__dict__["disable_arp_nd_suppression"] = disable_arp_nd_suppression
            __props__.__dict__["dns"] = dns
            __props__.__dict__["dns_zone"] = dns_zone
            __props__.__dict__["exit_nodes"] = exit_nodes
            __props__.__dict__["exit_nodes_local_routing"] = exit_nodes_local_routing
            __props__.__dict__["ipam"] = ipam
            __props__.__dict__["mtu"] = mtu
            if nodes is None and not opts.urn:
                raise TypeError("Missing required property 'nodes'")
            __props__.__dict__["nodes"] = nodes
            __props__.__dict__["primary_exit_node"] = primary_exit_node
            __props__.__dict__["reverse_dns"] = reverse_dns
            __props__.__dict__["rt_import"] = rt_import
            if vrf_vxlan is None and not opts.urn:
                raise TypeError("Missing required property 'vrf_vxlan'")
            __props__.__dict__["vrf_vxlan"] = vrf_vxlan
            if zone_id is None and not opts.urn:
                raise TypeError("Missing required property 'zone_id'")
            __props__.__dict__["zone_id"] = zone_id
            __props__.__dict__["pending"] = None
            __props__.__dict__["state"] = None
        super(Evpn, __self__).__init__(
            'proxmoxve:SDNZone/evpn:Evpn',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            advertise_subnets: Optional[pulumi.Input[_builtins.bool]] = None,
            controller: Optional[pulumi.Input[_builtins.str]] = None,
            disable_arp_nd_suppression: Optional[pulumi.Input[_builtins.bool]] = None,
            dns: Optional[pulumi.Input[_builtins.str]] = None,
            dns_zone: Optional[pulumi.Input[_builtins.str]] = None,
            exit_nodes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            exit_nodes_local_routing: Optional[pulumi.Input[_builtins.bool]] = None,
            ipam: Optional[pulumi.Input[_builtins.str]] = None,
            mtu: Optional[pulumi.Input[_builtins.int]] = None,
            nodes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            pending: Optional[pulumi.Input[_builtins.bool]] = None,
            primary_exit_node: Optional[pulumi.Input[_builtins.str]] = None,
            reverse_dns: Optional[pulumi.Input[_builtins.str]] = None,
            rt_import: Optional[pulumi.Input[_builtins.str]] = None,
            state: Optional[pulumi.Input[_builtins.str]] = None,
            vrf_vxlan: Optional[pulumi.Input[_builtins.int]] = None,
            zone_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'Evpn':
        """
        Get an existing Evpn resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] advertise_subnets: Enable subnet advertisement for EVPN.
        :param pulumi.Input[_builtins.str] controller: EVPN controller address.
        :param pulumi.Input[_builtins.bool] disable_arp_nd_suppression: Disable ARP/ND suppression for EVPN.
        :param pulumi.Input[_builtins.str] dns: DNS API server address.
        :param pulumi.Input[_builtins.str] dns_zone: DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] exit_nodes: List of exit nodes for EVPN.
        :param pulumi.Input[_builtins.bool] exit_nodes_local_routing: Enable local routing for EVPN exit nodes.
        :param pulumi.Input[_builtins.str] ipam: IP Address Management system.
        :param pulumi.Input[_builtins.int] mtu: MTU value for the zone.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] nodes: The Proxmox nodes which the zone and associated VNets should be deployed on
        :param pulumi.Input[_builtins.bool] pending: Indicates if the zone has pending configuration changes that need to be applied.
        :param pulumi.Input[_builtins.str] primary_exit_node: Primary exit node for EVPN.
        :param pulumi.Input[_builtins.str] reverse_dns: Reverse DNS API server address.
        :param pulumi.Input[_builtins.str] rt_import: Route target import for EVPN.
        :param pulumi.Input[_builtins.str] state: Indicates the current state of the zone.
        :param pulumi.Input[_builtins.int] vrf_vxlan: VRF VXLAN-ID used for dedicated routing interconnect between VNets. It must be different than the VXLAN-ID of the VNets.
        :param pulumi.Input[_builtins.str] zone_id: The unique identifier of the SDN zone.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EvpnState.__new__(_EvpnState)

        __props__.__dict__["advertise_subnets"] = advertise_subnets
        __props__.__dict__["controller"] = controller
        __props__.__dict__["disable_arp_nd_suppression"] = disable_arp_nd_suppression
        __props__.__dict__["dns"] = dns
        __props__.__dict__["dns_zone"] = dns_zone
        __props__.__dict__["exit_nodes"] = exit_nodes
        __props__.__dict__["exit_nodes_local_routing"] = exit_nodes_local_routing
        __props__.__dict__["ipam"] = ipam
        __props__.__dict__["mtu"] = mtu
        __props__.__dict__["nodes"] = nodes
        __props__.__dict__["pending"] = pending
        __props__.__dict__["primary_exit_node"] = primary_exit_node
        __props__.__dict__["reverse_dns"] = reverse_dns
        __props__.__dict__["rt_import"] = rt_import
        __props__.__dict__["state"] = state
        __props__.__dict__["vrf_vxlan"] = vrf_vxlan
        __props__.__dict__["zone_id"] = zone_id
        return Evpn(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="advertiseSubnets")
    def advertise_subnets(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Enable subnet advertisement for EVPN.
        """
        return pulumi.get(self, "advertise_subnets")

    @_builtins.property
    @pulumi.getter
    def controller(self) -> pulumi.Output[_builtins.str]:
        """
        EVPN controller address.
        """
        return pulumi.get(self, "controller")

    @_builtins.property
    @pulumi.getter(name="disableArpNdSuppression")
    def disable_arp_nd_suppression(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Disable ARP/ND suppression for EVPN.
        """
        return pulumi.get(self, "disable_arp_nd_suppression")

    @_builtins.property
    @pulumi.getter
    def dns(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        DNS API server address.
        """
        return pulumi.get(self, "dns")

    @_builtins.property
    @pulumi.getter(name="dnsZone")
    def dns_zone(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
        """
        return pulumi.get(self, "dns_zone")

    @_builtins.property
    @pulumi.getter(name="exitNodes")
    def exit_nodes(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of exit nodes for EVPN.
        """
        return pulumi.get(self, "exit_nodes")

    @_builtins.property
    @pulumi.getter(name="exitNodesLocalRouting")
    def exit_nodes_local_routing(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Enable local routing for EVPN exit nodes.
        """
        return pulumi.get(self, "exit_nodes_local_routing")

    @_builtins.property
    @pulumi.getter
    def ipam(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        IP Address Management system.
        """
        return pulumi.get(self, "ipam")

    @_builtins.property
    @pulumi.getter
    def mtu(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        MTU value for the zone.
        """
        return pulumi.get(self, "mtu")

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The Proxmox nodes which the zone and associated VNets should be deployed on
        """
        return pulumi.get(self, "nodes")

    @_builtins.property
    @pulumi.getter
    def pending(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates if the zone has pending configuration changes that need to be applied.
        """
        return pulumi.get(self, "pending")

    @_builtins.property
    @pulumi.getter(name="primaryExitNode")
    def primary_exit_node(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Primary exit node for EVPN.
        """
        return pulumi.get(self, "primary_exit_node")

    @_builtins.property
    @pulumi.getter(name="reverseDns")
    def reverse_dns(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Reverse DNS API server address.
        """
        return pulumi.get(self, "reverse_dns")

    @_builtins.property
    @pulumi.getter(name="rtImport")
    def rt_import(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Route target import for EVPN.
        """
        return pulumi.get(self, "rt_import")

    @_builtins.property
    @pulumi.getter
    def state(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the current state of the zone.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="vrfVxlan")
    def vrf_vxlan(self) -> pulumi.Output[_builtins.int]:
        """
        VRF VXLAN-ID used for dedicated routing interconnect between VNets. It must be different than the VXLAN-ID of the VNets.
        """
        return pulumi.get(self, "vrf_vxlan")

    @_builtins.property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier of the SDN zone.
        """
        return pulumi.get(self, "zone_id")


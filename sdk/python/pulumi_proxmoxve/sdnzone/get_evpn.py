# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetEvpnResult',
    'AwaitableGetEvpnResult',
    'get_evpn',
    'get_evpn_output',
]

@pulumi.output_type
class GetEvpnResult:
    """
    A collection of values returned by getEvpn.
    """
    def __init__(__self__, advertise_subnets=None, controller=None, disable_arp_nd_suppression=None, dns=None, dns_zone=None, exit_nodes=None, exit_nodes_local_routing=None, id=None, ipam=None, mtu=None, nodes=None, primary_exit_node=None, reverse_dns=None, rt_import=None, vrf_vxlan=None):
        if advertise_subnets and not isinstance(advertise_subnets, bool):
            raise TypeError("Expected argument 'advertise_subnets' to be a bool")
        pulumi.set(__self__, "advertise_subnets", advertise_subnets)
        if controller and not isinstance(controller, str):
            raise TypeError("Expected argument 'controller' to be a str")
        pulumi.set(__self__, "controller", controller)
        if disable_arp_nd_suppression and not isinstance(disable_arp_nd_suppression, bool):
            raise TypeError("Expected argument 'disable_arp_nd_suppression' to be a bool")
        pulumi.set(__self__, "disable_arp_nd_suppression", disable_arp_nd_suppression)
        if dns and not isinstance(dns, str):
            raise TypeError("Expected argument 'dns' to be a str")
        pulumi.set(__self__, "dns", dns)
        if dns_zone and not isinstance(dns_zone, str):
            raise TypeError("Expected argument 'dns_zone' to be a str")
        pulumi.set(__self__, "dns_zone", dns_zone)
        if exit_nodes and not isinstance(exit_nodes, list):
            raise TypeError("Expected argument 'exit_nodes' to be a list")
        pulumi.set(__self__, "exit_nodes", exit_nodes)
        if exit_nodes_local_routing and not isinstance(exit_nodes_local_routing, bool):
            raise TypeError("Expected argument 'exit_nodes_local_routing' to be a bool")
        pulumi.set(__self__, "exit_nodes_local_routing", exit_nodes_local_routing)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ipam and not isinstance(ipam, str):
            raise TypeError("Expected argument 'ipam' to be a str")
        pulumi.set(__self__, "ipam", ipam)
        if mtu and not isinstance(mtu, int):
            raise TypeError("Expected argument 'mtu' to be a int")
        pulumi.set(__self__, "mtu", mtu)
        if nodes and not isinstance(nodes, list):
            raise TypeError("Expected argument 'nodes' to be a list")
        pulumi.set(__self__, "nodes", nodes)
        if primary_exit_node and not isinstance(primary_exit_node, str):
            raise TypeError("Expected argument 'primary_exit_node' to be a str")
        pulumi.set(__self__, "primary_exit_node", primary_exit_node)
        if reverse_dns and not isinstance(reverse_dns, str):
            raise TypeError("Expected argument 'reverse_dns' to be a str")
        pulumi.set(__self__, "reverse_dns", reverse_dns)
        if rt_import and not isinstance(rt_import, str):
            raise TypeError("Expected argument 'rt_import' to be a str")
        pulumi.set(__self__, "rt_import", rt_import)
        if vrf_vxlan and not isinstance(vrf_vxlan, int):
            raise TypeError("Expected argument 'vrf_vxlan' to be a int")
        pulumi.set(__self__, "vrf_vxlan", vrf_vxlan)

    @_builtins.property
    @pulumi.getter(name="advertiseSubnets")
    def advertise_subnets(self) -> _builtins.bool:
        """
        Enable subnet advertisement for EVPN.
        """
        return pulumi.get(self, "advertise_subnets")

    @_builtins.property
    @pulumi.getter
    def controller(self) -> _builtins.str:
        """
        EVPN controller address.
        """
        return pulumi.get(self, "controller")

    @_builtins.property
    @pulumi.getter(name="disableArpNdSuppression")
    def disable_arp_nd_suppression(self) -> _builtins.bool:
        """
        Disable ARP/ND suppression for EVPN.
        """
        return pulumi.get(self, "disable_arp_nd_suppression")

    @_builtins.property
    @pulumi.getter
    def dns(self) -> _builtins.str:
        """
        DNS API server address.
        """
        return pulumi.get(self, "dns")

    @_builtins.property
    @pulumi.getter(name="dnsZone")
    def dns_zone(self) -> _builtins.str:
        """
        DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
        """
        return pulumi.get(self, "dns_zone")

    @_builtins.property
    @pulumi.getter(name="exitNodes")
    def exit_nodes(self) -> Sequence[_builtins.str]:
        """
        List of exit nodes for EVPN.
        """
        return pulumi.get(self, "exit_nodes")

    @_builtins.property
    @pulumi.getter(name="exitNodesLocalRouting")
    def exit_nodes_local_routing(self) -> _builtins.bool:
        """
        Enable local routing for EVPN exit nodes.
        """
        return pulumi.get(self, "exit_nodes_local_routing")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The unique identifier of the SDN zone.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def ipam(self) -> _builtins.str:
        """
        IP Address Management system.
        """
        return pulumi.get(self, "ipam")

    @_builtins.property
    @pulumi.getter
    def mtu(self) -> _builtins.int:
        """
        MTU value for the zone.
        """
        return pulumi.get(self, "mtu")

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> Sequence[_builtins.str]:
        """
        The Proxmox nodes which the zone and associated VNets are deployed on
        """
        return pulumi.get(self, "nodes")

    @_builtins.property
    @pulumi.getter(name="primaryExitNode")
    def primary_exit_node(self) -> _builtins.str:
        """
        Primary exit node for EVPN.
        """
        return pulumi.get(self, "primary_exit_node")

    @_builtins.property
    @pulumi.getter(name="reverseDns")
    def reverse_dns(self) -> _builtins.str:
        """
        Reverse DNS API server address.
        """
        return pulumi.get(self, "reverse_dns")

    @_builtins.property
    @pulumi.getter(name="rtImport")
    def rt_import(self) -> _builtins.str:
        """
        Route target import for EVPN. Must be in the format '\\n\\n:\\n\\n' (e.g., '65000:65000').
        """
        return pulumi.get(self, "rt_import")

    @_builtins.property
    @pulumi.getter(name="vrfVxlan")
    def vrf_vxlan(self) -> _builtins.int:
        """
        VRF VXLAN-ID used for dedicated routing interconnect between VNets. It must be different than the VXLAN-ID of the VNets.
        """
        return pulumi.get(self, "vrf_vxlan")


class AwaitableGetEvpnResult(GetEvpnResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEvpnResult(
            advertise_subnets=self.advertise_subnets,
            controller=self.controller,
            disable_arp_nd_suppression=self.disable_arp_nd_suppression,
            dns=self.dns,
            dns_zone=self.dns_zone,
            exit_nodes=self.exit_nodes,
            exit_nodes_local_routing=self.exit_nodes_local_routing,
            id=self.id,
            ipam=self.ipam,
            mtu=self.mtu,
            nodes=self.nodes,
            primary_exit_node=self.primary_exit_node,
            reverse_dns=self.reverse_dns,
            rt_import=self.rt_import,
            vrf_vxlan=self.vrf_vxlan)


def get_evpn(id: Optional[_builtins.str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEvpnResult:
    """
    Retrieves information about an EVPN Zone in Proxmox SDN. The EVPN zone creates a routable Layer 3 network, capable of spanning across multiple clusters.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_proxmoxve as proxmoxve

    example = proxmoxve.SDNZone.get_evpn(id="evpn1")
    pulumi.export("dataProxmoxVirtualEnvironmentSdnZoneEvpn", {
        "id": example.id,
        "nodes": example.nodes,
        "controller": example.controller,
        "vrf_vxlan": example.vrf_vxlan,
        "advertise_subnets": example.advertise_subnets,
        "disable_arp_nd_suppression": example.disable_arp_nd_suppression,
        "exit_nodes": example.exit_nodes,
        "exit_nodes_local_routing": example.exit_nodes_local_routing,
        "primary_exit_node": example.primary_exit_node,
        "rt_import": example.rt_import,
        "mtu": example.mtu,
        "dns": example.dns,
        "dns_zone": example.dns_zone,
        "ipam": example.ipam,
        "reverse_dns": example.reverse_dns,
    })
    ```


    :param _builtins.str id: The unique identifier of the SDN zone.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('proxmoxve:SDNZone/getEvpn:getEvpn', __args__, opts=opts, typ=GetEvpnResult).value

    return AwaitableGetEvpnResult(
        advertise_subnets=pulumi.get(__ret__, 'advertise_subnets'),
        controller=pulumi.get(__ret__, 'controller'),
        disable_arp_nd_suppression=pulumi.get(__ret__, 'disable_arp_nd_suppression'),
        dns=pulumi.get(__ret__, 'dns'),
        dns_zone=pulumi.get(__ret__, 'dns_zone'),
        exit_nodes=pulumi.get(__ret__, 'exit_nodes'),
        exit_nodes_local_routing=pulumi.get(__ret__, 'exit_nodes_local_routing'),
        id=pulumi.get(__ret__, 'id'),
        ipam=pulumi.get(__ret__, 'ipam'),
        mtu=pulumi.get(__ret__, 'mtu'),
        nodes=pulumi.get(__ret__, 'nodes'),
        primary_exit_node=pulumi.get(__ret__, 'primary_exit_node'),
        reverse_dns=pulumi.get(__ret__, 'reverse_dns'),
        rt_import=pulumi.get(__ret__, 'rt_import'),
        vrf_vxlan=pulumi.get(__ret__, 'vrf_vxlan'))
def get_evpn_output(id: Optional[pulumi.Input[_builtins.str]] = None,
                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEvpnResult]:
    """
    Retrieves information about an EVPN Zone in Proxmox SDN. The EVPN zone creates a routable Layer 3 network, capable of spanning across multiple clusters.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_proxmoxve as proxmoxve

    example = proxmoxve.SDNZone.get_evpn(id="evpn1")
    pulumi.export("dataProxmoxVirtualEnvironmentSdnZoneEvpn", {
        "id": example.id,
        "nodes": example.nodes,
        "controller": example.controller,
        "vrf_vxlan": example.vrf_vxlan,
        "advertise_subnets": example.advertise_subnets,
        "disable_arp_nd_suppression": example.disable_arp_nd_suppression,
        "exit_nodes": example.exit_nodes,
        "exit_nodes_local_routing": example.exit_nodes_local_routing,
        "primary_exit_node": example.primary_exit_node,
        "rt_import": example.rt_import,
        "mtu": example.mtu,
        "dns": example.dns,
        "dns_zone": example.dns_zone,
        "ipam": example.ipam,
        "reverse_dns": example.reverse_dns,
    })
    ```


    :param _builtins.str id: The unique identifier of the SDN zone.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('proxmoxve:SDNZone/getEvpn:getEvpn', __args__, opts=opts, typ=GetEvpnResult)
    return __ret__.apply(lambda __response__: GetEvpnResult(
        advertise_subnets=pulumi.get(__response__, 'advertise_subnets'),
        controller=pulumi.get(__response__, 'controller'),
        disable_arp_nd_suppression=pulumi.get(__response__, 'disable_arp_nd_suppression'),
        dns=pulumi.get(__response__, 'dns'),
        dns_zone=pulumi.get(__response__, 'dns_zone'),
        exit_nodes=pulumi.get(__response__, 'exit_nodes'),
        exit_nodes_local_routing=pulumi.get(__response__, 'exit_nodes_local_routing'),
        id=pulumi.get(__response__, 'id'),
        ipam=pulumi.get(__response__, 'ipam'),
        mtu=pulumi.get(__response__, 'mtu'),
        nodes=pulumi.get(__response__, 'nodes'),
        primary_exit_node=pulumi.get(__response__, 'primary_exit_node'),
        reverse_dns=pulumi.get(__response__, 'reverse_dns'),
        rt_import=pulumi.get(__response__, 'rt_import'),
        vrf_vxlan=pulumi.get(__response__, 'vrf_vxlan')))

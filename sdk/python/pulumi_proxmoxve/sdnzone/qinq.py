# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['QinqArgs', 'Qinq']

@pulumi.input_type
class QinqArgs:
    def __init__(__self__, *,
                 bridge: pulumi.Input[_builtins.str],
                 nodes: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 service_vlan: pulumi.Input[_builtins.int],
                 zone_id: pulumi.Input[_builtins.str],
                 dns: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 ipam: Optional[pulumi.Input[_builtins.str]] = None,
                 mtu: Optional[pulumi.Input[_builtins.int]] = None,
                 reverse_dns: Optional[pulumi.Input[_builtins.str]] = None,
                 service_vlan_protocol: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Qinq resource.
        :param pulumi.Input[_builtins.str] bridge: A local, VLAN-aware bridge that is already configured on each local node
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] nodes: The Proxmox nodes which the zone and associated VNets should be deployed on
        :param pulumi.Input[_builtins.int] service_vlan: Service VLAN tag for QinQ. The tag must be between `1` and `4094`.
        :param pulumi.Input[_builtins.str] zone_id: The unique identifier of the SDN zone.
        :param pulumi.Input[_builtins.str] dns: DNS API server address.
        :param pulumi.Input[_builtins.str] dns_zone: DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
        :param pulumi.Input[_builtins.str] ipam: IP Address Management system.
        :param pulumi.Input[_builtins.int] mtu: MTU value for the zone.
        :param pulumi.Input[_builtins.str] reverse_dns: Reverse DNS API server address.
        :param pulumi.Input[_builtins.str] service_vlan_protocol: Service VLAN protocol for QinQ. The protocol must be `802.1ad` or `802.1q`.
        """
        pulumi.set(__self__, "bridge", bridge)
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "service_vlan", service_vlan)
        pulumi.set(__self__, "zone_id", zone_id)
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if dns_zone is not None:
            pulumi.set(__self__, "dns_zone", dns_zone)
        if ipam is not None:
            pulumi.set(__self__, "ipam", ipam)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if reverse_dns is not None:
            pulumi.set(__self__, "reverse_dns", reverse_dns)
        if service_vlan_protocol is not None:
            pulumi.set(__self__, "service_vlan_protocol", service_vlan_protocol)

    @_builtins.property
    @pulumi.getter
    def bridge(self) -> pulumi.Input[_builtins.str]:
        """
        A local, VLAN-aware bridge that is already configured on each local node
        """
        return pulumi.get(self, "bridge")

    @bridge.setter
    def bridge(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "bridge", value)

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        The Proxmox nodes which the zone and associated VNets should be deployed on
        """
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "nodes", value)

    @_builtins.property
    @pulumi.getter(name="serviceVlan")
    def service_vlan(self) -> pulumi.Input[_builtins.int]:
        """
        Service VLAN tag for QinQ. The tag must be between `1` and `4094`.
        """
        return pulumi.get(self, "service_vlan")

    @service_vlan.setter
    def service_vlan(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "service_vlan", value)

    @_builtins.property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Input[_builtins.str]:
        """
        The unique identifier of the SDN zone.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "zone_id", value)

    @_builtins.property
    @pulumi.getter
    def dns(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        DNS API server address.
        """
        return pulumi.get(self, "dns")

    @dns.setter
    def dns(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns", value)

    @_builtins.property
    @pulumi.getter(name="dnsZone")
    def dns_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
        """
        return pulumi.get(self, "dns_zone")

    @dns_zone.setter
    def dns_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns_zone", value)

    @_builtins.property
    @pulumi.getter
    def ipam(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP Address Management system.
        """
        return pulumi.get(self, "ipam")

    @ipam.setter
    def ipam(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipam", value)

    @_builtins.property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        MTU value for the zone.
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "mtu", value)

    @_builtins.property
    @pulumi.getter(name="reverseDns")
    def reverse_dns(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Reverse DNS API server address.
        """
        return pulumi.get(self, "reverse_dns")

    @reverse_dns.setter
    def reverse_dns(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "reverse_dns", value)

    @_builtins.property
    @pulumi.getter(name="serviceVlanProtocol")
    def service_vlan_protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Service VLAN protocol for QinQ. The protocol must be `802.1ad` or `802.1q`.
        """
        return pulumi.get(self, "service_vlan_protocol")

    @service_vlan_protocol.setter
    def service_vlan_protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_vlan_protocol", value)


@pulumi.input_type
class _QinqState:
    def __init__(__self__, *,
                 bridge: Optional[pulumi.Input[_builtins.str]] = None,
                 dns: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 ipam: Optional[pulumi.Input[_builtins.str]] = None,
                 mtu: Optional[pulumi.Input[_builtins.int]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pending: Optional[pulumi.Input[_builtins.bool]] = None,
                 reverse_dns: Optional[pulumi.Input[_builtins.str]] = None,
                 service_vlan: Optional[pulumi.Input[_builtins.int]] = None,
                 service_vlan_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None,
                 zone_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Qinq resources.
        :param pulumi.Input[_builtins.str] bridge: A local, VLAN-aware bridge that is already configured on each local node
        :param pulumi.Input[_builtins.str] dns: DNS API server address.
        :param pulumi.Input[_builtins.str] dns_zone: DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
        :param pulumi.Input[_builtins.str] ipam: IP Address Management system.
        :param pulumi.Input[_builtins.int] mtu: MTU value for the zone.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] nodes: The Proxmox nodes which the zone and associated VNets should be deployed on
        :param pulumi.Input[_builtins.bool] pending: Indicates if the zone has pending configuration changes that need to be applied.
        :param pulumi.Input[_builtins.str] reverse_dns: Reverse DNS API server address.
        :param pulumi.Input[_builtins.int] service_vlan: Service VLAN tag for QinQ. The tag must be between `1` and `4094`.
        :param pulumi.Input[_builtins.str] service_vlan_protocol: Service VLAN protocol for QinQ. The protocol must be `802.1ad` or `802.1q`.
        :param pulumi.Input[_builtins.str] state: Indicates the current state of the zone.
        :param pulumi.Input[_builtins.str] zone_id: The unique identifier of the SDN zone.
        """
        if bridge is not None:
            pulumi.set(__self__, "bridge", bridge)
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if dns_zone is not None:
            pulumi.set(__self__, "dns_zone", dns_zone)
        if ipam is not None:
            pulumi.set(__self__, "ipam", ipam)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)
        if pending is not None:
            pulumi.set(__self__, "pending", pending)
        if reverse_dns is not None:
            pulumi.set(__self__, "reverse_dns", reverse_dns)
        if service_vlan is not None:
            pulumi.set(__self__, "service_vlan", service_vlan)
        if service_vlan_protocol is not None:
            pulumi.set(__self__, "service_vlan_protocol", service_vlan_protocol)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @_builtins.property
    @pulumi.getter
    def bridge(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A local, VLAN-aware bridge that is already configured on each local node
        """
        return pulumi.get(self, "bridge")

    @bridge.setter
    def bridge(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bridge", value)

    @_builtins.property
    @pulumi.getter
    def dns(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        DNS API server address.
        """
        return pulumi.get(self, "dns")

    @dns.setter
    def dns(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns", value)

    @_builtins.property
    @pulumi.getter(name="dnsZone")
    def dns_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
        """
        return pulumi.get(self, "dns_zone")

    @dns_zone.setter
    def dns_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns_zone", value)

    @_builtins.property
    @pulumi.getter
    def ipam(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP Address Management system.
        """
        return pulumi.get(self, "ipam")

    @ipam.setter
    def ipam(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipam", value)

    @_builtins.property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        MTU value for the zone.
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "mtu", value)

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The Proxmox nodes which the zone and associated VNets should be deployed on
        """
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "nodes", value)

    @_builtins.property
    @pulumi.getter
    def pending(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if the zone has pending configuration changes that need to be applied.
        """
        return pulumi.get(self, "pending")

    @pending.setter
    def pending(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pending", value)

    @_builtins.property
    @pulumi.getter(name="reverseDns")
    def reverse_dns(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Reverse DNS API server address.
        """
        return pulumi.get(self, "reverse_dns")

    @reverse_dns.setter
    def reverse_dns(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "reverse_dns", value)

    @_builtins.property
    @pulumi.getter(name="serviceVlan")
    def service_vlan(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Service VLAN tag for QinQ. The tag must be between `1` and `4094`.
        """
        return pulumi.get(self, "service_vlan")

    @service_vlan.setter
    def service_vlan(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "service_vlan", value)

    @_builtins.property
    @pulumi.getter(name="serviceVlanProtocol")
    def service_vlan_protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Service VLAN protocol for QinQ. The protocol must be `802.1ad` or `802.1q`.
        """
        return pulumi.get(self, "service_vlan_protocol")

    @service_vlan_protocol.setter
    def service_vlan_protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_vlan_protocol", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the current state of the zone.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "state", value)

    @_builtins.property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier of the SDN zone.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zone_id", value)


@pulumi.type_token("proxmoxve:SDNZone/qinq:Qinq")
class Qinq(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bridge: Optional[pulumi.Input[_builtins.str]] = None,
                 dns: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 ipam: Optional[pulumi.Input[_builtins.str]] = None,
                 mtu: Optional[pulumi.Input[_builtins.int]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 reverse_dns: Optional[pulumi.Input[_builtins.str]] = None,
                 service_vlan: Optional[pulumi.Input[_builtins.int]] = None,
                 service_vlan_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 zone_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        QinQ Zone in Proxmox SDN. QinQ also known as VLAN stacking, that uses multiple layers of VLAN tags for isolation. The QinQ zone defines the outer VLAN tag (the Service VLAN) whereas the inner VLAN tag is defined by the VNet. Your physical network switches must support stacked VLANs for this configuration. Due to the double stacking of tags, you need 4 more bytes for QinQ VLANs. For example, you must reduce the MTU to 1496 if you physical interface MTU is 1500.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_proxmoxve as proxmoxve

        example = proxmoxve.sdnzone.Qinq("example",
            bridge="vmbr0",
            dns="1.1.1.1",
            dns_zone="example.com",
            zone_id="qinq1",
            ipam="pve",
            mtu=1496,
            nodes=["pve"],
            reverse_dns="1.1.1.1",
            service_vlan=100,
            service_vlan_protocol="802.1ad")
        ```

        ## Import

        #!/usr/bin/env sh

        QinQ SDN zone can be imported using its unique identifier (zone ID)

        ```sh
        $ pulumi import proxmoxve:SDNZone/qinq:Qinq example qinq1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] bridge: A local, VLAN-aware bridge that is already configured on each local node
        :param pulumi.Input[_builtins.str] dns: DNS API server address.
        :param pulumi.Input[_builtins.str] dns_zone: DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
        :param pulumi.Input[_builtins.str] ipam: IP Address Management system.
        :param pulumi.Input[_builtins.int] mtu: MTU value for the zone.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] nodes: The Proxmox nodes which the zone and associated VNets should be deployed on
        :param pulumi.Input[_builtins.str] reverse_dns: Reverse DNS API server address.
        :param pulumi.Input[_builtins.int] service_vlan: Service VLAN tag for QinQ. The tag must be between `1` and `4094`.
        :param pulumi.Input[_builtins.str] service_vlan_protocol: Service VLAN protocol for QinQ. The protocol must be `802.1ad` or `802.1q`.
        :param pulumi.Input[_builtins.str] zone_id: The unique identifier of the SDN zone.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: QinqArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        QinQ Zone in Proxmox SDN. QinQ also known as VLAN stacking, that uses multiple layers of VLAN tags for isolation. The QinQ zone defines the outer VLAN tag (the Service VLAN) whereas the inner VLAN tag is defined by the VNet. Your physical network switches must support stacked VLANs for this configuration. Due to the double stacking of tags, you need 4 more bytes for QinQ VLANs. For example, you must reduce the MTU to 1496 if you physical interface MTU is 1500.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_proxmoxve as proxmoxve

        example = proxmoxve.sdnzone.Qinq("example",
            bridge="vmbr0",
            dns="1.1.1.1",
            dns_zone="example.com",
            zone_id="qinq1",
            ipam="pve",
            mtu=1496,
            nodes=["pve"],
            reverse_dns="1.1.1.1",
            service_vlan=100,
            service_vlan_protocol="802.1ad")
        ```

        ## Import

        #!/usr/bin/env sh

        QinQ SDN zone can be imported using its unique identifier (zone ID)

        ```sh
        $ pulumi import proxmoxve:SDNZone/qinq:Qinq example qinq1
        ```

        :param str resource_name: The name of the resource.
        :param QinqArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(QinqArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bridge: Optional[pulumi.Input[_builtins.str]] = None,
                 dns: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 ipam: Optional[pulumi.Input[_builtins.str]] = None,
                 mtu: Optional[pulumi.Input[_builtins.int]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 reverse_dns: Optional[pulumi.Input[_builtins.str]] = None,
                 service_vlan: Optional[pulumi.Input[_builtins.int]] = None,
                 service_vlan_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 zone_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = QinqArgs.__new__(QinqArgs)

            if bridge is None and not opts.urn:
                raise TypeError("Missing required property 'bridge'")
            __props__.__dict__["bridge"] = bridge
            __props__.__dict__["dns"] = dns
            __props__.__dict__["dns_zone"] = dns_zone
            __props__.__dict__["ipam"] = ipam
            __props__.__dict__["mtu"] = mtu
            if nodes is None and not opts.urn:
                raise TypeError("Missing required property 'nodes'")
            __props__.__dict__["nodes"] = nodes
            __props__.__dict__["reverse_dns"] = reverse_dns
            if service_vlan is None and not opts.urn:
                raise TypeError("Missing required property 'service_vlan'")
            __props__.__dict__["service_vlan"] = service_vlan
            __props__.__dict__["service_vlan_protocol"] = service_vlan_protocol
            if zone_id is None and not opts.urn:
                raise TypeError("Missing required property 'zone_id'")
            __props__.__dict__["zone_id"] = zone_id
            __props__.__dict__["pending"] = None
            __props__.__dict__["state"] = None
        super(Qinq, __self__).__init__(
            'proxmoxve:SDNZone/qinq:Qinq',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bridge: Optional[pulumi.Input[_builtins.str]] = None,
            dns: Optional[pulumi.Input[_builtins.str]] = None,
            dns_zone: Optional[pulumi.Input[_builtins.str]] = None,
            ipam: Optional[pulumi.Input[_builtins.str]] = None,
            mtu: Optional[pulumi.Input[_builtins.int]] = None,
            nodes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            pending: Optional[pulumi.Input[_builtins.bool]] = None,
            reverse_dns: Optional[pulumi.Input[_builtins.str]] = None,
            service_vlan: Optional[pulumi.Input[_builtins.int]] = None,
            service_vlan_protocol: Optional[pulumi.Input[_builtins.str]] = None,
            state: Optional[pulumi.Input[_builtins.str]] = None,
            zone_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'Qinq':
        """
        Get an existing Qinq resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] bridge: A local, VLAN-aware bridge that is already configured on each local node
        :param pulumi.Input[_builtins.str] dns: DNS API server address.
        :param pulumi.Input[_builtins.str] dns_zone: DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
        :param pulumi.Input[_builtins.str] ipam: IP Address Management system.
        :param pulumi.Input[_builtins.int] mtu: MTU value for the zone.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] nodes: The Proxmox nodes which the zone and associated VNets should be deployed on
        :param pulumi.Input[_builtins.bool] pending: Indicates if the zone has pending configuration changes that need to be applied.
        :param pulumi.Input[_builtins.str] reverse_dns: Reverse DNS API server address.
        :param pulumi.Input[_builtins.int] service_vlan: Service VLAN tag for QinQ. The tag must be between `1` and `4094`.
        :param pulumi.Input[_builtins.str] service_vlan_protocol: Service VLAN protocol for QinQ. The protocol must be `802.1ad` or `802.1q`.
        :param pulumi.Input[_builtins.str] state: Indicates the current state of the zone.
        :param pulumi.Input[_builtins.str] zone_id: The unique identifier of the SDN zone.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _QinqState.__new__(_QinqState)

        __props__.__dict__["bridge"] = bridge
        __props__.__dict__["dns"] = dns
        __props__.__dict__["dns_zone"] = dns_zone
        __props__.__dict__["ipam"] = ipam
        __props__.__dict__["mtu"] = mtu
        __props__.__dict__["nodes"] = nodes
        __props__.__dict__["pending"] = pending
        __props__.__dict__["reverse_dns"] = reverse_dns
        __props__.__dict__["service_vlan"] = service_vlan
        __props__.__dict__["service_vlan_protocol"] = service_vlan_protocol
        __props__.__dict__["state"] = state
        __props__.__dict__["zone_id"] = zone_id
        return Qinq(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def bridge(self) -> pulumi.Output[_builtins.str]:
        """
        A local, VLAN-aware bridge that is already configured on each local node
        """
        return pulumi.get(self, "bridge")

    @_builtins.property
    @pulumi.getter
    def dns(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        DNS API server address.
        """
        return pulumi.get(self, "dns")

    @_builtins.property
    @pulumi.getter(name="dnsZone")
    def dns_zone(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
        """
        return pulumi.get(self, "dns_zone")

    @_builtins.property
    @pulumi.getter
    def ipam(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        IP Address Management system.
        """
        return pulumi.get(self, "ipam")

    @_builtins.property
    @pulumi.getter
    def mtu(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        MTU value for the zone.
        """
        return pulumi.get(self, "mtu")

    @_builtins.property
    @pulumi.getter
    def nodes(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The Proxmox nodes which the zone and associated VNets should be deployed on
        """
        return pulumi.get(self, "nodes")

    @_builtins.property
    @pulumi.getter
    def pending(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates if the zone has pending configuration changes that need to be applied.
        """
        return pulumi.get(self, "pending")

    @_builtins.property
    @pulumi.getter(name="reverseDns")
    def reverse_dns(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Reverse DNS API server address.
        """
        return pulumi.get(self, "reverse_dns")

    @_builtins.property
    @pulumi.getter(name="serviceVlan")
    def service_vlan(self) -> pulumi.Output[_builtins.int]:
        """
        Service VLAN tag for QinQ. The tag must be between `1` and `4094`.
        """
        return pulumi.get(self, "service_vlan")

    @_builtins.property
    @pulumi.getter(name="serviceVlanProtocol")
    def service_vlan_protocol(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Service VLAN protocol for QinQ. The protocol must be `802.1ad` or `802.1q`.
        """
        return pulumi.get(self, "service_vlan_protocol")

    @_builtins.property
    @pulumi.getter
    def state(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the current state of the zone.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier of the SDN zone.
        """
        return pulumi.get(self, "zone_id")


# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ContainerArgs', 'Container']

@pulumi.input_type
class ContainerArgs:
    def __init__(__self__, *,
                 node_name: pulumi.Input[str],
                 clone: Optional[pulumi.Input['ContainerCloneArgs']] = None,
                 console: Optional[pulumi.Input['ContainerConsoleArgs']] = None,
                 cpu: Optional[pulumi.Input['ContainerCpuArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device_passthroughs: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerDevicePassthroughArgs']]]] = None,
                 disk: Optional[pulumi.Input['ContainerDiskArgs']] = None,
                 features: Optional[pulumi.Input['ContainerFeaturesArgs']] = None,
                 hook_script_file_id: Optional[pulumi.Input[str]] = None,
                 initialization: Optional[pulumi.Input['ContainerInitializationArgs']] = None,
                 memory: Optional[pulumi.Input['ContainerMemoryArgs']] = None,
                 mount_points: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerMountPointArgs']]]] = None,
                 network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerNetworkInterfaceArgs']]]] = None,
                 operating_system: Optional[pulumi.Input['ContainerOperatingSystemArgs']] = None,
                 pool_id: Optional[pulumi.Input[str]] = None,
                 protection: Optional[pulumi.Input[bool]] = None,
                 start_on_boot: Optional[pulumi.Input[bool]] = None,
                 started: Optional[pulumi.Input[bool]] = None,
                 startup: Optional[pulumi.Input['ContainerStartupArgs']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 template: Optional[pulumi.Input[bool]] = None,
                 timeout_clone: Optional[pulumi.Input[int]] = None,
                 timeout_create: Optional[pulumi.Input[int]] = None,
                 timeout_delete: Optional[pulumi.Input[int]] = None,
                 timeout_start: Optional[pulumi.Input[int]] = None,
                 timeout_update: Optional[pulumi.Input[int]] = None,
                 unprivileged: Optional[pulumi.Input[bool]] = None,
                 vm_id: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Container resource.
        :param pulumi.Input[str] node_name: The name of the node to assign the container to.
        :param pulumi.Input['ContainerCloneArgs'] clone: The cloning configuration.
        :param pulumi.Input['ContainerConsoleArgs'] console: The console configuration.
        :param pulumi.Input['ContainerCpuArgs'] cpu: The CPU configuration.
        :param pulumi.Input[str] description: The description.
        :param pulumi.Input[Sequence[pulumi.Input['ContainerDevicePassthroughArgs']]] device_passthroughs: Device to pass through to the container (multiple blocks supported).
        :param pulumi.Input['ContainerDiskArgs'] disk: The disk configuration.
        :param pulumi.Input['ContainerFeaturesArgs'] features: The container feature flags. Changing flags (except nesting) is only allowed for `root@pam` authenticated user.
        :param pulumi.Input[str] hook_script_file_id: The identifier for a file containing a hook script (needs to be executable, e.g. by using the `proxmox_virtual_environment_file.file_mode` attribute).
        :param pulumi.Input['ContainerInitializationArgs'] initialization: The initialization configuration.
        :param pulumi.Input['ContainerMemoryArgs'] memory: The memory configuration.
        :param pulumi.Input[Sequence[pulumi.Input['ContainerMountPointArgs']]] mount_points: A mount point
        :param pulumi.Input[Sequence[pulumi.Input['ContainerNetworkInterfaceArgs']]] network_interfaces: A network interface (multiple blocks
               supported).
        :param pulumi.Input['ContainerOperatingSystemArgs'] operating_system: The Operating System configuration.
        :param pulumi.Input[str] pool_id: The identifier for a pool to assign the container to.
        :param pulumi.Input[bool] protection: Whether to set the protection flag of the container (defaults to `false`). This will prevent the container itself and its disk for remove/update operations.
        :param pulumi.Input[bool] start_on_boot: Automatically start container when the host
               system boots (defaults to `true`).
        :param pulumi.Input[bool] started: Whether to start the container (defaults to `true`).
        :param pulumi.Input['ContainerStartupArgs'] startup: Defines startup and shutdown behavior of the container.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: A list of tags the container tags. This is only meta
               information (defaults to `[]`). Note: Proxmox always sorts the container tags and set them to lowercase.
               If tag contains capital letters, then Proxmox will always report a
               difference on the resource. You may use the `ignore_changes` lifecycle
               meta-argument to ignore changes to this attribute.
        :param pulumi.Input[bool] template: Whether to create a template (defaults to `false`).
        :param pulumi.Input[int] timeout_clone: Timeout for cloning a container in seconds (defaults to 1800).
        :param pulumi.Input[int] timeout_create: Timeout for creating a container in seconds (defaults to 1800).
        :param pulumi.Input[int] timeout_delete: Timeout for deleting a container in seconds (defaults to 60).
        :param pulumi.Input[int] timeout_start: Start container timeout
        :param pulumi.Input[int] timeout_update: Timeout for updating a container in seconds (defaults to 1800).
        :param pulumi.Input[bool] unprivileged: Whether the container runs as unprivileged on
               the host (defaults to `false`).
        :param pulumi.Input[int] vm_id: The container identifier
        """
        pulumi.set(__self__, "node_name", node_name)
        if clone is not None:
            pulumi.set(__self__, "clone", clone)
        if console is not None:
            pulumi.set(__self__, "console", console)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device_passthroughs is not None:
            pulumi.set(__self__, "device_passthroughs", device_passthroughs)
        if disk is not None:
            pulumi.set(__self__, "disk", disk)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if hook_script_file_id is not None:
            pulumi.set(__self__, "hook_script_file_id", hook_script_file_id)
        if initialization is not None:
            pulumi.set(__self__, "initialization", initialization)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if mount_points is not None:
            pulumi.set(__self__, "mount_points", mount_points)
        if network_interfaces is not None:
            pulumi.set(__self__, "network_interfaces", network_interfaces)
        if operating_system is not None:
            pulumi.set(__self__, "operating_system", operating_system)
        if pool_id is not None:
            pulumi.set(__self__, "pool_id", pool_id)
        if protection is not None:
            pulumi.set(__self__, "protection", protection)
        if start_on_boot is not None:
            pulumi.set(__self__, "start_on_boot", start_on_boot)
        if started is not None:
            pulumi.set(__self__, "started", started)
        if startup is not None:
            pulumi.set(__self__, "startup", startup)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if timeout_clone is not None:
            pulumi.set(__self__, "timeout_clone", timeout_clone)
        if timeout_create is not None:
            pulumi.set(__self__, "timeout_create", timeout_create)
        if timeout_delete is not None:
            pulumi.set(__self__, "timeout_delete", timeout_delete)
        if timeout_start is not None:
            warnings.warn("""This field is deprecated and will be removed in a future release. An overall operation timeout (`timeout_create` / `timeout_clone`) is used instead.""", DeprecationWarning)
            pulumi.log.warn("""timeout_start is deprecated: This field is deprecated and will be removed in a future release. An overall operation timeout (`timeout_create` / `timeout_clone`) is used instead.""")
        if timeout_start is not None:
            pulumi.set(__self__, "timeout_start", timeout_start)
        if timeout_update is not None:
            pulumi.set(__self__, "timeout_update", timeout_update)
        if unprivileged is not None:
            pulumi.set(__self__, "unprivileged", unprivileged)
        if vm_id is not None:
            pulumi.set(__self__, "vm_id", vm_id)

    @property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> pulumi.Input[str]:
        """
        The name of the node to assign the container to.
        """
        return pulumi.get(self, "node_name")

    @node_name.setter
    def node_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "node_name", value)

    @property
    @pulumi.getter
    def clone(self) -> Optional[pulumi.Input['ContainerCloneArgs']]:
        """
        The cloning configuration.
        """
        return pulumi.get(self, "clone")

    @clone.setter
    def clone(self, value: Optional[pulumi.Input['ContainerCloneArgs']]):
        pulumi.set(self, "clone", value)

    @property
    @pulumi.getter
    def console(self) -> Optional[pulumi.Input['ContainerConsoleArgs']]:
        """
        The console configuration.
        """
        return pulumi.get(self, "console")

    @console.setter
    def console(self, value: Optional[pulumi.Input['ContainerConsoleArgs']]):
        pulumi.set(self, "console", value)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input['ContainerCpuArgs']]:
        """
        The CPU configuration.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input['ContainerCpuArgs']]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="devicePassthroughs")
    def device_passthroughs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerDevicePassthroughArgs']]]]:
        """
        Device to pass through to the container (multiple blocks supported).
        """
        return pulumi.get(self, "device_passthroughs")

    @device_passthroughs.setter
    def device_passthroughs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerDevicePassthroughArgs']]]]):
        pulumi.set(self, "device_passthroughs", value)

    @property
    @pulumi.getter
    def disk(self) -> Optional[pulumi.Input['ContainerDiskArgs']]:
        """
        The disk configuration.
        """
        return pulumi.get(self, "disk")

    @disk.setter
    def disk(self, value: Optional[pulumi.Input['ContainerDiskArgs']]):
        pulumi.set(self, "disk", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input['ContainerFeaturesArgs']]:
        """
        The container feature flags. Changing flags (except nesting) is only allowed for `root@pam` authenticated user.
        """
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input['ContainerFeaturesArgs']]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter(name="hookScriptFileId")
    def hook_script_file_id(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for a file containing a hook script (needs to be executable, e.g. by using the `proxmox_virtual_environment_file.file_mode` attribute).
        """
        return pulumi.get(self, "hook_script_file_id")

    @hook_script_file_id.setter
    def hook_script_file_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hook_script_file_id", value)

    @property
    @pulumi.getter
    def initialization(self) -> Optional[pulumi.Input['ContainerInitializationArgs']]:
        """
        The initialization configuration.
        """
        return pulumi.get(self, "initialization")

    @initialization.setter
    def initialization(self, value: Optional[pulumi.Input['ContainerInitializationArgs']]):
        pulumi.set(self, "initialization", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input['ContainerMemoryArgs']]:
        """
        The memory configuration.
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input['ContainerMemoryArgs']]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter(name="mountPoints")
    def mount_points(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerMountPointArgs']]]]:
        """
        A mount point
        """
        return pulumi.get(self, "mount_points")

    @mount_points.setter
    def mount_points(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerMountPointArgs']]]]):
        pulumi.set(self, "mount_points", value)

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerNetworkInterfaceArgs']]]]:
        """
        A network interface (multiple blocks
        supported).
        """
        return pulumi.get(self, "network_interfaces")

    @network_interfaces.setter
    def network_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerNetworkInterfaceArgs']]]]):
        pulumi.set(self, "network_interfaces", value)

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> Optional[pulumi.Input['ContainerOperatingSystemArgs']]:
        """
        The Operating System configuration.
        """
        return pulumi.get(self, "operating_system")

    @operating_system.setter
    def operating_system(self, value: Optional[pulumi.Input['ContainerOperatingSystemArgs']]):
        pulumi.set(self, "operating_system", value)

    @property
    @pulumi.getter(name="poolId")
    def pool_id(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for a pool to assign the container to.
        """
        return pulumi.get(self, "pool_id")

    @pool_id.setter
    def pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pool_id", value)

    @property
    @pulumi.getter
    def protection(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to set the protection flag of the container (defaults to `false`). This will prevent the container itself and its disk for remove/update operations.
        """
        return pulumi.get(self, "protection")

    @protection.setter
    def protection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "protection", value)

    @property
    @pulumi.getter(name="startOnBoot")
    def start_on_boot(self) -> Optional[pulumi.Input[bool]]:
        """
        Automatically start container when the host
        system boots (defaults to `true`).
        """
        return pulumi.get(self, "start_on_boot")

    @start_on_boot.setter
    def start_on_boot(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "start_on_boot", value)

    @property
    @pulumi.getter
    def started(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to start the container (defaults to `true`).
        """
        return pulumi.get(self, "started")

    @started.setter
    def started(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "started", value)

    @property
    @pulumi.getter
    def startup(self) -> Optional[pulumi.Input['ContainerStartupArgs']]:
        """
        Defines startup and shutdown behavior of the container.
        """
        return pulumi.get(self, "startup")

    @startup.setter
    def startup(self, value: Optional[pulumi.Input['ContainerStartupArgs']]):
        pulumi.set(self, "startup", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of tags the container tags. This is only meta
        information (defaults to `[]`). Note: Proxmox always sorts the container tags and set them to lowercase.
        If tag contains capital letters, then Proxmox will always report a
        difference on the resource. You may use the `ignore_changes` lifecycle
        meta-argument to ignore changes to this attribute.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def template(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to create a template (defaults to `false`).
        """
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "template", value)

    @property
    @pulumi.getter(name="timeoutClone")
    def timeout_clone(self) -> Optional[pulumi.Input[int]]:
        """
        Timeout for cloning a container in seconds (defaults to 1800).
        """
        return pulumi.get(self, "timeout_clone")

    @timeout_clone.setter
    def timeout_clone(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_clone", value)

    @property
    @pulumi.getter(name="timeoutCreate")
    def timeout_create(self) -> Optional[pulumi.Input[int]]:
        """
        Timeout for creating a container in seconds (defaults to 1800).
        """
        return pulumi.get(self, "timeout_create")

    @timeout_create.setter
    def timeout_create(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_create", value)

    @property
    @pulumi.getter(name="timeoutDelete")
    def timeout_delete(self) -> Optional[pulumi.Input[int]]:
        """
        Timeout for deleting a container in seconds (defaults to 60).
        """
        return pulumi.get(self, "timeout_delete")

    @timeout_delete.setter
    def timeout_delete(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_delete", value)

    @property
    @pulumi.getter(name="timeoutStart")
    @_utilities.deprecated("""This field is deprecated and will be removed in a future release. An overall operation timeout (`timeout_create` / `timeout_clone`) is used instead.""")
    def timeout_start(self) -> Optional[pulumi.Input[int]]:
        """
        Start container timeout
        """
        return pulumi.get(self, "timeout_start")

    @timeout_start.setter
    def timeout_start(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_start", value)

    @property
    @pulumi.getter(name="timeoutUpdate")
    def timeout_update(self) -> Optional[pulumi.Input[int]]:
        """
        Timeout for updating a container in seconds (defaults to 1800).
        """
        return pulumi.get(self, "timeout_update")

    @timeout_update.setter
    def timeout_update(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_update", value)

    @property
    @pulumi.getter
    def unprivileged(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the container runs as unprivileged on
        the host (defaults to `false`).
        """
        return pulumi.get(self, "unprivileged")

    @unprivileged.setter
    def unprivileged(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "unprivileged", value)

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> Optional[pulumi.Input[int]]:
        """
        The container identifier
        """
        return pulumi.get(self, "vm_id")

    @vm_id.setter
    def vm_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vm_id", value)


@pulumi.input_type
class _ContainerState:
    def __init__(__self__, *,
                 clone: Optional[pulumi.Input['ContainerCloneArgs']] = None,
                 console: Optional[pulumi.Input['ContainerConsoleArgs']] = None,
                 cpu: Optional[pulumi.Input['ContainerCpuArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device_passthroughs: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerDevicePassthroughArgs']]]] = None,
                 disk: Optional[pulumi.Input['ContainerDiskArgs']] = None,
                 features: Optional[pulumi.Input['ContainerFeaturesArgs']] = None,
                 hook_script_file_id: Optional[pulumi.Input[str]] = None,
                 initialization: Optional[pulumi.Input['ContainerInitializationArgs']] = None,
                 memory: Optional[pulumi.Input['ContainerMemoryArgs']] = None,
                 mount_points: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerMountPointArgs']]]] = None,
                 network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerNetworkInterfaceArgs']]]] = None,
                 node_name: Optional[pulumi.Input[str]] = None,
                 operating_system: Optional[pulumi.Input['ContainerOperatingSystemArgs']] = None,
                 pool_id: Optional[pulumi.Input[str]] = None,
                 protection: Optional[pulumi.Input[bool]] = None,
                 start_on_boot: Optional[pulumi.Input[bool]] = None,
                 started: Optional[pulumi.Input[bool]] = None,
                 startup: Optional[pulumi.Input['ContainerStartupArgs']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 template: Optional[pulumi.Input[bool]] = None,
                 timeout_clone: Optional[pulumi.Input[int]] = None,
                 timeout_create: Optional[pulumi.Input[int]] = None,
                 timeout_delete: Optional[pulumi.Input[int]] = None,
                 timeout_start: Optional[pulumi.Input[int]] = None,
                 timeout_update: Optional[pulumi.Input[int]] = None,
                 unprivileged: Optional[pulumi.Input[bool]] = None,
                 vm_id: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Container resources.
        :param pulumi.Input['ContainerCloneArgs'] clone: The cloning configuration.
        :param pulumi.Input['ContainerConsoleArgs'] console: The console configuration.
        :param pulumi.Input['ContainerCpuArgs'] cpu: The CPU configuration.
        :param pulumi.Input[str] description: The description.
        :param pulumi.Input[Sequence[pulumi.Input['ContainerDevicePassthroughArgs']]] device_passthroughs: Device to pass through to the container (multiple blocks supported).
        :param pulumi.Input['ContainerDiskArgs'] disk: The disk configuration.
        :param pulumi.Input['ContainerFeaturesArgs'] features: The container feature flags. Changing flags (except nesting) is only allowed for `root@pam` authenticated user.
        :param pulumi.Input[str] hook_script_file_id: The identifier for a file containing a hook script (needs to be executable, e.g. by using the `proxmox_virtual_environment_file.file_mode` attribute).
        :param pulumi.Input['ContainerInitializationArgs'] initialization: The initialization configuration.
        :param pulumi.Input['ContainerMemoryArgs'] memory: The memory configuration.
        :param pulumi.Input[Sequence[pulumi.Input['ContainerMountPointArgs']]] mount_points: A mount point
        :param pulumi.Input[Sequence[pulumi.Input['ContainerNetworkInterfaceArgs']]] network_interfaces: A network interface (multiple blocks
               supported).
        :param pulumi.Input[str] node_name: The name of the node to assign the container to.
        :param pulumi.Input['ContainerOperatingSystemArgs'] operating_system: The Operating System configuration.
        :param pulumi.Input[str] pool_id: The identifier for a pool to assign the container to.
        :param pulumi.Input[bool] protection: Whether to set the protection flag of the container (defaults to `false`). This will prevent the container itself and its disk for remove/update operations.
        :param pulumi.Input[bool] start_on_boot: Automatically start container when the host
               system boots (defaults to `true`).
        :param pulumi.Input[bool] started: Whether to start the container (defaults to `true`).
        :param pulumi.Input['ContainerStartupArgs'] startup: Defines startup and shutdown behavior of the container.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: A list of tags the container tags. This is only meta
               information (defaults to `[]`). Note: Proxmox always sorts the container tags and set them to lowercase.
               If tag contains capital letters, then Proxmox will always report a
               difference on the resource. You may use the `ignore_changes` lifecycle
               meta-argument to ignore changes to this attribute.
        :param pulumi.Input[bool] template: Whether to create a template (defaults to `false`).
        :param pulumi.Input[int] timeout_clone: Timeout for cloning a container in seconds (defaults to 1800).
        :param pulumi.Input[int] timeout_create: Timeout for creating a container in seconds (defaults to 1800).
        :param pulumi.Input[int] timeout_delete: Timeout for deleting a container in seconds (defaults to 60).
        :param pulumi.Input[int] timeout_start: Start container timeout
        :param pulumi.Input[int] timeout_update: Timeout for updating a container in seconds (defaults to 1800).
        :param pulumi.Input[bool] unprivileged: Whether the container runs as unprivileged on
               the host (defaults to `false`).
        :param pulumi.Input[int] vm_id: The container identifier
        """
        if clone is not None:
            pulumi.set(__self__, "clone", clone)
        if console is not None:
            pulumi.set(__self__, "console", console)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device_passthroughs is not None:
            pulumi.set(__self__, "device_passthroughs", device_passthroughs)
        if disk is not None:
            pulumi.set(__self__, "disk", disk)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if hook_script_file_id is not None:
            pulumi.set(__self__, "hook_script_file_id", hook_script_file_id)
        if initialization is not None:
            pulumi.set(__self__, "initialization", initialization)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if mount_points is not None:
            pulumi.set(__self__, "mount_points", mount_points)
        if network_interfaces is not None:
            pulumi.set(__self__, "network_interfaces", network_interfaces)
        if node_name is not None:
            pulumi.set(__self__, "node_name", node_name)
        if operating_system is not None:
            pulumi.set(__self__, "operating_system", operating_system)
        if pool_id is not None:
            pulumi.set(__self__, "pool_id", pool_id)
        if protection is not None:
            pulumi.set(__self__, "protection", protection)
        if start_on_boot is not None:
            pulumi.set(__self__, "start_on_boot", start_on_boot)
        if started is not None:
            pulumi.set(__self__, "started", started)
        if startup is not None:
            pulumi.set(__self__, "startup", startup)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if timeout_clone is not None:
            pulumi.set(__self__, "timeout_clone", timeout_clone)
        if timeout_create is not None:
            pulumi.set(__self__, "timeout_create", timeout_create)
        if timeout_delete is not None:
            pulumi.set(__self__, "timeout_delete", timeout_delete)
        if timeout_start is not None:
            warnings.warn("""This field is deprecated and will be removed in a future release. An overall operation timeout (`timeout_create` / `timeout_clone`) is used instead.""", DeprecationWarning)
            pulumi.log.warn("""timeout_start is deprecated: This field is deprecated and will be removed in a future release. An overall operation timeout (`timeout_create` / `timeout_clone`) is used instead.""")
        if timeout_start is not None:
            pulumi.set(__self__, "timeout_start", timeout_start)
        if timeout_update is not None:
            pulumi.set(__self__, "timeout_update", timeout_update)
        if unprivileged is not None:
            pulumi.set(__self__, "unprivileged", unprivileged)
        if vm_id is not None:
            pulumi.set(__self__, "vm_id", vm_id)

    @property
    @pulumi.getter
    def clone(self) -> Optional[pulumi.Input['ContainerCloneArgs']]:
        """
        The cloning configuration.
        """
        return pulumi.get(self, "clone")

    @clone.setter
    def clone(self, value: Optional[pulumi.Input['ContainerCloneArgs']]):
        pulumi.set(self, "clone", value)

    @property
    @pulumi.getter
    def console(self) -> Optional[pulumi.Input['ContainerConsoleArgs']]:
        """
        The console configuration.
        """
        return pulumi.get(self, "console")

    @console.setter
    def console(self, value: Optional[pulumi.Input['ContainerConsoleArgs']]):
        pulumi.set(self, "console", value)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input['ContainerCpuArgs']]:
        """
        The CPU configuration.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input['ContainerCpuArgs']]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="devicePassthroughs")
    def device_passthroughs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerDevicePassthroughArgs']]]]:
        """
        Device to pass through to the container (multiple blocks supported).
        """
        return pulumi.get(self, "device_passthroughs")

    @device_passthroughs.setter
    def device_passthroughs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerDevicePassthroughArgs']]]]):
        pulumi.set(self, "device_passthroughs", value)

    @property
    @pulumi.getter
    def disk(self) -> Optional[pulumi.Input['ContainerDiskArgs']]:
        """
        The disk configuration.
        """
        return pulumi.get(self, "disk")

    @disk.setter
    def disk(self, value: Optional[pulumi.Input['ContainerDiskArgs']]):
        pulumi.set(self, "disk", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input['ContainerFeaturesArgs']]:
        """
        The container feature flags. Changing flags (except nesting) is only allowed for `root@pam` authenticated user.
        """
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input['ContainerFeaturesArgs']]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter(name="hookScriptFileId")
    def hook_script_file_id(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for a file containing a hook script (needs to be executable, e.g. by using the `proxmox_virtual_environment_file.file_mode` attribute).
        """
        return pulumi.get(self, "hook_script_file_id")

    @hook_script_file_id.setter
    def hook_script_file_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hook_script_file_id", value)

    @property
    @pulumi.getter
    def initialization(self) -> Optional[pulumi.Input['ContainerInitializationArgs']]:
        """
        The initialization configuration.
        """
        return pulumi.get(self, "initialization")

    @initialization.setter
    def initialization(self, value: Optional[pulumi.Input['ContainerInitializationArgs']]):
        pulumi.set(self, "initialization", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input['ContainerMemoryArgs']]:
        """
        The memory configuration.
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input['ContainerMemoryArgs']]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter(name="mountPoints")
    def mount_points(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerMountPointArgs']]]]:
        """
        A mount point
        """
        return pulumi.get(self, "mount_points")

    @mount_points.setter
    def mount_points(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerMountPointArgs']]]]):
        pulumi.set(self, "mount_points", value)

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerNetworkInterfaceArgs']]]]:
        """
        A network interface (multiple blocks
        supported).
        """
        return pulumi.get(self, "network_interfaces")

    @network_interfaces.setter
    def network_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerNetworkInterfaceArgs']]]]):
        pulumi.set(self, "network_interfaces", value)

    @property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the node to assign the container to.
        """
        return pulumi.get(self, "node_name")

    @node_name.setter
    def node_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_name", value)

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> Optional[pulumi.Input['ContainerOperatingSystemArgs']]:
        """
        The Operating System configuration.
        """
        return pulumi.get(self, "operating_system")

    @operating_system.setter
    def operating_system(self, value: Optional[pulumi.Input['ContainerOperatingSystemArgs']]):
        pulumi.set(self, "operating_system", value)

    @property
    @pulumi.getter(name="poolId")
    def pool_id(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for a pool to assign the container to.
        """
        return pulumi.get(self, "pool_id")

    @pool_id.setter
    def pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pool_id", value)

    @property
    @pulumi.getter
    def protection(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to set the protection flag of the container (defaults to `false`). This will prevent the container itself and its disk for remove/update operations.
        """
        return pulumi.get(self, "protection")

    @protection.setter
    def protection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "protection", value)

    @property
    @pulumi.getter(name="startOnBoot")
    def start_on_boot(self) -> Optional[pulumi.Input[bool]]:
        """
        Automatically start container when the host
        system boots (defaults to `true`).
        """
        return pulumi.get(self, "start_on_boot")

    @start_on_boot.setter
    def start_on_boot(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "start_on_boot", value)

    @property
    @pulumi.getter
    def started(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to start the container (defaults to `true`).
        """
        return pulumi.get(self, "started")

    @started.setter
    def started(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "started", value)

    @property
    @pulumi.getter
    def startup(self) -> Optional[pulumi.Input['ContainerStartupArgs']]:
        """
        Defines startup and shutdown behavior of the container.
        """
        return pulumi.get(self, "startup")

    @startup.setter
    def startup(self, value: Optional[pulumi.Input['ContainerStartupArgs']]):
        pulumi.set(self, "startup", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of tags the container tags. This is only meta
        information (defaults to `[]`). Note: Proxmox always sorts the container tags and set them to lowercase.
        If tag contains capital letters, then Proxmox will always report a
        difference on the resource. You may use the `ignore_changes` lifecycle
        meta-argument to ignore changes to this attribute.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def template(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to create a template (defaults to `false`).
        """
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "template", value)

    @property
    @pulumi.getter(name="timeoutClone")
    def timeout_clone(self) -> Optional[pulumi.Input[int]]:
        """
        Timeout for cloning a container in seconds (defaults to 1800).
        """
        return pulumi.get(self, "timeout_clone")

    @timeout_clone.setter
    def timeout_clone(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_clone", value)

    @property
    @pulumi.getter(name="timeoutCreate")
    def timeout_create(self) -> Optional[pulumi.Input[int]]:
        """
        Timeout for creating a container in seconds (defaults to 1800).
        """
        return pulumi.get(self, "timeout_create")

    @timeout_create.setter
    def timeout_create(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_create", value)

    @property
    @pulumi.getter(name="timeoutDelete")
    def timeout_delete(self) -> Optional[pulumi.Input[int]]:
        """
        Timeout for deleting a container in seconds (defaults to 60).
        """
        return pulumi.get(self, "timeout_delete")

    @timeout_delete.setter
    def timeout_delete(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_delete", value)

    @property
    @pulumi.getter(name="timeoutStart")
    @_utilities.deprecated("""This field is deprecated and will be removed in a future release. An overall operation timeout (`timeout_create` / `timeout_clone`) is used instead.""")
    def timeout_start(self) -> Optional[pulumi.Input[int]]:
        """
        Start container timeout
        """
        return pulumi.get(self, "timeout_start")

    @timeout_start.setter
    def timeout_start(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_start", value)

    @property
    @pulumi.getter(name="timeoutUpdate")
    def timeout_update(self) -> Optional[pulumi.Input[int]]:
        """
        Timeout for updating a container in seconds (defaults to 1800).
        """
        return pulumi.get(self, "timeout_update")

    @timeout_update.setter
    def timeout_update(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_update", value)

    @property
    @pulumi.getter
    def unprivileged(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the container runs as unprivileged on
        the host (defaults to `false`).
        """
        return pulumi.get(self, "unprivileged")

    @unprivileged.setter
    def unprivileged(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "unprivileged", value)

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> Optional[pulumi.Input[int]]:
        """
        The container identifier
        """
        return pulumi.get(self, "vm_id")

    @vm_id.setter
    def vm_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vm_id", value)


class Container(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 clone: Optional[pulumi.Input[Union['ContainerCloneArgs', 'ContainerCloneArgsDict']]] = None,
                 console: Optional[pulumi.Input[Union['ContainerConsoleArgs', 'ContainerConsoleArgsDict']]] = None,
                 cpu: Optional[pulumi.Input[Union['ContainerCpuArgs', 'ContainerCpuArgsDict']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device_passthroughs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerDevicePassthroughArgs', 'ContainerDevicePassthroughArgsDict']]]]] = None,
                 disk: Optional[pulumi.Input[Union['ContainerDiskArgs', 'ContainerDiskArgsDict']]] = None,
                 features: Optional[pulumi.Input[Union['ContainerFeaturesArgs', 'ContainerFeaturesArgsDict']]] = None,
                 hook_script_file_id: Optional[pulumi.Input[str]] = None,
                 initialization: Optional[pulumi.Input[Union['ContainerInitializationArgs', 'ContainerInitializationArgsDict']]] = None,
                 memory: Optional[pulumi.Input[Union['ContainerMemoryArgs', 'ContainerMemoryArgsDict']]] = None,
                 mount_points: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerMountPointArgs', 'ContainerMountPointArgsDict']]]]] = None,
                 network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerNetworkInterfaceArgs', 'ContainerNetworkInterfaceArgsDict']]]]] = None,
                 node_name: Optional[pulumi.Input[str]] = None,
                 operating_system: Optional[pulumi.Input[Union['ContainerOperatingSystemArgs', 'ContainerOperatingSystemArgsDict']]] = None,
                 pool_id: Optional[pulumi.Input[str]] = None,
                 protection: Optional[pulumi.Input[bool]] = None,
                 start_on_boot: Optional[pulumi.Input[bool]] = None,
                 started: Optional[pulumi.Input[bool]] = None,
                 startup: Optional[pulumi.Input[Union['ContainerStartupArgs', 'ContainerStartupArgsDict']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 template: Optional[pulumi.Input[bool]] = None,
                 timeout_clone: Optional[pulumi.Input[int]] = None,
                 timeout_create: Optional[pulumi.Input[int]] = None,
                 timeout_delete: Optional[pulumi.Input[int]] = None,
                 timeout_start: Optional[pulumi.Input[int]] = None,
                 timeout_update: Optional[pulumi.Input[int]] = None,
                 unprivileged: Optional[pulumi.Input[bool]] = None,
                 vm_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Manages a container.

        ## Import

        Instances can be imported using the `node_name` and the `vm_id`, e.g.,

        bash

        ```sh
        $ pulumi import proxmoxve:CT/container:Container ubuntu_container first-node/1234
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['ContainerCloneArgs', 'ContainerCloneArgsDict']] clone: The cloning configuration.
        :param pulumi.Input[Union['ContainerConsoleArgs', 'ContainerConsoleArgsDict']] console: The console configuration.
        :param pulumi.Input[Union['ContainerCpuArgs', 'ContainerCpuArgsDict']] cpu: The CPU configuration.
        :param pulumi.Input[str] description: The description.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ContainerDevicePassthroughArgs', 'ContainerDevicePassthroughArgsDict']]]] device_passthroughs: Device to pass through to the container (multiple blocks supported).
        :param pulumi.Input[Union['ContainerDiskArgs', 'ContainerDiskArgsDict']] disk: The disk configuration.
        :param pulumi.Input[Union['ContainerFeaturesArgs', 'ContainerFeaturesArgsDict']] features: The container feature flags. Changing flags (except nesting) is only allowed for `root@pam` authenticated user.
        :param pulumi.Input[str] hook_script_file_id: The identifier for a file containing a hook script (needs to be executable, e.g. by using the `proxmox_virtual_environment_file.file_mode` attribute).
        :param pulumi.Input[Union['ContainerInitializationArgs', 'ContainerInitializationArgsDict']] initialization: The initialization configuration.
        :param pulumi.Input[Union['ContainerMemoryArgs', 'ContainerMemoryArgsDict']] memory: The memory configuration.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ContainerMountPointArgs', 'ContainerMountPointArgsDict']]]] mount_points: A mount point
        :param pulumi.Input[Sequence[pulumi.Input[Union['ContainerNetworkInterfaceArgs', 'ContainerNetworkInterfaceArgsDict']]]] network_interfaces: A network interface (multiple blocks
               supported).
        :param pulumi.Input[str] node_name: The name of the node to assign the container to.
        :param pulumi.Input[Union['ContainerOperatingSystemArgs', 'ContainerOperatingSystemArgsDict']] operating_system: The Operating System configuration.
        :param pulumi.Input[str] pool_id: The identifier for a pool to assign the container to.
        :param pulumi.Input[bool] protection: Whether to set the protection flag of the container (defaults to `false`). This will prevent the container itself and its disk for remove/update operations.
        :param pulumi.Input[bool] start_on_boot: Automatically start container when the host
               system boots (defaults to `true`).
        :param pulumi.Input[bool] started: Whether to start the container (defaults to `true`).
        :param pulumi.Input[Union['ContainerStartupArgs', 'ContainerStartupArgsDict']] startup: Defines startup and shutdown behavior of the container.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: A list of tags the container tags. This is only meta
               information (defaults to `[]`). Note: Proxmox always sorts the container tags and set them to lowercase.
               If tag contains capital letters, then Proxmox will always report a
               difference on the resource. You may use the `ignore_changes` lifecycle
               meta-argument to ignore changes to this attribute.
        :param pulumi.Input[bool] template: Whether to create a template (defaults to `false`).
        :param pulumi.Input[int] timeout_clone: Timeout for cloning a container in seconds (defaults to 1800).
        :param pulumi.Input[int] timeout_create: Timeout for creating a container in seconds (defaults to 1800).
        :param pulumi.Input[int] timeout_delete: Timeout for deleting a container in seconds (defaults to 60).
        :param pulumi.Input[int] timeout_start: Start container timeout
        :param pulumi.Input[int] timeout_update: Timeout for updating a container in seconds (defaults to 1800).
        :param pulumi.Input[bool] unprivileged: Whether the container runs as unprivileged on
               the host (defaults to `false`).
        :param pulumi.Input[int] vm_id: The container identifier
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ContainerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a container.

        ## Import

        Instances can be imported using the `node_name` and the `vm_id`, e.g.,

        bash

        ```sh
        $ pulumi import proxmoxve:CT/container:Container ubuntu_container first-node/1234
        ```

        :param str resource_name: The name of the resource.
        :param ContainerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ContainerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 clone: Optional[pulumi.Input[Union['ContainerCloneArgs', 'ContainerCloneArgsDict']]] = None,
                 console: Optional[pulumi.Input[Union['ContainerConsoleArgs', 'ContainerConsoleArgsDict']]] = None,
                 cpu: Optional[pulumi.Input[Union['ContainerCpuArgs', 'ContainerCpuArgsDict']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device_passthroughs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerDevicePassthroughArgs', 'ContainerDevicePassthroughArgsDict']]]]] = None,
                 disk: Optional[pulumi.Input[Union['ContainerDiskArgs', 'ContainerDiskArgsDict']]] = None,
                 features: Optional[pulumi.Input[Union['ContainerFeaturesArgs', 'ContainerFeaturesArgsDict']]] = None,
                 hook_script_file_id: Optional[pulumi.Input[str]] = None,
                 initialization: Optional[pulumi.Input[Union['ContainerInitializationArgs', 'ContainerInitializationArgsDict']]] = None,
                 memory: Optional[pulumi.Input[Union['ContainerMemoryArgs', 'ContainerMemoryArgsDict']]] = None,
                 mount_points: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerMountPointArgs', 'ContainerMountPointArgsDict']]]]] = None,
                 network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerNetworkInterfaceArgs', 'ContainerNetworkInterfaceArgsDict']]]]] = None,
                 node_name: Optional[pulumi.Input[str]] = None,
                 operating_system: Optional[pulumi.Input[Union['ContainerOperatingSystemArgs', 'ContainerOperatingSystemArgsDict']]] = None,
                 pool_id: Optional[pulumi.Input[str]] = None,
                 protection: Optional[pulumi.Input[bool]] = None,
                 start_on_boot: Optional[pulumi.Input[bool]] = None,
                 started: Optional[pulumi.Input[bool]] = None,
                 startup: Optional[pulumi.Input[Union['ContainerStartupArgs', 'ContainerStartupArgsDict']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 template: Optional[pulumi.Input[bool]] = None,
                 timeout_clone: Optional[pulumi.Input[int]] = None,
                 timeout_create: Optional[pulumi.Input[int]] = None,
                 timeout_delete: Optional[pulumi.Input[int]] = None,
                 timeout_start: Optional[pulumi.Input[int]] = None,
                 timeout_update: Optional[pulumi.Input[int]] = None,
                 unprivileged: Optional[pulumi.Input[bool]] = None,
                 vm_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ContainerArgs.__new__(ContainerArgs)

            __props__.__dict__["clone"] = clone
            __props__.__dict__["console"] = console
            __props__.__dict__["cpu"] = cpu
            __props__.__dict__["description"] = description
            __props__.__dict__["device_passthroughs"] = device_passthroughs
            __props__.__dict__["disk"] = disk
            __props__.__dict__["features"] = features
            __props__.__dict__["hook_script_file_id"] = hook_script_file_id
            __props__.__dict__["initialization"] = initialization
            __props__.__dict__["memory"] = memory
            __props__.__dict__["mount_points"] = mount_points
            __props__.__dict__["network_interfaces"] = network_interfaces
            if node_name is None and not opts.urn:
                raise TypeError("Missing required property 'node_name'")
            __props__.__dict__["node_name"] = node_name
            __props__.__dict__["operating_system"] = operating_system
            __props__.__dict__["pool_id"] = pool_id
            __props__.__dict__["protection"] = protection
            __props__.__dict__["start_on_boot"] = start_on_boot
            __props__.__dict__["started"] = started
            __props__.__dict__["startup"] = startup
            __props__.__dict__["tags"] = tags
            __props__.__dict__["template"] = template
            __props__.__dict__["timeout_clone"] = timeout_clone
            __props__.__dict__["timeout_create"] = timeout_create
            __props__.__dict__["timeout_delete"] = timeout_delete
            __props__.__dict__["timeout_start"] = timeout_start
            __props__.__dict__["timeout_update"] = timeout_update
            __props__.__dict__["unprivileged"] = unprivileged
            __props__.__dict__["vm_id"] = vm_id
        super(Container, __self__).__init__(
            'proxmoxve:CT/container:Container',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            clone: Optional[pulumi.Input[Union['ContainerCloneArgs', 'ContainerCloneArgsDict']]] = None,
            console: Optional[pulumi.Input[Union['ContainerConsoleArgs', 'ContainerConsoleArgsDict']]] = None,
            cpu: Optional[pulumi.Input[Union['ContainerCpuArgs', 'ContainerCpuArgsDict']]] = None,
            description: Optional[pulumi.Input[str]] = None,
            device_passthroughs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerDevicePassthroughArgs', 'ContainerDevicePassthroughArgsDict']]]]] = None,
            disk: Optional[pulumi.Input[Union['ContainerDiskArgs', 'ContainerDiskArgsDict']]] = None,
            features: Optional[pulumi.Input[Union['ContainerFeaturesArgs', 'ContainerFeaturesArgsDict']]] = None,
            hook_script_file_id: Optional[pulumi.Input[str]] = None,
            initialization: Optional[pulumi.Input[Union['ContainerInitializationArgs', 'ContainerInitializationArgsDict']]] = None,
            memory: Optional[pulumi.Input[Union['ContainerMemoryArgs', 'ContainerMemoryArgsDict']]] = None,
            mount_points: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerMountPointArgs', 'ContainerMountPointArgsDict']]]]] = None,
            network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerNetworkInterfaceArgs', 'ContainerNetworkInterfaceArgsDict']]]]] = None,
            node_name: Optional[pulumi.Input[str]] = None,
            operating_system: Optional[pulumi.Input[Union['ContainerOperatingSystemArgs', 'ContainerOperatingSystemArgsDict']]] = None,
            pool_id: Optional[pulumi.Input[str]] = None,
            protection: Optional[pulumi.Input[bool]] = None,
            start_on_boot: Optional[pulumi.Input[bool]] = None,
            started: Optional[pulumi.Input[bool]] = None,
            startup: Optional[pulumi.Input[Union['ContainerStartupArgs', 'ContainerStartupArgsDict']]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            template: Optional[pulumi.Input[bool]] = None,
            timeout_clone: Optional[pulumi.Input[int]] = None,
            timeout_create: Optional[pulumi.Input[int]] = None,
            timeout_delete: Optional[pulumi.Input[int]] = None,
            timeout_start: Optional[pulumi.Input[int]] = None,
            timeout_update: Optional[pulumi.Input[int]] = None,
            unprivileged: Optional[pulumi.Input[bool]] = None,
            vm_id: Optional[pulumi.Input[int]] = None) -> 'Container':
        """
        Get an existing Container resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['ContainerCloneArgs', 'ContainerCloneArgsDict']] clone: The cloning configuration.
        :param pulumi.Input[Union['ContainerConsoleArgs', 'ContainerConsoleArgsDict']] console: The console configuration.
        :param pulumi.Input[Union['ContainerCpuArgs', 'ContainerCpuArgsDict']] cpu: The CPU configuration.
        :param pulumi.Input[str] description: The description.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ContainerDevicePassthroughArgs', 'ContainerDevicePassthroughArgsDict']]]] device_passthroughs: Device to pass through to the container (multiple blocks supported).
        :param pulumi.Input[Union['ContainerDiskArgs', 'ContainerDiskArgsDict']] disk: The disk configuration.
        :param pulumi.Input[Union['ContainerFeaturesArgs', 'ContainerFeaturesArgsDict']] features: The container feature flags. Changing flags (except nesting) is only allowed for `root@pam` authenticated user.
        :param pulumi.Input[str] hook_script_file_id: The identifier for a file containing a hook script (needs to be executable, e.g. by using the `proxmox_virtual_environment_file.file_mode` attribute).
        :param pulumi.Input[Union['ContainerInitializationArgs', 'ContainerInitializationArgsDict']] initialization: The initialization configuration.
        :param pulumi.Input[Union['ContainerMemoryArgs', 'ContainerMemoryArgsDict']] memory: The memory configuration.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ContainerMountPointArgs', 'ContainerMountPointArgsDict']]]] mount_points: A mount point
        :param pulumi.Input[Sequence[pulumi.Input[Union['ContainerNetworkInterfaceArgs', 'ContainerNetworkInterfaceArgsDict']]]] network_interfaces: A network interface (multiple blocks
               supported).
        :param pulumi.Input[str] node_name: The name of the node to assign the container to.
        :param pulumi.Input[Union['ContainerOperatingSystemArgs', 'ContainerOperatingSystemArgsDict']] operating_system: The Operating System configuration.
        :param pulumi.Input[str] pool_id: The identifier for a pool to assign the container to.
        :param pulumi.Input[bool] protection: Whether to set the protection flag of the container (defaults to `false`). This will prevent the container itself and its disk for remove/update operations.
        :param pulumi.Input[bool] start_on_boot: Automatically start container when the host
               system boots (defaults to `true`).
        :param pulumi.Input[bool] started: Whether to start the container (defaults to `true`).
        :param pulumi.Input[Union['ContainerStartupArgs', 'ContainerStartupArgsDict']] startup: Defines startup and shutdown behavior of the container.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: A list of tags the container tags. This is only meta
               information (defaults to `[]`). Note: Proxmox always sorts the container tags and set them to lowercase.
               If tag contains capital letters, then Proxmox will always report a
               difference on the resource. You may use the `ignore_changes` lifecycle
               meta-argument to ignore changes to this attribute.
        :param pulumi.Input[bool] template: Whether to create a template (defaults to `false`).
        :param pulumi.Input[int] timeout_clone: Timeout for cloning a container in seconds (defaults to 1800).
        :param pulumi.Input[int] timeout_create: Timeout for creating a container in seconds (defaults to 1800).
        :param pulumi.Input[int] timeout_delete: Timeout for deleting a container in seconds (defaults to 60).
        :param pulumi.Input[int] timeout_start: Start container timeout
        :param pulumi.Input[int] timeout_update: Timeout for updating a container in seconds (defaults to 1800).
        :param pulumi.Input[bool] unprivileged: Whether the container runs as unprivileged on
               the host (defaults to `false`).
        :param pulumi.Input[int] vm_id: The container identifier
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ContainerState.__new__(_ContainerState)

        __props__.__dict__["clone"] = clone
        __props__.__dict__["console"] = console
        __props__.__dict__["cpu"] = cpu
        __props__.__dict__["description"] = description
        __props__.__dict__["device_passthroughs"] = device_passthroughs
        __props__.__dict__["disk"] = disk
        __props__.__dict__["features"] = features
        __props__.__dict__["hook_script_file_id"] = hook_script_file_id
        __props__.__dict__["initialization"] = initialization
        __props__.__dict__["memory"] = memory
        __props__.__dict__["mount_points"] = mount_points
        __props__.__dict__["network_interfaces"] = network_interfaces
        __props__.__dict__["node_name"] = node_name
        __props__.__dict__["operating_system"] = operating_system
        __props__.__dict__["pool_id"] = pool_id
        __props__.__dict__["protection"] = protection
        __props__.__dict__["start_on_boot"] = start_on_boot
        __props__.__dict__["started"] = started
        __props__.__dict__["startup"] = startup
        __props__.__dict__["tags"] = tags
        __props__.__dict__["template"] = template
        __props__.__dict__["timeout_clone"] = timeout_clone
        __props__.__dict__["timeout_create"] = timeout_create
        __props__.__dict__["timeout_delete"] = timeout_delete
        __props__.__dict__["timeout_start"] = timeout_start
        __props__.__dict__["timeout_update"] = timeout_update
        __props__.__dict__["unprivileged"] = unprivileged
        __props__.__dict__["vm_id"] = vm_id
        return Container(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def clone(self) -> pulumi.Output[Optional['outputs.ContainerClone']]:
        """
        The cloning configuration.
        """
        return pulumi.get(self, "clone")

    @property
    @pulumi.getter
    def console(self) -> pulumi.Output[Optional['outputs.ContainerConsole']]:
        """
        The console configuration.
        """
        return pulumi.get(self, "console")

    @property
    @pulumi.getter
    def cpu(self) -> pulumi.Output[Optional['outputs.ContainerCpu']]:
        """
        The CPU configuration.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="devicePassthroughs")
    def device_passthroughs(self) -> pulumi.Output[Optional[Sequence['outputs.ContainerDevicePassthrough']]]:
        """
        Device to pass through to the container (multiple blocks supported).
        """
        return pulumi.get(self, "device_passthroughs")

    @property
    @pulumi.getter
    def disk(self) -> pulumi.Output[Optional['outputs.ContainerDisk']]:
        """
        The disk configuration.
        """
        return pulumi.get(self, "disk")

    @property
    @pulumi.getter
    def features(self) -> pulumi.Output[Optional['outputs.ContainerFeatures']]:
        """
        The container feature flags. Changing flags (except nesting) is only allowed for `root@pam` authenticated user.
        """
        return pulumi.get(self, "features")

    @property
    @pulumi.getter(name="hookScriptFileId")
    def hook_script_file_id(self) -> pulumi.Output[Optional[str]]:
        """
        The identifier for a file containing a hook script (needs to be executable, e.g. by using the `proxmox_virtual_environment_file.file_mode` attribute).
        """
        return pulumi.get(self, "hook_script_file_id")

    @property
    @pulumi.getter
    def initialization(self) -> pulumi.Output[Optional['outputs.ContainerInitialization']]:
        """
        The initialization configuration.
        """
        return pulumi.get(self, "initialization")

    @property
    @pulumi.getter
    def memory(self) -> pulumi.Output[Optional['outputs.ContainerMemory']]:
        """
        The memory configuration.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="mountPoints")
    def mount_points(self) -> pulumi.Output[Optional[Sequence['outputs.ContainerMountPoint']]]:
        """
        A mount point
        """
        return pulumi.get(self, "mount_points")

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> pulumi.Output[Optional[Sequence['outputs.ContainerNetworkInterface']]]:
        """
        A network interface (multiple blocks
        supported).
        """
        return pulumi.get(self, "network_interfaces")

    @property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> pulumi.Output[str]:
        """
        The name of the node to assign the container to.
        """
        return pulumi.get(self, "node_name")

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> pulumi.Output[Optional['outputs.ContainerOperatingSystem']]:
        """
        The Operating System configuration.
        """
        return pulumi.get(self, "operating_system")

    @property
    @pulumi.getter(name="poolId")
    def pool_id(self) -> pulumi.Output[Optional[str]]:
        """
        The identifier for a pool to assign the container to.
        """
        return pulumi.get(self, "pool_id")

    @property
    @pulumi.getter
    def protection(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to set the protection flag of the container (defaults to `false`). This will prevent the container itself and its disk for remove/update operations.
        """
        return pulumi.get(self, "protection")

    @property
    @pulumi.getter(name="startOnBoot")
    def start_on_boot(self) -> pulumi.Output[Optional[bool]]:
        """
        Automatically start container when the host
        system boots (defaults to `true`).
        """
        return pulumi.get(self, "start_on_boot")

    @property
    @pulumi.getter
    def started(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to start the container (defaults to `true`).
        """
        return pulumi.get(self, "started")

    @property
    @pulumi.getter
    def startup(self) -> pulumi.Output[Optional['outputs.ContainerStartup']]:
        """
        Defines startup and shutdown behavior of the container.
        """
        return pulumi.get(self, "startup")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A list of tags the container tags. This is only meta
        information (defaults to `[]`). Note: Proxmox always sorts the container tags and set them to lowercase.
        If tag contains capital letters, then Proxmox will always report a
        difference on the resource. You may use the `ignore_changes` lifecycle
        meta-argument to ignore changes to this attribute.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def template(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to create a template (defaults to `false`).
        """
        return pulumi.get(self, "template")

    @property
    @pulumi.getter(name="timeoutClone")
    def timeout_clone(self) -> pulumi.Output[Optional[int]]:
        """
        Timeout for cloning a container in seconds (defaults to 1800).
        """
        return pulumi.get(self, "timeout_clone")

    @property
    @pulumi.getter(name="timeoutCreate")
    def timeout_create(self) -> pulumi.Output[Optional[int]]:
        """
        Timeout for creating a container in seconds (defaults to 1800).
        """
        return pulumi.get(self, "timeout_create")

    @property
    @pulumi.getter(name="timeoutDelete")
    def timeout_delete(self) -> pulumi.Output[Optional[int]]:
        """
        Timeout for deleting a container in seconds (defaults to 60).
        """
        return pulumi.get(self, "timeout_delete")

    @property
    @pulumi.getter(name="timeoutStart")
    @_utilities.deprecated("""This field is deprecated and will be removed in a future release. An overall operation timeout (`timeout_create` / `timeout_clone`) is used instead.""")
    def timeout_start(self) -> pulumi.Output[Optional[int]]:
        """
        Start container timeout
        """
        return pulumi.get(self, "timeout_start")

    @property
    @pulumi.getter(name="timeoutUpdate")
    def timeout_update(self) -> pulumi.Output[Optional[int]]:
        """
        Timeout for updating a container in seconds (defaults to 1800).
        """
        return pulumi.get(self, "timeout_update")

    @property
    @pulumi.getter
    def unprivileged(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether the container runs as unprivileged on
        the host (defaults to `false`).
        """
        return pulumi.get(self, "unprivileged")

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> pulumi.Output[int]:
        """
        The container identifier
        """
        return pulumi.get(self, "vm_id")


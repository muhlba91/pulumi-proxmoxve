# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'ContainerCloneArgs',
    'ContainerCloneArgsDict',
    'ContainerConsoleArgs',
    'ContainerConsoleArgsDict',
    'ContainerCpuArgs',
    'ContainerCpuArgsDict',
    'ContainerDevicePassthroughArgs',
    'ContainerDevicePassthroughArgsDict',
    'ContainerDiskArgs',
    'ContainerDiskArgsDict',
    'ContainerFeaturesArgs',
    'ContainerFeaturesArgsDict',
    'ContainerInitializationArgs',
    'ContainerInitializationArgsDict',
    'ContainerInitializationDnsArgs',
    'ContainerInitializationDnsArgsDict',
    'ContainerInitializationIpConfigArgs',
    'ContainerInitializationIpConfigArgsDict',
    'ContainerInitializationIpConfigIpv4Args',
    'ContainerInitializationIpConfigIpv4ArgsDict',
    'ContainerInitializationIpConfigIpv6Args',
    'ContainerInitializationIpConfigIpv6ArgsDict',
    'ContainerInitializationUserAccountArgs',
    'ContainerInitializationUserAccountArgsDict',
    'ContainerMemoryArgs',
    'ContainerMemoryArgsDict',
    'ContainerMountPointArgs',
    'ContainerMountPointArgsDict',
    'ContainerNetworkInterfaceArgs',
    'ContainerNetworkInterfaceArgsDict',
    'ContainerOperatingSystemArgs',
    'ContainerOperatingSystemArgsDict',
    'ContainerStartupArgs',
    'ContainerStartupArgsDict',
]

MYPY = False

if not MYPY:
    class ContainerCloneArgsDict(TypedDict):
        vm_id: pulumi.Input[_builtins.int]
        """
        The identifier for the source container.
        """
        datastore_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The identifier for the target datastore.
        """
        node_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The name of the source node (leave blank, if
        equal to the `node_name` argument).
        """
elif False:
    ContainerCloneArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ContainerCloneArgs:
    def __init__(__self__, *,
                 vm_id: pulumi.Input[_builtins.int],
                 datastore_id: Optional[pulumi.Input[_builtins.str]] = None,
                 node_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] vm_id: The identifier for the source container.
        :param pulumi.Input[_builtins.str] datastore_id: The identifier for the target datastore.
        :param pulumi.Input[_builtins.str] node_name: The name of the source node (leave blank, if
               equal to the `node_name` argument).
        """
        pulumi.set(__self__, "vm_id", vm_id)
        if datastore_id is not None:
            pulumi.set(__self__, "datastore_id", datastore_id)
        if node_name is not None:
            pulumi.set(__self__, "node_name", node_name)

    @_builtins.property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> pulumi.Input[_builtins.int]:
        """
        The identifier for the source container.
        """
        return pulumi.get(self, "vm_id")

    @vm_id.setter
    def vm_id(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "vm_id", value)

    @_builtins.property
    @pulumi.getter(name="datastoreId")
    def datastore_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The identifier for the target datastore.
        """
        return pulumi.get(self, "datastore_id")

    @datastore_id.setter
    def datastore_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "datastore_id", value)

    @_builtins.property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the source node (leave blank, if
        equal to the `node_name` argument).
        """
        return pulumi.get(self, "node_name")

    @node_name.setter
    def node_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "node_name", value)


if not MYPY:
    class ContainerConsoleArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Whether to enable the console device (defaults
        to `true`).
        """
        tty_count: NotRequired[pulumi.Input[_builtins.int]]
        """
        The number of available TTY (defaults to `2`).
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        The console mode (defaults to `tty`).
        """
elif False:
    ContainerConsoleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ContainerConsoleArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 tty_count: Optional[pulumi.Input[_builtins.int]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] enabled: Whether to enable the console device (defaults
               to `true`).
        :param pulumi.Input[_builtins.int] tty_count: The number of available TTY (defaults to `2`).
        :param pulumi.Input[_builtins.str] type: The console mode (defaults to `tty`).
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if tty_count is not None:
            pulumi.set(__self__, "tty_count", tty_count)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to enable the console device (defaults
        to `true`).
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="ttyCount")
    def tty_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of available TTY (defaults to `2`).
        """
        return pulumi.get(self, "tty_count")

    @tty_count.setter
    def tty_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tty_count", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The console mode (defaults to `tty`).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class ContainerCpuArgsDict(TypedDict):
        architecture: NotRequired[pulumi.Input[_builtins.str]]
        """
        The CPU architecture (defaults to `amd64`).
        """
        cores: NotRequired[pulumi.Input[_builtins.int]]
        """
        The number of CPU cores (defaults to `1`).
        """
        units: NotRequired[pulumi.Input[_builtins.int]]
        """
        The CPU units (defaults to `1024`).
        """
elif False:
    ContainerCpuArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ContainerCpuArgs:
    def __init__(__self__, *,
                 architecture: Optional[pulumi.Input[_builtins.str]] = None,
                 cores: Optional[pulumi.Input[_builtins.int]] = None,
                 units: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] architecture: The CPU architecture (defaults to `amd64`).
        :param pulumi.Input[_builtins.int] cores: The number of CPU cores (defaults to `1`).
        :param pulumi.Input[_builtins.int] units: The CPU units (defaults to `1024`).
        """
        if architecture is not None:
            pulumi.set(__self__, "architecture", architecture)
        if cores is not None:
            pulumi.set(__self__, "cores", cores)
        if units is not None:
            pulumi.set(__self__, "units", units)

    @_builtins.property
    @pulumi.getter
    def architecture(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CPU architecture (defaults to `amd64`).
        """
        return pulumi.get(self, "architecture")

    @architecture.setter
    def architecture(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "architecture", value)

    @_builtins.property
    @pulumi.getter
    def cores(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of CPU cores (defaults to `1`).
        """
        return pulumi.get(self, "cores")

    @cores.setter
    def cores(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "cores", value)

    @_builtins.property
    @pulumi.getter
    def units(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The CPU units (defaults to `1024`).
        """
        return pulumi.get(self, "units")

    @units.setter
    def units(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "units", value)


if not MYPY:
    class ContainerDevicePassthroughArgsDict(TypedDict):
        path: pulumi.Input[_builtins.str]
        """
        Device to pass through to the container (e.g. `/dev/sda`).
        """
        deny_write: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Deny the container to write to the device (defaults to `false`).
        """
        gid: NotRequired[pulumi.Input[_builtins.int]]
        """
        Group ID to be assigned to the device node.
        """
        mode: NotRequired[pulumi.Input[_builtins.str]]
        """
        Access mode to be set on the device node. Must be a
        4-digit octal number.
        """
        uid: NotRequired[pulumi.Input[_builtins.int]]
        """
        User ID to be assigned to the device node.
        """
elif False:
    ContainerDevicePassthroughArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ContainerDevicePassthroughArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[_builtins.str],
                 deny_write: Optional[pulumi.Input[_builtins.bool]] = None,
                 gid: Optional[pulumi.Input[_builtins.int]] = None,
                 mode: Optional[pulumi.Input[_builtins.str]] = None,
                 uid: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] path: Device to pass through to the container (e.g. `/dev/sda`).
        :param pulumi.Input[_builtins.bool] deny_write: Deny the container to write to the device (defaults to `false`).
        :param pulumi.Input[_builtins.int] gid: Group ID to be assigned to the device node.
        :param pulumi.Input[_builtins.str] mode: Access mode to be set on the device node. Must be a
               4-digit octal number.
        :param pulumi.Input[_builtins.int] uid: User ID to be assigned to the device node.
        """
        pulumi.set(__self__, "path", path)
        if deny_write is not None:
            pulumi.set(__self__, "deny_write", deny_write)
        if gid is not None:
            pulumi.set(__self__, "gid", gid)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @_builtins.property
    @pulumi.getter
    def path(self) -> pulumi.Input[_builtins.str]:
        """
        Device to pass through to the container (e.g. `/dev/sda`).
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter(name="denyWrite")
    def deny_write(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Deny the container to write to the device (defaults to `false`).
        """
        return pulumi.get(self, "deny_write")

    @deny_write.setter
    def deny_write(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "deny_write", value)

    @_builtins.property
    @pulumi.getter
    def gid(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Group ID to be assigned to the device node.
        """
        return pulumi.get(self, "gid")

    @gid.setter
    def gid(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "gid", value)

    @_builtins.property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Access mode to be set on the device node. Must be a
        4-digit octal number.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mode", value)

    @_builtins.property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        User ID to be assigned to the device node.
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "uid", value)


if not MYPY:
    class ContainerDiskArgsDict(TypedDict):
        acl: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Explicitly enable or disable ACL support
        """
        datastore_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The identifier for the datastore to create the
        disk in (defaults to `local`).
        """
        mount_options: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        List of extra mount options.
        """
        quota: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable user quotas for the container rootfs
        """
        replicate: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Will include this volume to a storage replica job
        """
        size: NotRequired[pulumi.Input[_builtins.int]]
        """
        The size of the root filesystem in gigabytes (defaults
        to `4`). When set to 0 a directory or zfs/btrfs subvolume will be created.
        Requires `datastore_id` to be set.
        """
elif False:
    ContainerDiskArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ContainerDiskArgs:
    def __init__(__self__, *,
                 acl: Optional[pulumi.Input[_builtins.bool]] = None,
                 datastore_id: Optional[pulumi.Input[_builtins.str]] = None,
                 mount_options: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 quota: Optional[pulumi.Input[_builtins.bool]] = None,
                 replicate: Optional[pulumi.Input[_builtins.bool]] = None,
                 size: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.bool] acl: Explicitly enable or disable ACL support
        :param pulumi.Input[_builtins.str] datastore_id: The identifier for the datastore to create the
               disk in (defaults to `local`).
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] mount_options: List of extra mount options.
        :param pulumi.Input[_builtins.bool] quota: Enable user quotas for the container rootfs
        :param pulumi.Input[_builtins.bool] replicate: Will include this volume to a storage replica job
        :param pulumi.Input[_builtins.int] size: The size of the root filesystem in gigabytes (defaults
               to `4`). When set to 0 a directory or zfs/btrfs subvolume will be created.
               Requires `datastore_id` to be set.
        """
        if acl is not None:
            pulumi.set(__self__, "acl", acl)
        if datastore_id is not None:
            pulumi.set(__self__, "datastore_id", datastore_id)
        if mount_options is not None:
            pulumi.set(__self__, "mount_options", mount_options)
        if quota is not None:
            pulumi.set(__self__, "quota", quota)
        if replicate is not None:
            pulumi.set(__self__, "replicate", replicate)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @_builtins.property
    @pulumi.getter
    def acl(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Explicitly enable or disable ACL support
        """
        return pulumi.get(self, "acl")

    @acl.setter
    def acl(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "acl", value)

    @_builtins.property
    @pulumi.getter(name="datastoreId")
    def datastore_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The identifier for the datastore to create the
        disk in (defaults to `local`).
        """
        return pulumi.get(self, "datastore_id")

    @datastore_id.setter
    def datastore_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "datastore_id", value)

    @_builtins.property
    @pulumi.getter(name="mountOptions")
    def mount_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of extra mount options.
        """
        return pulumi.get(self, "mount_options")

    @mount_options.setter
    def mount_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "mount_options", value)

    @_builtins.property
    @pulumi.getter
    def quota(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable user quotas for the container rootfs
        """
        return pulumi.get(self, "quota")

    @quota.setter
    def quota(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "quota", value)

    @_builtins.property
    @pulumi.getter
    def replicate(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Will include this volume to a storage replica job
        """
        return pulumi.get(self, "replicate")

    @replicate.setter
    def replicate(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "replicate", value)

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The size of the root filesystem in gigabytes (defaults
        to `4`). When set to 0 a directory or zfs/btrfs subvolume will be created.
        Requires `datastore_id` to be set.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "size", value)


if not MYPY:
    class ContainerFeaturesArgsDict(TypedDict):
        fuse: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Whether the container supports FUSE mounts (defaults to `false`)
        """
        keyctl: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Whether the container supports `keyctl()` system call (defaults to `false`)
        """
        mounts: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        List of allowed mount types (`cifs` or `nfs`)
        """
        nesting: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Whether the container is nested (defaults to `false`)
        """
elif False:
    ContainerFeaturesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ContainerFeaturesArgs:
    def __init__(__self__, *,
                 fuse: Optional[pulumi.Input[_builtins.bool]] = None,
                 keyctl: Optional[pulumi.Input[_builtins.bool]] = None,
                 mounts: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 nesting: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.bool] fuse: Whether the container supports FUSE mounts (defaults to `false`)
        :param pulumi.Input[_builtins.bool] keyctl: Whether the container supports `keyctl()` system call (defaults to `false`)
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] mounts: List of allowed mount types (`cifs` or `nfs`)
        :param pulumi.Input[_builtins.bool] nesting: Whether the container is nested (defaults to `false`)
        """
        if fuse is not None:
            pulumi.set(__self__, "fuse", fuse)
        if keyctl is not None:
            pulumi.set(__self__, "keyctl", keyctl)
        if mounts is not None:
            pulumi.set(__self__, "mounts", mounts)
        if nesting is not None:
            pulumi.set(__self__, "nesting", nesting)

    @_builtins.property
    @pulumi.getter
    def fuse(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the container supports FUSE mounts (defaults to `false`)
        """
        return pulumi.get(self, "fuse")

    @fuse.setter
    def fuse(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "fuse", value)

    @_builtins.property
    @pulumi.getter
    def keyctl(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the container supports `keyctl()` system call (defaults to `false`)
        """
        return pulumi.get(self, "keyctl")

    @keyctl.setter
    def keyctl(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "keyctl", value)

    @_builtins.property
    @pulumi.getter
    def mounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of allowed mount types (`cifs` or `nfs`)
        """
        return pulumi.get(self, "mounts")

    @mounts.setter
    def mounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "mounts", value)

    @_builtins.property
    @pulumi.getter
    def nesting(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the container is nested (defaults to `false`)
        """
        return pulumi.get(self, "nesting")

    @nesting.setter
    def nesting(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "nesting", value)


if not MYPY:
    class ContainerInitializationArgsDict(TypedDict):
        dns: NotRequired[pulumi.Input['ContainerInitializationDnsArgsDict']]
        """
        The DNS configuration.
        """
        hostname: NotRequired[pulumi.Input[_builtins.str]]
        """
        The hostname.
        """
        ip_configs: NotRequired[pulumi.Input[Sequence[pulumi.Input['ContainerInitializationIpConfigArgsDict']]]]
        """
        The IP configuration (one block per network
        device).
        """
        user_account: NotRequired[pulumi.Input['ContainerInitializationUserAccountArgsDict']]
        """
        The user account configuration.
        """
elif False:
    ContainerInitializationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ContainerInitializationArgs:
    def __init__(__self__, *,
                 dns: Optional[pulumi.Input['ContainerInitializationDnsArgs']] = None,
                 hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_configs: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerInitializationIpConfigArgs']]]] = None,
                 user_account: Optional[pulumi.Input['ContainerInitializationUserAccountArgs']] = None):
        """
        :param pulumi.Input['ContainerInitializationDnsArgs'] dns: The DNS configuration.
        :param pulumi.Input[_builtins.str] hostname: The hostname.
        :param pulumi.Input[Sequence[pulumi.Input['ContainerInitializationIpConfigArgs']]] ip_configs: The IP configuration (one block per network
               device).
        :param pulumi.Input['ContainerInitializationUserAccountArgs'] user_account: The user account configuration.
        """
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if ip_configs is not None:
            pulumi.set(__self__, "ip_configs", ip_configs)
        if user_account is not None:
            pulumi.set(__self__, "user_account", user_account)

    @_builtins.property
    @pulumi.getter
    def dns(self) -> Optional[pulumi.Input['ContainerInitializationDnsArgs']]:
        """
        The DNS configuration.
        """
        return pulumi.get(self, "dns")

    @dns.setter
    def dns(self, value: Optional[pulumi.Input['ContainerInitializationDnsArgs']]):
        pulumi.set(self, "dns", value)

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The hostname.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hostname", value)

    @_builtins.property
    @pulumi.getter(name="ipConfigs")
    def ip_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerInitializationIpConfigArgs']]]]:
        """
        The IP configuration (one block per network
        device).
        """
        return pulumi.get(self, "ip_configs")

    @ip_configs.setter
    def ip_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerInitializationIpConfigArgs']]]]):
        pulumi.set(self, "ip_configs", value)

    @_builtins.property
    @pulumi.getter(name="userAccount")
    def user_account(self) -> Optional[pulumi.Input['ContainerInitializationUserAccountArgs']]:
        """
        The user account configuration.
        """
        return pulumi.get(self, "user_account")

    @user_account.setter
    def user_account(self, value: Optional[pulumi.Input['ContainerInitializationUserAccountArgs']]):
        pulumi.set(self, "user_account", value)


if not MYPY:
    class ContainerInitializationDnsArgsDict(TypedDict):
        domain: NotRequired[pulumi.Input[_builtins.str]]
        """
        The DNS search domain.
        """
        server: NotRequired[pulumi.Input[_builtins.str]]
        """
        The DNS server. The `server` attribute is
        deprecated and will be removed in a future release. Please use
        the `servers` attribute instead.
        """
        servers: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The list of DNS servers.
        """
elif False:
    ContainerInitializationDnsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ContainerInitializationDnsArgs:
    def __init__(__self__, *,
                 domain: Optional[pulumi.Input[_builtins.str]] = None,
                 server: Optional[pulumi.Input[_builtins.str]] = None,
                 servers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[_builtins.str] domain: The DNS search domain.
        :param pulumi.Input[_builtins.str] server: The DNS server. The `server` attribute is
               deprecated and will be removed in a future release. Please use
               the `servers` attribute instead.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] servers: The list of DNS servers.
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if server is not None:
            warnings.warn("""The `server` attribute is deprecated and will be removed in a future release. Please use the `servers` attribute instead.""", DeprecationWarning)
            pulumi.log.warn("""server is deprecated: The `server` attribute is deprecated and will be removed in a future release. Please use the `servers` attribute instead.""")
        if server is not None:
            pulumi.set(__self__, "server", server)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)

    @_builtins.property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The DNS search domain.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain", value)

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""The `server` attribute is deprecated and will be removed in a future release. Please use the `servers` attribute instead.""")
    def server(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The DNS server. The `server` attribute is
        deprecated and will be removed in a future release. Please use
        the `servers` attribute instead.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "server", value)

    @_builtins.property
    @pulumi.getter
    def servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The list of DNS servers.
        """
        return pulumi.get(self, "servers")

    @servers.setter
    def servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "servers", value)


if not MYPY:
    class ContainerInitializationIpConfigArgsDict(TypedDict):
        ipv4: NotRequired[pulumi.Input['ContainerInitializationIpConfigIpv4ArgsDict']]
        """
        The IPv4 configuration.
        """
        ipv6: NotRequired[pulumi.Input['ContainerInitializationIpConfigIpv6ArgsDict']]
        """
        The IPv4 configuration.
        """
elif False:
    ContainerInitializationIpConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ContainerInitializationIpConfigArgs:
    def __init__(__self__, *,
                 ipv4: Optional[pulumi.Input['ContainerInitializationIpConfigIpv4Args']] = None,
                 ipv6: Optional[pulumi.Input['ContainerInitializationIpConfigIpv6Args']] = None):
        """
        :param pulumi.Input['ContainerInitializationIpConfigIpv4Args'] ipv4: The IPv4 configuration.
        :param pulumi.Input['ContainerInitializationIpConfigIpv6Args'] ipv6: The IPv4 configuration.
        """
        if ipv4 is not None:
            pulumi.set(__self__, "ipv4", ipv4)
        if ipv6 is not None:
            pulumi.set(__self__, "ipv6", ipv6)

    @_builtins.property
    @pulumi.getter
    def ipv4(self) -> Optional[pulumi.Input['ContainerInitializationIpConfigIpv4Args']]:
        """
        The IPv4 configuration.
        """
        return pulumi.get(self, "ipv4")

    @ipv4.setter
    def ipv4(self, value: Optional[pulumi.Input['ContainerInitializationIpConfigIpv4Args']]):
        pulumi.set(self, "ipv4", value)

    @_builtins.property
    @pulumi.getter
    def ipv6(self) -> Optional[pulumi.Input['ContainerInitializationIpConfigIpv6Args']]:
        """
        The IPv4 configuration.
        """
        return pulumi.get(self, "ipv6")

    @ipv6.setter
    def ipv6(self, value: Optional[pulumi.Input['ContainerInitializationIpConfigIpv6Args']]):
        pulumi.set(self, "ipv6", value)


if not MYPY:
    class ContainerInitializationIpConfigIpv4ArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        The IPv4 address (use `dhcp` for auto-discovery).
        """
        gateway: NotRequired[pulumi.Input[_builtins.str]]
        """
        The IPv4 gateway (must be omitted
        when `dhcp` is used as the address).
        """
elif False:
    ContainerInitializationIpConfigIpv4ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ContainerInitializationIpConfigIpv4Args:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] address: The IPv4 address (use `dhcp` for auto-discovery).
        :param pulumi.Input[_builtins.str] gateway: The IPv4 gateway (must be omitted
               when `dhcp` is used as the address).
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IPv4 address (use `dhcp` for auto-discovery).
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IPv4 gateway (must be omitted
        when `dhcp` is used as the address).
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gateway", value)


if not MYPY:
    class ContainerInitializationIpConfigIpv6ArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        The IPv6 address (use `dhcp` for auto-discovery).
        """
        gateway: NotRequired[pulumi.Input[_builtins.str]]
        """
        The IPv6 gateway (must be omitted
        when `dhcp` is used as the address).
        """
elif False:
    ContainerInitializationIpConfigIpv6ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ContainerInitializationIpConfigIpv6Args:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] address: The IPv6 address (use `dhcp` for auto-discovery).
        :param pulumi.Input[_builtins.str] gateway: The IPv6 gateway (must be omitted
               when `dhcp` is used as the address).
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IPv6 address (use `dhcp` for auto-discovery).
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IPv6 gateway (must be omitted
        when `dhcp` is used as the address).
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gateway", value)


if not MYPY:
    class ContainerInitializationUserAccountArgsDict(TypedDict):
        keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The SSH keys for the root account.
        """
        password: NotRequired[pulumi.Input[_builtins.str]]
        """
        The password for the root account.
        """
elif False:
    ContainerInitializationUserAccountArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ContainerInitializationUserAccountArgs:
    def __init__(__self__, *,
                 keys: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] keys: The SSH keys for the root account.
        :param pulumi.Input[_builtins.str] password: The password for the root account.
        """
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if password is not None:
            pulumi.set(__self__, "password", password)

    @_builtins.property
    @pulumi.getter
    def keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The SSH keys for the root account.
        """
        return pulumi.get(self, "keys")

    @keys.setter
    def keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "keys", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The password for the root account.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password", value)


if not MYPY:
    class ContainerMemoryArgsDict(TypedDict):
        dedicated: NotRequired[pulumi.Input[_builtins.int]]
        """
        The dedicated memory in megabytes (defaults
        to `512`).
        """
        swap: NotRequired[pulumi.Input[_builtins.int]]
        """
        The swap size in megabytes (defaults to `0`).
        """
elif False:
    ContainerMemoryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ContainerMemoryArgs:
    def __init__(__self__, *,
                 dedicated: Optional[pulumi.Input[_builtins.int]] = None,
                 swap: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] dedicated: The dedicated memory in megabytes (defaults
               to `512`).
        :param pulumi.Input[_builtins.int] swap: The swap size in megabytes (defaults to `0`).
        """
        if dedicated is not None:
            pulumi.set(__self__, "dedicated", dedicated)
        if swap is not None:
            pulumi.set(__self__, "swap", swap)

    @_builtins.property
    @pulumi.getter
    def dedicated(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The dedicated memory in megabytes (defaults
        to `512`).
        """
        return pulumi.get(self, "dedicated")

    @dedicated.setter
    def dedicated(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "dedicated", value)

    @_builtins.property
    @pulumi.getter
    def swap(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The swap size in megabytes (defaults to `0`).
        """
        return pulumi.get(self, "swap")

    @swap.setter
    def swap(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "swap", value)


if not MYPY:
    class ContainerMountPointArgsDict(TypedDict):
        path: pulumi.Input[_builtins.str]
        """
        Path to the mount point as seen from inside the
        container.
        """
        volume: pulumi.Input[_builtins.str]
        """
        Volume, device or directory to mount into the
        container.
        """
        acl: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Explicitly enable or disable ACL support.
        """
        backup: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Whether to include the mount point in backups (only
        used for volume mount points, defaults to `false`).
        """
        mount_options: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        List of extra mount options.
        """
        quota: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable user quotas inside the container (not supported
        with ZFS subvolumes).
        """
        read_only: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Read-only mount point.
        """
        replicate: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Will include this volume to a storage replica job.
        """
        shared: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Mark this non-volume mount point as available on all
        nodes.
        """
        size: NotRequired[pulumi.Input[_builtins.str]]
        """
        Volume size (only for volume mount points).
        Can be specified with a unit suffix (e.g. `10G`).
        """
elif False:
    ContainerMountPointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ContainerMountPointArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[_builtins.str],
                 volume: pulumi.Input[_builtins.str],
                 acl: Optional[pulumi.Input[_builtins.bool]] = None,
                 backup: Optional[pulumi.Input[_builtins.bool]] = None,
                 mount_options: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 quota: Optional[pulumi.Input[_builtins.bool]] = None,
                 read_only: Optional[pulumi.Input[_builtins.bool]] = None,
                 replicate: Optional[pulumi.Input[_builtins.bool]] = None,
                 shared: Optional[pulumi.Input[_builtins.bool]] = None,
                 size: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] path: Path to the mount point as seen from inside the
               container.
        :param pulumi.Input[_builtins.str] volume: Volume, device or directory to mount into the
               container.
        :param pulumi.Input[_builtins.bool] acl: Explicitly enable or disable ACL support.
        :param pulumi.Input[_builtins.bool] backup: Whether to include the mount point in backups (only
               used for volume mount points, defaults to `false`).
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] mount_options: List of extra mount options.
        :param pulumi.Input[_builtins.bool] quota: Enable user quotas inside the container (not supported
               with ZFS subvolumes).
        :param pulumi.Input[_builtins.bool] read_only: Read-only mount point.
        :param pulumi.Input[_builtins.bool] replicate: Will include this volume to a storage replica job.
        :param pulumi.Input[_builtins.bool] shared: Mark this non-volume mount point as available on all
               nodes.
        :param pulumi.Input[_builtins.str] size: Volume size (only for volume mount points).
               Can be specified with a unit suffix (e.g. `10G`).
        """
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "volume", volume)
        if acl is not None:
            pulumi.set(__self__, "acl", acl)
        if backup is not None:
            pulumi.set(__self__, "backup", backup)
        if mount_options is not None:
            pulumi.set(__self__, "mount_options", mount_options)
        if quota is not None:
            pulumi.set(__self__, "quota", quota)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if replicate is not None:
            pulumi.set(__self__, "replicate", replicate)
        if shared is not None:
            pulumi.set(__self__, "shared", shared)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @_builtins.property
    @pulumi.getter
    def path(self) -> pulumi.Input[_builtins.str]:
        """
        Path to the mount point as seen from inside the
        container.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter
    def volume(self) -> pulumi.Input[_builtins.str]:
        """
        Volume, device or directory to mount into the
        container.
        """
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "volume", value)

    @_builtins.property
    @pulumi.getter
    def acl(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Explicitly enable or disable ACL support.
        """
        return pulumi.get(self, "acl")

    @acl.setter
    def acl(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "acl", value)

    @_builtins.property
    @pulumi.getter
    def backup(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to include the mount point in backups (only
        used for volume mount points, defaults to `false`).
        """
        return pulumi.get(self, "backup")

    @backup.setter
    def backup(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "backup", value)

    @_builtins.property
    @pulumi.getter(name="mountOptions")
    def mount_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of extra mount options.
        """
        return pulumi.get(self, "mount_options")

    @mount_options.setter
    def mount_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "mount_options", value)

    @_builtins.property
    @pulumi.getter
    def quota(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable user quotas inside the container (not supported
        with ZFS subvolumes).
        """
        return pulumi.get(self, "quota")

    @quota.setter
    def quota(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "quota", value)

    @_builtins.property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Read-only mount point.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "read_only", value)

    @_builtins.property
    @pulumi.getter
    def replicate(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Will include this volume to a storage replica job.
        """
        return pulumi.get(self, "replicate")

    @replicate.setter
    def replicate(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "replicate", value)

    @_builtins.property
    @pulumi.getter
    def shared(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Mark this non-volume mount point as available on all
        nodes.
        """
        return pulumi.get(self, "shared")

    @shared.setter
    def shared(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "shared", value)

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Volume size (only for volume mount points).
        Can be specified with a unit suffix (e.g. `10G`).
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "size", value)


if not MYPY:
    class ContainerNetworkInterfaceArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        The network interface name.
        """
        bridge: NotRequired[pulumi.Input[_builtins.str]]
        """
        The name of the network bridge (defaults
        to `vmbr0`).
        """
        enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Whether to enable the network device (defaults
        to `true`).
        """
        firewall: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Whether this interface's firewall rules should be
        used (defaults to `false`).
        """
        mac_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        The MAC address.
        """
        mtu: NotRequired[pulumi.Input[_builtins.int]]
        """
        Maximum transfer unit of the interface. Cannot be
        larger than the bridge's MTU.
        """
        rate_limit: NotRequired[pulumi.Input[_builtins.float]]
        """
        The rate limit in megabytes per second.
        """
        vlan_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        The VLAN identifier.
        """
elif False:
    ContainerNetworkInterfaceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ContainerNetworkInterfaceArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 bridge: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 firewall: Optional[pulumi.Input[_builtins.bool]] = None,
                 mac_address: Optional[pulumi.Input[_builtins.str]] = None,
                 mtu: Optional[pulumi.Input[_builtins.int]] = None,
                 rate_limit: Optional[pulumi.Input[_builtins.float]] = None,
                 vlan_id: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] name: The network interface name.
        :param pulumi.Input[_builtins.str] bridge: The name of the network bridge (defaults
               to `vmbr0`).
        :param pulumi.Input[_builtins.bool] enabled: Whether to enable the network device (defaults
               to `true`).
        :param pulumi.Input[_builtins.bool] firewall: Whether this interface's firewall rules should be
               used (defaults to `false`).
        :param pulumi.Input[_builtins.str] mac_address: The MAC address.
        :param pulumi.Input[_builtins.int] mtu: Maximum transfer unit of the interface. Cannot be
               larger than the bridge's MTU.
        :param pulumi.Input[_builtins.float] rate_limit: The rate limit in megabytes per second.
        :param pulumi.Input[_builtins.int] vlan_id: The VLAN identifier.
        """
        pulumi.set(__self__, "name", name)
        if bridge is not None:
            pulumi.set(__self__, "bridge", bridge)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if firewall is not None:
            pulumi.set(__self__, "firewall", firewall)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if rate_limit is not None:
            pulumi.set(__self__, "rate_limit", rate_limit)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        The network interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def bridge(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the network bridge (defaults
        to `vmbr0`).
        """
        return pulumi.get(self, "bridge")

    @bridge.setter
    def bridge(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bridge", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to enable the network device (defaults
        to `true`).
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter
    def firewall(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether this interface's firewall rules should be
        used (defaults to `false`).
        """
        return pulumi.get(self, "firewall")

    @firewall.setter
    def firewall(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "firewall", value)

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The MAC address.
        """
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac_address", value)

    @_builtins.property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Maximum transfer unit of the interface. Cannot be
        larger than the bridge's MTU.
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "mtu", value)

    @_builtins.property
    @pulumi.getter(name="rateLimit")
    def rate_limit(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The rate limit in megabytes per second.
        """
        return pulumi.get(self, "rate_limit")

    @rate_limit.setter
    def rate_limit(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "rate_limit", value)

    @_builtins.property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The VLAN identifier.
        """
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vlan_id", value)


if not MYPY:
    class ContainerOperatingSystemArgsDict(TypedDict):
        template_file_id: pulumi.Input[_builtins.str]
        """
        The identifier for an OS template file.
        The ID format is `<datastore_id>:<content_type>/<file_name>`, for example `local:iso/jammy-server-cloudimg-amd64.tar.gz`.
        Can be also taken from `Download.File` resource, or from the output of `pvesm list <storage>`.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        The type (defaults to `unmanaged`).
        """
elif False:
    ContainerOperatingSystemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ContainerOperatingSystemArgs:
    def __init__(__self__, *,
                 template_file_id: pulumi.Input[_builtins.str],
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] template_file_id: The identifier for an OS template file.
               The ID format is `<datastore_id>:<content_type>/<file_name>`, for example `local:iso/jammy-server-cloudimg-amd64.tar.gz`.
               Can be also taken from `Download.File` resource, or from the output of `pvesm list <storage>`.
        :param pulumi.Input[_builtins.str] type: The type (defaults to `unmanaged`).
        """
        pulumi.set(__self__, "template_file_id", template_file_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="templateFileId")
    def template_file_id(self) -> pulumi.Input[_builtins.str]:
        """
        The identifier for an OS template file.
        The ID format is `<datastore_id>:<content_type>/<file_name>`, for example `local:iso/jammy-server-cloudimg-amd64.tar.gz`.
        Can be also taken from `Download.File` resource, or from the output of `pvesm list <storage>`.
        """
        return pulumi.get(self, "template_file_id")

    @template_file_id.setter
    def template_file_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "template_file_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type (defaults to `unmanaged`).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class ContainerStartupArgsDict(TypedDict):
        down_delay: NotRequired[pulumi.Input[_builtins.int]]
        """
        A non-negative number defining the delay in
        seconds before the next container is shut down.
        """
        order: NotRequired[pulumi.Input[_builtins.int]]
        """
        A non-negative number defining the general startup
        order.
        """
        up_delay: NotRequired[pulumi.Input[_builtins.int]]
        """
        A non-negative number defining the delay in
        seconds before the next container is started.
        """
elif False:
    ContainerStartupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ContainerStartupArgs:
    def __init__(__self__, *,
                 down_delay: Optional[pulumi.Input[_builtins.int]] = None,
                 order: Optional[pulumi.Input[_builtins.int]] = None,
                 up_delay: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] down_delay: A non-negative number defining the delay in
               seconds before the next container is shut down.
        :param pulumi.Input[_builtins.int] order: A non-negative number defining the general startup
               order.
        :param pulumi.Input[_builtins.int] up_delay: A non-negative number defining the delay in
               seconds before the next container is started.
        """
        if down_delay is not None:
            pulumi.set(__self__, "down_delay", down_delay)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if up_delay is not None:
            pulumi.set(__self__, "up_delay", up_delay)

    @_builtins.property
    @pulumi.getter(name="downDelay")
    def down_delay(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        A non-negative number defining the delay in
        seconds before the next container is shut down.
        """
        return pulumi.get(self, "down_delay")

    @down_delay.setter
    def down_delay(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "down_delay", value)

    @_builtins.property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        A non-negative number defining the general startup
        order.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "order", value)

    @_builtins.property
    @pulumi.getter(name="upDelay")
    def up_delay(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        A non-negative number defining the delay in
        seconds before the next container is started.
        """
        return pulumi.get(self, "up_delay")

    @up_delay.setter
    def up_delay(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "up_delay", value)



// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ProxmoxVE
{
    public static class GetContainer
    {
        /// <summary>
        /// Retrieves information about a specific Container.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testContainer = ProxmoxVE.GetContainer.Invoke(new()
        ///     {
        ///         NodeName = "test",
        ///         VmId = 100,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetContainerResult> InvokeAsync(GetContainerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetContainerResult>("proxmoxve:index/getContainer:getContainer", args ?? new GetContainerArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves information about a specific Container.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testContainer = ProxmoxVE.GetContainer.Invoke(new()
        ///     {
        ///         NodeName = "test",
        ///         VmId = 100,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetContainerResult> Invoke(GetContainerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetContainerResult>("proxmoxve:index/getContainer:getContainer", args ?? new GetContainerInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves information about a specific Container.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testContainer = ProxmoxVE.GetContainer.Invoke(new()
        ///     {
        ///         NodeName = "test",
        ///         VmId = 100,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetContainerResult> Invoke(GetContainerInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetContainerResult>("proxmoxve:index/getContainer:getContainer", args ?? new GetContainerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetContainerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The node name.
        /// </summary>
        [Input("nodeName", required: true)]
        public string NodeName { get; set; } = null!;

        /// <summary>
        /// Status of the container
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        /// <summary>
        /// Is container a template (true) or a regular container (false)
        /// </summary>
        [Input("template")]
        public bool? Template { get; set; }

        /// <summary>
        /// The container identifier.
        /// </summary>
        [Input("vmId", required: true)]
        public int VmId { get; set; }

        public GetContainerArgs()
        {
        }
        public static new GetContainerArgs Empty => new GetContainerArgs();
    }

    public sealed class GetContainerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The node name.
        /// </summary>
        [Input("nodeName", required: true)]
        public Input<string> NodeName { get; set; } = null!;

        /// <summary>
        /// Status of the container
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Is container a template (true) or a regular container (false)
        /// </summary>
        [Input("template")]
        public Input<bool>? Template { get; set; }

        /// <summary>
        /// The container identifier.
        /// </summary>
        [Input("vmId", required: true)]
        public Input<int> VmId { get; set; } = null!;

        public GetContainerInvokeArgs()
        {
        }
        public static new GetContainerInvokeArgs Empty => new GetContainerInvokeArgs();
    }


    [OutputType]
    public sealed class GetContainerResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The container name.
        /// </summary>
        public readonly string Name;
        public readonly string NodeName;
        /// <summary>
        /// Status of the container
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// A list of tags of the container.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// Is container a template (true) or a regular container (false)
        /// </summary>
        public readonly bool? Template;
        public readonly int VmId;

        [OutputConstructor]
        private GetContainerResult(
            string id,

            string name,

            string nodeName,

            string? status,

            ImmutableArray<string> tags,

            bool? template,

            int vmId)
        {
            Id = id;
            Name = name;
            NodeName = nodeName;
            Status = status;
            Tags = tags;
            Template = template;
            VmId = vmId;
        }
    }
}

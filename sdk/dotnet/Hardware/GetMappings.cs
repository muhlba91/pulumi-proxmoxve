// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ProxmoxVE.Hardware
{
    public static class GetMappings
    {
        /// <summary>
        /// Retrieves a list of hardware mapping resources.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example_dir = ProxmoxVE.Hardware.GetMappings.Invoke(new()
        ///     {
        ///         CheckNode = "pve",
        ///         Type = "dir",
        ///     });
        /// 
        ///     var example_pci = ProxmoxVE.Hardware.GetMappings.Invoke(new()
        ///     {
        ///         CheckNode = "pve",
        ///         Type = "pci",
        ///     });
        /// 
        ///     var example_usb = ProxmoxVE.Hardware.GetMappings.Invoke(new()
        ///     {
        ///         CheckNode = "pve",
        ///         Type = "usb",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["dataProxmoxVirtualEnvironmentHardwareMappingsPci"] = example_pci,
        ///         ["dataProxmoxVirtualEnvironmentHardwareMappingsUsb"] = example_usb,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetMappingsResult> InvokeAsync(GetMappingsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMappingsResult>("proxmoxve:Hardware/getMappings:getMappings", args ?? new GetMappingsArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves a list of hardware mapping resources.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example_dir = ProxmoxVE.Hardware.GetMappings.Invoke(new()
        ///     {
        ///         CheckNode = "pve",
        ///         Type = "dir",
        ///     });
        /// 
        ///     var example_pci = ProxmoxVE.Hardware.GetMappings.Invoke(new()
        ///     {
        ///         CheckNode = "pve",
        ///         Type = "pci",
        ///     });
        /// 
        ///     var example_usb = ProxmoxVE.Hardware.GetMappings.Invoke(new()
        ///     {
        ///         CheckNode = "pve",
        ///         Type = "usb",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["dataProxmoxVirtualEnvironmentHardwareMappingsPci"] = example_pci,
        ///         ["dataProxmoxVirtualEnvironmentHardwareMappingsUsb"] = example_usb,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetMappingsResult> Invoke(GetMappingsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMappingsResult>("proxmoxve:Hardware/getMappings:getMappings", args ?? new GetMappingsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves a list of hardware mapping resources.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example_dir = ProxmoxVE.Hardware.GetMappings.Invoke(new()
        ///     {
        ///         CheckNode = "pve",
        ///         Type = "dir",
        ///     });
        /// 
        ///     var example_pci = ProxmoxVE.Hardware.GetMappings.Invoke(new()
        ///     {
        ///         CheckNode = "pve",
        ///         Type = "pci",
        ///     });
        /// 
        ///     var example_usb = ProxmoxVE.Hardware.GetMappings.Invoke(new()
        ///     {
        ///         CheckNode = "pve",
        ///         Type = "usb",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["dataProxmoxVirtualEnvironmentHardwareMappingsPci"] = example_pci,
        ///         ["dataProxmoxVirtualEnvironmentHardwareMappingsUsb"] = example_usb,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetMappingsResult> Invoke(GetMappingsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetMappingsResult>("proxmoxve:Hardware/getMappings:getMappings", args ?? new GetMappingsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMappingsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the node whose configurations should be checked for correctness.
        /// </summary>
        [Input("checkNode")]
        public string? CheckNode { get; set; }

        /// <summary>
        /// The type of the hardware mappings.
        /// </summary>
        [Input("type", required: true)]
        public string Type { get; set; } = null!;

        public GetMappingsArgs()
        {
        }
        public static new GetMappingsArgs Empty => new GetMappingsArgs();
    }

    public sealed class GetMappingsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the node whose configurations should be checked for correctness.
        /// </summary>
        [Input("checkNode")]
        public Input<string>? CheckNode { get; set; }

        /// <summary>
        /// The type of the hardware mappings.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public GetMappingsInvokeArgs()
        {
        }
        public static new GetMappingsInvokeArgs Empty => new GetMappingsInvokeArgs();
    }


    [OutputType]
    public sealed class GetMappingsResult
    {
        /// <summary>
        /// The name of the node whose configurations should be checked for correctness.
        /// </summary>
        public readonly string? CheckNode;
        /// <summary>
        /// Might contain relevant diagnostics about incorrect configurations.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMappingsCheckResult> Checks;
        /// <summary>
        /// The unique identifier of this hardware mappings data source.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The identifiers of the hardware mappings.
        /// </summary>
        public readonly ImmutableArray<string> Ids;
        /// <summary>
        /// The type of the hardware mappings.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetMappingsResult(
            string? checkNode,

            ImmutableArray<Outputs.GetMappingsCheckResult> checks,

            string id,

            ImmutableArray<string> ids,

            string type)
        {
            CheckNode = checkNode;
            Checks = checks;
            Id = id;
            Ids = ids;
            Type = type;
        }
    }
}

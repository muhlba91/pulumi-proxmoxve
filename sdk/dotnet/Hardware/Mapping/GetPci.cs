// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ProxmoxVE.Hardware.Mapping
{
    public static class GetPci
    {
        /// <summary>
        /// Retrieves a PCI hardware mapping from a Proxmox VE cluster.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = ProxmoxVE.Hardware.Mapping.GetPci.Invoke(new()
        ///     {
        ///         Name = "example",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["dataProxmoxVirtualEnvironmentHardwareMappingPci"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetPciResult> InvokeAsync(GetPciArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPciResult>("proxmoxve:Hardware/mapping/getPci:getPci", args ?? new GetPciArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves a PCI hardware mapping from a Proxmox VE cluster.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = ProxmoxVE.Hardware.Mapping.GetPci.Invoke(new()
        ///     {
        ///         Name = "example",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["dataProxmoxVirtualEnvironmentHardwareMappingPci"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetPciResult> Invoke(GetPciInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPciResult>("proxmoxve:Hardware/mapping/getPci:getPci", args ?? new GetPciInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves a PCI hardware mapping from a Proxmox VE cluster.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = ProxmoxVE.Hardware.Mapping.GetPci.Invoke(new()
        ///     {
        ///         Name = "example",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["dataProxmoxVirtualEnvironmentHardwareMappingPci"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetPciResult> Invoke(GetPciInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPciResult>("proxmoxve:Hardware/mapping/getPci:getPci", args ?? new GetPciInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPciArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of this PCI hardware mapping.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetPciArgs()
        {
        }
        public static new GetPciArgs Empty => new GetPciArgs();
    }

    public sealed class GetPciInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of this PCI hardware mapping.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetPciInvokeArgs()
        {
        }
        public static new GetPciInvokeArgs Empty => new GetPciInvokeArgs();
    }


    [OutputType]
    public sealed class GetPciResult
    {
        /// <summary>
        /// The comment of this PCI hardware mapping.
        /// </summary>
        public readonly string Comment;
        /// <summary>
        /// The unique identifier of this PCI hardware mapping data source.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The actual map of devices for the hardware mapping.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPciMapResult> Maps;
        /// <summary>
        /// Indicates whether to use with mediated devices.
        /// </summary>
        public readonly bool MediatedDevices;
        /// <summary>
        /// The name of this PCI hardware mapping.
        /// </summary>
        public readonly string Name;

        [OutputConstructor]
        private GetPciResult(
            string comment,

            string id,

            ImmutableArray<Outputs.GetPciMapResult> maps,

            bool mediatedDevices,

            string name)
        {
            Comment = comment;
            Id = id;
            Maps = maps;
            MediatedDevices = mediatedDevices;
            Name = name;
        }
    }
}

// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ProxmoxVE.Hardware.Mapping
{
    public static class GetDir
    {
        /// <summary>
        /// Retrieves a directory mapping from a Proxmox VE cluster.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = ProxmoxVE.Hardware.Mapping.GetDir.Invoke(new()
        ///     {
        ///         Name = "example",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["dataProxmoxVirtualEnvironmentHardwareMappingDir"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetDirResult> InvokeAsync(GetDirArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDirResult>("proxmoxve:Hardware/mapping/getDir:getDir", args ?? new GetDirArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves a directory mapping from a Proxmox VE cluster.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = ProxmoxVE.Hardware.Mapping.GetDir.Invoke(new()
        ///     {
        ///         Name = "example",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["dataProxmoxVirtualEnvironmentHardwareMappingDir"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetDirResult> Invoke(GetDirInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDirResult>("proxmoxve:Hardware/mapping/getDir:getDir", args ?? new GetDirInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves a directory mapping from a Proxmox VE cluster.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = ProxmoxVE.Hardware.Mapping.GetDir.Invoke(new()
        ///     {
        ///         Name = "example",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["dataProxmoxVirtualEnvironmentHardwareMappingDir"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetDirResult> Invoke(GetDirInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDirResult>("proxmoxve:Hardware/mapping/getDir:getDir", args ?? new GetDirInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDirArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of this directory mapping.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetDirArgs()
        {
        }
        public static new GetDirArgs Empty => new GetDirArgs();
    }

    public sealed class GetDirInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of this directory mapping.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetDirInvokeArgs()
        {
        }
        public static new GetDirInvokeArgs Empty => new GetDirInvokeArgs();
    }


    [OutputType]
    public sealed class GetDirResult
    {
        /// <summary>
        /// The comment of this directory mapping.
        /// </summary>
        public readonly string Comment;
        /// <summary>
        /// The unique identifier of this directory mapping data source.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The actual map of devices for the directory mapping.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDirMapResult> Maps;
        /// <summary>
        /// The name of this directory mapping.
        /// </summary>
        public readonly string Name;

        [OutputConstructor]
        private GetDirResult(
            string comment,

            string id,

            ImmutableArray<Outputs.GetDirMapResult> maps,

            string name)
        {
            Comment = comment;
            Id = id;
            Maps = maps;
            Name = name;
        }
    }
}

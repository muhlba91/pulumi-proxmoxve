// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ProxmoxVE.Hardware.Mapping
{
    /// <summary>
    /// Manages a PCI hardware mapping in a Proxmox VE cluster.
    /// 
    /// ## Import
    /// 
    /// #!/usr/bin/env sh
    /// 
    /// A PCI hardware mapping can be imported using their name, e.g.:
    /// 
    /// ```sh
    /// $ pulumi import proxmoxve:Hardware/mapping/pci:Pci example example
    /// ```
    /// </summary>
    [ProxmoxVEResourceType("proxmoxve:Hardware/mapping/pci:Pci")]
    public partial class Pci : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The comment of this PCI hardware mapping.
        /// </summary>
        [Output("comment")]
        public Output<string?> Comment { get; private set; } = null!;

        /// <summary>
        /// The actual map of devices for the PCI hardware mapping.
        /// </summary>
        [Output("maps")]
        public Output<ImmutableArray<Outputs.PciMap>> Maps { get; private set; } = null!;

        /// <summary>
        /// Indicates whether to enable mediated devices.
        /// </summary>
        [Output("mediatedDevices")]
        public Output<bool> MediatedDevices { get; private set; } = null!;

        /// <summary>
        /// The name of this PCI hardware mapping.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a Pci resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Pci(string name, PciArgs args, CustomResourceOptions? options = null)
            : base("proxmoxve:Hardware/mapping/pci:Pci", name, args ?? new PciArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Pci(string name, Input<string> id, PciState? state = null, CustomResourceOptions? options = null)
            : base("proxmoxve:Hardware/mapping/pci:Pci", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/muhlba91/pulumi-proxmoxve",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Pci resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Pci Get(string name, Input<string> id, PciState? state = null, CustomResourceOptions? options = null)
        {
            return new Pci(name, id, state, options);
        }
    }

    public sealed class PciArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The comment of this PCI hardware mapping.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        [Input("maps", required: true)]
        private InputList<Inputs.PciMapArgs>? _maps;

        /// <summary>
        /// The actual map of devices for the PCI hardware mapping.
        /// </summary>
        public InputList<Inputs.PciMapArgs> Maps
        {
            get => _maps ?? (_maps = new InputList<Inputs.PciMapArgs>());
            set => _maps = value;
        }

        /// <summary>
        /// Indicates whether to enable mediated devices.
        /// </summary>
        [Input("mediatedDevices")]
        public Input<bool>? MediatedDevices { get; set; }

        /// <summary>
        /// The name of this PCI hardware mapping.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public PciArgs()
        {
        }
        public static new PciArgs Empty => new PciArgs();
    }

    public sealed class PciState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The comment of this PCI hardware mapping.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        [Input("maps")]
        private InputList<Inputs.PciMapGetArgs>? _maps;

        /// <summary>
        /// The actual map of devices for the PCI hardware mapping.
        /// </summary>
        public InputList<Inputs.PciMapGetArgs> Maps
        {
            get => _maps ?? (_maps = new InputList<Inputs.PciMapGetArgs>());
            set => _maps = value;
        }

        /// <summary>
        /// Indicates whether to enable mediated devices.
        /// </summary>
        [Input("mediatedDevices")]
        public Input<bool>? MediatedDevices { get; set; }

        /// <summary>
        /// The name of this PCI hardware mapping.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public PciState()
        {
        }
        public static new PciState Empty => new PciState();
    }
}

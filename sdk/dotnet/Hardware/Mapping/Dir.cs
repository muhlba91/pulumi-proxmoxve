// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ProxmoxVE.Hardware.Mapping
{
    /// <summary>
    /// Manages a directory mapping in a Proxmox VE cluster.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using ProxmoxVE = Pulumi.ProxmoxVE;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new ProxmoxVE.Hardware.Mapping.Dir("example", new()
    ///     {
    ///         Comment = "This is a comment",
    ///         Maps = new[]
    ///         {
    ///             new ProxmoxVE.Hardware.Mapping.Inputs.DirMapArgs
    ///             {
    ///                 Node = "pve",
    ///                 Path = "/mnt/data",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// #!/usr/bin/env sh
    /// 
    /// A directory mapping can be imported using their name, e.g.:
    /// 
    /// ```sh
    /// $ pulumi import proxmoxve:Hardware/mapping/dir:Dir example example
    /// ```
    /// </summary>
    [ProxmoxVEResourceType("proxmoxve:Hardware/mapping/dir:Dir")]
    public partial class Dir : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The comment of this directory mapping.
        /// </summary>
        [Output("comment")]
        public Output<string?> Comment { get; private set; } = null!;

        /// <summary>
        /// The actual map of devices for the hardware mapping.
        /// </summary>
        [Output("maps")]
        public Output<ImmutableArray<Outputs.DirMap>> Maps { get; private set; } = null!;

        /// <summary>
        /// The name of this directory mapping.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a Dir resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Dir(string name, DirArgs args, CustomResourceOptions? options = null)
            : base("proxmoxve:Hardware/mapping/dir:Dir", name, args ?? new DirArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Dir(string name, Input<string> id, DirState? state = null, CustomResourceOptions? options = null)
            : base("proxmoxve:Hardware/mapping/dir:Dir", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/muhlba91/pulumi-proxmoxve",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Dir resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Dir Get(string name, Input<string> id, DirState? state = null, CustomResourceOptions? options = null)
        {
            return new Dir(name, id, state, options);
        }
    }

    public sealed class DirArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The comment of this directory mapping.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        [Input("maps", required: true)]
        private InputList<Inputs.DirMapArgs>? _maps;

        /// <summary>
        /// The actual map of devices for the hardware mapping.
        /// </summary>
        public InputList<Inputs.DirMapArgs> Maps
        {
            get => _maps ?? (_maps = new InputList<Inputs.DirMapArgs>());
            set => _maps = value;
        }

        /// <summary>
        /// The name of this directory mapping.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public DirArgs()
        {
        }
        public static new DirArgs Empty => new DirArgs();
    }

    public sealed class DirState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The comment of this directory mapping.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        [Input("maps")]
        private InputList<Inputs.DirMapGetArgs>? _maps;

        /// <summary>
        /// The actual map of devices for the hardware mapping.
        /// </summary>
        public InputList<Inputs.DirMapGetArgs> Maps
        {
            get => _maps ?? (_maps = new InputList<Inputs.DirMapGetArgs>());
            set => _maps = value;
        }

        /// <summary>
        /// The name of this directory mapping.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public DirState()
        {
        }
        public static new DirState Empty => new DirState();
    }
}

// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ProxmoxVE.Outputs
{

    [OutputType]
    public sealed class GetVm2CpuResult
    {
        /// <summary>
        /// List of host cores used to execute guest processes, for example: '0,5,8-11'
        /// </summary>
        public readonly string Affinity;
        /// <summary>
        /// The CPU architecture.
        /// </summary>
        public readonly string Architecture;
        /// <summary>
        /// The number of CPU cores per socket.
        /// </summary>
        public readonly int Cores;
        /// <summary>
        /// Set of additional CPU flags.
        /// </summary>
        public readonly ImmutableArray<string> Flags;
        /// <summary>
        /// The number of hotplugged vCPUs.
        /// </summary>
        public readonly int Hotplugged;
        /// <summary>
        /// Limit of CPU usage.
        /// </summary>
        public readonly int Limit;
        /// <summary>
        /// Enable NUMA.
        /// </summary>
        public readonly bool Numa;
        /// <summary>
        /// The number of CPU sockets.
        /// </summary>
        public readonly int Sockets;
        /// <summary>
        /// Emulated CPU type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// CPU weight for a VM
        /// </summary>
        public readonly int Units;

        [OutputConstructor]
        private GetVm2CpuResult(
            string affinity,

            string architecture,

            int cores,

            ImmutableArray<string> flags,

            int hotplugged,

            int limit,

            bool numa,

            int sockets,

            string type,

            int units)
        {
            Affinity = affinity;
            Architecture = architecture;
            Cores = cores;
            Flags = flags;
            Hotplugged = hotplugged;
            Limit = limit;
            Numa = numa;
            Sockets = sockets;
            Type = type;
            Units = units;
        }
    }
}

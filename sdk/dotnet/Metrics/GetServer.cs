// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ProxmoxVE.Metrics
{
    public static class GetServer
    {
        /// <summary>
        /// Retrieves information about a specific PVE metric server.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = ProxmoxVE.Metrics.GetServer.Invoke(new()
        ///     {
        ///         Name = "example_influxdb",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["dataProxmoxVirtualEnvironmentMetricsServer"] = 
        ///         {
        ///             { "server", example.Apply(getServerResult =&gt; getServerResult.Server) },
        ///             { "port", example.Apply(getServerResult =&gt; getServerResult.Port) },
        ///         },
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetServerResult> InvokeAsync(GetServerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServerResult>("proxmoxve:Metrics/getServer:getServer", args ?? new GetServerArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves information about a specific PVE metric server.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = ProxmoxVE.Metrics.GetServer.Invoke(new()
        ///     {
        ///         Name = "example_influxdb",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["dataProxmoxVirtualEnvironmentMetricsServer"] = 
        ///         {
        ///             { "server", example.Apply(getServerResult =&gt; getServerResult.Server) },
        ///             { "port", example.Apply(getServerResult =&gt; getServerResult.Port) },
        ///         },
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetServerResult> Invoke(GetServerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServerResult>("proxmoxve:Metrics/getServer:getServer", args ?? new GetServerInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves information about a specific PVE metric server.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = ProxmoxVE.Metrics.GetServer.Invoke(new()
        ///     {
        ///         Name = "example_influxdb",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["dataProxmoxVirtualEnvironmentMetricsServer"] = 
        ///         {
        ///             { "server", example.Apply(getServerResult =&gt; getServerResult.Server) },
        ///             { "port", example.Apply(getServerResult =&gt; getServerResult.Port) },
        ///         },
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetServerResult> Invoke(GetServerInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetServerResult>("proxmoxve:Metrics/getServer:getServer", args ?? new GetServerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique name that will be ID of this metric server in PVE.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetServerArgs()
        {
        }
        public static new GetServerArgs Empty => new GetServerArgs();
    }

    public sealed class GetServerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique name that will be ID of this metric server in PVE.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetServerInvokeArgs()
        {
        }
        public static new GetServerInvokeArgs Empty => new GetServerInvokeArgs();
    }


    [OutputType]
    public sealed class GetServerResult
    {
        /// <summary>
        /// Indicates if the metric server is disabled.
        /// </summary>
        public readonly bool Disable;
        /// <summary>
        /// The unique identifier of this resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Unique name that will be ID of this metric server in PVE.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Server network port.
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// Server dns name or IP address.
        /// </summary>
        public readonly string Server;
        /// <summary>
        /// Plugin type. Either `graphite` or `influxdb`.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetServerResult(
            bool disable,

            string id,

            string name,

            int port,

            string server,

            string type)
        {
            Disable = disable;
            Id = id;
            Name = name;
            Port = port;
            Server = server;
            Type = type;
        }
    }
}

// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ProxmoxVE.Metrics
{
    /// <summary>
    /// Manages PVE metrics server.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using ProxmoxVE = Pulumi.ProxmoxVE;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var influxdbServer = new ProxmoxVE.Metrics.MetricsServer("influxdbServer", new()
    ///     {
    ///         Port = 8089,
    ///         Server = "192.168.3.2",
    ///         Type = "influxdb",
    ///     });
    /// 
    ///     var graphiteServer = new ProxmoxVE.Metrics.MetricsServer("graphiteServer", new()
    ///     {
    ///         Port = 2003,
    ///         Server = "192.168.4.2",
    ///         Type = "graphite",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// #!/usr/bin/env sh
    /// 
    /// ```sh
    /// $ pulumi import proxmoxve:Metrics/metricsServer:MetricsServer example example
    /// ```
    /// </summary>
    [ProxmoxVEResourceType("proxmoxve:Metrics/metricsServer:MetricsServer")]
    public partial class MetricsServer : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Set this to `true` to disable this metric server.
        /// </summary>
        [Output("disable")]
        public Output<bool?> Disable { get; private set; } = null!;

        /// <summary>
        /// Root graphite path (ex: `proxmox.mycluster.mykey`).
        /// </summary>
        [Output("graphitePath")]
        public Output<string?> GraphitePath { get; private set; } = null!;

        /// <summary>
        /// Protocol to send graphite data. Choice is between `udp` | `tcp`. If not set, PVE default is `udp`.
        /// </summary>
        [Output("graphiteProto")]
        public Output<string?> GraphiteProto { get; private set; } = null!;

        /// <summary>
        /// An API path prefix inserted between `&lt;host&gt;:&lt;port&gt;/` and `/api2/`. Can be useful if the InfluxDB service runs behind a reverse proxy.
        /// </summary>
        [Output("influxApiPathPrefix")]
        public Output<string?> InfluxApiPathPrefix { get; private set; } = null!;

        /// <summary>
        /// The InfluxDB bucket/db. Only necessary when using the http v2 api.
        /// </summary>
        [Output("influxBucket")]
        public Output<string?> InfluxBucket { get; private set; } = null!;

        /// <summary>
        /// Protocol for InfluxDB. Choice is between `udp` | `http` | `https`. If not set, PVE default is `udp`.
        /// </summary>
        [Output("influxDbProto")]
        public Output<string?> InfluxDbProto { get; private set; } = null!;

        /// <summary>
        /// InfluxDB max-body-size in bytes. Requests are batched up to this size. If not set, PVE default is `25000000`.
        /// </summary>
        [Output("influxMaxBodySize")]
        public Output<int?> InfluxMaxBodySize { get; private set; } = null!;

        /// <summary>
        /// The InfluxDB organization. Only necessary when using the http v2 api. Has no meaning when using v2 compatibility api.
        /// </summary>
        [Output("influxOrganization")]
        public Output<string?> InfluxOrganization { get; private set; } = null!;

        /// <summary>
        /// The InfluxDB access token. Only necessary when using the http v2 api. If the v2 compatibility api is used, use `user:password` instead.
        /// </summary>
        [Output("influxToken")]
        public Output<string?> InfluxToken { get; private set; } = null!;

        /// <summary>
        /// Set to `false` to disable certificate verification for https endpoints.
        /// </summary>
        [Output("influxVerify")]
        public Output<bool?> InfluxVerify { get; private set; } = null!;

        /// <summary>
        /// MTU (maximum transmission unit) for metrics transmission over UDP. If not set, PVE default is `1500` (allowed `512` - `65536`).
        /// </summary>
        [Output("mtu")]
        public Output<int?> Mtu { get; private set; } = null!;

        /// <summary>
        /// Unique name that will be ID of this metric server in PVE.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Server network port.
        /// </summary>
        [Output("port")]
        public Output<int> Port { get; private set; } = null!;

        /// <summary>
        /// Server dns name or IP address.
        /// </summary>
        [Output("server")]
        public Output<string> Server { get; private set; } = null!;

        /// <summary>
        /// TCP socket timeout in seconds. If not set, PVE default is `1`.
        /// </summary>
        [Output("timeout")]
        public Output<int?> Timeout { get; private set; } = null!;

        /// <summary>
        /// Plugin type. Choice is between `graphite` | `influxdb`.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a MetricsServer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MetricsServer(string name, MetricsServerArgs args, CustomResourceOptions? options = null)
            : base("proxmoxve:Metrics/metricsServer:MetricsServer", name, args ?? new MetricsServerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MetricsServer(string name, Input<string> id, MetricsServerState? state = null, CustomResourceOptions? options = null)
            : base("proxmoxve:Metrics/metricsServer:MetricsServer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/muhlba91/pulumi-proxmoxve",
                AdditionalSecretOutputs =
                {
                    "influxToken",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MetricsServer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MetricsServer Get(string name, Input<string> id, MetricsServerState? state = null, CustomResourceOptions? options = null)
        {
            return new MetricsServer(name, id, state, options);
        }
    }

    public sealed class MetricsServerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Set this to `true` to disable this metric server.
        /// </summary>
        [Input("disable")]
        public Input<bool>? Disable { get; set; }

        /// <summary>
        /// Root graphite path (ex: `proxmox.mycluster.mykey`).
        /// </summary>
        [Input("graphitePath")]
        public Input<string>? GraphitePath { get; set; }

        /// <summary>
        /// Protocol to send graphite data. Choice is between `udp` | `tcp`. If not set, PVE default is `udp`.
        /// </summary>
        [Input("graphiteProto")]
        public Input<string>? GraphiteProto { get; set; }

        /// <summary>
        /// An API path prefix inserted between `&lt;host&gt;:&lt;port&gt;/` and `/api2/`. Can be useful if the InfluxDB service runs behind a reverse proxy.
        /// </summary>
        [Input("influxApiPathPrefix")]
        public Input<string>? InfluxApiPathPrefix { get; set; }

        /// <summary>
        /// The InfluxDB bucket/db. Only necessary when using the http v2 api.
        /// </summary>
        [Input("influxBucket")]
        public Input<string>? InfluxBucket { get; set; }

        /// <summary>
        /// Protocol for InfluxDB. Choice is between `udp` | `http` | `https`. If not set, PVE default is `udp`.
        /// </summary>
        [Input("influxDbProto")]
        public Input<string>? InfluxDbProto { get; set; }

        /// <summary>
        /// InfluxDB max-body-size in bytes. Requests are batched up to this size. If not set, PVE default is `25000000`.
        /// </summary>
        [Input("influxMaxBodySize")]
        public Input<int>? InfluxMaxBodySize { get; set; }

        /// <summary>
        /// The InfluxDB organization. Only necessary when using the http v2 api. Has no meaning when using v2 compatibility api.
        /// </summary>
        [Input("influxOrganization")]
        public Input<string>? InfluxOrganization { get; set; }

        [Input("influxToken")]
        private Input<string>? _influxToken;

        /// <summary>
        /// The InfluxDB access token. Only necessary when using the http v2 api. If the v2 compatibility api is used, use `user:password` instead.
        /// </summary>
        public Input<string>? InfluxToken
        {
            get => _influxToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _influxToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Set to `false` to disable certificate verification for https endpoints.
        /// </summary>
        [Input("influxVerify")]
        public Input<bool>? InfluxVerify { get; set; }

        /// <summary>
        /// MTU (maximum transmission unit) for metrics transmission over UDP. If not set, PVE default is `1500` (allowed `512` - `65536`).
        /// </summary>
        [Input("mtu")]
        public Input<int>? Mtu { get; set; }

        /// <summary>
        /// Unique name that will be ID of this metric server in PVE.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Server network port.
        /// </summary>
        [Input("port", required: true)]
        public Input<int> Port { get; set; } = null!;

        /// <summary>
        /// Server dns name or IP address.
        /// </summary>
        [Input("server", required: true)]
        public Input<string> Server { get; set; } = null!;

        /// <summary>
        /// TCP socket timeout in seconds. If not set, PVE default is `1`.
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        /// <summary>
        /// Plugin type. Choice is between `graphite` | `influxdb`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public MetricsServerArgs()
        {
        }
        public static new MetricsServerArgs Empty => new MetricsServerArgs();
    }

    public sealed class MetricsServerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Set this to `true` to disable this metric server.
        /// </summary>
        [Input("disable")]
        public Input<bool>? Disable { get; set; }

        /// <summary>
        /// Root graphite path (ex: `proxmox.mycluster.mykey`).
        /// </summary>
        [Input("graphitePath")]
        public Input<string>? GraphitePath { get; set; }

        /// <summary>
        /// Protocol to send graphite data. Choice is between `udp` | `tcp`. If not set, PVE default is `udp`.
        /// </summary>
        [Input("graphiteProto")]
        public Input<string>? GraphiteProto { get; set; }

        /// <summary>
        /// An API path prefix inserted between `&lt;host&gt;:&lt;port&gt;/` and `/api2/`. Can be useful if the InfluxDB service runs behind a reverse proxy.
        /// </summary>
        [Input("influxApiPathPrefix")]
        public Input<string>? InfluxApiPathPrefix { get; set; }

        /// <summary>
        /// The InfluxDB bucket/db. Only necessary when using the http v2 api.
        /// </summary>
        [Input("influxBucket")]
        public Input<string>? InfluxBucket { get; set; }

        /// <summary>
        /// Protocol for InfluxDB. Choice is between `udp` | `http` | `https`. If not set, PVE default is `udp`.
        /// </summary>
        [Input("influxDbProto")]
        public Input<string>? InfluxDbProto { get; set; }

        /// <summary>
        /// InfluxDB max-body-size in bytes. Requests are batched up to this size. If not set, PVE default is `25000000`.
        /// </summary>
        [Input("influxMaxBodySize")]
        public Input<int>? InfluxMaxBodySize { get; set; }

        /// <summary>
        /// The InfluxDB organization. Only necessary when using the http v2 api. Has no meaning when using v2 compatibility api.
        /// </summary>
        [Input("influxOrganization")]
        public Input<string>? InfluxOrganization { get; set; }

        [Input("influxToken")]
        private Input<string>? _influxToken;

        /// <summary>
        /// The InfluxDB access token. Only necessary when using the http v2 api. If the v2 compatibility api is used, use `user:password` instead.
        /// </summary>
        public Input<string>? InfluxToken
        {
            get => _influxToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _influxToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Set to `false` to disable certificate verification for https endpoints.
        /// </summary>
        [Input("influxVerify")]
        public Input<bool>? InfluxVerify { get; set; }

        /// <summary>
        /// MTU (maximum transmission unit) for metrics transmission over UDP. If not set, PVE default is `1500` (allowed `512` - `65536`).
        /// </summary>
        [Input("mtu")]
        public Input<int>? Mtu { get; set; }

        /// <summary>
        /// Unique name that will be ID of this metric server in PVE.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Server network port.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// Server dns name or IP address.
        /// </summary>
        [Input("server")]
        public Input<string>? Server { get; set; }

        /// <summary>
        /// TCP socket timeout in seconds. If not set, PVE default is `1`.
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        /// <summary>
        /// Plugin type. Choice is between `graphite` | `influxdb`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public MetricsServerState()
        {
        }
        public static new MetricsServerState Empty => new MetricsServerState();
    }
}

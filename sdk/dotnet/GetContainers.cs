// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ProxmoxVE
{
    public static class GetContainers
    {
        /// <summary>
        /// Retrieves information about all containers in the Proxmox cluster.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var ubuntuContainers = ProxmoxVE.GetContainers.Invoke(new()
        ///     {
        ///         Tags = new[]
        ///         {
        ///             "ubuntu",
        ///         },
        ///     });
        /// 
        ///     var ubuntuTemplates = ProxmoxVE.GetContainers.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new ProxmoxVE.Inputs.GetContainersFilterInputArgs
        ///             {
        ///                 Name = "template",
        ///                 Values = new[]
        ///                 {
        ///                     "true",
        ///                 },
        ///             },
        ///             new ProxmoxVE.Inputs.GetContainersFilterInputArgs
        ///             {
        ///                 Name = "status",
        ///                 Values = new[]
        ///                 {
        ///                     "stopped",
        ///                 },
        ///             },
        ///             new ProxmoxVE.Inputs.GetContainersFilterInputArgs
        ///             {
        ///                 Name = "name",
        ///                 Regex = true,
        ///                 Values = new[]
        ///                 {
        ///                     "^ubuntu-20.*$",
        ///                 },
        ///             },
        ///             new ProxmoxVE.Inputs.GetContainersFilterInputArgs
        ///             {
        ///                 Name = "node_name",
        ///                 Regex = true,
        ///                 Values = new[]
        ///                 {
        ///                     "node_us_[1-3]",
        ///                     "node_eu_[1-3]",
        ///                 },
        ///             },
        ///         },
        ///         Tags = new[]
        ///         {
        ///             "template",
        ///             "latest",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetContainersResult> InvokeAsync(GetContainersArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetContainersResult>("proxmoxve:index/getContainers:getContainers", args ?? new GetContainersArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves information about all containers in the Proxmox cluster.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var ubuntuContainers = ProxmoxVE.GetContainers.Invoke(new()
        ///     {
        ///         Tags = new[]
        ///         {
        ///             "ubuntu",
        ///         },
        ///     });
        /// 
        ///     var ubuntuTemplates = ProxmoxVE.GetContainers.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new ProxmoxVE.Inputs.GetContainersFilterInputArgs
        ///             {
        ///                 Name = "template",
        ///                 Values = new[]
        ///                 {
        ///                     "true",
        ///                 },
        ///             },
        ///             new ProxmoxVE.Inputs.GetContainersFilterInputArgs
        ///             {
        ///                 Name = "status",
        ///                 Values = new[]
        ///                 {
        ///                     "stopped",
        ///                 },
        ///             },
        ///             new ProxmoxVE.Inputs.GetContainersFilterInputArgs
        ///             {
        ///                 Name = "name",
        ///                 Regex = true,
        ///                 Values = new[]
        ///                 {
        ///                     "^ubuntu-20.*$",
        ///                 },
        ///             },
        ///             new ProxmoxVE.Inputs.GetContainersFilterInputArgs
        ///             {
        ///                 Name = "node_name",
        ///                 Regex = true,
        ///                 Values = new[]
        ///                 {
        ///                     "node_us_[1-3]",
        ///                     "node_eu_[1-3]",
        ///                 },
        ///             },
        ///         },
        ///         Tags = new[]
        ///         {
        ///             "template",
        ///             "latest",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetContainersResult> Invoke(GetContainersInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetContainersResult>("proxmoxve:index/getContainers:getContainers", args ?? new GetContainersInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves information about all containers in the Proxmox cluster.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var ubuntuContainers = ProxmoxVE.GetContainers.Invoke(new()
        ///     {
        ///         Tags = new[]
        ///         {
        ///             "ubuntu",
        ///         },
        ///     });
        /// 
        ///     var ubuntuTemplates = ProxmoxVE.GetContainers.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new ProxmoxVE.Inputs.GetContainersFilterInputArgs
        ///             {
        ///                 Name = "template",
        ///                 Values = new[]
        ///                 {
        ///                     "true",
        ///                 },
        ///             },
        ///             new ProxmoxVE.Inputs.GetContainersFilterInputArgs
        ///             {
        ///                 Name = "status",
        ///                 Values = new[]
        ///                 {
        ///                     "stopped",
        ///                 },
        ///             },
        ///             new ProxmoxVE.Inputs.GetContainersFilterInputArgs
        ///             {
        ///                 Name = "name",
        ///                 Regex = true,
        ///                 Values = new[]
        ///                 {
        ///                     "^ubuntu-20.*$",
        ///                 },
        ///             },
        ///             new ProxmoxVE.Inputs.GetContainersFilterInputArgs
        ///             {
        ///                 Name = "node_name",
        ///                 Regex = true,
        ///                 Values = new[]
        ///                 {
        ///                     "node_us_[1-3]",
        ///                     "node_eu_[1-3]",
        ///                 },
        ///             },
        ///         },
        ///         Tags = new[]
        ///         {
        ///             "template",
        ///             "latest",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetContainersResult> Invoke(GetContainersInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetContainersResult>("proxmoxve:index/getContainers:getContainers", args ?? new GetContainersInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetContainersArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetContainersFilterArgs>? _filters;

        /// <summary>
        /// Filter blocks. The container must satisfy all filter blocks to be included in the result.
        /// </summary>
        public List<Inputs.GetContainersFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetContainersFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The node name. All cluster nodes will be queried in case this is omitted
        /// </summary>
        [Input("nodeName")]
        public string? NodeName { get; set; }

        [Input("tags")]
        private List<string>? _tags;

        /// <summary>
        /// A list of tags to filter the containers. The container must have all
        /// the tags to be included in the result.
        /// </summary>
        public List<string> Tags
        {
            get => _tags ?? (_tags = new List<string>());
            set => _tags = value;
        }

        public GetContainersArgs()
        {
        }
        public static new GetContainersArgs Empty => new GetContainersArgs();
    }

    public sealed class GetContainersInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetContainersFilterInputArgs>? _filters;

        /// <summary>
        /// Filter blocks. The container must satisfy all filter blocks to be included in the result.
        /// </summary>
        public InputList<Inputs.GetContainersFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetContainersFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The node name. All cluster nodes will be queried in case this is omitted
        /// </summary>
        [Input("nodeName")]
        public Input<string>? NodeName { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of tags to filter the containers. The container must have all
        /// the tags to be included in the result.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public GetContainersInvokeArgs()
        {
        }
        public static new GetContainersInvokeArgs Empty => new GetContainersInvokeArgs();
    }


    [OutputType]
    public sealed class GetContainersResult
    {
        /// <summary>
        /// The containers list.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetContainersContainerResult> Containers;
        public readonly ImmutableArray<Outputs.GetContainersFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The node name.
        /// </summary>
        public readonly string? NodeName;
        /// <summary>
        /// A list of tags of the container.
        /// </summary>
        public readonly ImmutableArray<string> Tags;

        [OutputConstructor]
        private GetContainersResult(
            ImmutableArray<Outputs.GetContainersContainerResult> containers,

            ImmutableArray<Outputs.GetContainersFilterResult> filters,

            string id,

            string? nodeName,

            ImmutableArray<string> tags)
        {
            Containers = containers;
            Filters = filters;
            Id = id;
            NodeName = nodeName;
            Tags = tags;
        }
    }
}

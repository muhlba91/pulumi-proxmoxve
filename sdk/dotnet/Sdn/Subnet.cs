// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ProxmoxVE.Sdn
{
    /// <summary>
    /// Manages SDN Subnets in Proxmox VE.
    /// 
    /// ## Import
    /// 
    /// #!/usr/bin/env sh
    /// 
    /// SDN subnet can be imported using its unique identifier in the format: &lt;vnet&gt;/&lt;subnet-id&gt;
    /// 
    /// The &lt;subnet-id&gt; is the canonical ID from Proxmox, e.g., "zone1-192.168.1.0-24"
    /// 
    /// ```sh
    /// $ pulumi import proxmoxve:Sdn/subnet:Subnet basic_subnet vnet1/zone1-192.168.1.0-24
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import proxmoxve:Sdn/subnet:Subnet dhcp_subnet vnet2/zone2-192.168.2.0-24
    /// ```
    /// </summary>
    [ProxmoxVEResourceType("proxmoxve:Sdn/subnet:Subnet")]
    public partial class Subnet : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A CIDR network address, for example 10.0.0.0/8
        /// </summary>
        [Output("cidr")]
        public Output<string> Cidr { get; private set; } = null!;

        /// <summary>
        /// The DNS server used for DHCP.
        /// </summary>
        [Output("dhcpDnsServer")]
        public Output<string?> DhcpDnsServer { get; private set; } = null!;

        /// <summary>
        /// DHCP range (start and end IPs).
        /// </summary>
        [Output("dhcpRange")]
        public Output<Outputs.SubnetDhcpRange?> DhcpRange { get; private set; } = null!;

        /// <summary>
        /// Prefix used for DNS zone delegation.
        /// </summary>
        [Output("dnsZonePrefix")]
        public Output<string?> DnsZonePrefix { get; private set; } = null!;

        /// <summary>
        /// The gateway address for the subnet.
        /// </summary>
        [Output("gateway")]
        public Output<string?> Gateway { get; private set; } = null!;

        /// <summary>
        /// Whether SNAT is enabled for the subnet.
        /// </summary>
        [Output("snat")]
        public Output<bool?> Snat { get; private set; } = null!;

        /// <summary>
        /// The VNet to which this subnet belongs.
        /// </summary>
        [Output("vnet")]
        public Output<string> Vnet { get; private set; } = null!;


        /// <summary>
        /// Create a Subnet resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Subnet(string name, SubnetArgs args, CustomResourceOptions? options = null)
            : base("proxmoxve:Sdn/subnet:Subnet", name, args ?? new SubnetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Subnet(string name, Input<string> id, SubnetState? state = null, CustomResourceOptions? options = null)
            : base("proxmoxve:Sdn/subnet:Subnet", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/muhlba91/pulumi-proxmoxve",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Subnet resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Subnet Get(string name, Input<string> id, SubnetState? state = null, CustomResourceOptions? options = null)
        {
            return new Subnet(name, id, state, options);
        }
    }

    public sealed class SubnetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A CIDR network address, for example 10.0.0.0/8
        /// </summary>
        [Input("cidr", required: true)]
        public Input<string> Cidr { get; set; } = null!;

        /// <summary>
        /// The DNS server used for DHCP.
        /// </summary>
        [Input("dhcpDnsServer")]
        public Input<string>? DhcpDnsServer { get; set; }

        /// <summary>
        /// DHCP range (start and end IPs).
        /// </summary>
        [Input("dhcpRange")]
        public Input<Inputs.SubnetDhcpRangeArgs>? DhcpRange { get; set; }

        /// <summary>
        /// Prefix used for DNS zone delegation.
        /// </summary>
        [Input("dnsZonePrefix")]
        public Input<string>? DnsZonePrefix { get; set; }

        /// <summary>
        /// The gateway address for the subnet.
        /// </summary>
        [Input("gateway")]
        public Input<string>? Gateway { get; set; }

        /// <summary>
        /// Whether SNAT is enabled for the subnet.
        /// </summary>
        [Input("snat")]
        public Input<bool>? Snat { get; set; }

        /// <summary>
        /// The VNet to which this subnet belongs.
        /// </summary>
        [Input("vnet", required: true)]
        public Input<string> Vnet { get; set; } = null!;

        public SubnetArgs()
        {
        }
        public static new SubnetArgs Empty => new SubnetArgs();
    }

    public sealed class SubnetState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A CIDR network address, for example 10.0.0.0/8
        /// </summary>
        [Input("cidr")]
        public Input<string>? Cidr { get; set; }

        /// <summary>
        /// The DNS server used for DHCP.
        /// </summary>
        [Input("dhcpDnsServer")]
        public Input<string>? DhcpDnsServer { get; set; }

        /// <summary>
        /// DHCP range (start and end IPs).
        /// </summary>
        [Input("dhcpRange")]
        public Input<Inputs.SubnetDhcpRangeGetArgs>? DhcpRange { get; set; }

        /// <summary>
        /// Prefix used for DNS zone delegation.
        /// </summary>
        [Input("dnsZonePrefix")]
        public Input<string>? DnsZonePrefix { get; set; }

        /// <summary>
        /// The gateway address for the subnet.
        /// </summary>
        [Input("gateway")]
        public Input<string>? Gateway { get; set; }

        /// <summary>
        /// Whether SNAT is enabled for the subnet.
        /// </summary>
        [Input("snat")]
        public Input<bool>? Snat { get; set; }

        /// <summary>
        /// The VNet to which this subnet belongs.
        /// </summary>
        [Input("vnet")]
        public Input<string>? Vnet { get; set; }

        public SubnetState()
        {
        }
        public static new SubnetState Empty => new SubnetState();
    }
}

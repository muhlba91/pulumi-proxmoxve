// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ProxmoxVE.Sdn
{
    /// <summary>
    /// Manages Proxmox VE SDN VNet.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using ProxmoxVE = Pulumi.ProxmoxVE;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var finalizer = new ProxmoxVE.Sdn.Applier("finalizer");
    /// 
    ///     // SDN Zone (Simple) - Basic zone for simple vnets
    ///     var exampleZone1 = new ProxmoxVE.SDNZone.Simple("exampleZone1", new()
    ///     {
    ///         ZoneId = "zone1",
    ///         Nodes = new[]
    ///         {
    ///             "pve",
    ///         },
    ///         Mtu = 1500,
    ///         Dns = "1.1.1.1",
    ///         DnsZone = "example.com",
    ///         Ipam = "pve",
    ///         ReverseDns = "1.1.1.1",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             finalizer,
    ///         },
    ///     });
    /// 
    ///     // SDN Zone (Simple) - Second zone for demonstration
    ///     var exampleZone2 = new ProxmoxVE.SDNZone.Simple("exampleZone2", new()
    ///     {
    ///         ZoneId = "zone2",
    ///         Nodes = new[]
    ///         {
    ///             "pve",
    ///         },
    ///         Mtu = 1500,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             finalizer,
    ///         },
    ///     });
    /// 
    ///     // Basic VNet (Simple)
    ///     var basicVnet = new ProxmoxVE.Sdn.Vnet("basicVnet", new()
    ///     {
    ///         VnetId = "vnet1",
    ///         Zone = exampleZone1.ZoneId,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             finalizer,
    ///         },
    ///     });
    /// 
    ///     // VNet with Alias and Port Isolation
    ///     var isolatedVnet = new ProxmoxVE.Sdn.Vnet("isolatedVnet", new()
    ///     {
    ///         VnetId = "vnet2",
    ///         Zone = exampleZone2.ZoneId,
    ///         Alias = "Isolated VNet",
    ///         IsolatePorts = true,
    ///         VlanAware = false,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             finalizer,
    ///         },
    ///     });
    /// 
    ///     // SDN Applier for all resources
    ///     var vnetApplier = new ProxmoxVE.Sdn.Applier("vnetApplier", new()
    ///     {
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             exampleZone1,
    ///             exampleZone2,
    ///             basicVnet,
    ///             isolatedVnet,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// #!/usr/bin/env sh
    /// 
    /// SDN vnet can be imported using its unique identifier (vnet ID)
    /// 
    /// ```sh
    /// $ pulumi import proxmoxve:Sdn/vnet:Vnet basic_vnet vnet1
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import proxmoxve:Sdn/vnet:Vnet isolated_vnet vnet2
    /// ```
    /// </summary>
    [ProxmoxVEResourceType("proxmoxve:Sdn/vnet:Vnet")]
    public partial class Vnet : global::Pulumi.CustomResource
    {
        /// <summary>
        /// An optional alias for this VNet.
        /// </summary>
        [Output("alias")]
        public Output<string?> Alias { get; private set; } = null!;

        /// <summary>
        /// Isolate ports within this VNet.
        /// </summary>
        [Output("isolatePorts")]
        public Output<bool?> IsolatePorts { get; private set; } = null!;

        /// <summary>
        /// Tag value for VLAN/VXLAN (can't be used with other zone types).
        /// </summary>
        [Output("tag")]
        public Output<int?> Tag { get; private set; } = null!;

        /// <summary>
        /// Allow VM VLANs to pass through this VNet.
        /// </summary>
        [Output("vlanAware")]
        public Output<bool?> VlanAware { get; private set; } = null!;

        /// <summary>
        /// The unique identifier of the SDN VNet.
        /// </summary>
        [Output("vnetId")]
        public Output<string> VnetId { get; private set; } = null!;

        /// <summary>
        /// The zone to which this VNet belongs.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a Vnet resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Vnet(string name, VnetArgs args, CustomResourceOptions? options = null)
            : base("proxmoxve:Sdn/vnet:Vnet", name, args ?? new VnetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Vnet(string name, Input<string> id, VnetState? state = null, CustomResourceOptions? options = null)
            : base("proxmoxve:Sdn/vnet:Vnet", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/muhlba91/pulumi-proxmoxve",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Vnet resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Vnet Get(string name, Input<string> id, VnetState? state = null, CustomResourceOptions? options = null)
        {
            return new Vnet(name, id, state, options);
        }
    }

    public sealed class VnetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An optional alias for this VNet.
        /// </summary>
        [Input("alias")]
        public Input<string>? Alias { get; set; }

        /// <summary>
        /// Isolate ports within this VNet.
        /// </summary>
        [Input("isolatePorts")]
        public Input<bool>? IsolatePorts { get; set; }

        /// <summary>
        /// Tag value for VLAN/VXLAN (can't be used with other zone types).
        /// </summary>
        [Input("tag")]
        public Input<int>? Tag { get; set; }

        /// <summary>
        /// Allow VM VLANs to pass through this VNet.
        /// </summary>
        [Input("vlanAware")]
        public Input<bool>? VlanAware { get; set; }

        /// <summary>
        /// The unique identifier of the SDN VNet.
        /// </summary>
        [Input("vnetId", required: true)]
        public Input<string> VnetId { get; set; } = null!;

        /// <summary>
        /// The zone to which this VNet belongs.
        /// </summary>
        [Input("zone", required: true)]
        public Input<string> Zone { get; set; } = null!;

        public VnetArgs()
        {
        }
        public static new VnetArgs Empty => new VnetArgs();
    }

    public sealed class VnetState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An optional alias for this VNet.
        /// </summary>
        [Input("alias")]
        public Input<string>? Alias { get; set; }

        /// <summary>
        /// Isolate ports within this VNet.
        /// </summary>
        [Input("isolatePorts")]
        public Input<bool>? IsolatePorts { get; set; }

        /// <summary>
        /// Tag value for VLAN/VXLAN (can't be used with other zone types).
        /// </summary>
        [Input("tag")]
        public Input<int>? Tag { get; set; }

        /// <summary>
        /// Allow VM VLANs to pass through this VNet.
        /// </summary>
        [Input("vlanAware")]
        public Input<bool>? VlanAware { get; set; }

        /// <summary>
        /// The unique identifier of the SDN VNet.
        /// </summary>
        [Input("vnetId")]
        public Input<string>? VnetId { get; set; }

        /// <summary>
        /// The zone to which this VNet belongs.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public VnetState()
        {
        }
        public static new VnetState Empty => new VnetState();
    }
}

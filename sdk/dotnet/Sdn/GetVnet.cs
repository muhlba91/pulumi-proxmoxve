// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ProxmoxVE.Sdn
{
    public static class GetVnet
    {
        /// <summary>
        /// Retrieves information about an existing SDN VNet.
        /// </summary>
        public static Task<GetVnetResult> InvokeAsync(GetVnetArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVnetResult>("proxmoxve:Sdn/getVnet:getVnet", args ?? new GetVnetArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves information about an existing SDN VNet.
        /// </summary>
        public static Output<GetVnetResult> Invoke(GetVnetInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVnetResult>("proxmoxve:Sdn/getVnet:getVnet", args ?? new GetVnetInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves information about an existing SDN VNet.
        /// </summary>
        public static Output<GetVnetResult> Invoke(GetVnetInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVnetResult>("proxmoxve:Sdn/getVnet:getVnet", args ?? new GetVnetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVnetArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique identifier of the SDN VNet.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetVnetArgs()
        {
        }
        public static new GetVnetArgs Empty => new GetVnetArgs();
    }

    public sealed class GetVnetInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique identifier of the SDN VNet.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetVnetInvokeArgs()
        {
        }
        public static new GetVnetInvokeArgs Empty => new GetVnetInvokeArgs();
    }


    [OutputType]
    public sealed class GetVnetResult
    {
        /// <summary>
        /// An optional alias for this VNet.
        /// </summary>
        public readonly string Alias;
        /// <summary>
        /// The unique identifier of the SDN VNet.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Isolate ports within this VNet.
        /// </summary>
        public readonly bool IsolatePorts;
        /// <summary>
        /// Tag value for VLAN/VXLAN (can't be used with other zone types).
        /// </summary>
        public readonly int Tag;
        /// <summary>
        /// Allow VM VLANs to pass through this VNet.
        /// </summary>
        public readonly bool VlanAware;
        /// <summary>
        /// The zone to which this VNet belongs.
        /// </summary>
        public readonly string Zone;

        [OutputConstructor]
        private GetVnetResult(
            string alias,

            string id,

            bool isolatePorts,

            int tag,

            bool vlanAware,

            string zone)
        {
            Alias = alias;
            Id = id;
            IsolatePorts = isolatePorts;
            Tag = tag;
            VlanAware = vlanAware;
            Zone = zone;
        }
    }
}

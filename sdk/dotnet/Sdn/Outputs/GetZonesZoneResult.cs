// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ProxmoxVE.Sdn.Outputs
{

    [OutputType]
    public sealed class GetZonesZoneResult
    {
        public readonly bool AdvertiseSubnets;
        public readonly string Bridge;
        public readonly string Controller;
        public readonly bool DisableArpNdSuppression;
        public readonly string Dns;
        public readonly string DnsZone;
        public readonly ImmutableArray<string> ExitNodes;
        public readonly bool ExitNodesLocalRouting;
        public readonly string Id;
        public readonly string Ipam;
        public readonly int Mtu;
        public readonly ImmutableArray<string> Nodes;
        public readonly ImmutableArray<string> Peers;
        public readonly bool Pending;
        public readonly string PrimaryExitNode;
        public readonly string ReverseDns;
        public readonly string RtImport;
        public readonly int ServiceVlan;
        public readonly string ServiceVlanProtocol;
        public readonly string State;
        public readonly string Type;
        public readonly int VrfVxlan;

        [OutputConstructor]
        private GetZonesZoneResult(
            bool advertiseSubnets,

            string bridge,

            string controller,

            bool disableArpNdSuppression,

            string dns,

            string dnsZone,

            ImmutableArray<string> exitNodes,

            bool exitNodesLocalRouting,

            string id,

            string ipam,

            int mtu,

            ImmutableArray<string> nodes,

            ImmutableArray<string> peers,

            bool pending,

            string primaryExitNode,

            string reverseDns,

            string rtImport,

            int serviceVlan,

            string serviceVlanProtocol,

            string state,

            string type,

            int vrfVxlan)
        {
            AdvertiseSubnets = advertiseSubnets;
            Bridge = bridge;
            Controller = controller;
            DisableArpNdSuppression = disableArpNdSuppression;
            Dns = dns;
            DnsZone = dnsZone;
            ExitNodes = exitNodes;
            ExitNodesLocalRouting = exitNodesLocalRouting;
            Id = id;
            Ipam = ipam;
            Mtu = mtu;
            Nodes = nodes;
            Peers = peers;
            Pending = pending;
            PrimaryExitNode = primaryExitNode;
            ReverseDns = reverseDns;
            RtImport = rtImport;
            ServiceVlan = serviceVlan;
            ServiceVlanProtocol = serviceVlanProtocol;
            State = state;
            Type = type;
            VrfVxlan = vrfVxlan;
        }
    }
}

// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ProxmoxVE.Sdn
{
    public static class GetSubnet
    {
        /// <summary>
        /// Retrieve details about a specific SDN Subnet in Proxmox VE.
        /// </summary>
        public static Task<GetSubnetResult> InvokeAsync(GetSubnetArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSubnetResult>("proxmoxve:Sdn/getSubnet:getSubnet", args ?? new GetSubnetArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieve details about a specific SDN Subnet in Proxmox VE.
        /// </summary>
        public static Output<GetSubnetResult> Invoke(GetSubnetInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSubnetResult>("proxmoxve:Sdn/getSubnet:getSubnet", args ?? new GetSubnetInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieve details about a specific SDN Subnet in Proxmox VE.
        /// </summary>
        public static Output<GetSubnetResult> Invoke(GetSubnetInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSubnetResult>("proxmoxve:Sdn/getSubnet:getSubnet", args ?? new GetSubnetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSubnetArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A CIDR network address, for example 10.0.0.0/8
        /// </summary>
        [Input("cidr", required: true)]
        public string Cidr { get; set; } = null!;

        /// <summary>
        /// DHCP range (start and end IPs).
        /// </summary>
        [Input("dhcpRange")]
        public Inputs.GetSubnetDhcpRangeArgs? DhcpRange { get; set; }

        /// <summary>
        /// The VNet this subnet belongs to.
        /// </summary>
        [Input("vnet", required: true)]
        public string Vnet { get; set; } = null!;

        public GetSubnetArgs()
        {
        }
        public static new GetSubnetArgs Empty => new GetSubnetArgs();
    }

    public sealed class GetSubnetInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A CIDR network address, for example 10.0.0.0/8
        /// </summary>
        [Input("cidr", required: true)]
        public Input<string> Cidr { get; set; } = null!;

        /// <summary>
        /// DHCP range (start and end IPs).
        /// </summary>
        [Input("dhcpRange")]
        public Input<Inputs.GetSubnetDhcpRangeInputArgs>? DhcpRange { get; set; }

        /// <summary>
        /// The VNet this subnet belongs to.
        /// </summary>
        [Input("vnet", required: true)]
        public Input<string> Vnet { get; set; } = null!;

        public GetSubnetInvokeArgs()
        {
        }
        public static new GetSubnetInvokeArgs Empty => new GetSubnetInvokeArgs();
    }


    [OutputType]
    public sealed class GetSubnetResult
    {
        /// <summary>
        /// A CIDR network address, for example 10.0.0.0/8
        /// </summary>
        public readonly string Cidr;
        /// <summary>
        /// The DNS server used for DHCP.
        /// </summary>
        public readonly string DhcpDnsServer;
        /// <summary>
        /// DHCP range (start and end IPs).
        /// </summary>
        public readonly Outputs.GetSubnetDhcpRangeResult DhcpRange;
        /// <summary>
        /// Prefix used for DNS zone delegation.
        /// </summary>
        public readonly string DnsZonePrefix;
        /// <summary>
        /// The gateway address for the subnet.
        /// </summary>
        public readonly string Gateway;
        /// <summary>
        /// The full ID in the format 'vnet-id/subnet-id'.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Whether SNAT is enabled for the subnet.
        /// </summary>
        public readonly bool Snat;
        /// <summary>
        /// The VNet this subnet belongs to.
        /// </summary>
        public readonly string Vnet;

        [OutputConstructor]
        private GetSubnetResult(
            string cidr,

            string dhcpDnsServer,

            Outputs.GetSubnetDhcpRangeResult dhcpRange,

            string dnsZonePrefix,

            string gateway,

            string id,

            bool snat,

            string vnet)
        {
            Cidr = cidr;
            DhcpDnsServer = dhcpDnsServer;
            DhcpRange = dhcpRange;
            DnsZonePrefix = dnsZonePrefix;
            Gateway = gateway;
            Id = id;
            Snat = snat;
            Vnet = vnet;
        }
    }
}

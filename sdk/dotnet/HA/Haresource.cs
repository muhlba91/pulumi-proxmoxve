// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ProxmoxVE.HA
{
    /// <summary>
    /// Manages Proxmox HA resources.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using ProxmoxVE = Pulumi.ProxmoxVE;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new ProxmoxVE.HA.HAResource("example", new()
    ///     {
    ///         ResourceId = "vm:123",
    ///         State = "started",
    ///         Group = "example",
    ///         Comment = "Managed by Terraform",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             proxmox_virtual_environment_hagroup.Example,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// #!/usr/bin/env sh
    /// 
    /// HA resources can be imported using their identifiers, e.g.:
    /// 
    /// ```sh
    /// $ pulumi import proxmoxve:HA/hAResource:HAResource example vm:123
    /// ```
    /// </summary>
    [ProxmoxVEResourceType("proxmoxve:HA/hAResource:HAResource")]
    public partial class HAResource : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The comment associated with this resource.
        /// </summary>
        [Output("comment")]
        public Output<string?> Comment { get; private set; } = null!;

        /// <summary>
        /// The identifier of the High Availability group this resource is a member of.
        /// </summary>
        [Output("group")]
        public Output<string?> Group { get; private set; } = null!;

        /// <summary>
        /// The maximal number of relocation attempts.
        /// </summary>
        [Output("maxRelocate")]
        public Output<int?> MaxRelocate { get; private set; } = null!;

        /// <summary>
        /// The maximal number of restart attempts.
        /// </summary>
        [Output("maxRestart")]
        public Output<int?> MaxRestart { get; private set; } = null!;

        /// <summary>
        /// The Proxmox HA resource identifier
        /// </summary>
        [Output("resourceId")]
        public Output<string> ResourceId { get; private set; } = null!;

        /// <summary>
        /// The desired state of the resource.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The type of HA resources to create. If unset, it will be deduced from the `resource_id`.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a HAResource resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public HAResource(string name, HAResourceArgs args, CustomResourceOptions? options = null)
            : base("proxmoxve:HA/hAResource:HAResource", name, args ?? new HAResourceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private HAResource(string name, Input<string> id, HAResourceState? state = null, CustomResourceOptions? options = null)
            : base("proxmoxve:HA/hAResource:HAResource", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/muhlba91/pulumi-proxmoxve",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing HAResource resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static HAResource Get(string name, Input<string> id, HAResourceState? state = null, CustomResourceOptions? options = null)
        {
            return new HAResource(name, id, state, options);
        }
    }

    public sealed class HAResourceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The comment associated with this resource.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// The identifier of the High Availability group this resource is a member of.
        /// </summary>
        [Input("group")]
        public Input<string>? Group { get; set; }

        /// <summary>
        /// The maximal number of relocation attempts.
        /// </summary>
        [Input("maxRelocate")]
        public Input<int>? MaxRelocate { get; set; }

        /// <summary>
        /// The maximal number of restart attempts.
        /// </summary>
        [Input("maxRestart")]
        public Input<int>? MaxRestart { get; set; }

        /// <summary>
        /// The Proxmox HA resource identifier
        /// </summary>
        [Input("resourceId", required: true)]
        public Input<string> ResourceId { get; set; } = null!;

        /// <summary>
        /// The desired state of the resource.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The type of HA resources to create. If unset, it will be deduced from the `resource_id`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public HAResourceArgs()
        {
        }
        public static new HAResourceArgs Empty => new HAResourceArgs();
    }

    public sealed class HAResourceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The comment associated with this resource.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// The identifier of the High Availability group this resource is a member of.
        /// </summary>
        [Input("group")]
        public Input<string>? Group { get; set; }

        /// <summary>
        /// The maximal number of relocation attempts.
        /// </summary>
        [Input("maxRelocate")]
        public Input<int>? MaxRelocate { get; set; }

        /// <summary>
        /// The maximal number of restart attempts.
        /// </summary>
        [Input("maxRestart")]
        public Input<int>? MaxRestart { get; set; }

        /// <summary>
        /// The Proxmox HA resource identifier
        /// </summary>
        [Input("resourceId")]
        public Input<string>? ResourceId { get; set; }

        /// <summary>
        /// The desired state of the resource.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The type of HA resources to create. If unset, it will be deduced from the `resource_id`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public HAResourceState()
        {
        }
        public static new HAResourceState Empty => new HAResourceState();
    }
}

// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ProxmoxVE
{
    public static class GetFile
    {
        /// <summary>
        /// Retrieves information about an existing file in a Proxmox Virtual Environment node.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var ubuntuIso = ProxmoxVE.GetFile.Invoke(new()
        ///     {
        ///         NodeName = "pve",
        ///         DatastoreId = "local",
        ///         ContentType = "iso",
        ///         FileName = "ubuntu-22.04.3-live-server-amd64.iso",
        ///     });
        /// 
        ///     var ubuntuContainerTemplate = ProxmoxVE.GetFile.Invoke(new()
        ///     {
        ///         NodeName = "pve",
        ///         DatastoreId = "local",
        ///         ContentType = "vztmpl",
        ///         FileName = "ubuntu-22.04-standard_22.04-1_amd64.tar.zst",
        ///     });
        /// 
        ///     var cloudInitSnippet = ProxmoxVE.GetFile.Invoke(new()
        ///     {
        ///         NodeName = "pve",
        ///         DatastoreId = "local",
        ///         ContentType = "snippets",
        ///         FileName = "cloud-init-config.yaml",
        ///     });
        /// 
        ///     var importedFile = ProxmoxVE.GetFile.Invoke(new()
        ///     {
        ///         NodeName = "pve",
        ///         DatastoreId = "local",
        ///         ContentType = "import",
        ///         FileName = "imported-config.yaml",
        ///     });
        /// 
        ///     var example = new ProxmoxVE.VM.VirtualMachine("example", new()
        ///     {
        ///         NodeName = "pve",
        ///         VmId = 100,
        ///         Cdrom = new ProxmoxVE.VM.Inputs.VirtualMachineCdromArgs
        ///         {
        ///             FileId = ubuntuIso.Apply(getFileResult =&gt; getFileResult.Id),
        ///         },
        ///         Cpu = new ProxmoxVE.VM.Inputs.VirtualMachineCpuArgs
        ///         {
        ///             Cores = 2,
        ///         },
        ///         Memory = new ProxmoxVE.VM.Inputs.VirtualMachineMemoryArgs
        ///         {
        ///             Dedicated = 2048,
        ///         },
        ///         Disks = new[]
        ///         {
        ///             new ProxmoxVE.VM.Inputs.VirtualMachineDiskArgs
        ///             {
        ///                 DatastoreId = "local-lvm",
        ///                 FileFormat = "qcow2",
        ///                 Size = 20,
        ///             },
        ///         },
        ///         NetworkDevices = new[]
        ///         {
        ///             new ProxmoxVE.VM.Inputs.VirtualMachineNetworkDeviceArgs
        ///             {
        ///                 Bridge = "vmbr0",
        ///             },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["ubuntuIsoId"] = ubuntuIso.Apply(getFileResult =&gt; getFileResult.Id),
        ///         ["ubuntuIsoSize"] = ubuntuIso.Apply(getFileResult =&gt; getFileResult.FileSize),
        ///         ["containerTemplateFormat"] = ubuntuContainerTemplate.Apply(getFileResult =&gt; getFileResult.FileFormat),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetFileResult> InvokeAsync(GetFileArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFileResult>("proxmoxve:index/getFile:getFile", args ?? new GetFileArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves information about an existing file in a Proxmox Virtual Environment node.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var ubuntuIso = ProxmoxVE.GetFile.Invoke(new()
        ///     {
        ///         NodeName = "pve",
        ///         DatastoreId = "local",
        ///         ContentType = "iso",
        ///         FileName = "ubuntu-22.04.3-live-server-amd64.iso",
        ///     });
        /// 
        ///     var ubuntuContainerTemplate = ProxmoxVE.GetFile.Invoke(new()
        ///     {
        ///         NodeName = "pve",
        ///         DatastoreId = "local",
        ///         ContentType = "vztmpl",
        ///         FileName = "ubuntu-22.04-standard_22.04-1_amd64.tar.zst",
        ///     });
        /// 
        ///     var cloudInitSnippet = ProxmoxVE.GetFile.Invoke(new()
        ///     {
        ///         NodeName = "pve",
        ///         DatastoreId = "local",
        ///         ContentType = "snippets",
        ///         FileName = "cloud-init-config.yaml",
        ///     });
        /// 
        ///     var importedFile = ProxmoxVE.GetFile.Invoke(new()
        ///     {
        ///         NodeName = "pve",
        ///         DatastoreId = "local",
        ///         ContentType = "import",
        ///         FileName = "imported-config.yaml",
        ///     });
        /// 
        ///     var example = new ProxmoxVE.VM.VirtualMachine("example", new()
        ///     {
        ///         NodeName = "pve",
        ///         VmId = 100,
        ///         Cdrom = new ProxmoxVE.VM.Inputs.VirtualMachineCdromArgs
        ///         {
        ///             FileId = ubuntuIso.Apply(getFileResult =&gt; getFileResult.Id),
        ///         },
        ///         Cpu = new ProxmoxVE.VM.Inputs.VirtualMachineCpuArgs
        ///         {
        ///             Cores = 2,
        ///         },
        ///         Memory = new ProxmoxVE.VM.Inputs.VirtualMachineMemoryArgs
        ///         {
        ///             Dedicated = 2048,
        ///         },
        ///         Disks = new[]
        ///         {
        ///             new ProxmoxVE.VM.Inputs.VirtualMachineDiskArgs
        ///             {
        ///                 DatastoreId = "local-lvm",
        ///                 FileFormat = "qcow2",
        ///                 Size = 20,
        ///             },
        ///         },
        ///         NetworkDevices = new[]
        ///         {
        ///             new ProxmoxVE.VM.Inputs.VirtualMachineNetworkDeviceArgs
        ///             {
        ///                 Bridge = "vmbr0",
        ///             },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["ubuntuIsoId"] = ubuntuIso.Apply(getFileResult =&gt; getFileResult.Id),
        ///         ["ubuntuIsoSize"] = ubuntuIso.Apply(getFileResult =&gt; getFileResult.FileSize),
        ///         ["containerTemplateFormat"] = ubuntuContainerTemplate.Apply(getFileResult =&gt; getFileResult.FileFormat),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetFileResult> Invoke(GetFileInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFileResult>("proxmoxve:index/getFile:getFile", args ?? new GetFileInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves information about an existing file in a Proxmox Virtual Environment node.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var ubuntuIso = ProxmoxVE.GetFile.Invoke(new()
        ///     {
        ///         NodeName = "pve",
        ///         DatastoreId = "local",
        ///         ContentType = "iso",
        ///         FileName = "ubuntu-22.04.3-live-server-amd64.iso",
        ///     });
        /// 
        ///     var ubuntuContainerTemplate = ProxmoxVE.GetFile.Invoke(new()
        ///     {
        ///         NodeName = "pve",
        ///         DatastoreId = "local",
        ///         ContentType = "vztmpl",
        ///         FileName = "ubuntu-22.04-standard_22.04-1_amd64.tar.zst",
        ///     });
        /// 
        ///     var cloudInitSnippet = ProxmoxVE.GetFile.Invoke(new()
        ///     {
        ///         NodeName = "pve",
        ///         DatastoreId = "local",
        ///         ContentType = "snippets",
        ///         FileName = "cloud-init-config.yaml",
        ///     });
        /// 
        ///     var importedFile = ProxmoxVE.GetFile.Invoke(new()
        ///     {
        ///         NodeName = "pve",
        ///         DatastoreId = "local",
        ///         ContentType = "import",
        ///         FileName = "imported-config.yaml",
        ///     });
        /// 
        ///     var example = new ProxmoxVE.VM.VirtualMachine("example", new()
        ///     {
        ///         NodeName = "pve",
        ///         VmId = 100,
        ///         Cdrom = new ProxmoxVE.VM.Inputs.VirtualMachineCdromArgs
        ///         {
        ///             FileId = ubuntuIso.Apply(getFileResult =&gt; getFileResult.Id),
        ///         },
        ///         Cpu = new ProxmoxVE.VM.Inputs.VirtualMachineCpuArgs
        ///         {
        ///             Cores = 2,
        ///         },
        ///         Memory = new ProxmoxVE.VM.Inputs.VirtualMachineMemoryArgs
        ///         {
        ///             Dedicated = 2048,
        ///         },
        ///         Disks = new[]
        ///         {
        ///             new ProxmoxVE.VM.Inputs.VirtualMachineDiskArgs
        ///             {
        ///                 DatastoreId = "local-lvm",
        ///                 FileFormat = "qcow2",
        ///                 Size = 20,
        ///             },
        ///         },
        ///         NetworkDevices = new[]
        ///         {
        ///             new ProxmoxVE.VM.Inputs.VirtualMachineNetworkDeviceArgs
        ///             {
        ///                 Bridge = "vmbr0",
        ///             },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["ubuntuIsoId"] = ubuntuIso.Apply(getFileResult =&gt; getFileResult.Id),
        ///         ["ubuntuIsoSize"] = ubuntuIso.Apply(getFileResult =&gt; getFileResult.FileSize),
        ///         ["containerTemplateFormat"] = ubuntuContainerTemplate.Apply(getFileResult =&gt; getFileResult.FileFormat),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetFileResult> Invoke(GetFileInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetFileResult>("proxmoxve:index/getFile:getFile", args ?? new GetFileInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFileArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The content type of the file.
        /// </summary>
        [Input("contentType", required: true)]
        public string ContentType { get; set; } = null!;

        /// <summary>
        /// The identifier of the datastore.
        /// </summary>
        [Input("datastoreId", required: true)]
        public string DatastoreId { get; set; } = null!;

        /// <summary>
        /// The name of the file.
        /// </summary>
        [Input("fileName", required: true)]
        public string FileName { get; set; } = null!;

        /// <summary>
        /// The name of the node.
        /// </summary>
        [Input("nodeName", required: true)]
        public string NodeName { get; set; } = null!;

        public GetFileArgs()
        {
        }
        public static new GetFileArgs Empty => new GetFileArgs();
    }

    public sealed class GetFileInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The content type of the file.
        /// </summary>
        [Input("contentType", required: true)]
        public Input<string> ContentType { get; set; } = null!;

        /// <summary>
        /// The identifier of the datastore.
        /// </summary>
        [Input("datastoreId", required: true)]
        public Input<string> DatastoreId { get; set; } = null!;

        /// <summary>
        /// The name of the file.
        /// </summary>
        [Input("fileName", required: true)]
        public Input<string> FileName { get; set; } = null!;

        /// <summary>
        /// The name of the node.
        /// </summary>
        [Input("nodeName", required: true)]
        public Input<string> NodeName { get; set; } = null!;

        public GetFileInvokeArgs()
        {
        }
        public static new GetFileInvokeArgs Empty => new GetFileInvokeArgs();
    }


    [OutputType]
    public sealed class GetFileResult
    {
        /// <summary>
        /// The content type of the file.
        /// </summary>
        public readonly string ContentType;
        /// <summary>
        /// The identifier of the datastore.
        /// </summary>
        public readonly string DatastoreId;
        /// <summary>
        /// The format of the file.
        /// </summary>
        public readonly string FileFormat;
        /// <summary>
        /// The name of the file.
        /// </summary>
        public readonly string FileName;
        /// <summary>
        /// The size of the file in bytes.
        /// </summary>
        public readonly int FileSize;
        /// <summary>
        /// The unique identifier of the file (volume ID).
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the node.
        /// </summary>
        public readonly string NodeName;
        /// <summary>
        /// The VM ID associated with the file (if applicable).
        /// </summary>
        public readonly int Vmid;

        [OutputConstructor]
        private GetFileResult(
            string contentType,

            string datastoreId,

            string fileFormat,

            string fileName,

            int fileSize,

            string id,

            string nodeName,

            int vmid)
        {
            ContentType = contentType;
            DatastoreId = datastoreId;
            FileFormat = fileFormat;
            FileName = fileName;
            FileSize = fileSize;
            Id = id;
            NodeName = nodeName;
            Vmid = vmid;
        }
    }
}

// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ProxmoxVE.Storage
{
    public static class GetDatastores
    {
        /// <summary>
        /// Retrieves information about all the datastores available to a specific node.
        /// </summary>
        public static Task<GetDatastoresResult> InvokeAsync(GetDatastoresArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDatastoresResult>("proxmoxve:Storage/getDatastores:getDatastores", args ?? new GetDatastoresArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves information about all the datastores available to a specific node.
        /// </summary>
        public static Output<GetDatastoresResult> Invoke(GetDatastoresInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatastoresResult>("proxmoxve:Storage/getDatastores:getDatastores", args ?? new GetDatastoresInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves information about all the datastores available to a specific node.
        /// </summary>
        public static Output<GetDatastoresResult> Invoke(GetDatastoresInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatastoresResult>("proxmoxve:Storage/getDatastores:getDatastores", args ?? new GetDatastoresInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDatastoresArgs : global::Pulumi.InvokeArgs
    {
        [Input("datastores")]
        private List<Inputs.GetDatastoresDatastoreArgs>? _datastores;

        /// <summary>
        /// The list of datastores.
        /// </summary>
        public List<Inputs.GetDatastoresDatastoreArgs> Datastores
        {
            get => _datastores ?? (_datastores = new List<Inputs.GetDatastoresDatastoreArgs>());
            set => _datastores = value;
        }

        /// <summary>
        /// The filters to apply to the stores.
        /// </summary>
        [Input("filters")]
        public Inputs.GetDatastoresFiltersArgs? Filters { get; set; }

        /// <summary>
        /// The name of the node to retrieve the stores from.
        /// </summary>
        [Input("nodeName", required: true)]
        public string NodeName { get; set; } = null!;

        public GetDatastoresArgs()
        {
        }
        public static new GetDatastoresArgs Empty => new GetDatastoresArgs();
    }

    public sealed class GetDatastoresInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("datastores")]
        private InputList<Inputs.GetDatastoresDatastoreInputArgs>? _datastores;

        /// <summary>
        /// The list of datastores.
        /// </summary>
        public InputList<Inputs.GetDatastoresDatastoreInputArgs> Datastores
        {
            get => _datastores ?? (_datastores = new InputList<Inputs.GetDatastoresDatastoreInputArgs>());
            set => _datastores = value;
        }

        /// <summary>
        /// The filters to apply to the stores.
        /// </summary>
        [Input("filters")]
        public Input<Inputs.GetDatastoresFiltersInputArgs>? Filters { get; set; }

        /// <summary>
        /// The name of the node to retrieve the stores from.
        /// </summary>
        [Input("nodeName", required: true)]
        public Input<string> NodeName { get; set; } = null!;

        public GetDatastoresInvokeArgs()
        {
        }
        public static new GetDatastoresInvokeArgs Empty => new GetDatastoresInvokeArgs();
    }


    [OutputType]
    public sealed class GetDatastoresResult
    {
        /// <summary>
        /// The list of datastores.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDatastoresDatastoreResult> Datastores;
        /// <summary>
        /// The filters to apply to the stores.
        /// </summary>
        public readonly Outputs.GetDatastoresFiltersResult? Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the node to retrieve the stores from.
        /// </summary>
        public readonly string NodeName;

        [OutputConstructor]
        private GetDatastoresResult(
            ImmutableArray<Outputs.GetDatastoresDatastoreResult> datastores,

            Outputs.GetDatastoresFiltersResult? filters,

            string id,

            string nodeName)
        {
            Datastores = datastores;
            Filters = filters;
            Id = id;
            NodeName = nodeName;
        }
    }
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ProxmoxVE.Permission
{
    public static class GetUsers
    {
        /// <summary>
        /// Retrieves information about all the available users.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var availableUsers = ProxmoxVE.Permission.GetUsers.Invoke();
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetUsersResult> InvokeAsync(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUsersResult>("proxmoxve:Permission/getUsers:getUsers", InvokeArgs.Empty, options.WithDefaults());

        /// <summary>
        /// Retrieves information about all the available users.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var availableUsers = ProxmoxVE.Permission.GetUsers.Invoke();
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetUsersResult> Invoke(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUsersResult>("proxmoxve:Permission/getUsers:getUsers", InvokeArgs.Empty, options.WithDefaults());
    }


    [OutputType]
    public sealed class GetUsersResult
    {
        /// <summary>
        /// The user comments.
        /// </summary>
        public readonly ImmutableArray<string> Comments;
        /// <summary>
        /// The users' email addresses.
        /// </summary>
        public readonly ImmutableArray<string> Emails;
        /// <summary>
        /// Whether a user account is enabled.
        /// </summary>
        public readonly ImmutableArray<bool> Enableds;
        /// <summary>
        /// The user accounts' expiration dates (RFC 3339).
        /// </summary>
        public readonly ImmutableArray<string> ExpirationDates;
        /// <summary>
        /// The users' first names.
        /// </summary>
        public readonly ImmutableArray<string> FirstNames;
        /// <summary>
        /// The users' groups.
        /// </summary>
        public readonly ImmutableArray<ImmutableArray<string>> Groups;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The users' keys.
        /// </summary>
        public readonly ImmutableArray<string> Keys;
        /// <summary>
        /// The users' last names.
        /// </summary>
        public readonly ImmutableArray<string> LastNames;
        /// <summary>
        /// The user identifiers.
        /// </summary>
        public readonly ImmutableArray<string> UserIds;

        [OutputConstructor]
        private GetUsersResult(
            ImmutableArray<string> comments,

            ImmutableArray<string> emails,

            ImmutableArray<bool> enableds,

            ImmutableArray<string> expirationDates,

            ImmutableArray<string> firstNames,

            ImmutableArray<ImmutableArray<string>> groups,

            string id,

            ImmutableArray<string> keys,

            ImmutableArray<string> lastNames,

            ImmutableArray<string> userIds)
        {
            Comments = comments;
            Emails = emails;
            Enableds = enableds;
            ExpirationDates = expirationDates;
            FirstNames = firstNames;
            Groups = groups;
            Id = id;
            Keys = keys;
            LastNames = lastNames;
            UserIds = userIds;
        }
    }
}

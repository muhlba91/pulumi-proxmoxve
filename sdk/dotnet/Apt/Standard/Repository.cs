// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ProxmoxVE.Apt.Standard
{
    /// <summary>
    /// Manages an APT standard repository of a Proxmox VE node.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using ProxmoxVE = Pulumi.ProxmoxVE;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleRepository = new ProxmoxVE.Apt.Standard.Repository("exampleRepository", new()
    ///     {
    ///         Handle = "no-subscription",
    ///         Node = "pve",
    ///     });
    /// 
    ///     var exampleApt_repositoryRepository = new ProxmoxVE.Apt.Repository("exampleApt/repositoryRepository", new()
    ///     {
    ///         Enabled = true,
    ///         FilePath = exampleRepository.FilePath,
    ///         Index = exampleRepository.Index,
    ///         Node = exampleRepository.Node,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// #!/usr/bin/env sh
    /// 
    /// An APT standard repository can be imported using a comma-separated list consisting of the name of the Proxmox VE node,
    /// 
    /// and the standard repository handle in the exact same order, e.g.:
    /// 
    /// ```sh
    /// $ pulumi import proxmoxve:Apt/standard/repository:Repository example pve,no-subscription
    /// ```
    /// </summary>
    [ProxmoxVEResourceType("proxmoxve:Apt/standard/repository:Repository")]
    public partial class Repository : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the APT standard repository.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The absolute path of the source list file that contains this standard repository.
        /// </summary>
        [Output("filePath")]
        public Output<string> FilePath { get; private set; } = null!;

        /// <summary>
        /// The handle of the APT standard repository. Must be `ceph-quincy-enterprise` | `ceph-quincy-no-subscription` | `ceph-quincy-test` | `ceph-reef-enterprise` | `ceph-reef-no-subscription` | `ceph-reef-test` | `enterprise` | `no-subscription` | `test`.
        /// </summary>
        [Output("handle")]
        public Output<string> Handle { get; private set; } = null!;

        /// <summary>
        /// The index within the defining source list file.
        /// </summary>
        [Output("index")]
        public Output<int> Index { get; private set; } = null!;

        /// <summary>
        /// The name of the APT standard repository.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the target Proxmox VE node.
        /// </summary>
        [Output("node")]
        public Output<string> Node { get; private set; } = null!;

        /// <summary>
        /// Indicates the activation status.
        /// </summary>
        [Output("status")]
        public Output<int> Status { get; private set; } = null!;


        /// <summary>
        /// Create a Repository resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Repository(string name, RepositoryArgs args, CustomResourceOptions? options = null)
            : base("proxmoxve:Apt/standard/repository:Repository", name, args ?? new RepositoryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Repository(string name, Input<string> id, RepositoryState? state = null, CustomResourceOptions? options = null)
            : base("proxmoxve:Apt/standard/repository:Repository", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/muhlba91/pulumi-proxmoxve",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Repository resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Repository Get(string name, Input<string> id, RepositoryState? state = null, CustomResourceOptions? options = null)
        {
            return new Repository(name, id, state, options);
        }
    }

    public sealed class RepositoryArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The handle of the APT standard repository. Must be `ceph-quincy-enterprise` | `ceph-quincy-no-subscription` | `ceph-quincy-test` | `ceph-reef-enterprise` | `ceph-reef-no-subscription` | `ceph-reef-test` | `enterprise` | `no-subscription` | `test`.
        /// </summary>
        [Input("handle", required: true)]
        public Input<string> Handle { get; set; } = null!;

        /// <summary>
        /// The name of the target Proxmox VE node.
        /// </summary>
        [Input("node", required: true)]
        public Input<string> Node { get; set; } = null!;

        public RepositoryArgs()
        {
        }
        public static new RepositoryArgs Empty => new RepositoryArgs();
    }

    public sealed class RepositoryState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the APT standard repository.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The absolute path of the source list file that contains this standard repository.
        /// </summary>
        [Input("filePath")]
        public Input<string>? FilePath { get; set; }

        /// <summary>
        /// The handle of the APT standard repository. Must be `ceph-quincy-enterprise` | `ceph-quincy-no-subscription` | `ceph-quincy-test` | `ceph-reef-enterprise` | `ceph-reef-no-subscription` | `ceph-reef-test` | `enterprise` | `no-subscription` | `test`.
        /// </summary>
        [Input("handle")]
        public Input<string>? Handle { get; set; }

        /// <summary>
        /// The index within the defining source list file.
        /// </summary>
        [Input("index")]
        public Input<int>? Index { get; set; }

        /// <summary>
        /// The name of the APT standard repository.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the target Proxmox VE node.
        /// </summary>
        [Input("node")]
        public Input<string>? Node { get; set; }

        /// <summary>
        /// Indicates the activation status.
        /// </summary>
        [Input("status")]
        public Input<int>? Status { get; set; }

        public RepositoryState()
        {
        }
        public static new RepositoryState Empty => new RepositoryState();
    }
}

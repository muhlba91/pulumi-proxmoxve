// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ProxmoxVE.Apt
{
    /// <summary>
    /// Manages an APT repository of a Proxmox VE node.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using ProxmoxVE = Pulumi.ProxmoxVE;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new ProxmoxVE.Apt.Repository("example", new()
    ///     {
    ///         Enabled = true,
    ///         FilePath = "/etc/apt/sources.list",
    ///         Index = 0,
    ///         Node = "pve",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// #!/usr/bin/env sh
    /// 
    /// An APT repository can be imported using a comma-separated list consisting of the name of the Proxmox VE node,
    /// 
    /// the absolute source list file path, and the index in the exact same order, e.g.:
    /// 
    /// ```sh
    /// $ pulumi import proxmoxve:Apt/repository:Repository example pve,/etc/apt/sources.list,0
    /// ```
    /// </summary>
    [ProxmoxVEResourceType("proxmoxve:Apt/repository:Repository")]
    public partial class Repository : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The associated comment.
        /// </summary>
        [Output("comment")]
        public Output<string> Comment { get; private set; } = null!;

        /// <summary>
        /// The list of components.
        /// </summary>
        [Output("components")]
        public Output<ImmutableArray<string>> Components { get; private set; } = null!;

        /// <summary>
        /// Indicates the activation status.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// The absolute path of the source list file that contains this repository.
        /// </summary>
        [Output("filePath")]
        public Output<string> FilePath { get; private set; } = null!;

        /// <summary>
        /// The format of the defining source list file.
        /// </summary>
        [Output("fileType")]
        public Output<string> FileType { get; private set; } = null!;

        /// <summary>
        /// The index within the defining source list file.
        /// </summary>
        [Output("index")]
        public Output<int> Index { get; private set; } = null!;

        /// <summary>
        /// The name of the target Proxmox VE node.
        /// </summary>
        [Output("node")]
        public Output<string> Node { get; private set; } = null!;

        /// <summary>
        /// The list of package types.
        /// </summary>
        [Output("packageTypes")]
        public Output<ImmutableArray<string>> PackageTypes { get; private set; } = null!;

        /// <summary>
        /// The list of package distributions.
        /// </summary>
        [Output("suites")]
        public Output<ImmutableArray<string>> Suites { get; private set; } = null!;

        /// <summary>
        /// The list of repository URIs.
        /// </summary>
        [Output("uris")]
        public Output<ImmutableArray<string>> Uris { get; private set; } = null!;


        /// <summary>
        /// Create a Repository resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Repository(string name, RepositoryArgs args, CustomResourceOptions? options = null)
            : base("proxmoxve:Apt/repository:Repository", name, args ?? new RepositoryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Repository(string name, Input<string> id, RepositoryState? state = null, CustomResourceOptions? options = null)
            : base("proxmoxve:Apt/repository:Repository", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/muhlba91/pulumi-proxmoxve",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Repository resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Repository Get(string name, Input<string> id, RepositoryState? state = null, CustomResourceOptions? options = null)
        {
            return new Repository(name, id, state, options);
        }
    }

    public sealed class RepositoryArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates the activation status.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The absolute path of the source list file that contains this repository.
        /// </summary>
        [Input("filePath", required: true)]
        public Input<string> FilePath { get; set; } = null!;

        /// <summary>
        /// The index within the defining source list file.
        /// </summary>
        [Input("index", required: true)]
        public Input<int> Index { get; set; } = null!;

        /// <summary>
        /// The name of the target Proxmox VE node.
        /// </summary>
        [Input("node", required: true)]
        public Input<string> Node { get; set; } = null!;

        public RepositoryArgs()
        {
        }
        public static new RepositoryArgs Empty => new RepositoryArgs();
    }

    public sealed class RepositoryState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The associated comment.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        [Input("components")]
        private InputList<string>? _components;

        /// <summary>
        /// The list of components.
        /// </summary>
        public InputList<string> Components
        {
            get => _components ?? (_components = new InputList<string>());
            set => _components = value;
        }

        /// <summary>
        /// Indicates the activation status.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The absolute path of the source list file that contains this repository.
        /// </summary>
        [Input("filePath")]
        public Input<string>? FilePath { get; set; }

        /// <summary>
        /// The format of the defining source list file.
        /// </summary>
        [Input("fileType")]
        public Input<string>? FileType { get; set; }

        /// <summary>
        /// The index within the defining source list file.
        /// </summary>
        [Input("index")]
        public Input<int>? Index { get; set; }

        /// <summary>
        /// The name of the target Proxmox VE node.
        /// </summary>
        [Input("node")]
        public Input<string>? Node { get; set; }

        [Input("packageTypes")]
        private InputList<string>? _packageTypes;

        /// <summary>
        /// The list of package types.
        /// </summary>
        public InputList<string> PackageTypes
        {
            get => _packageTypes ?? (_packageTypes = new InputList<string>());
            set => _packageTypes = value;
        }

        [Input("suites")]
        private InputList<string>? _suites;

        /// <summary>
        /// The list of package distributions.
        /// </summary>
        public InputList<string> Suites
        {
            get => _suites ?? (_suites = new InputList<string>());
            set => _suites = value;
        }

        [Input("uris")]
        private InputList<string>? _uris;

        /// <summary>
        /// The list of repository URIs.
        /// </summary>
        public InputList<string> Uris
        {
            get => _uris ?? (_uris = new InputList<string>());
            set => _uris = value;
        }

        public RepositoryState()
        {
        }
        public static new RepositoryState Empty => new RepositoryState();
    }
}

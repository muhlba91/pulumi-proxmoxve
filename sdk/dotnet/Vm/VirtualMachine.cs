// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ProxmoxVE.VM
{
    /// <summary>
    /// Manages a virtual machine.
    /// 
    /// &gt; This resource uses SSH access to the node. You might need to configure the `ssh` option in the `provider` section.
    /// 
    /// ## Qemu guest agent
    /// 
    /// Qemu-guest-agent is an application which can be installed inside guest VM, see
    /// [Proxmox Wiki](https://pve.proxmox.com/wiki/Qemu-guest-agent) and [Proxmox
    /// Documentation](https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm_qemu_agent)
    /// 
    /// For VM with `agent.enabled = false`, Proxmox uses ACPI for `Shutdown` and
    /// `Reboot`, and `qemu-guest-agent` is not needed inside the VM.
    /// 
    /// Setting `agent.enabled = true` informs Proxmox that the guest agent is expected
    /// to be *running* inside the VM. Proxmox then uses `qemu-guest-agent` instead of
    /// ACPI to control the VM. If the agent is not running, Proxmox operations
    /// `Shutdown` and `Reboot` time out and fail. The failing operation gets a lock on
    /// the VM, and until the operation times out, other operations like `Stop` and
    /// `Reboot` cannot be used.
    /// 
    /// Do **not** run VM with `agent.enabled = true`, unless the VM is configured to
    /// automatically **start** `qemu-guest-agent` at some point.
    /// 
    /// "Monitor" tab in Proxmox GUI can be used to send low-level commands to `qemu`.
    /// See the [documentation](https://www.qemu.org/docs/master/system/monitor.html).
    /// Commands `system_powerdown` and `quit` have proven useful in shutting down VMs
    /// with `agent.enabled = true` and no agent running.
    /// 
    /// Cloud images usually do not have `qemu-guest-agent` installed. It is possible to
    /// install and *start* it using cloud-init, e.g. using custom `user_data_file_id`
    /// file.
    /// 
    /// This provider requires `agent.enabled = true` to populate `ipv4_addresses`,
    /// `ipv6_addresses` and `network_interface_names` output attributes.
    /// 
    /// Setting `agent.enabled = true` without running `qemu-guest-agent` in the VM will
    /// also result in long timeouts when using the provider, both when creating VMs,
    /// and when refreshing resources.  The provider has no way to distinguish between
    /// "qemu-guest-agent not installed" and "very long boot due to a disk check", it
    /// trusts the user to set `agent.enabled` correctly and waits for
    /// `qemu-guest-agent` to start.
    /// 
    /// ## Important Notes
    /// 
    /// When cloning an existing virtual machine, whether it's a template or not, the
    /// resource will only detect changes to the arguments which are not set to their
    /// default values.
    /// 
    /// Furthermore, when cloning from one node to a different one, the behavior changes
    /// depening on the datastores of the source VM. If at least one non-shared
    /// datastore is used, the VM is first cloned to the source node before being
    /// migrated to the target node. This circumvents a limitation in the Proxmox clone
    /// API.
    /// 
    /// **Note:** Because the migration step after the clone tries to preserve the used
    /// datastores by their name, it may fail if a datastore used in the source VM is
    /// not available on the target node (e.g. `local-lvm` is used on the source node in
    /// the VM but no `local-lvm` datastore is available on the target node). In this
    /// case, it is recommended to set the `datastore_id` argument in the `clone` block
    /// to force the migration step to migrate all disks to a specific datastore on the
    /// target node. If you need certain disks to be on specific datastores, set
    /// the `datastore_id` argument of the disks in the `disks` block to move the disks
    /// to the correct datastore after the cloning and migrating succeeded.
    /// 
    /// ## Import
    /// 
    /// Instances can be imported using the `node_name` and the `vm_id`, e.g.,
    /// 
    ///  bash
    /// 
    /// ```sh
    /// $ pulumi import proxmoxve:VM/virtualMachine:VirtualMachine ubuntu_vm first-node/4321
    /// ```
    /// </summary>
    [ProxmoxVEResourceType("proxmoxve:VM/virtualMachine:VirtualMachine")]
    public partial class VirtualMachine : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether to enable ACPI (defaults to `true`).
        /// </summary>
        [Output("acpi")]
        public Output<bool?> Acpi { get; private set; } = null!;

        /// <summary>
        /// The QEMU agent configuration.
        /// </summary>
        [Output("agent")]
        public Output<Outputs.VirtualMachineAgent?> Agent { get; private set; } = null!;

        /// <summary>
        /// An audio device.
        /// </summary>
        [Output("audioDevice")]
        public Output<Outputs.VirtualMachineAudioDevice?> AudioDevice { get; private set; } = null!;

        /// <summary>
        /// The BIOS implementation (defaults to `seabios`).
        /// </summary>
        [Output("bios")]
        public Output<string?> Bios { get; private set; } = null!;

        /// <summary>
        /// Specify a list of devices to boot from in the order
        /// they appear in the list (defaults to `[]`).
        /// </summary>
        [Output("bootOrders")]
        public Output<ImmutableArray<string>> BootOrders { get; private set; } = null!;

        /// <summary>
        /// The CDROM configuration.
        /// </summary>
        [Output("cdrom")]
        public Output<Outputs.VirtualMachineCdrom?> Cdrom { get; private set; } = null!;

        /// <summary>
        /// The cloning configuration.
        /// </summary>
        [Output("clone")]
        public Output<Outputs.VirtualMachineClone?> Clone { get; private set; } = null!;

        /// <summary>
        /// The CPU configuration.
        /// </summary>
        [Output("cpu")]
        public Output<Outputs.VirtualMachineCpu?> Cpu { get; private set; } = null!;

        /// <summary>
        /// The description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// A disk (multiple blocks supported).
        /// </summary>
        [Output("disks")]
        public Output<ImmutableArray<Outputs.VirtualMachineDisk>> Disks { get; private set; } = null!;

        /// <summary>
        /// The efi disk device (required if `bios` is set
        /// to `ovmf`)
        /// </summary>
        [Output("efiDisk")]
        public Output<Outputs.VirtualMachineEfiDisk?> EfiDisk { get; private set; } = null!;

        /// <summary>
        /// The identifier for a file containing a hook script (needs to be executable).
        /// </summary>
        [Output("hookScriptFileId")]
        public Output<string?> HookScriptFileId { get; private set; } = null!;

        /// <summary>
        /// A host PCI device mapping (multiple blocks supported).
        /// </summary>
        [Output("hostpcis")]
        public Output<ImmutableArray<Outputs.VirtualMachineHostpci>> Hostpcis { get; private set; } = null!;

        /// <summary>
        /// The cloud-init configuration.
        /// </summary>
        [Output("initialization")]
        public Output<Outputs.VirtualMachineInitialization?> Initialization { get; private set; } = null!;

        /// <summary>
        /// The IPv4 addresses per network interface published by the
        /// QEMU agent (empty list when `agent.enabled` is `false`)
        /// </summary>
        [Output("ipv4Addresses")]
        public Output<ImmutableArray<ImmutableArray<string>>> Ipv4Addresses { get; private set; } = null!;

        /// <summary>
        /// The IPv6 addresses per network interface published by the
        /// QEMU agent (empty list when `agent.enabled` is `false`)
        /// </summary>
        [Output("ipv6Addresses")]
        public Output<ImmutableArray<ImmutableArray<string>>> Ipv6Addresses { get; private set; } = null!;

        /// <summary>
        /// The keyboard layout (defaults to `en-us`).
        /// </summary>
        [Output("keyboardLayout")]
        public Output<string?> KeyboardLayout { get; private set; } = null!;

        /// <summary>
        /// Arbitrary arguments passed to kvm.
        /// </summary>
        [Output("kvmArguments")]
        public Output<string?> KvmArguments { get; private set; } = null!;

        /// <summary>
        /// The MAC addresses published by the QEMU agent with fallback
        /// to the network device configuration, if the agent is disabled
        /// </summary>
        [Output("macAddresses")]
        public Output<ImmutableArray<string>> MacAddresses { get; private set; } = null!;

        /// <summary>
        /// The VM machine type (defaults to `pc`).
        /// </summary>
        [Output("machine")]
        public Output<string?> Machine { get; private set; } = null!;

        /// <summary>
        /// The VGA memory in megabytes (defaults to `16`).
        /// </summary>
        [Output("memory")]
        public Output<Outputs.VirtualMachineMemory?> Memory { get; private set; } = null!;

        /// <summary>
        /// Migrate the VM on node change instead of re-creating
        /// it (defaults to `false`).
        /// </summary>
        [Output("migrate")]
        public Output<bool?> Migrate { get; private set; } = null!;

        /// <summary>
        /// The virtual machine name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A network device (multiple blocks supported).
        /// </summary>
        [Output("networkDevices")]
        public Output<ImmutableArray<Outputs.VirtualMachineNetworkDevice>> NetworkDevices { get; private set; } = null!;

        /// <summary>
        /// The network interface names published by the QEMU
        /// agent (empty list when `agent.enabled` is `false`)
        /// </summary>
        [Output("networkInterfaceNames")]
        public Output<ImmutableArray<string>> NetworkInterfaceNames { get; private set; } = null!;

        /// <summary>
        /// The name of the node to assign the virtual machine
        /// to.
        /// </summary>
        [Output("nodeName")]
        public Output<string> NodeName { get; private set; } = null!;

        /// <summary>
        /// Specifies whether a VM will be started during system
        /// boot. (defaults to `true`)
        /// </summary>
        [Output("onBoot")]
        public Output<bool?> OnBoot { get; private set; } = null!;

        /// <summary>
        /// The Operating System configuration.
        /// </summary>
        [Output("operatingSystem")]
        public Output<Outputs.VirtualMachineOperatingSystem?> OperatingSystem { get; private set; } = null!;

        /// <summary>
        /// The identifier for a pool to assign the virtual machine
        /// to.
        /// </summary>
        [Output("poolId")]
        public Output<string?> PoolId { get; private set; } = null!;

        /// <summary>
        /// Reboot the VM after initial creation. (defaults
        /// to `false`)
        /// </summary>
        [Output("reboot")]
        public Output<bool?> Reboot { get; private set; } = null!;

        /// <summary>
        /// The SCSI hardware type (defaults to
        /// `virtio-scsi-pci`).
        /// </summary>
        [Output("scsiHardware")]
        public Output<string?> ScsiHardware { get; private set; } = null!;

        /// <summary>
        /// A serial device (multiple blocks supported).
        /// </summary>
        [Output("serialDevices")]
        public Output<ImmutableArray<Outputs.VirtualMachineSerialDevice>> SerialDevices { get; private set; } = null!;

        /// <summary>
        /// The SMBIOS (type1) settings for the VM.
        /// </summary>
        [Output("smbios")]
        public Output<Outputs.VirtualMachineSmbios?> Smbios { get; private set; } = null!;

        /// <summary>
        /// Whether to start the virtual machine (defaults
        /// to `true`).
        /// </summary>
        [Output("started")]
        public Output<bool?> Started { get; private set; } = null!;

        /// <summary>
        /// Defines startup and shutdown behavior of the VM.
        /// </summary>
        [Output("startup")]
        public Output<Outputs.VirtualMachineStartup?> Startup { get; private set; } = null!;

        /// <summary>
        /// Whether to stop rather than shutdown on VM destroy (defaults to `false`)
        /// </summary>
        [Output("stopOnDestroy")]
        public Output<bool?> StopOnDestroy { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the USB tablet device (defaults
        /// to `true`).
        /// </summary>
        [Output("tabletDevice")]
        public Output<bool?> TabletDevice { get; private set; } = null!;

        /// <summary>
        /// A list of tags of the VM. This is only meta information (
        /// defaults to `[]`). Note: Proxmox always sorts the VM tags. If the list in
        /// template is not sorted, then Proxmox will always report a difference on the
        /// resource. You may use the `ignore_changes` lifecycle meta-argument to ignore
        /// changes to this attribute.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Whether to create a template (defaults to `false`).
        /// </summary>
        [Output("template")]
        public Output<bool?> Template { get; private set; } = null!;

        /// <summary>
        /// Timeout for cloning a VM in seconds (defaults to
        /// 1800).
        /// </summary>
        [Output("timeoutClone")]
        public Output<int?> TimeoutClone { get; private set; } = null!;

        /// <summary>
        /// Timeout for creating a VM in seconds (defaults to
        /// 1800).
        /// </summary>
        [Output("timeoutCreate")]
        public Output<int?> TimeoutCreate { get; private set; } = null!;

        /// <summary>
        /// Timeout for migrating the VM (defaults to
        /// 1800).
        /// </summary>
        [Output("timeoutMigrate")]
        public Output<int?> TimeoutMigrate { get; private set; } = null!;

        /// <summary>
        /// Timeout for moving the disk of a VM in
        /// seconds (defaults to 1800).
        /// </summary>
        [Output("timeoutMoveDisk")]
        public Output<int?> TimeoutMoveDisk { get; private set; } = null!;

        /// <summary>
        /// Timeout for rebooting a VM in seconds (defaults
        /// to 1800).
        /// </summary>
        [Output("timeoutReboot")]
        public Output<int?> TimeoutReboot { get; private set; } = null!;

        /// <summary>
        /// Timeout for shutting down a VM in seconds (
        /// defaults to 1800).
        /// </summary>
        [Output("timeoutShutdownVm")]
        public Output<int?> TimeoutShutdownVm { get; private set; } = null!;

        /// <summary>
        /// Timeout for starting a VM in seconds (defaults
        /// to 1800).
        /// </summary>
        [Output("timeoutStartVm")]
        public Output<int?> TimeoutStartVm { get; private set; } = null!;

        /// <summary>
        /// Timeout for stopping a VM in seconds (defaults
        /// to 300).
        /// </summary>
        [Output("timeoutStopVm")]
        public Output<int?> TimeoutStopVm { get; private set; } = null!;

        /// <summary>
        /// The TPM state device.
        /// </summary>
        [Output("tpmState")]
        public Output<Outputs.VirtualMachineTpmState?> TpmState { get; private set; } = null!;

        /// <summary>
        /// A host USB device mapping (multiple blocks supported).
        /// </summary>
        [Output("usbs")]
        public Output<ImmutableArray<Outputs.VirtualMachineUsb>> Usbs { get; private set; } = null!;

        /// <summary>
        /// The VGA configuration.
        /// </summary>
        [Output("vga")]
        public Output<Outputs.VirtualMachineVga?> Vga { get; private set; } = null!;

        /// <summary>
        /// The VM identifier.
        /// </summary>
        [Output("vmId")]
        public Output<int> VmId { get; private set; } = null!;


        /// <summary>
        /// Create a VirtualMachine resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VirtualMachine(string name, VirtualMachineArgs args, CustomResourceOptions? options = null)
            : base("proxmoxve:VM/virtualMachine:VirtualMachine", name, args ?? new VirtualMachineArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VirtualMachine(string name, Input<string> id, VirtualMachineState? state = null, CustomResourceOptions? options = null)
            : base("proxmoxve:VM/virtualMachine:VirtualMachine", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/muhlba91/pulumi-proxmoxve",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VirtualMachine resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VirtualMachine Get(string name, Input<string> id, VirtualMachineState? state = null, CustomResourceOptions? options = null)
        {
            return new VirtualMachine(name, id, state, options);
        }
    }

    public sealed class VirtualMachineArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to enable ACPI (defaults to `true`).
        /// </summary>
        [Input("acpi")]
        public Input<bool>? Acpi { get; set; }

        /// <summary>
        /// The QEMU agent configuration.
        /// </summary>
        [Input("agent")]
        public Input<Inputs.VirtualMachineAgentArgs>? Agent { get; set; }

        /// <summary>
        /// An audio device.
        /// </summary>
        [Input("audioDevice")]
        public Input<Inputs.VirtualMachineAudioDeviceArgs>? AudioDevice { get; set; }

        /// <summary>
        /// The BIOS implementation (defaults to `seabios`).
        /// </summary>
        [Input("bios")]
        public Input<string>? Bios { get; set; }

        [Input("bootOrders")]
        private InputList<string>? _bootOrders;

        /// <summary>
        /// Specify a list of devices to boot from in the order
        /// they appear in the list (defaults to `[]`).
        /// </summary>
        public InputList<string> BootOrders
        {
            get => _bootOrders ?? (_bootOrders = new InputList<string>());
            set => _bootOrders = value;
        }

        /// <summary>
        /// The CDROM configuration.
        /// </summary>
        [Input("cdrom")]
        public Input<Inputs.VirtualMachineCdromArgs>? Cdrom { get; set; }

        /// <summary>
        /// The cloning configuration.
        /// </summary>
        [Input("clone")]
        public Input<Inputs.VirtualMachineCloneArgs>? Clone { get; set; }

        /// <summary>
        /// The CPU configuration.
        /// </summary>
        [Input("cpu")]
        public Input<Inputs.VirtualMachineCpuArgs>? Cpu { get; set; }

        /// <summary>
        /// The description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("disks")]
        private InputList<Inputs.VirtualMachineDiskArgs>? _disks;

        /// <summary>
        /// A disk (multiple blocks supported).
        /// </summary>
        public InputList<Inputs.VirtualMachineDiskArgs> Disks
        {
            get => _disks ?? (_disks = new InputList<Inputs.VirtualMachineDiskArgs>());
            set => _disks = value;
        }

        /// <summary>
        /// The efi disk device (required if `bios` is set
        /// to `ovmf`)
        /// </summary>
        [Input("efiDisk")]
        public Input<Inputs.VirtualMachineEfiDiskArgs>? EfiDisk { get; set; }

        /// <summary>
        /// The identifier for a file containing a hook script (needs to be executable).
        /// </summary>
        [Input("hookScriptFileId")]
        public Input<string>? HookScriptFileId { get; set; }

        [Input("hostpcis")]
        private InputList<Inputs.VirtualMachineHostpciArgs>? _hostpcis;

        /// <summary>
        /// A host PCI device mapping (multiple blocks supported).
        /// </summary>
        public InputList<Inputs.VirtualMachineHostpciArgs> Hostpcis
        {
            get => _hostpcis ?? (_hostpcis = new InputList<Inputs.VirtualMachineHostpciArgs>());
            set => _hostpcis = value;
        }

        /// <summary>
        /// The cloud-init configuration.
        /// </summary>
        [Input("initialization")]
        public Input<Inputs.VirtualMachineInitializationArgs>? Initialization { get; set; }

        /// <summary>
        /// The keyboard layout (defaults to `en-us`).
        /// </summary>
        [Input("keyboardLayout")]
        public Input<string>? KeyboardLayout { get; set; }

        /// <summary>
        /// Arbitrary arguments passed to kvm.
        /// </summary>
        [Input("kvmArguments")]
        public Input<string>? KvmArguments { get; set; }

        [Input("macAddresses")]
        private InputList<string>? _macAddresses;

        /// <summary>
        /// The MAC addresses published by the QEMU agent with fallback
        /// to the network device configuration, if the agent is disabled
        /// </summary>
        public InputList<string> MacAddresses
        {
            get => _macAddresses ?? (_macAddresses = new InputList<string>());
            set => _macAddresses = value;
        }

        /// <summary>
        /// The VM machine type (defaults to `pc`).
        /// </summary>
        [Input("machine")]
        public Input<string>? Machine { get; set; }

        /// <summary>
        /// The VGA memory in megabytes (defaults to `16`).
        /// </summary>
        [Input("memory")]
        public Input<Inputs.VirtualMachineMemoryArgs>? Memory { get; set; }

        /// <summary>
        /// Migrate the VM on node change instead of re-creating
        /// it (defaults to `false`).
        /// </summary>
        [Input("migrate")]
        public Input<bool>? Migrate { get; set; }

        /// <summary>
        /// The virtual machine name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkDevices")]
        private InputList<Inputs.VirtualMachineNetworkDeviceArgs>? _networkDevices;

        /// <summary>
        /// A network device (multiple blocks supported).
        /// </summary>
        public InputList<Inputs.VirtualMachineNetworkDeviceArgs> NetworkDevices
        {
            get => _networkDevices ?? (_networkDevices = new InputList<Inputs.VirtualMachineNetworkDeviceArgs>());
            set => _networkDevices = value;
        }

        /// <summary>
        /// The name of the node to assign the virtual machine
        /// to.
        /// </summary>
        [Input("nodeName", required: true)]
        public Input<string> NodeName { get; set; } = null!;

        /// <summary>
        /// Specifies whether a VM will be started during system
        /// boot. (defaults to `true`)
        /// </summary>
        [Input("onBoot")]
        public Input<bool>? OnBoot { get; set; }

        /// <summary>
        /// The Operating System configuration.
        /// </summary>
        [Input("operatingSystem")]
        public Input<Inputs.VirtualMachineOperatingSystemArgs>? OperatingSystem { get; set; }

        /// <summary>
        /// The identifier for a pool to assign the virtual machine
        /// to.
        /// </summary>
        [Input("poolId")]
        public Input<string>? PoolId { get; set; }

        /// <summary>
        /// Reboot the VM after initial creation. (defaults
        /// to `false`)
        /// </summary>
        [Input("reboot")]
        public Input<bool>? Reboot { get; set; }

        /// <summary>
        /// The SCSI hardware type (defaults to
        /// `virtio-scsi-pci`).
        /// </summary>
        [Input("scsiHardware")]
        public Input<string>? ScsiHardware { get; set; }

        [Input("serialDevices")]
        private InputList<Inputs.VirtualMachineSerialDeviceArgs>? _serialDevices;

        /// <summary>
        /// A serial device (multiple blocks supported).
        /// </summary>
        public InputList<Inputs.VirtualMachineSerialDeviceArgs> SerialDevices
        {
            get => _serialDevices ?? (_serialDevices = new InputList<Inputs.VirtualMachineSerialDeviceArgs>());
            set => _serialDevices = value;
        }

        /// <summary>
        /// The SMBIOS (type1) settings for the VM.
        /// </summary>
        [Input("smbios")]
        public Input<Inputs.VirtualMachineSmbiosArgs>? Smbios { get; set; }

        /// <summary>
        /// Whether to start the virtual machine (defaults
        /// to `true`).
        /// </summary>
        [Input("started")]
        public Input<bool>? Started { get; set; }

        /// <summary>
        /// Defines startup and shutdown behavior of the VM.
        /// </summary>
        [Input("startup")]
        public Input<Inputs.VirtualMachineStartupArgs>? Startup { get; set; }

        /// <summary>
        /// Whether to stop rather than shutdown on VM destroy (defaults to `false`)
        /// </summary>
        [Input("stopOnDestroy")]
        public Input<bool>? StopOnDestroy { get; set; }

        /// <summary>
        /// Whether to enable the USB tablet device (defaults
        /// to `true`).
        /// </summary>
        [Input("tabletDevice")]
        public Input<bool>? TabletDevice { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of tags of the VM. This is only meta information (
        /// defaults to `[]`). Note: Proxmox always sorts the VM tags. If the list in
        /// template is not sorted, then Proxmox will always report a difference on the
        /// resource. You may use the `ignore_changes` lifecycle meta-argument to ignore
        /// changes to this attribute.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Whether to create a template (defaults to `false`).
        /// </summary>
        [Input("template")]
        public Input<bool>? Template { get; set; }

        /// <summary>
        /// Timeout for cloning a VM in seconds (defaults to
        /// 1800).
        /// </summary>
        [Input("timeoutClone")]
        public Input<int>? TimeoutClone { get; set; }

        /// <summary>
        /// Timeout for creating a VM in seconds (defaults to
        /// 1800).
        /// </summary>
        [Input("timeoutCreate")]
        public Input<int>? TimeoutCreate { get; set; }

        /// <summary>
        /// Timeout for migrating the VM (defaults to
        /// 1800).
        /// </summary>
        [Input("timeoutMigrate")]
        public Input<int>? TimeoutMigrate { get; set; }

        /// <summary>
        /// Timeout for moving the disk of a VM in
        /// seconds (defaults to 1800).
        /// </summary>
        [Input("timeoutMoveDisk")]
        public Input<int>? TimeoutMoveDisk { get; set; }

        /// <summary>
        /// Timeout for rebooting a VM in seconds (defaults
        /// to 1800).
        /// </summary>
        [Input("timeoutReboot")]
        public Input<int>? TimeoutReboot { get; set; }

        /// <summary>
        /// Timeout for shutting down a VM in seconds (
        /// defaults to 1800).
        /// </summary>
        [Input("timeoutShutdownVm")]
        public Input<int>? TimeoutShutdownVm { get; set; }

        /// <summary>
        /// Timeout for starting a VM in seconds (defaults
        /// to 1800).
        /// </summary>
        [Input("timeoutStartVm")]
        public Input<int>? TimeoutStartVm { get; set; }

        /// <summary>
        /// Timeout for stopping a VM in seconds (defaults
        /// to 300).
        /// </summary>
        [Input("timeoutStopVm")]
        public Input<int>? TimeoutStopVm { get; set; }

        /// <summary>
        /// The TPM state device.
        /// </summary>
        [Input("tpmState")]
        public Input<Inputs.VirtualMachineTpmStateArgs>? TpmState { get; set; }

        [Input("usbs")]
        private InputList<Inputs.VirtualMachineUsbArgs>? _usbs;

        /// <summary>
        /// A host USB device mapping (multiple blocks supported).
        /// </summary>
        public InputList<Inputs.VirtualMachineUsbArgs> Usbs
        {
            get => _usbs ?? (_usbs = new InputList<Inputs.VirtualMachineUsbArgs>());
            set => _usbs = value;
        }

        /// <summary>
        /// The VGA configuration.
        /// </summary>
        [Input("vga")]
        public Input<Inputs.VirtualMachineVgaArgs>? Vga { get; set; }

        /// <summary>
        /// The VM identifier.
        /// </summary>
        [Input("vmId")]
        public Input<int>? VmId { get; set; }

        public VirtualMachineArgs()
        {
        }
        public static new VirtualMachineArgs Empty => new VirtualMachineArgs();
    }

    public sealed class VirtualMachineState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to enable ACPI (defaults to `true`).
        /// </summary>
        [Input("acpi")]
        public Input<bool>? Acpi { get; set; }

        /// <summary>
        /// The QEMU agent configuration.
        /// </summary>
        [Input("agent")]
        public Input<Inputs.VirtualMachineAgentGetArgs>? Agent { get; set; }

        /// <summary>
        /// An audio device.
        /// </summary>
        [Input("audioDevice")]
        public Input<Inputs.VirtualMachineAudioDeviceGetArgs>? AudioDevice { get; set; }

        /// <summary>
        /// The BIOS implementation (defaults to `seabios`).
        /// </summary>
        [Input("bios")]
        public Input<string>? Bios { get; set; }

        [Input("bootOrders")]
        private InputList<string>? _bootOrders;

        /// <summary>
        /// Specify a list of devices to boot from in the order
        /// they appear in the list (defaults to `[]`).
        /// </summary>
        public InputList<string> BootOrders
        {
            get => _bootOrders ?? (_bootOrders = new InputList<string>());
            set => _bootOrders = value;
        }

        /// <summary>
        /// The CDROM configuration.
        /// </summary>
        [Input("cdrom")]
        public Input<Inputs.VirtualMachineCdromGetArgs>? Cdrom { get; set; }

        /// <summary>
        /// The cloning configuration.
        /// </summary>
        [Input("clone")]
        public Input<Inputs.VirtualMachineCloneGetArgs>? Clone { get; set; }

        /// <summary>
        /// The CPU configuration.
        /// </summary>
        [Input("cpu")]
        public Input<Inputs.VirtualMachineCpuGetArgs>? Cpu { get; set; }

        /// <summary>
        /// The description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("disks")]
        private InputList<Inputs.VirtualMachineDiskGetArgs>? _disks;

        /// <summary>
        /// A disk (multiple blocks supported).
        /// </summary>
        public InputList<Inputs.VirtualMachineDiskGetArgs> Disks
        {
            get => _disks ?? (_disks = new InputList<Inputs.VirtualMachineDiskGetArgs>());
            set => _disks = value;
        }

        /// <summary>
        /// The efi disk device (required if `bios` is set
        /// to `ovmf`)
        /// </summary>
        [Input("efiDisk")]
        public Input<Inputs.VirtualMachineEfiDiskGetArgs>? EfiDisk { get; set; }

        /// <summary>
        /// The identifier for a file containing a hook script (needs to be executable).
        /// </summary>
        [Input("hookScriptFileId")]
        public Input<string>? HookScriptFileId { get; set; }

        [Input("hostpcis")]
        private InputList<Inputs.VirtualMachineHostpciGetArgs>? _hostpcis;

        /// <summary>
        /// A host PCI device mapping (multiple blocks supported).
        /// </summary>
        public InputList<Inputs.VirtualMachineHostpciGetArgs> Hostpcis
        {
            get => _hostpcis ?? (_hostpcis = new InputList<Inputs.VirtualMachineHostpciGetArgs>());
            set => _hostpcis = value;
        }

        /// <summary>
        /// The cloud-init configuration.
        /// </summary>
        [Input("initialization")]
        public Input<Inputs.VirtualMachineInitializationGetArgs>? Initialization { get; set; }

        [Input("ipv4Addresses")]
        private InputList<ImmutableArray<string>>? _ipv4Addresses;

        /// <summary>
        /// The IPv4 addresses per network interface published by the
        /// QEMU agent (empty list when `agent.enabled` is `false`)
        /// </summary>
        public InputList<ImmutableArray<string>> Ipv4Addresses
        {
            get => _ipv4Addresses ?? (_ipv4Addresses = new InputList<ImmutableArray<string>>());
            set => _ipv4Addresses = value;
        }

        [Input("ipv6Addresses")]
        private InputList<ImmutableArray<string>>? _ipv6Addresses;

        /// <summary>
        /// The IPv6 addresses per network interface published by the
        /// QEMU agent (empty list when `agent.enabled` is `false`)
        /// </summary>
        public InputList<ImmutableArray<string>> Ipv6Addresses
        {
            get => _ipv6Addresses ?? (_ipv6Addresses = new InputList<ImmutableArray<string>>());
            set => _ipv6Addresses = value;
        }

        /// <summary>
        /// The keyboard layout (defaults to `en-us`).
        /// </summary>
        [Input("keyboardLayout")]
        public Input<string>? KeyboardLayout { get; set; }

        /// <summary>
        /// Arbitrary arguments passed to kvm.
        /// </summary>
        [Input("kvmArguments")]
        public Input<string>? KvmArguments { get; set; }

        [Input("macAddresses")]
        private InputList<string>? _macAddresses;

        /// <summary>
        /// The MAC addresses published by the QEMU agent with fallback
        /// to the network device configuration, if the agent is disabled
        /// </summary>
        public InputList<string> MacAddresses
        {
            get => _macAddresses ?? (_macAddresses = new InputList<string>());
            set => _macAddresses = value;
        }

        /// <summary>
        /// The VM machine type (defaults to `pc`).
        /// </summary>
        [Input("machine")]
        public Input<string>? Machine { get; set; }

        /// <summary>
        /// The VGA memory in megabytes (defaults to `16`).
        /// </summary>
        [Input("memory")]
        public Input<Inputs.VirtualMachineMemoryGetArgs>? Memory { get; set; }

        /// <summary>
        /// Migrate the VM on node change instead of re-creating
        /// it (defaults to `false`).
        /// </summary>
        [Input("migrate")]
        public Input<bool>? Migrate { get; set; }

        /// <summary>
        /// The virtual machine name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkDevices")]
        private InputList<Inputs.VirtualMachineNetworkDeviceGetArgs>? _networkDevices;

        /// <summary>
        /// A network device (multiple blocks supported).
        /// </summary>
        public InputList<Inputs.VirtualMachineNetworkDeviceGetArgs> NetworkDevices
        {
            get => _networkDevices ?? (_networkDevices = new InputList<Inputs.VirtualMachineNetworkDeviceGetArgs>());
            set => _networkDevices = value;
        }

        [Input("networkInterfaceNames")]
        private InputList<string>? _networkInterfaceNames;

        /// <summary>
        /// The network interface names published by the QEMU
        /// agent (empty list when `agent.enabled` is `false`)
        /// </summary>
        public InputList<string> NetworkInterfaceNames
        {
            get => _networkInterfaceNames ?? (_networkInterfaceNames = new InputList<string>());
            set => _networkInterfaceNames = value;
        }

        /// <summary>
        /// The name of the node to assign the virtual machine
        /// to.
        /// </summary>
        [Input("nodeName")]
        public Input<string>? NodeName { get; set; }

        /// <summary>
        /// Specifies whether a VM will be started during system
        /// boot. (defaults to `true`)
        /// </summary>
        [Input("onBoot")]
        public Input<bool>? OnBoot { get; set; }

        /// <summary>
        /// The Operating System configuration.
        /// </summary>
        [Input("operatingSystem")]
        public Input<Inputs.VirtualMachineOperatingSystemGetArgs>? OperatingSystem { get; set; }

        /// <summary>
        /// The identifier for a pool to assign the virtual machine
        /// to.
        /// </summary>
        [Input("poolId")]
        public Input<string>? PoolId { get; set; }

        /// <summary>
        /// Reboot the VM after initial creation. (defaults
        /// to `false`)
        /// </summary>
        [Input("reboot")]
        public Input<bool>? Reboot { get; set; }

        /// <summary>
        /// The SCSI hardware type (defaults to
        /// `virtio-scsi-pci`).
        /// </summary>
        [Input("scsiHardware")]
        public Input<string>? ScsiHardware { get; set; }

        [Input("serialDevices")]
        private InputList<Inputs.VirtualMachineSerialDeviceGetArgs>? _serialDevices;

        /// <summary>
        /// A serial device (multiple blocks supported).
        /// </summary>
        public InputList<Inputs.VirtualMachineSerialDeviceGetArgs> SerialDevices
        {
            get => _serialDevices ?? (_serialDevices = new InputList<Inputs.VirtualMachineSerialDeviceGetArgs>());
            set => _serialDevices = value;
        }

        /// <summary>
        /// The SMBIOS (type1) settings for the VM.
        /// </summary>
        [Input("smbios")]
        public Input<Inputs.VirtualMachineSmbiosGetArgs>? Smbios { get; set; }

        /// <summary>
        /// Whether to start the virtual machine (defaults
        /// to `true`).
        /// </summary>
        [Input("started")]
        public Input<bool>? Started { get; set; }

        /// <summary>
        /// Defines startup and shutdown behavior of the VM.
        /// </summary>
        [Input("startup")]
        public Input<Inputs.VirtualMachineStartupGetArgs>? Startup { get; set; }

        /// <summary>
        /// Whether to stop rather than shutdown on VM destroy (defaults to `false`)
        /// </summary>
        [Input("stopOnDestroy")]
        public Input<bool>? StopOnDestroy { get; set; }

        /// <summary>
        /// Whether to enable the USB tablet device (defaults
        /// to `true`).
        /// </summary>
        [Input("tabletDevice")]
        public Input<bool>? TabletDevice { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of tags of the VM. This is only meta information (
        /// defaults to `[]`). Note: Proxmox always sorts the VM tags. If the list in
        /// template is not sorted, then Proxmox will always report a difference on the
        /// resource. You may use the `ignore_changes` lifecycle meta-argument to ignore
        /// changes to this attribute.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Whether to create a template (defaults to `false`).
        /// </summary>
        [Input("template")]
        public Input<bool>? Template { get; set; }

        /// <summary>
        /// Timeout for cloning a VM in seconds (defaults to
        /// 1800).
        /// </summary>
        [Input("timeoutClone")]
        public Input<int>? TimeoutClone { get; set; }

        /// <summary>
        /// Timeout for creating a VM in seconds (defaults to
        /// 1800).
        /// </summary>
        [Input("timeoutCreate")]
        public Input<int>? TimeoutCreate { get; set; }

        /// <summary>
        /// Timeout for migrating the VM (defaults to
        /// 1800).
        /// </summary>
        [Input("timeoutMigrate")]
        public Input<int>? TimeoutMigrate { get; set; }

        /// <summary>
        /// Timeout for moving the disk of a VM in
        /// seconds (defaults to 1800).
        /// </summary>
        [Input("timeoutMoveDisk")]
        public Input<int>? TimeoutMoveDisk { get; set; }

        /// <summary>
        /// Timeout for rebooting a VM in seconds (defaults
        /// to 1800).
        /// </summary>
        [Input("timeoutReboot")]
        public Input<int>? TimeoutReboot { get; set; }

        /// <summary>
        /// Timeout for shutting down a VM in seconds (
        /// defaults to 1800).
        /// </summary>
        [Input("timeoutShutdownVm")]
        public Input<int>? TimeoutShutdownVm { get; set; }

        /// <summary>
        /// Timeout for starting a VM in seconds (defaults
        /// to 1800).
        /// </summary>
        [Input("timeoutStartVm")]
        public Input<int>? TimeoutStartVm { get; set; }

        /// <summary>
        /// Timeout for stopping a VM in seconds (defaults
        /// to 300).
        /// </summary>
        [Input("timeoutStopVm")]
        public Input<int>? TimeoutStopVm { get; set; }

        /// <summary>
        /// The TPM state device.
        /// </summary>
        [Input("tpmState")]
        public Input<Inputs.VirtualMachineTpmStateGetArgs>? TpmState { get; set; }

        [Input("usbs")]
        private InputList<Inputs.VirtualMachineUsbGetArgs>? _usbs;

        /// <summary>
        /// A host USB device mapping (multiple blocks supported).
        /// </summary>
        public InputList<Inputs.VirtualMachineUsbGetArgs> Usbs
        {
            get => _usbs ?? (_usbs = new InputList<Inputs.VirtualMachineUsbGetArgs>());
            set => _usbs = value;
        }

        /// <summary>
        /// The VGA configuration.
        /// </summary>
        [Input("vga")]
        public Input<Inputs.VirtualMachineVgaGetArgs>? Vga { get; set; }

        /// <summary>
        /// The VM identifier.
        /// </summary>
        [Input("vmId")]
        public Input<int>? VmId { get; set; }

        public VirtualMachineState()
        {
        }
        public static new VirtualMachineState Empty => new VirtualMachineState();
    }
}

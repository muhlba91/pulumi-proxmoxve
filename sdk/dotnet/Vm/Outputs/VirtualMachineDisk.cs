// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ProxmoxVE.VM.Outputs
{

    [OutputType]
    public sealed class VirtualMachineDisk
    {
        /// <summary>
        /// The disk AIO mode (defaults to `io_uring`).
        /// </summary>
        public readonly string? Aio;
        /// <summary>
        /// Whether the drive should be included when making backups (defaults to `true`).
        /// </summary>
        public readonly bool? Backup;
        /// <summary>
        /// The cache type (defaults to `none`).
        /// </summary>
        public readonly string? Cache;
        /// <summary>
        /// The identifier for the datastore to create
        /// the disk in (defaults to `local-lvm`).
        /// </summary>
        public readonly string? DatastoreId;
        /// <summary>
        /// Whether to pass discard/trim requests to the
        /// underlying storage. Supported values are `on`/`ignore` (defaults
        /// to `ignore`).
        /// </summary>
        public readonly string? Discard;
        /// <summary>
        /// The file format.
        /// </summary>
        public readonly string? FileFormat;
        /// <summary>
        /// The file ID for a disk image when importing a disk into VM. The ID format is
        /// `&lt;datastore_id&gt;:&lt;content_type&gt;/&lt;file_name&gt;`, for example `local:iso/centos8.img`. Can be also taken from
        /// `proxmoxve.Download.File` resource.
        /// </summary>
        public readonly string? FileId;
        /// <summary>
        /// The disk interface for Proxmox, currently `scsi`,
        /// `sata` and `virtio` interfaces are supported. Append the disk index at
        /// the end, for example, `virtio0` for the first virtio disk, `virtio1` for
        /// the second, etc.
        /// </summary>
        public readonly string Interface;
        /// <summary>
        /// Whether to use iothreads for this disk (defaults
        /// to `false`).
        /// </summary>
        public readonly bool? Iothread;
        /// <summary>
        /// The in-datastore path to the disk image.
        /// ***Experimental.***Use to attach another VM's disks,
        /// or (as root only) host's filesystem paths (`datastore_id` empty string).
        /// See "*Example: Attached disks*".
        /// </summary>
        public readonly string? PathInDatastore;
        /// <summary>
        /// Whether the drive should be considered for replication jobs (defaults to `true`).
        /// </summary>
        public readonly bool? Replicate;
        /// <summary>
        /// The serial number of the disk, up to 20 bytes long.
        /// </summary>
        public readonly string? Serial;
        /// <summary>
        /// The disk size in gigabytes (defaults to `8`).
        /// </summary>
        public readonly int? Size;
        /// <summary>
        /// The speed limits.
        /// </summary>
        public readonly Outputs.VirtualMachineDiskSpeed? Speed;
        /// <summary>
        /// Whether to use an SSD emulation option for this disk (
        /// defaults to `false`). Note that SSD emulation is not supported on VirtIO
        /// Block drives.
        /// </summary>
        public readonly bool? Ssd;

        [OutputConstructor]
        private VirtualMachineDisk(
            string? aio,

            bool? backup,

            string? cache,

            string? datastoreId,

            string? discard,

            string? fileFormat,

            string? fileId,

            string @interface,

            bool? iothread,

            string? pathInDatastore,

            bool? replicate,

            string? serial,

            int? size,

            Outputs.VirtualMachineDiskSpeed? speed,

            bool? ssd)
        {
            Aio = aio;
            Backup = backup;
            Cache = cache;
            DatastoreId = datastoreId;
            Discard = discard;
            FileFormat = fileFormat;
            FileId = fileId;
            Interface = @interface;
            Iothread = iothread;
            PathInDatastore = pathInDatastore;
            Replicate = replicate;
            Serial = serial;
            Size = size;
            Speed = speed;
            Ssd = ssd;
        }
    }
}

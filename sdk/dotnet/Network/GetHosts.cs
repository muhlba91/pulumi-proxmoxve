// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ProxmoxVE.Network
{
    public static class GetHosts
    {
        /// <summary>
        /// Retrieves all the host entries from a specific node.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var firstNodeHostEntries = ProxmoxVE.Network.GetHosts.Invoke(new()
        ///     {
        ///         NodeName = "first-node",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetHostsResult> InvokeAsync(GetHostsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetHostsResult>("proxmoxve:Network/getHosts:getHosts", args ?? new GetHostsArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves all the host entries from a specific node.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var firstNodeHostEntries = ProxmoxVE.Network.GetHosts.Invoke(new()
        ///     {
        ///         NodeName = "first-node",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetHostsResult> Invoke(GetHostsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetHostsResult>("proxmoxve:Network/getHosts:getHosts", args ?? new GetHostsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetHostsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A node name.
        /// </summary>
        [Input("nodeName", required: true)]
        public string NodeName { get; set; } = null!;

        public GetHostsArgs()
        {
        }
        public static new GetHostsArgs Empty => new GetHostsArgs();
    }

    public sealed class GetHostsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A node name.
        /// </summary>
        [Input("nodeName", required: true)]
        public Input<string> NodeName { get; set; } = null!;

        public GetHostsInvokeArgs()
        {
        }
        public static new GetHostsInvokeArgs Empty => new GetHostsInvokeArgs();
    }


    [OutputType]
    public sealed class GetHostsResult
    {
        /// <summary>
        /// The IP addresses.
        /// </summary>
        public readonly ImmutableArray<string> Addresses;
        /// <summary>
        /// The SHA1 digest.
        /// </summary>
        public readonly string Digest;
        /// <summary>
        /// The host entries (conversion of `addresses` and `hostnames` into
        /// objects).
        /// </summary>
        public readonly ImmutableArray<Outputs.GetHostsEntryResult> Entries;
        /// <summary>
        /// The hostnames associated with each of the IP addresses.
        /// </summary>
        public readonly ImmutableArray<ImmutableArray<string>> Hostnames;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string NodeName;

        [OutputConstructor]
        private GetHostsResult(
            ImmutableArray<string> addresses,

            string digest,

            ImmutableArray<Outputs.GetHostsEntryResult> entries,

            ImmutableArray<ImmutableArray<string>> hostnames,

            string id,

            string nodeName)
        {
            Addresses = addresses;
            Digest = digest;
            Entries = entries;
            Hostnames = hostnames;
            Id = id;
            NodeName = nodeName;
        }
    }
}

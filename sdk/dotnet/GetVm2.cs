// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ProxmoxVE
{
    public static class GetVm2
    {
        /// <summary>
        /// !&gt; **DO NOT USE**
        /// This is an experimental implementation of a Proxmox VM datasource using Plugin Framework.
        /// </summary>
        public static Task<GetVm2Result> InvokeAsync(GetVm2Args args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVm2Result>("proxmoxve:index/getVm2:getVm2", args ?? new GetVm2Args(), options.WithDefaults());

        /// <summary>
        /// !&gt; **DO NOT USE**
        /// This is an experimental implementation of a Proxmox VM datasource using Plugin Framework.
        /// </summary>
        public static Output<GetVm2Result> Invoke(GetVm2InvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVm2Result>("proxmoxve:index/getVm2:getVm2", args ?? new GetVm2InvokeArgs(), options.WithDefaults());

        /// <summary>
        /// !&gt; **DO NOT USE**
        /// This is an experimental implementation of a Proxmox VM datasource using Plugin Framework.
        /// </summary>
        public static Output<GetVm2Result> Invoke(GetVm2InvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVm2Result>("proxmoxve:index/getVm2:getVm2", args ?? new GetVm2InvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVm2Args : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The cloning configuration.
        /// </summary>
        [Input("clone")]
        public Inputs.GetVm2CloneArgs? Clone { get; set; }

        /// <summary>
        /// The CPU configuration.
        /// </summary>
        [Input("cpu")]
        public Inputs.GetVm2CpuArgs? Cpu { get; set; }

        /// <summary>
        /// The description of the VM.
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        /// <summary>
        /// The unique identifier of the VM in the Proxmox cluster.
        /// </summary>
        [Input("id", required: true)]
        public int Id { get; set; }

        /// <summary>
        /// The name of the VM.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The name of the node where the VM is provisioned.
        /// </summary>
        [Input("nodeName", required: true)]
        public string NodeName { get; set; } = null!;

        /// <summary>
        /// The RNG (Random Number Generator) configuration.
        /// </summary>
        [Input("rng")]
        public Inputs.GetVm2RngArgs? Rng { get; set; }

        [Input("tags")]
        private List<string>? _tags;

        /// <summary>
        /// The tags assigned to the VM.
        /// </summary>
        public List<string> Tags
        {
            get => _tags ?? (_tags = new List<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Whether the VM is a template.
        /// </summary>
        [Input("template")]
        public bool? Template { get; set; }

        [Input("timeouts")]
        public Inputs.GetVm2TimeoutsArgs? Timeouts { get; set; }

        /// <summary>
        /// The VGA configuration.
        /// </summary>
        [Input("vga")]
        public Inputs.GetVm2VgaArgs? Vga { get; set; }

        public GetVm2Args()
        {
        }
        public static new GetVm2Args Empty => new GetVm2Args();
    }

    public sealed class GetVm2InvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The cloning configuration.
        /// </summary>
        [Input("clone")]
        public Input<Inputs.GetVm2CloneInputArgs>? Clone { get; set; }

        /// <summary>
        /// The CPU configuration.
        /// </summary>
        [Input("cpu")]
        public Input<Inputs.GetVm2CpuInputArgs>? Cpu { get; set; }

        /// <summary>
        /// The description of the VM.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The unique identifier of the VM in the Proxmox cluster.
        /// </summary>
        [Input("id", required: true)]
        public Input<int> Id { get; set; } = null!;

        /// <summary>
        /// The name of the VM.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the node where the VM is provisioned.
        /// </summary>
        [Input("nodeName", required: true)]
        public Input<string> NodeName { get; set; } = null!;

        /// <summary>
        /// The RNG (Random Number Generator) configuration.
        /// </summary>
        [Input("rng")]
        public Input<Inputs.GetVm2RngInputArgs>? Rng { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The tags assigned to the VM.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Whether the VM is a template.
        /// </summary>
        [Input("template")]
        public Input<bool>? Template { get; set; }

        [Input("timeouts")]
        public Input<Inputs.GetVm2TimeoutsInputArgs>? Timeouts { get; set; }

        /// <summary>
        /// The VGA configuration.
        /// </summary>
        [Input("vga")]
        public Input<Inputs.GetVm2VgaInputArgs>? Vga { get; set; }

        public GetVm2InvokeArgs()
        {
        }
        public static new GetVm2InvokeArgs Empty => new GetVm2InvokeArgs();
    }


    [OutputType]
    public sealed class GetVm2Result
    {
        /// <summary>
        /// The cloning configuration.
        /// </summary>
        public readonly Outputs.GetVm2CloneResult? Clone;
        /// <summary>
        /// The CPU configuration.
        /// </summary>
        public readonly Outputs.GetVm2CpuResult Cpu;
        /// <summary>
        /// The description of the VM.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The unique identifier of the VM in the Proxmox cluster.
        /// </summary>
        public readonly int Id;
        /// <summary>
        /// The name of the VM.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The name of the node where the VM is provisioned.
        /// </summary>
        public readonly string NodeName;
        /// <summary>
        /// The RNG (Random Number Generator) configuration.
        /// </summary>
        public readonly Outputs.GetVm2RngResult Rng;
        /// <summary>
        /// The tags assigned to the VM.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// Whether the VM is a template.
        /// </summary>
        public readonly bool? Template;
        public readonly Outputs.GetVm2TimeoutsResult? Timeouts;
        /// <summary>
        /// The VGA configuration.
        /// </summary>
        public readonly Outputs.GetVm2VgaResult Vga;

        [OutputConstructor]
        private GetVm2Result(
            Outputs.GetVm2CloneResult? clone,

            Outputs.GetVm2CpuResult cpu,

            string? description,

            int id,

            string? name,

            string nodeName,

            Outputs.GetVm2RngResult rng,

            ImmutableArray<string> tags,

            bool? template,

            Outputs.GetVm2TimeoutsResult? timeouts,

            Outputs.GetVm2VgaResult vga)
        {
            Clone = clone;
            Cpu = cpu;
            Description = description;
            Id = id;
            Name = name;
            NodeName = nodeName;
            Rng = rng;
            Tags = tags;
            Template = template;
            Timeouts = timeouts;
            Vga = vga;
        }
    }
}

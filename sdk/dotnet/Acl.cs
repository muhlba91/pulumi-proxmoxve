// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ProxmoxVE
{
    /// <summary>
    /// Manages ACLs on the Proxmox cluster.
    /// 
    /// ACLs are used to control access to resources in the Proxmox cluster.
    /// Each ACL consists of a path, a user, group or token, a role, and a flag to allow propagation of permissions.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using ProxmoxVE = Pulumi.ProxmoxVE;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var operationsAutomation = new ProxmoxVE.Permission.User("operationsAutomation", new()
    ///     {
    ///         Comment = "Managed by Pulumi",
    ///         Password = "a-strong-password",
    ///         UserId = "operations-automation@pve",
    ///     });
    /// 
    ///     var operationsMonitoring = new ProxmoxVE.Permission.Role("operationsMonitoring", new()
    ///     {
    ///         RoleId = "operations-monitoring",
    ///         Privileges = new[]
    ///         {
    ///             "VM.Monitor",
    ///         },
    ///     });
    /// 
    ///     var operationsAutomationMonitoring = new ProxmoxVE.Acl("operationsAutomationMonitoring", new()
    ///     {
    ///         UserId = operationsAutomation.UserId,
    ///         RoleId = operationsMonitoring.RoleId,
    ///         Path = "/vms/1234",
    ///         Propagate = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// #!/usr/bin/env sh
    /// 
    /// ACL can be imported using its unique identifier, e.g.: {path}?{group|user@realm|user@realm!token}?{role}
    /// 
    /// ```sh
    /// $ pulumi import proxmoxve:index/acl:Acl operations_automation_monitoring /?monitor@pve?operations-monitoring
    /// ```
    /// </summary>
    [ProxmoxVEResourceType("proxmoxve:index/acl:Acl")]
    public partial class Acl : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The group the ACL should apply to (mutually exclusive with `token_id` and `user_id`)
        /// </summary>
        [Output("groupId")]
        public Output<string?> GroupId { get; private set; } = null!;

        /// <summary>
        /// Access control path
        /// </summary>
        [Output("path")]
        public Output<string> Path { get; private set; } = null!;

        /// <summary>
        /// Allow to propagate (inherit) permissions.
        /// </summary>
        [Output("propagate")]
        public Output<bool> Propagate { get; private set; } = null!;

        /// <summary>
        /// The role to apply
        /// </summary>
        [Output("roleId")]
        public Output<string> RoleId { get; private set; } = null!;

        /// <summary>
        /// The token the ACL should apply to (mutually exclusive with `group_id` and `user_id`)
        /// </summary>
        [Output("tokenId")]
        public Output<string?> TokenId { get; private set; } = null!;

        /// <summary>
        /// The user the ACL should apply to (mutually exclusive with `group_id` and `token_id`)
        /// </summary>
        [Output("userId")]
        public Output<string?> UserId { get; private set; } = null!;


        /// <summary>
        /// Create a Acl resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Acl(string name, AclArgs args, CustomResourceOptions? options = null)
            : base("proxmoxve:index/acl:Acl", name, args ?? new AclArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Acl(string name, Input<string> id, AclState? state = null, CustomResourceOptions? options = null)
            : base("proxmoxve:index/acl:Acl", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/muhlba91/pulumi-proxmoxve",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Acl resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Acl Get(string name, Input<string> id, AclState? state = null, CustomResourceOptions? options = null)
        {
            return new Acl(name, id, state, options);
        }
    }

    public sealed class AclArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The group the ACL should apply to (mutually exclusive with `token_id` and `user_id`)
        /// </summary>
        [Input("groupId")]
        public Input<string>? GroupId { get; set; }

        /// <summary>
        /// Access control path
        /// </summary>
        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        /// <summary>
        /// Allow to propagate (inherit) permissions.
        /// </summary>
        [Input("propagate")]
        public Input<bool>? Propagate { get; set; }

        /// <summary>
        /// The role to apply
        /// </summary>
        [Input("roleId", required: true)]
        public Input<string> RoleId { get; set; } = null!;

        /// <summary>
        /// The token the ACL should apply to (mutually exclusive with `group_id` and `user_id`)
        /// </summary>
        [Input("tokenId")]
        public Input<string>? TokenId { get; set; }

        /// <summary>
        /// The user the ACL should apply to (mutually exclusive with `group_id` and `token_id`)
        /// </summary>
        [Input("userId")]
        public Input<string>? UserId { get; set; }

        public AclArgs()
        {
        }
        public static new AclArgs Empty => new AclArgs();
    }

    public sealed class AclState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The group the ACL should apply to (mutually exclusive with `token_id` and `user_id`)
        /// </summary>
        [Input("groupId")]
        public Input<string>? GroupId { get; set; }

        /// <summary>
        /// Access control path
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// Allow to propagate (inherit) permissions.
        /// </summary>
        [Input("propagate")]
        public Input<bool>? Propagate { get; set; }

        /// <summary>
        /// The role to apply
        /// </summary>
        [Input("roleId")]
        public Input<string>? RoleId { get; set; }

        /// <summary>
        /// The token the ACL should apply to (mutually exclusive with `group_id` and `user_id`)
        /// </summary>
        [Input("tokenId")]
        public Input<string>? TokenId { get; set; }

        /// <summary>
        /// The user the ACL should apply to (mutually exclusive with `group_id` and `token_id`)
        /// </summary>
        [Input("userId")]
        public Input<string>? UserId { get; set; }

        public AclState()
        {
        }
        public static new AclState Empty => new AclState();
    }
}

// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ProxmoxVE
{
    public static class GetNode
    {
        /// <summary>
        /// Retrieves information about node.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var node = ProxmoxVE.GetNode.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNodeResult> InvokeAsync(GetNodeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNodeResult>("proxmoxve:index/getNode:getNode", args ?? new GetNodeArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves information about node.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var node = ProxmoxVE.GetNode.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNodeResult> Invoke(GetNodeInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNodeResult>("proxmoxve:index/getNode:getNode", args ?? new GetNodeInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves information about node.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var node = ProxmoxVE.GetNode.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNodeResult> Invoke(GetNodeInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNodeResult>("proxmoxve:index/getNode:getNode", args ?? new GetNodeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNodeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The node name.
        /// </summary>
        [Input("nodeName", required: true)]
        public string NodeName { get; set; } = null!;

        public GetNodeArgs()
        {
        }
        public static new GetNodeArgs Empty => new GetNodeArgs();
    }

    public sealed class GetNodeInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The node name.
        /// </summary>
        [Input("nodeName", required: true)]
        public Input<string> NodeName { get; set; } = null!;

        public GetNodeInvokeArgs()
        {
        }
        public static new GetNodeInvokeArgs Empty => new GetNodeInvokeArgs();
    }


    [OutputType]
    public sealed class GetNodeResult
    {
        /// <summary>
        /// The CPU count on the node.
        /// </summary>
        public readonly int CpuCount;
        /// <summary>
        /// The CPU model on the node.
        /// </summary>
        public readonly string CpuModel;
        /// <summary>
        /// The CPU utilization on the node.
        /// </summary>
        public readonly int CpuSockets;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The memory available on the node.
        /// </summary>
        public readonly int MemoryAvailable;
        /// <summary>
        /// The total memory on the node.
        /// </summary>
        public readonly int MemoryTotal;
        /// <summary>
        /// The memory used on the node.
        /// </summary>
        public readonly int MemoryUsed;
        public readonly string NodeName;
        /// <summary>
        /// The uptime in seconds on the node.
        /// </summary>
        public readonly int Uptime;

        [OutputConstructor]
        private GetNodeResult(
            int cpuCount,

            string cpuModel,

            int cpuSockets,

            string id,

            int memoryAvailable,

            int memoryTotal,

            int memoryUsed,

            string nodeName,

            int uptime)
        {
            CpuCount = cpuCount;
            CpuModel = cpuModel;
            CpuSockets = cpuSockets;
            Id = id;
            MemoryAvailable = memoryAvailable;
            MemoryTotal = memoryTotal;
            MemoryUsed = memoryUsed;
            NodeName = nodeName;
            Uptime = uptime;
        }
    }
}

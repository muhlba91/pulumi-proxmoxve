// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ProxmoxVE
{
    /// <summary>
    /// Manages an ACME plugin in a Proxmox VE cluster.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using ProxmoxVE = Pulumi.ProxmoxVE;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new ProxmoxVE.AcmeDnsPlugin("example", new()
    ///     {
    ///         Api = "aws",
    ///         Data = 
    ///         {
    ///             { "AWS_ACCESS_KEY_ID", "EXAMPLE" },
    ///             { "AWS_SECRET_ACCESS_KEY", "EXAMPLE" },
    ///         },
    ///         Plugin = "test",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// #!/usr/bin/env sh
    /// 
    /// ACME accounts can be imported using their name, e.g.:
    /// 
    /// ```sh
    /// $ pulumi import proxmoxve:index/acmeDnsPlugin:AcmeDnsPlugin example test
    /// ```
    /// </summary>
    [ProxmoxVEResourceType("proxmoxve:index/acmeDnsPlugin:AcmeDnsPlugin")]
    public partial class AcmeDnsPlugin : global::Pulumi.CustomResource
    {
        /// <summary>
        /// API plugin name.
        /// </summary>
        [Output("api")]
        public Output<string> Api { get; private set; } = null!;

        /// <summary>
        /// DNS plugin data.
        /// </summary>
        [Output("data")]
        public Output<ImmutableDictionary<string, string>?> Data { get; private set; } = null!;

        /// <summary>
        /// SHA1 digest of the current configuration. Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.
        /// </summary>
        [Output("digest")]
        public Output<string> Digest { get; private set; } = null!;

        /// <summary>
        /// Flag to disable the config.
        /// </summary>
        [Output("disable")]
        public Output<bool?> Disable { get; private set; } = null!;

        /// <summary>
        /// ACME Plugin ID name.
        /// </summary>
        [Output("plugin")]
        public Output<string> Plugin { get; private set; } = null!;

        /// <summary>
        /// Extra delay in seconds to wait before requesting validation. Allows to cope with a long TTL of DNS records (0 - 172800).
        /// </summary>
        [Output("validationDelay")]
        public Output<int> ValidationDelay { get; private set; } = null!;


        /// <summary>
        /// Create a AcmeDnsPlugin resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AcmeDnsPlugin(string name, AcmeDnsPluginArgs args, CustomResourceOptions? options = null)
            : base("proxmoxve:index/acmeDnsPlugin:AcmeDnsPlugin", name, args ?? new AcmeDnsPluginArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AcmeDnsPlugin(string name, Input<string> id, AcmeDnsPluginState? state = null, CustomResourceOptions? options = null)
            : base("proxmoxve:index/acmeDnsPlugin:AcmeDnsPlugin", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/muhlba91/pulumi-proxmoxve",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AcmeDnsPlugin resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AcmeDnsPlugin Get(string name, Input<string> id, AcmeDnsPluginState? state = null, CustomResourceOptions? options = null)
        {
            return new AcmeDnsPlugin(name, id, state, options);
        }
    }

    public sealed class AcmeDnsPluginArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// API plugin name.
        /// </summary>
        [Input("api", required: true)]
        public Input<string> Api { get; set; } = null!;

        [Input("data")]
        private InputMap<string>? _data;

        /// <summary>
        /// DNS plugin data.
        /// </summary>
        public InputMap<string> Data
        {
            get => _data ?? (_data = new InputMap<string>());
            set => _data = value;
        }

        /// <summary>
        /// SHA1 digest of the current configuration. Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.
        /// </summary>
        [Input("digest")]
        public Input<string>? Digest { get; set; }

        /// <summary>
        /// Flag to disable the config.
        /// </summary>
        [Input("disable")]
        public Input<bool>? Disable { get; set; }

        /// <summary>
        /// ACME Plugin ID name.
        /// </summary>
        [Input("plugin", required: true)]
        public Input<string> Plugin { get; set; } = null!;

        /// <summary>
        /// Extra delay in seconds to wait before requesting validation. Allows to cope with a long TTL of DNS records (0 - 172800).
        /// </summary>
        [Input("validationDelay")]
        public Input<int>? ValidationDelay { get; set; }

        public AcmeDnsPluginArgs()
        {
        }
        public static new AcmeDnsPluginArgs Empty => new AcmeDnsPluginArgs();
    }

    public sealed class AcmeDnsPluginState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// API plugin name.
        /// </summary>
        [Input("api")]
        public Input<string>? Api { get; set; }

        [Input("data")]
        private InputMap<string>? _data;

        /// <summary>
        /// DNS plugin data.
        /// </summary>
        public InputMap<string> Data
        {
            get => _data ?? (_data = new InputMap<string>());
            set => _data = value;
        }

        /// <summary>
        /// SHA1 digest of the current configuration. Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.
        /// </summary>
        [Input("digest")]
        public Input<string>? Digest { get; set; }

        /// <summary>
        /// Flag to disable the config.
        /// </summary>
        [Input("disable")]
        public Input<bool>? Disable { get; set; }

        /// <summary>
        /// ACME Plugin ID name.
        /// </summary>
        [Input("plugin")]
        public Input<string>? Plugin { get; set; }

        /// <summary>
        /// Extra delay in seconds to wait before requesting validation. Allows to cope with a long TTL of DNS records (0 - 172800).
        /// </summary>
        [Input("validationDelay")]
        public Input<int>? ValidationDelay { get; set; }

        public AcmeDnsPluginState()
        {
        }
        public static new AcmeDnsPluginState Empty => new AcmeDnsPluginState();
    }
}

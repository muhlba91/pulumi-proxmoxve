// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ProxmoxVE.Cluster
{
    /// <summary>
    /// Manages Proxmox VE Cluster Datacenter options.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using ProxmoxVE = Pulumi.ProxmoxVE;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var options = new ProxmoxVE.Cluster.Options("options", new()
    ///     {
    ///         BandwidthLimitDefault = 666666,
    ///         BandwidthLimitMigration = 555555,
    ///         EmailFrom = "ged@gont.earthsea",
    ///         Keyboard = "pl",
    ///         Language = "en",
    ///         MaxWorkers = 5,
    ///         MigrationCidr = "10.0.0.0/8",
    ///         MigrationType = "secure",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// #!/usr/bin/env sh
    /// 
    /// Cluster options are global and can be imported using e.g.:
    /// 
    /// ```sh
    /// $ pulumi import proxmoxve:Cluster/options:Options options cluster
    /// ```
    /// </summary>
    [ProxmoxVEResourceType("proxmoxve:Cluster/options:Options")]
    public partial class Options : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Clone I/O bandwidth limit in KiB/s.
        /// </summary>
        [Output("bandwidthLimitClone")]
        public Output<int?> BandwidthLimitClone { get; private set; } = null!;

        /// <summary>
        /// Default I/O bandwidth limit in KiB/s.
        /// </summary>
        [Output("bandwidthLimitDefault")]
        public Output<int?> BandwidthLimitDefault { get; private set; } = null!;

        /// <summary>
        /// Migration I/O bandwidth limit in KiB/s.
        /// </summary>
        [Output("bandwidthLimitMigration")]
        public Output<int?> BandwidthLimitMigration { get; private set; } = null!;

        /// <summary>
        /// Move I/O bandwidth limit in KiB/s.
        /// </summary>
        [Output("bandwidthLimitMove")]
        public Output<int?> BandwidthLimitMove { get; private set; } = null!;

        /// <summary>
        /// Restore I/O bandwidth limit in KiB/s.
        /// </summary>
        [Output("bandwidthLimitRestore")]
        public Output<int?> BandwidthLimitRestore { get; private set; } = null!;

        /// <summary>
        /// Select the default Console viewer. Must be `applet` | `vv`| `html5` | `xtermjs`. You can either use the builtin java applet (VNC; deprecated and maps to html5), an external virt-viewer compatible application (SPICE), an HTML5 based vnc viewer (noVNC), or an HTML5 based console client (xtermjs). If the selected viewer is not available (e.g. SPICE not activated for the VM), the fallback is noVNC.
        /// </summary>
        [Output("console")]
        public Output<string?> Console { get; private set; } = null!;

        /// <summary>
        /// Cluster resource scheduling setting for HA. Must be `static` | `basic` (default is `basic`).
        /// </summary>
        [Output("crsHa")]
        public Output<string> CrsHa { get; private set; } = null!;

        /// <summary>
        /// Cluster resource scheduling setting for HA rebalance on start.
        /// </summary>
        [Output("crsHaRebalanceOnStart")]
        public Output<bool?> CrsHaRebalanceOnStart { get; private set; } = null!;

        /// <summary>
        /// Datacenter description. Shown in the web-interface datacenter notes panel. This is saved as comment inside the configuration file.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// email address to send notification from (default is root@$hostname).
        /// </summary>
        [Output("emailFrom")]
        public Output<string?> EmailFrom { get; private set; } = null!;

        /// <summary>
        /// Cluster wide HA shutdown policy (). Must be `freeze` | `failover` | `migrate` | `conditional` (default is `conditional`).
        /// </summary>
        [Output("haShutdownPolicy")]
        public Output<string?> HaShutdownPolicy { get; private set; } = null!;

        /// <summary>
        /// Specify external http proxy which is used for downloads (example: `http://username:password@host:port/`).
        /// </summary>
        [Output("httpProxy")]
        public Output<string?> HttpProxy { get; private set; } = null!;

        /// <summary>
        /// Default keyboard layout for vnc server. Must be `de` | `de-ch` | `da` | `en-gb` | `en-us` | `es` | `fi` | `fr` | `fr-be` | `fr-ca` | `fr-ch` | `hu` | `is` | `it` | `ja` | `lt` | `mk` | `nl` | `no` | `pl` | `pt` | `pt-br` | `sv` | `sl` | `tr`.
        /// </summary>
        [Output("keyboard")]
        public Output<string?> Keyboard { get; private set; } = null!;

        /// <summary>
        /// Default GUI language. Must be `ca` | `da` | `de` | `en` | `es` | `eu` | `fa` | `fr` | `he` | `it` | `ja` | `nb` | `nn` | `pl` | `pt_BR` | `ru` | `sl` | `sv` | `tr` | `zh_CN` | `zh_TW`.
        /// </summary>
        [Output("language")]
        public Output<string?> Language { get; private set; } = null!;

        /// <summary>
        /// Prefix for autogenerated MAC addresses.
        /// </summary>
        [Output("macPrefix")]
        public Output<string> MacPrefix { get; private set; } = null!;

        /// <summary>
        /// Defines how many workers (per node) are maximal started on actions like 'stopall VMs' or task from the ha-manager.
        /// </summary>
        [Output("maxWorkers")]
        public Output<int?> MaxWorkers { get; private set; } = null!;

        /// <summary>
        /// Cluster wide migration network CIDR.
        /// </summary>
        [Output("migrationCidr")]
        public Output<string?> MigrationCidr { get; private set; } = null!;

        /// <summary>
        /// Cluster wide migration type. Must be `secure` | `unsecure` (default is `secure`).
        /// </summary>
        [Output("migrationType")]
        public Output<string?> MigrationType { get; private set; } = null!;


        /// <summary>
        /// Create a Options resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Options(string name, OptionsArgs? args = null, CustomResourceOptions? options = null)
            : base("proxmoxve:Cluster/options:Options", name, args ?? new OptionsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Options(string name, Input<string> id, OptionsState? state = null, CustomResourceOptions? options = null)
            : base("proxmoxve:Cluster/options:Options", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/muhlba91/pulumi-proxmoxve",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Options resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Options Get(string name, Input<string> id, OptionsState? state = null, CustomResourceOptions? options = null)
        {
            return new Options(name, id, state, options);
        }
    }

    public sealed class OptionsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Clone I/O bandwidth limit in KiB/s.
        /// </summary>
        [Input("bandwidthLimitClone")]
        public Input<int>? BandwidthLimitClone { get; set; }

        /// <summary>
        /// Default I/O bandwidth limit in KiB/s.
        /// </summary>
        [Input("bandwidthLimitDefault")]
        public Input<int>? BandwidthLimitDefault { get; set; }

        /// <summary>
        /// Migration I/O bandwidth limit in KiB/s.
        /// </summary>
        [Input("bandwidthLimitMigration")]
        public Input<int>? BandwidthLimitMigration { get; set; }

        /// <summary>
        /// Move I/O bandwidth limit in KiB/s.
        /// </summary>
        [Input("bandwidthLimitMove")]
        public Input<int>? BandwidthLimitMove { get; set; }

        /// <summary>
        /// Restore I/O bandwidth limit in KiB/s.
        /// </summary>
        [Input("bandwidthLimitRestore")]
        public Input<int>? BandwidthLimitRestore { get; set; }

        /// <summary>
        /// Select the default Console viewer. Must be `applet` | `vv`| `html5` | `xtermjs`. You can either use the builtin java applet (VNC; deprecated and maps to html5), an external virt-viewer compatible application (SPICE), an HTML5 based vnc viewer (noVNC), or an HTML5 based console client (xtermjs). If the selected viewer is not available (e.g. SPICE not activated for the VM), the fallback is noVNC.
        /// </summary>
        [Input("console")]
        public Input<string>? Console { get; set; }

        /// <summary>
        /// Cluster resource scheduling setting for HA. Must be `static` | `basic` (default is `basic`).
        /// </summary>
        [Input("crsHa")]
        public Input<string>? CrsHa { get; set; }

        /// <summary>
        /// Cluster resource scheduling setting for HA rebalance on start.
        /// </summary>
        [Input("crsHaRebalanceOnStart")]
        public Input<bool>? CrsHaRebalanceOnStart { get; set; }

        /// <summary>
        /// Datacenter description. Shown in the web-interface datacenter notes panel. This is saved as comment inside the configuration file.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// email address to send notification from (default is root@$hostname).
        /// </summary>
        [Input("emailFrom")]
        public Input<string>? EmailFrom { get; set; }

        /// <summary>
        /// Cluster wide HA shutdown policy (). Must be `freeze` | `failover` | `migrate` | `conditional` (default is `conditional`).
        /// </summary>
        [Input("haShutdownPolicy")]
        public Input<string>? HaShutdownPolicy { get; set; }

        /// <summary>
        /// Specify external http proxy which is used for downloads (example: `http://username:password@host:port/`).
        /// </summary>
        [Input("httpProxy")]
        public Input<string>? HttpProxy { get; set; }

        /// <summary>
        /// Default keyboard layout for vnc server. Must be `de` | `de-ch` | `da` | `en-gb` | `en-us` | `es` | `fi` | `fr` | `fr-be` | `fr-ca` | `fr-ch` | `hu` | `is` | `it` | `ja` | `lt` | `mk` | `nl` | `no` | `pl` | `pt` | `pt-br` | `sv` | `sl` | `tr`.
        /// </summary>
        [Input("keyboard")]
        public Input<string>? Keyboard { get; set; }

        /// <summary>
        /// Default GUI language. Must be `ca` | `da` | `de` | `en` | `es` | `eu` | `fa` | `fr` | `he` | `it` | `ja` | `nb` | `nn` | `pl` | `pt_BR` | `ru` | `sl` | `sv` | `tr` | `zh_CN` | `zh_TW`.
        /// </summary>
        [Input("language")]
        public Input<string>? Language { get; set; }

        /// <summary>
        /// Prefix for autogenerated MAC addresses.
        /// </summary>
        [Input("macPrefix")]
        public Input<string>? MacPrefix { get; set; }

        /// <summary>
        /// Defines how many workers (per node) are maximal started on actions like 'stopall VMs' or task from the ha-manager.
        /// </summary>
        [Input("maxWorkers")]
        public Input<int>? MaxWorkers { get; set; }

        /// <summary>
        /// Cluster wide migration network CIDR.
        /// </summary>
        [Input("migrationCidr")]
        public Input<string>? MigrationCidr { get; set; }

        /// <summary>
        /// Cluster wide migration type. Must be `secure` | `unsecure` (default is `secure`).
        /// </summary>
        [Input("migrationType")]
        public Input<string>? MigrationType { get; set; }

        public OptionsArgs()
        {
        }
        public static new OptionsArgs Empty => new OptionsArgs();
    }

    public sealed class OptionsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Clone I/O bandwidth limit in KiB/s.
        /// </summary>
        [Input("bandwidthLimitClone")]
        public Input<int>? BandwidthLimitClone { get; set; }

        /// <summary>
        /// Default I/O bandwidth limit in KiB/s.
        /// </summary>
        [Input("bandwidthLimitDefault")]
        public Input<int>? BandwidthLimitDefault { get; set; }

        /// <summary>
        /// Migration I/O bandwidth limit in KiB/s.
        /// </summary>
        [Input("bandwidthLimitMigration")]
        public Input<int>? BandwidthLimitMigration { get; set; }

        /// <summary>
        /// Move I/O bandwidth limit in KiB/s.
        /// </summary>
        [Input("bandwidthLimitMove")]
        public Input<int>? BandwidthLimitMove { get; set; }

        /// <summary>
        /// Restore I/O bandwidth limit in KiB/s.
        /// </summary>
        [Input("bandwidthLimitRestore")]
        public Input<int>? BandwidthLimitRestore { get; set; }

        /// <summary>
        /// Select the default Console viewer. Must be `applet` | `vv`| `html5` | `xtermjs`. You can either use the builtin java applet (VNC; deprecated and maps to html5), an external virt-viewer compatible application (SPICE), an HTML5 based vnc viewer (noVNC), or an HTML5 based console client (xtermjs). If the selected viewer is not available (e.g. SPICE not activated for the VM), the fallback is noVNC.
        /// </summary>
        [Input("console")]
        public Input<string>? Console { get; set; }

        /// <summary>
        /// Cluster resource scheduling setting for HA. Must be `static` | `basic` (default is `basic`).
        /// </summary>
        [Input("crsHa")]
        public Input<string>? CrsHa { get; set; }

        /// <summary>
        /// Cluster resource scheduling setting for HA rebalance on start.
        /// </summary>
        [Input("crsHaRebalanceOnStart")]
        public Input<bool>? CrsHaRebalanceOnStart { get; set; }

        /// <summary>
        /// Datacenter description. Shown in the web-interface datacenter notes panel. This is saved as comment inside the configuration file.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// email address to send notification from (default is root@$hostname).
        /// </summary>
        [Input("emailFrom")]
        public Input<string>? EmailFrom { get; set; }

        /// <summary>
        /// Cluster wide HA shutdown policy (). Must be `freeze` | `failover` | `migrate` | `conditional` (default is `conditional`).
        /// </summary>
        [Input("haShutdownPolicy")]
        public Input<string>? HaShutdownPolicy { get; set; }

        /// <summary>
        /// Specify external http proxy which is used for downloads (example: `http://username:password@host:port/`).
        /// </summary>
        [Input("httpProxy")]
        public Input<string>? HttpProxy { get; set; }

        /// <summary>
        /// Default keyboard layout for vnc server. Must be `de` | `de-ch` | `da` | `en-gb` | `en-us` | `es` | `fi` | `fr` | `fr-be` | `fr-ca` | `fr-ch` | `hu` | `is` | `it` | `ja` | `lt` | `mk` | `nl` | `no` | `pl` | `pt` | `pt-br` | `sv` | `sl` | `tr`.
        /// </summary>
        [Input("keyboard")]
        public Input<string>? Keyboard { get; set; }

        /// <summary>
        /// Default GUI language. Must be `ca` | `da` | `de` | `en` | `es` | `eu` | `fa` | `fr` | `he` | `it` | `ja` | `nb` | `nn` | `pl` | `pt_BR` | `ru` | `sl` | `sv` | `tr` | `zh_CN` | `zh_TW`.
        /// </summary>
        [Input("language")]
        public Input<string>? Language { get; set; }

        /// <summary>
        /// Prefix for autogenerated MAC addresses.
        /// </summary>
        [Input("macPrefix")]
        public Input<string>? MacPrefix { get; set; }

        /// <summary>
        /// Defines how many workers (per node) are maximal started on actions like 'stopall VMs' or task from the ha-manager.
        /// </summary>
        [Input("maxWorkers")]
        public Input<int>? MaxWorkers { get; set; }

        /// <summary>
        /// Cluster wide migration network CIDR.
        /// </summary>
        [Input("migrationCidr")]
        public Input<string>? MigrationCidr { get; set; }

        /// <summary>
        /// Cluster wide migration type. Must be `secure` | `unsecure` (default is `secure`).
        /// </summary>
        [Input("migrationType")]
        public Input<string>? MigrationType { get; set; }

        public OptionsState()
        {
        }
        public static new OptionsState Empty => new OptionsState();
    }
}

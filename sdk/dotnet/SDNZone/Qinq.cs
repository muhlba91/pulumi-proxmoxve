// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ProxmoxVE.SDNZone
{
    /// <summary>
    /// QinQ Zone in Proxmox SDN. QinQ also known as VLAN stacking, that uses multiple layers of VLAN tags for isolation. The QinQ zone defines the outer VLAN tag (the Service VLAN) whereas the inner VLAN tag is defined by the VNet. Your physical network switches must support stacked VLANs for this configuration. Due to the double stacking of tags, you need 4 more bytes for QinQ VLANs. For example, you must reduce the MTU to 1496 if you physical interface MTU is 1500.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using ProxmoxVE = Pulumi.ProxmoxVE;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new ProxmoxVE.SDNZone.Qinq("example", new()
    ///     {
    ///         Bridge = "vmbr0",
    ///         Dns = "1.1.1.1",
    ///         DnsZone = "example.com",
    ///         ZoneId = "qinq1",
    ///         Ipam = "pve",
    ///         Mtu = 1496,
    ///         Nodes = new[]
    ///         {
    ///             "pve",
    ///         },
    ///         ReverseDns = "1.1.1.1",
    ///         ServiceVlan = 100,
    ///         ServiceVlanProtocol = "802.1ad",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// #!/usr/bin/env sh
    /// 
    /// QinQ SDN zone can be imported using its unique identifier (zone ID)
    /// 
    /// ```sh
    /// $ pulumi import proxmoxve:SDNZone/qinq:Qinq example qinq1
    /// ```
    /// </summary>
    [ProxmoxVEResourceType("proxmoxve:SDNZone/qinq:Qinq")]
    public partial class Qinq : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A local, VLAN-aware bridge that is already configured on each local node
        /// </summary>
        [Output("bridge")]
        public Output<string> Bridge { get; private set; } = null!;

        /// <summary>
        /// DNS API server address.
        /// </summary>
        [Output("dns")]
        public Output<string?> Dns { get; private set; } = null!;

        /// <summary>
        /// DNS domain name. Used to register hostnames, such as `&lt;hostname&gt;.&lt;domain&gt;`. The DNS zone must already exist on the DNS server.
        /// </summary>
        [Output("dnsZone")]
        public Output<string?> DnsZone { get; private set; } = null!;

        /// <summary>
        /// IP Address Management system.
        /// </summary>
        [Output("ipam")]
        public Output<string?> Ipam { get; private set; } = null!;

        /// <summary>
        /// MTU value for the zone.
        /// </summary>
        [Output("mtu")]
        public Output<int?> Mtu { get; private set; } = null!;

        /// <summary>
        /// The Proxmox nodes which the zone and associated VNets should be deployed on
        /// </summary>
        [Output("nodes")]
        public Output<ImmutableArray<string>> Nodes { get; private set; } = null!;

        /// <summary>
        /// Indicates if the zone has pending configuration changes that need to be applied.
        /// </summary>
        [Output("pending")]
        public Output<bool> Pending { get; private set; } = null!;

        /// <summary>
        /// Reverse DNS API server address.
        /// </summary>
        [Output("reverseDns")]
        public Output<string?> ReverseDns { get; private set; } = null!;

        /// <summary>
        /// Service VLAN tag for QinQ. The tag must be between `1` and `4094`.
        /// </summary>
        [Output("serviceVlan")]
        public Output<int> ServiceVlan { get; private set; } = null!;

        /// <summary>
        /// Service VLAN protocol for QinQ. The protocol must be `802.1ad` or `802.1q`.
        /// </summary>
        [Output("serviceVlanProtocol")]
        public Output<string?> ServiceVlanProtocol { get; private set; } = null!;

        /// <summary>
        /// Indicates the current state of the zone.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The unique identifier of the SDN zone.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a Qinq resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Qinq(string name, QinqArgs args, CustomResourceOptions? options = null)
            : base("proxmoxve:SDNZone/qinq:Qinq", name, args ?? new QinqArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Qinq(string name, Input<string> id, QinqState? state = null, CustomResourceOptions? options = null)
            : base("proxmoxve:SDNZone/qinq:Qinq", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/muhlba91/pulumi-proxmoxve",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Qinq resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Qinq Get(string name, Input<string> id, QinqState? state = null, CustomResourceOptions? options = null)
        {
            return new Qinq(name, id, state, options);
        }
    }

    public sealed class QinqArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A local, VLAN-aware bridge that is already configured on each local node
        /// </summary>
        [Input("bridge", required: true)]
        public Input<string> Bridge { get; set; } = null!;

        /// <summary>
        /// DNS API server address.
        /// </summary>
        [Input("dns")]
        public Input<string>? Dns { get; set; }

        /// <summary>
        /// DNS domain name. Used to register hostnames, such as `&lt;hostname&gt;.&lt;domain&gt;`. The DNS zone must already exist on the DNS server.
        /// </summary>
        [Input("dnsZone")]
        public Input<string>? DnsZone { get; set; }

        /// <summary>
        /// IP Address Management system.
        /// </summary>
        [Input("ipam")]
        public Input<string>? Ipam { get; set; }

        /// <summary>
        /// MTU value for the zone.
        /// </summary>
        [Input("mtu")]
        public Input<int>? Mtu { get; set; }

        [Input("nodes", required: true)]
        private InputList<string>? _nodes;

        /// <summary>
        /// The Proxmox nodes which the zone and associated VNets should be deployed on
        /// </summary>
        public InputList<string> Nodes
        {
            get => _nodes ?? (_nodes = new InputList<string>());
            set => _nodes = value;
        }

        /// <summary>
        /// Reverse DNS API server address.
        /// </summary>
        [Input("reverseDns")]
        public Input<string>? ReverseDns { get; set; }

        /// <summary>
        /// Service VLAN tag for QinQ. The tag must be between `1` and `4094`.
        /// </summary>
        [Input("serviceVlan", required: true)]
        public Input<int> ServiceVlan { get; set; } = null!;

        /// <summary>
        /// Service VLAN protocol for QinQ. The protocol must be `802.1ad` or `802.1q`.
        /// </summary>
        [Input("serviceVlanProtocol")]
        public Input<string>? ServiceVlanProtocol { get; set; }

        /// <summary>
        /// The unique identifier of the SDN zone.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public QinqArgs()
        {
        }
        public static new QinqArgs Empty => new QinqArgs();
    }

    public sealed class QinqState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A local, VLAN-aware bridge that is already configured on each local node
        /// </summary>
        [Input("bridge")]
        public Input<string>? Bridge { get; set; }

        /// <summary>
        /// DNS API server address.
        /// </summary>
        [Input("dns")]
        public Input<string>? Dns { get; set; }

        /// <summary>
        /// DNS domain name. Used to register hostnames, such as `&lt;hostname&gt;.&lt;domain&gt;`. The DNS zone must already exist on the DNS server.
        /// </summary>
        [Input("dnsZone")]
        public Input<string>? DnsZone { get; set; }

        /// <summary>
        /// IP Address Management system.
        /// </summary>
        [Input("ipam")]
        public Input<string>? Ipam { get; set; }

        /// <summary>
        /// MTU value for the zone.
        /// </summary>
        [Input("mtu")]
        public Input<int>? Mtu { get; set; }

        [Input("nodes")]
        private InputList<string>? _nodes;

        /// <summary>
        /// The Proxmox nodes which the zone and associated VNets should be deployed on
        /// </summary>
        public InputList<string> Nodes
        {
            get => _nodes ?? (_nodes = new InputList<string>());
            set => _nodes = value;
        }

        /// <summary>
        /// Indicates if the zone has pending configuration changes that need to be applied.
        /// </summary>
        [Input("pending")]
        public Input<bool>? Pending { get; set; }

        /// <summary>
        /// Reverse DNS API server address.
        /// </summary>
        [Input("reverseDns")]
        public Input<string>? ReverseDns { get; set; }

        /// <summary>
        /// Service VLAN tag for QinQ. The tag must be between `1` and `4094`.
        /// </summary>
        [Input("serviceVlan")]
        public Input<int>? ServiceVlan { get; set; }

        /// <summary>
        /// Service VLAN protocol for QinQ. The protocol must be `802.1ad` or `802.1q`.
        /// </summary>
        [Input("serviceVlanProtocol")]
        public Input<string>? ServiceVlanProtocol { get; set; }

        /// <summary>
        /// Indicates the current state of the zone.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The unique identifier of the SDN zone.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public QinqState()
        {
        }
        public static new QinqState Empty => new QinqState();
    }
}

// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ProxmoxVE.SDNZone
{
    /// <summary>
    /// EVPN Zone in Proxmox SDN. The EVPN zone creates a routable Layer 3 network, capable of spanning across multiple clusters.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using ProxmoxVE = Pulumi.ProxmoxVE;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new ProxmoxVE.SDNZone.Evpn("example", new()
    ///     {
    ///         AdvertiseSubnets = true,
    ///         Controller = "evpn-controller1",
    ///         DisableArpNdSuppression = false,
    ///         Dns = "1.1.1.1",
    ///         DnsZone = "example.com",
    ///         ExitNodes = new[]
    ///         {
    ///             "pve-exit1",
    ///             "pve-exit2",
    ///         },
    ///         ExitNodesLocalRouting = true,
    ///         ZoneId = "evpn1",
    ///         Ipam = "pve",
    ///         Mtu = 1450,
    ///         Nodes = new[]
    ///         {
    ///             "pve",
    ///         },
    ///         PrimaryExitNode = "pve-exit1",
    ///         ReverseDns = "1.1.1.1",
    ///         RtImport = "65000:65000",
    ///         VrfVxlan = 4000,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// #!/usr/bin/env sh
    /// 
    /// EVPN SDN zone can be imported using its unique identifier (zone ID)
    /// 
    /// ```sh
    /// $ pulumi import proxmoxve:SDNZone/evpn:Evpn example evpn1
    /// ```
    /// </summary>
    [ProxmoxVEResourceType("proxmoxve:SDNZone/evpn:Evpn")]
    public partial class Evpn : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enable subnet advertisement for EVPN.
        /// </summary>
        [Output("advertiseSubnets")]
        public Output<bool?> AdvertiseSubnets { get; private set; } = null!;

        /// <summary>
        /// EVPN controller address.
        /// </summary>
        [Output("controller")]
        public Output<string> Controller { get; private set; } = null!;

        /// <summary>
        /// Disable ARP/ND suppression for EVPN.
        /// </summary>
        [Output("disableArpNdSuppression")]
        public Output<bool?> DisableArpNdSuppression { get; private set; } = null!;

        /// <summary>
        /// DNS API server address.
        /// </summary>
        [Output("dns")]
        public Output<string?> Dns { get; private set; } = null!;

        /// <summary>
        /// DNS domain name. Used to register hostnames, such as `&lt;hostname&gt;.&lt;domain&gt;`. The DNS zone must already exist on the DNS server.
        /// </summary>
        [Output("dnsZone")]
        public Output<string?> DnsZone { get; private set; } = null!;

        /// <summary>
        /// List of exit nodes for EVPN.
        /// </summary>
        [Output("exitNodes")]
        public Output<ImmutableArray<string>> ExitNodes { get; private set; } = null!;

        /// <summary>
        /// Enable local routing for EVPN exit nodes.
        /// </summary>
        [Output("exitNodesLocalRouting")]
        public Output<bool?> ExitNodesLocalRouting { get; private set; } = null!;

        /// <summary>
        /// IP Address Management system.
        /// </summary>
        [Output("ipam")]
        public Output<string?> Ipam { get; private set; } = null!;

        /// <summary>
        /// MTU value for the zone.
        /// </summary>
        [Output("mtu")]
        public Output<int?> Mtu { get; private set; } = null!;

        /// <summary>
        /// The Proxmox nodes which the zone and associated VNets should be deployed on
        /// </summary>
        [Output("nodes")]
        public Output<ImmutableArray<string>> Nodes { get; private set; } = null!;

        /// <summary>
        /// Primary exit node for EVPN.
        /// </summary>
        [Output("primaryExitNode")]
        public Output<string?> PrimaryExitNode { get; private set; } = null!;

        /// <summary>
        /// Reverse DNS API server address.
        /// </summary>
        [Output("reverseDns")]
        public Output<string?> ReverseDns { get; private set; } = null!;

        /// <summary>
        /// Route target import for EVPN.
        /// </summary>
        [Output("rtImport")]
        public Output<string?> RtImport { get; private set; } = null!;

        /// <summary>
        /// VRF VXLAN-ID used for dedicated routing interconnect between VNets. It must be different than the VXLAN-ID of the VNets.
        /// </summary>
        [Output("vrfVxlan")]
        public Output<int> VrfVxlan { get; private set; } = null!;

        /// <summary>
        /// The unique identifier of the SDN zone.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a Evpn resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Evpn(string name, EvpnArgs args, CustomResourceOptions? options = null)
            : base("proxmoxve:SDNZone/evpn:Evpn", name, args ?? new EvpnArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Evpn(string name, Input<string> id, EvpnState? state = null, CustomResourceOptions? options = null)
            : base("proxmoxve:SDNZone/evpn:Evpn", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/muhlba91/pulumi-proxmoxve",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Evpn resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Evpn Get(string name, Input<string> id, EvpnState? state = null, CustomResourceOptions? options = null)
        {
            return new Evpn(name, id, state, options);
        }
    }

    public sealed class EvpnArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable subnet advertisement for EVPN.
        /// </summary>
        [Input("advertiseSubnets")]
        public Input<bool>? AdvertiseSubnets { get; set; }

        /// <summary>
        /// EVPN controller address.
        /// </summary>
        [Input("controller", required: true)]
        public Input<string> Controller { get; set; } = null!;

        /// <summary>
        /// Disable ARP/ND suppression for EVPN.
        /// </summary>
        [Input("disableArpNdSuppression")]
        public Input<bool>? DisableArpNdSuppression { get; set; }

        /// <summary>
        /// DNS API server address.
        /// </summary>
        [Input("dns")]
        public Input<string>? Dns { get; set; }

        /// <summary>
        /// DNS domain name. Used to register hostnames, such as `&lt;hostname&gt;.&lt;domain&gt;`. The DNS zone must already exist on the DNS server.
        /// </summary>
        [Input("dnsZone")]
        public Input<string>? DnsZone { get; set; }

        [Input("exitNodes")]
        private InputList<string>? _exitNodes;

        /// <summary>
        /// List of exit nodes for EVPN.
        /// </summary>
        public InputList<string> ExitNodes
        {
            get => _exitNodes ?? (_exitNodes = new InputList<string>());
            set => _exitNodes = value;
        }

        /// <summary>
        /// Enable local routing for EVPN exit nodes.
        /// </summary>
        [Input("exitNodesLocalRouting")]
        public Input<bool>? ExitNodesLocalRouting { get; set; }

        /// <summary>
        /// IP Address Management system.
        /// </summary>
        [Input("ipam")]
        public Input<string>? Ipam { get; set; }

        /// <summary>
        /// MTU value for the zone.
        /// </summary>
        [Input("mtu")]
        public Input<int>? Mtu { get; set; }

        [Input("nodes", required: true)]
        private InputList<string>? _nodes;

        /// <summary>
        /// The Proxmox nodes which the zone and associated VNets should be deployed on
        /// </summary>
        public InputList<string> Nodes
        {
            get => _nodes ?? (_nodes = new InputList<string>());
            set => _nodes = value;
        }

        /// <summary>
        /// Primary exit node for EVPN.
        /// </summary>
        [Input("primaryExitNode")]
        public Input<string>? PrimaryExitNode { get; set; }

        /// <summary>
        /// Reverse DNS API server address.
        /// </summary>
        [Input("reverseDns")]
        public Input<string>? ReverseDns { get; set; }

        /// <summary>
        /// Route target import for EVPN.
        /// </summary>
        [Input("rtImport")]
        public Input<string>? RtImport { get; set; }

        /// <summary>
        /// VRF VXLAN-ID used for dedicated routing interconnect between VNets. It must be different than the VXLAN-ID of the VNets.
        /// </summary>
        [Input("vrfVxlan", required: true)]
        public Input<int> VrfVxlan { get; set; } = null!;

        /// <summary>
        /// The unique identifier of the SDN zone.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public EvpnArgs()
        {
        }
        public static new EvpnArgs Empty => new EvpnArgs();
    }

    public sealed class EvpnState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable subnet advertisement for EVPN.
        /// </summary>
        [Input("advertiseSubnets")]
        public Input<bool>? AdvertiseSubnets { get; set; }

        /// <summary>
        /// EVPN controller address.
        /// </summary>
        [Input("controller")]
        public Input<string>? Controller { get; set; }

        /// <summary>
        /// Disable ARP/ND suppression for EVPN.
        /// </summary>
        [Input("disableArpNdSuppression")]
        public Input<bool>? DisableArpNdSuppression { get; set; }

        /// <summary>
        /// DNS API server address.
        /// </summary>
        [Input("dns")]
        public Input<string>? Dns { get; set; }

        /// <summary>
        /// DNS domain name. Used to register hostnames, such as `&lt;hostname&gt;.&lt;domain&gt;`. The DNS zone must already exist on the DNS server.
        /// </summary>
        [Input("dnsZone")]
        public Input<string>? DnsZone { get; set; }

        [Input("exitNodes")]
        private InputList<string>? _exitNodes;

        /// <summary>
        /// List of exit nodes for EVPN.
        /// </summary>
        public InputList<string> ExitNodes
        {
            get => _exitNodes ?? (_exitNodes = new InputList<string>());
            set => _exitNodes = value;
        }

        /// <summary>
        /// Enable local routing for EVPN exit nodes.
        /// </summary>
        [Input("exitNodesLocalRouting")]
        public Input<bool>? ExitNodesLocalRouting { get; set; }

        /// <summary>
        /// IP Address Management system.
        /// </summary>
        [Input("ipam")]
        public Input<string>? Ipam { get; set; }

        /// <summary>
        /// MTU value for the zone.
        /// </summary>
        [Input("mtu")]
        public Input<int>? Mtu { get; set; }

        [Input("nodes")]
        private InputList<string>? _nodes;

        /// <summary>
        /// The Proxmox nodes which the zone and associated VNets should be deployed on
        /// </summary>
        public InputList<string> Nodes
        {
            get => _nodes ?? (_nodes = new InputList<string>());
            set => _nodes = value;
        }

        /// <summary>
        /// Primary exit node for EVPN.
        /// </summary>
        [Input("primaryExitNode")]
        public Input<string>? PrimaryExitNode { get; set; }

        /// <summary>
        /// Reverse DNS API server address.
        /// </summary>
        [Input("reverseDns")]
        public Input<string>? ReverseDns { get; set; }

        /// <summary>
        /// Route target import for EVPN.
        /// </summary>
        [Input("rtImport")]
        public Input<string>? RtImport { get; set; }

        /// <summary>
        /// VRF VXLAN-ID used for dedicated routing interconnect between VNets. It must be different than the VXLAN-ID of the VNets.
        /// </summary>
        [Input("vrfVxlan")]
        public Input<int>? VrfVxlan { get; set; }

        /// <summary>
        /// The unique identifier of the SDN zone.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public EvpnState()
        {
        }
        public static new EvpnState Empty => new EvpnState();
    }
}

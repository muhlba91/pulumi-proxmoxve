// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ProxmoxVE.SDNZone
{
    public static class GetEvpn
    {
        /// <summary>
        /// Retrieves information about an EVPN Zone in Proxmox SDN. The EVPN zone creates a routable Layer 3 network, capable of spanning across multiple clusters.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = ProxmoxVE.SDNZone.GetEvpn.Invoke(new()
        ///     {
        ///         Id = "evpn1",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["dataProxmoxVirtualEnvironmentSdnZoneEvpn"] = 
        ///         {
        ///             { "id", example.Apply(getEvpnResult =&gt; getEvpnResult.Id) },
        ///             { "nodes", example.Apply(getEvpnResult =&gt; getEvpnResult.Nodes) },
        ///             { "controller", example.Apply(getEvpnResult =&gt; getEvpnResult.Controller) },
        ///             { "vrf_vxlan", example.Apply(getEvpnResult =&gt; getEvpnResult.VrfVxlan) },
        ///             { "advertise_subnets", example.Apply(getEvpnResult =&gt; getEvpnResult.AdvertiseSubnets) },
        ///             { "disable_arp_nd_suppression", example.Apply(getEvpnResult =&gt; getEvpnResult.DisableArpNdSuppression) },
        ///             { "exit_nodes", example.Apply(getEvpnResult =&gt; getEvpnResult.ExitNodes) },
        ///             { "exit_nodes_local_routing", example.Apply(getEvpnResult =&gt; getEvpnResult.ExitNodesLocalRouting) },
        ///             { "primary_exit_node", example.Apply(getEvpnResult =&gt; getEvpnResult.PrimaryExitNode) },
        ///             { "rt_import", example.Apply(getEvpnResult =&gt; getEvpnResult.RtImport) },
        ///             { "mtu", example.Apply(getEvpnResult =&gt; getEvpnResult.Mtu) },
        ///             { "dns", example.Apply(getEvpnResult =&gt; getEvpnResult.Dns) },
        ///             { "dns_zone", example.Apply(getEvpnResult =&gt; getEvpnResult.DnsZone) },
        ///             { "ipam", example.Apply(getEvpnResult =&gt; getEvpnResult.Ipam) },
        ///             { "reverse_dns", example.Apply(getEvpnResult =&gt; getEvpnResult.ReverseDns) },
        ///         },
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetEvpnResult> InvokeAsync(GetEvpnArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEvpnResult>("proxmoxve:SDNZone/getEvpn:getEvpn", args ?? new GetEvpnArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves information about an EVPN Zone in Proxmox SDN. The EVPN zone creates a routable Layer 3 network, capable of spanning across multiple clusters.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = ProxmoxVE.SDNZone.GetEvpn.Invoke(new()
        ///     {
        ///         Id = "evpn1",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["dataProxmoxVirtualEnvironmentSdnZoneEvpn"] = 
        ///         {
        ///             { "id", example.Apply(getEvpnResult =&gt; getEvpnResult.Id) },
        ///             { "nodes", example.Apply(getEvpnResult =&gt; getEvpnResult.Nodes) },
        ///             { "controller", example.Apply(getEvpnResult =&gt; getEvpnResult.Controller) },
        ///             { "vrf_vxlan", example.Apply(getEvpnResult =&gt; getEvpnResult.VrfVxlan) },
        ///             { "advertise_subnets", example.Apply(getEvpnResult =&gt; getEvpnResult.AdvertiseSubnets) },
        ///             { "disable_arp_nd_suppression", example.Apply(getEvpnResult =&gt; getEvpnResult.DisableArpNdSuppression) },
        ///             { "exit_nodes", example.Apply(getEvpnResult =&gt; getEvpnResult.ExitNodes) },
        ///             { "exit_nodes_local_routing", example.Apply(getEvpnResult =&gt; getEvpnResult.ExitNodesLocalRouting) },
        ///             { "primary_exit_node", example.Apply(getEvpnResult =&gt; getEvpnResult.PrimaryExitNode) },
        ///             { "rt_import", example.Apply(getEvpnResult =&gt; getEvpnResult.RtImport) },
        ///             { "mtu", example.Apply(getEvpnResult =&gt; getEvpnResult.Mtu) },
        ///             { "dns", example.Apply(getEvpnResult =&gt; getEvpnResult.Dns) },
        ///             { "dns_zone", example.Apply(getEvpnResult =&gt; getEvpnResult.DnsZone) },
        ///             { "ipam", example.Apply(getEvpnResult =&gt; getEvpnResult.Ipam) },
        ///             { "reverse_dns", example.Apply(getEvpnResult =&gt; getEvpnResult.ReverseDns) },
        ///         },
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetEvpnResult> Invoke(GetEvpnInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEvpnResult>("proxmoxve:SDNZone/getEvpn:getEvpn", args ?? new GetEvpnInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves information about an EVPN Zone in Proxmox SDN. The EVPN zone creates a routable Layer 3 network, capable of spanning across multiple clusters.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = ProxmoxVE.SDNZone.GetEvpn.Invoke(new()
        ///     {
        ///         Id = "evpn1",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["dataProxmoxVirtualEnvironmentSdnZoneEvpn"] = 
        ///         {
        ///             { "id", example.Apply(getEvpnResult =&gt; getEvpnResult.Id) },
        ///             { "nodes", example.Apply(getEvpnResult =&gt; getEvpnResult.Nodes) },
        ///             { "controller", example.Apply(getEvpnResult =&gt; getEvpnResult.Controller) },
        ///             { "vrf_vxlan", example.Apply(getEvpnResult =&gt; getEvpnResult.VrfVxlan) },
        ///             { "advertise_subnets", example.Apply(getEvpnResult =&gt; getEvpnResult.AdvertiseSubnets) },
        ///             { "disable_arp_nd_suppression", example.Apply(getEvpnResult =&gt; getEvpnResult.DisableArpNdSuppression) },
        ///             { "exit_nodes", example.Apply(getEvpnResult =&gt; getEvpnResult.ExitNodes) },
        ///             { "exit_nodes_local_routing", example.Apply(getEvpnResult =&gt; getEvpnResult.ExitNodesLocalRouting) },
        ///             { "primary_exit_node", example.Apply(getEvpnResult =&gt; getEvpnResult.PrimaryExitNode) },
        ///             { "rt_import", example.Apply(getEvpnResult =&gt; getEvpnResult.RtImport) },
        ///             { "mtu", example.Apply(getEvpnResult =&gt; getEvpnResult.Mtu) },
        ///             { "dns", example.Apply(getEvpnResult =&gt; getEvpnResult.Dns) },
        ///             { "dns_zone", example.Apply(getEvpnResult =&gt; getEvpnResult.DnsZone) },
        ///             { "ipam", example.Apply(getEvpnResult =&gt; getEvpnResult.Ipam) },
        ///             { "reverse_dns", example.Apply(getEvpnResult =&gt; getEvpnResult.ReverseDns) },
        ///         },
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetEvpnResult> Invoke(GetEvpnInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetEvpnResult>("proxmoxve:SDNZone/getEvpn:getEvpn", args ?? new GetEvpnInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEvpnArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique identifier of the SDN zone.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetEvpnArgs()
        {
        }
        public static new GetEvpnArgs Empty => new GetEvpnArgs();
    }

    public sealed class GetEvpnInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique identifier of the SDN zone.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetEvpnInvokeArgs()
        {
        }
        public static new GetEvpnInvokeArgs Empty => new GetEvpnInvokeArgs();
    }


    [OutputType]
    public sealed class GetEvpnResult
    {
        /// <summary>
        /// Enable subnet advertisement for EVPN.
        /// </summary>
        public readonly bool AdvertiseSubnets;
        /// <summary>
        /// EVPN controller address.
        /// </summary>
        public readonly string Controller;
        /// <summary>
        /// Disable ARP/ND suppression for EVPN.
        /// </summary>
        public readonly bool DisableArpNdSuppression;
        /// <summary>
        /// DNS API server address.
        /// </summary>
        public readonly string Dns;
        /// <summary>
        /// DNS domain name. Used to register hostnames, such as `&lt;hostname&gt;.&lt;domain&gt;`. The DNS zone must already exist on the DNS server.
        /// </summary>
        public readonly string DnsZone;
        /// <summary>
        /// List of exit nodes for EVPN.
        /// </summary>
        public readonly ImmutableArray<string> ExitNodes;
        /// <summary>
        /// Enable local routing for EVPN exit nodes.
        /// </summary>
        public readonly bool ExitNodesLocalRouting;
        /// <summary>
        /// The unique identifier of the SDN zone.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// IP Address Management system.
        /// </summary>
        public readonly string Ipam;
        /// <summary>
        /// MTU value for the zone.
        /// </summary>
        public readonly int Mtu;
        /// <summary>
        /// The Proxmox nodes which the zone and associated VNets are deployed on
        /// </summary>
        public readonly ImmutableArray<string> Nodes;
        /// <summary>
        /// Indicates if the zone has pending configuration changes that need to be applied.
        /// </summary>
        public readonly bool Pending;
        /// <summary>
        /// Primary exit node for EVPN.
        /// </summary>
        public readonly string PrimaryExitNode;
        /// <summary>
        /// Reverse DNS API server address.
        /// </summary>
        public readonly string ReverseDns;
        /// <summary>
        /// Route target import for EVPN. Must be in the format '\n\n:\n\n' (e.g., '65000:65000').
        /// </summary>
        public readonly string RtImport;
        /// <summary>
        /// Indicates the current state of the zone.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// VRF VXLAN-ID used for dedicated routing interconnect between VNets. It must be different than the VXLAN-ID of the VNets.
        /// </summary>
        public readonly int VrfVxlan;

        [OutputConstructor]
        private GetEvpnResult(
            bool advertiseSubnets,

            string controller,

            bool disableArpNdSuppression,

            string dns,

            string dnsZone,

            ImmutableArray<string> exitNodes,

            bool exitNodesLocalRouting,

            string id,

            string ipam,

            int mtu,

            ImmutableArray<string> nodes,

            bool pending,

            string primaryExitNode,

            string reverseDns,

            string rtImport,

            string state,

            int vrfVxlan)
        {
            AdvertiseSubnets = advertiseSubnets;
            Controller = controller;
            DisableArpNdSuppression = disableArpNdSuppression;
            Dns = dns;
            DnsZone = dnsZone;
            ExitNodes = exitNodes;
            ExitNodesLocalRouting = exitNodesLocalRouting;
            Id = id;
            Ipam = ipam;
            Mtu = mtu;
            Nodes = nodes;
            Pending = pending;
            PrimaryExitNode = primaryExitNode;
            ReverseDns = reverseDns;
            RtImport = rtImport;
            State = state;
            VrfVxlan = vrfVxlan;
        }
    }
}

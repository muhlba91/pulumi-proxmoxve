// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ProxmoxVE.SDNZone
{
    /// <summary>
    /// Simple Zone in Proxmox SDN. It will create an isolated VNet bridge. This bridge is not linked to a physical interface, and VM traffic is only local on each the node. It can be used in NAT or routed setups.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using ProxmoxVE = Pulumi.ProxmoxVE;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new ProxmoxVE.SDNZone.Simple("example", new()
    ///     {
    ///         Dns = "1.1.1.1",
    ///         DnsZone = "example.com",
    ///         ZoneId = "simple1",
    ///         Ipam = "pve",
    ///         Mtu = 1500,
    ///         Nodes = new[]
    ///         {
    ///             "pve",
    ///         },
    ///         ReverseDns = "1.1.1.1",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// #!/usr/bin/env sh
    /// 
    /// Simple SDN zone can be imported using its unique identifier (zone ID)
    /// 
    /// ```sh
    /// $ pulumi import proxmoxve:SDNZone/simple:Simple example simple1
    /// ```
    /// </summary>
    [ProxmoxVEResourceType("proxmoxve:SDNZone/simple:Simple")]
    public partial class Simple : global::Pulumi.CustomResource
    {
        /// <summary>
        /// DNS API server address.
        /// </summary>
        [Output("dns")]
        public Output<string?> Dns { get; private set; } = null!;

        /// <summary>
        /// DNS domain name. Used to register hostnames, such as `&lt;hostname&gt;.&lt;domain&gt;`. The DNS zone must already exist on the DNS server.
        /// </summary>
        [Output("dnsZone")]
        public Output<string?> DnsZone { get; private set; } = null!;

        /// <summary>
        /// IP Address Management system.
        /// </summary>
        [Output("ipam")]
        public Output<string?> Ipam { get; private set; } = null!;

        /// <summary>
        /// MTU value for the zone.
        /// </summary>
        [Output("mtu")]
        public Output<int?> Mtu { get; private set; } = null!;

        /// <summary>
        /// The Proxmox nodes which the zone and associated VNets should be deployed on
        /// </summary>
        [Output("nodes")]
        public Output<ImmutableArray<string>> Nodes { get; private set; } = null!;

        /// <summary>
        /// Indicates if the zone has pending configuration changes that need to be applied.
        /// </summary>
        [Output("pending")]
        public Output<bool> Pending { get; private set; } = null!;

        /// <summary>
        /// Reverse DNS API server address.
        /// </summary>
        [Output("reverseDns")]
        public Output<string?> ReverseDns { get; private set; } = null!;

        /// <summary>
        /// Indicates the current state of the zone.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The unique identifier of the SDN zone.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a Simple resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Simple(string name, SimpleArgs args, CustomResourceOptions? options = null)
            : base("proxmoxve:SDNZone/simple:Simple", name, args ?? new SimpleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Simple(string name, Input<string> id, SimpleState? state = null, CustomResourceOptions? options = null)
            : base("proxmoxve:SDNZone/simple:Simple", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/muhlba91/pulumi-proxmoxve",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Simple resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Simple Get(string name, Input<string> id, SimpleState? state = null, CustomResourceOptions? options = null)
        {
            return new Simple(name, id, state, options);
        }
    }

    public sealed class SimpleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// DNS API server address.
        /// </summary>
        [Input("dns")]
        public Input<string>? Dns { get; set; }

        /// <summary>
        /// DNS domain name. Used to register hostnames, such as `&lt;hostname&gt;.&lt;domain&gt;`. The DNS zone must already exist on the DNS server.
        /// </summary>
        [Input("dnsZone")]
        public Input<string>? DnsZone { get; set; }

        /// <summary>
        /// IP Address Management system.
        /// </summary>
        [Input("ipam")]
        public Input<string>? Ipam { get; set; }

        /// <summary>
        /// MTU value for the zone.
        /// </summary>
        [Input("mtu")]
        public Input<int>? Mtu { get; set; }

        [Input("nodes", required: true)]
        private InputList<string>? _nodes;

        /// <summary>
        /// The Proxmox nodes which the zone and associated VNets should be deployed on
        /// </summary>
        public InputList<string> Nodes
        {
            get => _nodes ?? (_nodes = new InputList<string>());
            set => _nodes = value;
        }

        /// <summary>
        /// Reverse DNS API server address.
        /// </summary>
        [Input("reverseDns")]
        public Input<string>? ReverseDns { get; set; }

        /// <summary>
        /// The unique identifier of the SDN zone.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public SimpleArgs()
        {
        }
        public static new SimpleArgs Empty => new SimpleArgs();
    }

    public sealed class SimpleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// DNS API server address.
        /// </summary>
        [Input("dns")]
        public Input<string>? Dns { get; set; }

        /// <summary>
        /// DNS domain name. Used to register hostnames, such as `&lt;hostname&gt;.&lt;domain&gt;`. The DNS zone must already exist on the DNS server.
        /// </summary>
        [Input("dnsZone")]
        public Input<string>? DnsZone { get; set; }

        /// <summary>
        /// IP Address Management system.
        /// </summary>
        [Input("ipam")]
        public Input<string>? Ipam { get; set; }

        /// <summary>
        /// MTU value for the zone.
        /// </summary>
        [Input("mtu")]
        public Input<int>? Mtu { get; set; }

        [Input("nodes")]
        private InputList<string>? _nodes;

        /// <summary>
        /// The Proxmox nodes which the zone and associated VNets should be deployed on
        /// </summary>
        public InputList<string> Nodes
        {
            get => _nodes ?? (_nodes = new InputList<string>());
            set => _nodes = value;
        }

        /// <summary>
        /// Indicates if the zone has pending configuration changes that need to be applied.
        /// </summary>
        [Input("pending")]
        public Input<bool>? Pending { get; set; }

        /// <summary>
        /// Reverse DNS API server address.
        /// </summary>
        [Input("reverseDns")]
        public Input<string>? ReverseDns { get; set; }

        /// <summary>
        /// Indicates the current state of the zone.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The unique identifier of the SDN zone.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public SimpleState()
        {
        }
        public static new SimpleState Empty => new SimpleState();
    }
}

// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ProxmoxVE.SDNZone
{
    public static class GetQinq
    {
        /// <summary>
        /// Retrieves information about a QinQ Zone in Proxmox SDN. QinQ also known as VLAN stacking, that uses multiple layers of VLAN tags for isolation. The QinQ zone defines the outer VLAN tag (the Service VLAN) whereas the inner VLAN tag is defined by the VNet. Your physical network switches must support stacked VLANs for this configuration. Due to the double stacking of tags, you need 4 more bytes for QinQ VLANs. For example, you must reduce the MTU to 1496 if you physical interface MTU is 1500.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = ProxmoxVE.SDNZone.GetQinq.Invoke(new()
        ///     {
        ///         Id = "qinq1",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["dataProxmoxVirtualEnvironmentSdnZoneQinq"] = 
        ///         {
        ///             { "id", example.Apply(getQinqResult =&gt; getQinqResult.Id) },
        ///             { "nodes", example.Apply(getQinqResult =&gt; getQinqResult.Nodes) },
        ///             { "bridge", example.Apply(getQinqResult =&gt; getQinqResult.Bridge) },
        ///             { "service_vlan", example.Apply(getQinqResult =&gt; getQinqResult.ServiceVlan) },
        ///             { "service_vlan_protocol", example.Apply(getQinqResult =&gt; getQinqResult.ServiceVlanProtocol) },
        ///             { "mtu", example.Apply(getQinqResult =&gt; getQinqResult.Mtu) },
        ///             { "dns", example.Apply(getQinqResult =&gt; getQinqResult.Dns) },
        ///             { "dns_zone", example.Apply(getQinqResult =&gt; getQinqResult.DnsZone) },
        ///             { "ipam", example.Apply(getQinqResult =&gt; getQinqResult.Ipam) },
        ///             { "reverse_dns", example.Apply(getQinqResult =&gt; getQinqResult.ReverseDns) },
        ///         },
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetQinqResult> InvokeAsync(GetQinqArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetQinqResult>("proxmoxve:SDNZone/getQinq:getQinq", args ?? new GetQinqArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves information about a QinQ Zone in Proxmox SDN. QinQ also known as VLAN stacking, that uses multiple layers of VLAN tags for isolation. The QinQ zone defines the outer VLAN tag (the Service VLAN) whereas the inner VLAN tag is defined by the VNet. Your physical network switches must support stacked VLANs for this configuration. Due to the double stacking of tags, you need 4 more bytes for QinQ VLANs. For example, you must reduce the MTU to 1496 if you physical interface MTU is 1500.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = ProxmoxVE.SDNZone.GetQinq.Invoke(new()
        ///     {
        ///         Id = "qinq1",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["dataProxmoxVirtualEnvironmentSdnZoneQinq"] = 
        ///         {
        ///             { "id", example.Apply(getQinqResult =&gt; getQinqResult.Id) },
        ///             { "nodes", example.Apply(getQinqResult =&gt; getQinqResult.Nodes) },
        ///             { "bridge", example.Apply(getQinqResult =&gt; getQinqResult.Bridge) },
        ///             { "service_vlan", example.Apply(getQinqResult =&gt; getQinqResult.ServiceVlan) },
        ///             { "service_vlan_protocol", example.Apply(getQinqResult =&gt; getQinqResult.ServiceVlanProtocol) },
        ///             { "mtu", example.Apply(getQinqResult =&gt; getQinqResult.Mtu) },
        ///             { "dns", example.Apply(getQinqResult =&gt; getQinqResult.Dns) },
        ///             { "dns_zone", example.Apply(getQinqResult =&gt; getQinqResult.DnsZone) },
        ///             { "ipam", example.Apply(getQinqResult =&gt; getQinqResult.Ipam) },
        ///             { "reverse_dns", example.Apply(getQinqResult =&gt; getQinqResult.ReverseDns) },
        ///         },
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetQinqResult> Invoke(GetQinqInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetQinqResult>("proxmoxve:SDNZone/getQinq:getQinq", args ?? new GetQinqInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves information about a QinQ Zone in Proxmox SDN. QinQ also known as VLAN stacking, that uses multiple layers of VLAN tags for isolation. The QinQ zone defines the outer VLAN tag (the Service VLAN) whereas the inner VLAN tag is defined by the VNet. Your physical network switches must support stacked VLANs for this configuration. Due to the double stacking of tags, you need 4 more bytes for QinQ VLANs. For example, you must reduce the MTU to 1496 if you physical interface MTU is 1500.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = ProxmoxVE.SDNZone.GetQinq.Invoke(new()
        ///     {
        ///         Id = "qinq1",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["dataProxmoxVirtualEnvironmentSdnZoneQinq"] = 
        ///         {
        ///             { "id", example.Apply(getQinqResult =&gt; getQinqResult.Id) },
        ///             { "nodes", example.Apply(getQinqResult =&gt; getQinqResult.Nodes) },
        ///             { "bridge", example.Apply(getQinqResult =&gt; getQinqResult.Bridge) },
        ///             { "service_vlan", example.Apply(getQinqResult =&gt; getQinqResult.ServiceVlan) },
        ///             { "service_vlan_protocol", example.Apply(getQinqResult =&gt; getQinqResult.ServiceVlanProtocol) },
        ///             { "mtu", example.Apply(getQinqResult =&gt; getQinqResult.Mtu) },
        ///             { "dns", example.Apply(getQinqResult =&gt; getQinqResult.Dns) },
        ///             { "dns_zone", example.Apply(getQinqResult =&gt; getQinqResult.DnsZone) },
        ///             { "ipam", example.Apply(getQinqResult =&gt; getQinqResult.Ipam) },
        ///             { "reverse_dns", example.Apply(getQinqResult =&gt; getQinqResult.ReverseDns) },
        ///         },
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetQinqResult> Invoke(GetQinqInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetQinqResult>("proxmoxve:SDNZone/getQinq:getQinq", args ?? new GetQinqInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetQinqArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique identifier of the SDN zone.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetQinqArgs()
        {
        }
        public static new GetQinqArgs Empty => new GetQinqArgs();
    }

    public sealed class GetQinqInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique identifier of the SDN zone.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetQinqInvokeArgs()
        {
        }
        public static new GetQinqInvokeArgs Empty => new GetQinqInvokeArgs();
    }


    [OutputType]
    public sealed class GetQinqResult
    {
        /// <summary>
        /// A local, VLAN-aware bridge that is already configured on each local node
        /// </summary>
        public readonly string Bridge;
        /// <summary>
        /// DNS API server address.
        /// </summary>
        public readonly string Dns;
        /// <summary>
        /// DNS domain name. Used to register hostnames, such as `&lt;hostname&gt;.&lt;domain&gt;`. The DNS zone must already exist on the DNS server.
        /// </summary>
        public readonly string DnsZone;
        /// <summary>
        /// The unique identifier of the SDN zone.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// IP Address Management system.
        /// </summary>
        public readonly string Ipam;
        /// <summary>
        /// MTU value for the zone.
        /// </summary>
        public readonly int Mtu;
        /// <summary>
        /// The Proxmox nodes which the zone and associated VNets are deployed on
        /// </summary>
        public readonly ImmutableArray<string> Nodes;
        /// <summary>
        /// Indicates if the zone has pending configuration changes that need to be applied.
        /// </summary>
        public readonly bool Pending;
        /// <summary>
        /// Reverse DNS API server address.
        /// </summary>
        public readonly string ReverseDns;
        /// <summary>
        /// Service VLAN tag for QinQ. The tag must be between `1` and `4094`.
        /// </summary>
        public readonly int ServiceVlan;
        /// <summary>
        /// Service VLAN protocol for QinQ. The protocol must be `802.1ad` or `802.1q`.
        /// </summary>
        public readonly string ServiceVlanProtocol;
        /// <summary>
        /// Indicates the current state of the zone.
        /// </summary>
        public readonly string State;

        [OutputConstructor]
        private GetQinqResult(
            string bridge,

            string dns,

            string dnsZone,

            string id,

            string ipam,

            int mtu,

            ImmutableArray<string> nodes,

            bool pending,

            string reverseDns,

            int serviceVlan,

            string serviceVlanProtocol,

            string state)
        {
            Bridge = bridge;
            Dns = dns;
            DnsZone = dnsZone;
            Id = id;
            Ipam = ipam;
            Mtu = mtu;
            Nodes = nodes;
            Pending = pending;
            ReverseDns = reverseDns;
            ServiceVlan = serviceVlan;
            ServiceVlanProtocol = serviceVlanProtocol;
            State = state;
        }
    }
}

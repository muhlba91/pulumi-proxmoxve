// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ProxmoxVE.SDNZone
{
    /// <summary>
    /// VXLAN Zone in Proxmox SDN. It establishes a tunnel (overlay) on top of an existing network (underlay). This encapsulates layer 2 Ethernet frames within layer 4 UDP datagrams using the default destination port 4789. You have to configure the underlay network yourself to enable UDP connectivity between all peers. Because VXLAN encapsulation uses 50 bytes, the MTU needs to be 50 bytes lower than the outgoing physical interface.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using ProxmoxVE = Pulumi.ProxmoxVE;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new ProxmoxVE.SDNZone.Vxlan("example", new()
    ///     {
    ///         Dns = "1.1.1.1",
    ///         DnsZone = "example.com",
    ///         ZoneId = "vxlan1",
    ///         Ipam = "pve",
    ///         Mtu = 1450,
    ///         Nodes = new[]
    ///         {
    ///             "pve",
    ///         },
    ///         Peers = new[]
    ///         {
    ///             "10.0.0.1",
    ///             "10.0.0.2",
    ///             "10.0.0.3",
    ///         },
    ///         ReverseDns = "1.1.1.1",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// #!/usr/bin/env sh
    /// 
    /// VXLAN SDN zone can be imported using its unique identifier (zone ID)
    /// 
    /// ```sh
    /// $ pulumi import proxmoxve:SDNZone/vxlan:Vxlan example vxlan1
    /// ```
    /// </summary>
    [ProxmoxVEResourceType("proxmoxve:SDNZone/vxlan:Vxlan")]
    public partial class Vxlan : global::Pulumi.CustomResource
    {
        /// <summary>
        /// DNS API server address.
        /// </summary>
        [Output("dns")]
        public Output<string?> Dns { get; private set; } = null!;

        /// <summary>
        /// DNS domain name. Used to register hostnames, such as `&lt;hostname&gt;.&lt;domain&gt;`. The DNS zone must already exist on the DNS server.
        /// </summary>
        [Output("dnsZone")]
        public Output<string?> DnsZone { get; private set; } = null!;

        /// <summary>
        /// IP Address Management system.
        /// </summary>
        [Output("ipam")]
        public Output<string?> Ipam { get; private set; } = null!;

        /// <summary>
        /// MTU value for the zone.
        /// </summary>
        [Output("mtu")]
        public Output<int?> Mtu { get; private set; } = null!;

        /// <summary>
        /// The Proxmox nodes which the zone and associated VNets should be deployed on
        /// </summary>
        [Output("nodes")]
        public Output<ImmutableArray<string>> Nodes { get; private set; } = null!;

        /// <summary>
        /// A list of IP addresses of each node in the VXLAN zone. This can be external nodes reachable at this IP address. All nodes in the cluster need to be mentioned here
        /// </summary>
        [Output("peers")]
        public Output<ImmutableArray<string>> Peers { get; private set; } = null!;

        /// <summary>
        /// Indicates if the zone has pending configuration changes that need to be applied.
        /// </summary>
        [Output("pending")]
        public Output<bool> Pending { get; private set; } = null!;

        /// <summary>
        /// Reverse DNS API server address.
        /// </summary>
        [Output("reverseDns")]
        public Output<string?> ReverseDns { get; private set; } = null!;

        /// <summary>
        /// Indicates the current state of the zone.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The unique identifier of the SDN zone.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a Vxlan resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Vxlan(string name, VxlanArgs args, CustomResourceOptions? options = null)
            : base("proxmoxve:SDNZone/vxlan:Vxlan", name, args ?? new VxlanArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Vxlan(string name, Input<string> id, VxlanState? state = null, CustomResourceOptions? options = null)
            : base("proxmoxve:SDNZone/vxlan:Vxlan", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/muhlba91/pulumi-proxmoxve",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Vxlan resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Vxlan Get(string name, Input<string> id, VxlanState? state = null, CustomResourceOptions? options = null)
        {
            return new Vxlan(name, id, state, options);
        }
    }

    public sealed class VxlanArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// DNS API server address.
        /// </summary>
        [Input("dns")]
        public Input<string>? Dns { get; set; }

        /// <summary>
        /// DNS domain name. Used to register hostnames, such as `&lt;hostname&gt;.&lt;domain&gt;`. The DNS zone must already exist on the DNS server.
        /// </summary>
        [Input("dnsZone")]
        public Input<string>? DnsZone { get; set; }

        /// <summary>
        /// IP Address Management system.
        /// </summary>
        [Input("ipam")]
        public Input<string>? Ipam { get; set; }

        /// <summary>
        /// MTU value for the zone.
        /// </summary>
        [Input("mtu")]
        public Input<int>? Mtu { get; set; }

        [Input("nodes", required: true)]
        private InputList<string>? _nodes;

        /// <summary>
        /// The Proxmox nodes which the zone and associated VNets should be deployed on
        /// </summary>
        public InputList<string> Nodes
        {
            get => _nodes ?? (_nodes = new InputList<string>());
            set => _nodes = value;
        }

        [Input("peers", required: true)]
        private InputList<string>? _peers;

        /// <summary>
        /// A list of IP addresses of each node in the VXLAN zone. This can be external nodes reachable at this IP address. All nodes in the cluster need to be mentioned here
        /// </summary>
        public InputList<string> Peers
        {
            get => _peers ?? (_peers = new InputList<string>());
            set => _peers = value;
        }

        /// <summary>
        /// Reverse DNS API server address.
        /// </summary>
        [Input("reverseDns")]
        public Input<string>? ReverseDns { get; set; }

        /// <summary>
        /// The unique identifier of the SDN zone.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public VxlanArgs()
        {
        }
        public static new VxlanArgs Empty => new VxlanArgs();
    }

    public sealed class VxlanState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// DNS API server address.
        /// </summary>
        [Input("dns")]
        public Input<string>? Dns { get; set; }

        /// <summary>
        /// DNS domain name. Used to register hostnames, such as `&lt;hostname&gt;.&lt;domain&gt;`. The DNS zone must already exist on the DNS server.
        /// </summary>
        [Input("dnsZone")]
        public Input<string>? DnsZone { get; set; }

        /// <summary>
        /// IP Address Management system.
        /// </summary>
        [Input("ipam")]
        public Input<string>? Ipam { get; set; }

        /// <summary>
        /// MTU value for the zone.
        /// </summary>
        [Input("mtu")]
        public Input<int>? Mtu { get; set; }

        [Input("nodes")]
        private InputList<string>? _nodes;

        /// <summary>
        /// The Proxmox nodes which the zone and associated VNets should be deployed on
        /// </summary>
        public InputList<string> Nodes
        {
            get => _nodes ?? (_nodes = new InputList<string>());
            set => _nodes = value;
        }

        [Input("peers")]
        private InputList<string>? _peers;

        /// <summary>
        /// A list of IP addresses of each node in the VXLAN zone. This can be external nodes reachable at this IP address. All nodes in the cluster need to be mentioned here
        /// </summary>
        public InputList<string> Peers
        {
            get => _peers ?? (_peers = new InputList<string>());
            set => _peers = value;
        }

        /// <summary>
        /// Indicates if the zone has pending configuration changes that need to be applied.
        /// </summary>
        [Input("pending")]
        public Input<bool>? Pending { get; set; }

        /// <summary>
        /// Reverse DNS API server address.
        /// </summary>
        [Input("reverseDns")]
        public Input<string>? ReverseDns { get; set; }

        /// <summary>
        /// Indicates the current state of the zone.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The unique identifier of the SDN zone.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public VxlanState()
        {
        }
        public static new VxlanState Empty => new VxlanState();
    }
}

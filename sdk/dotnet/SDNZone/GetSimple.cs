// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ProxmoxVE.SDNZone
{
    public static class GetSimple
    {
        /// <summary>
        /// Retrieves information about a Simple Zone in Proxmox SDN. It will create an isolated VNet bridge. This bridge is not linked to a physical interface, and VM traffic is only local on each the node. It can be used in NAT or routed setups.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = ProxmoxVE.SDNZone.GetSimple.Invoke(new()
        ///     {
        ///         Id = "simple1",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["dataProxmoxVirtualEnvironmentSdnZoneSimple"] = 
        ///         {
        ///             { "id", example.Apply(getSimpleResult =&gt; getSimpleResult.Id) },
        ///             { "nodes", example.Apply(getSimpleResult =&gt; getSimpleResult.Nodes) },
        ///             { "mtu", example.Apply(getSimpleResult =&gt; getSimpleResult.Mtu) },
        ///             { "dns", example.Apply(getSimpleResult =&gt; getSimpleResult.Dns) },
        ///             { "dns_zone", example.Apply(getSimpleResult =&gt; getSimpleResult.DnsZone) },
        ///             { "ipam", example.Apply(getSimpleResult =&gt; getSimpleResult.Ipam) },
        ///             { "reverse_dns", example.Apply(getSimpleResult =&gt; getSimpleResult.ReverseDns) },
        ///         },
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetSimpleResult> InvokeAsync(GetSimpleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSimpleResult>("proxmoxve:SDNZone/getSimple:getSimple", args ?? new GetSimpleArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves information about a Simple Zone in Proxmox SDN. It will create an isolated VNet bridge. This bridge is not linked to a physical interface, and VM traffic is only local on each the node. It can be used in NAT or routed setups.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = ProxmoxVE.SDNZone.GetSimple.Invoke(new()
        ///     {
        ///         Id = "simple1",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["dataProxmoxVirtualEnvironmentSdnZoneSimple"] = 
        ///         {
        ///             { "id", example.Apply(getSimpleResult =&gt; getSimpleResult.Id) },
        ///             { "nodes", example.Apply(getSimpleResult =&gt; getSimpleResult.Nodes) },
        ///             { "mtu", example.Apply(getSimpleResult =&gt; getSimpleResult.Mtu) },
        ///             { "dns", example.Apply(getSimpleResult =&gt; getSimpleResult.Dns) },
        ///             { "dns_zone", example.Apply(getSimpleResult =&gt; getSimpleResult.DnsZone) },
        ///             { "ipam", example.Apply(getSimpleResult =&gt; getSimpleResult.Ipam) },
        ///             { "reverse_dns", example.Apply(getSimpleResult =&gt; getSimpleResult.ReverseDns) },
        ///         },
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetSimpleResult> Invoke(GetSimpleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSimpleResult>("proxmoxve:SDNZone/getSimple:getSimple", args ?? new GetSimpleInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves information about a Simple Zone in Proxmox SDN. It will create an isolated VNet bridge. This bridge is not linked to a physical interface, and VM traffic is only local on each the node. It can be used in NAT or routed setups.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = ProxmoxVE.SDNZone.GetSimple.Invoke(new()
        ///     {
        ///         Id = "simple1",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["dataProxmoxVirtualEnvironmentSdnZoneSimple"] = 
        ///         {
        ///             { "id", example.Apply(getSimpleResult =&gt; getSimpleResult.Id) },
        ///             { "nodes", example.Apply(getSimpleResult =&gt; getSimpleResult.Nodes) },
        ///             { "mtu", example.Apply(getSimpleResult =&gt; getSimpleResult.Mtu) },
        ///             { "dns", example.Apply(getSimpleResult =&gt; getSimpleResult.Dns) },
        ///             { "dns_zone", example.Apply(getSimpleResult =&gt; getSimpleResult.DnsZone) },
        ///             { "ipam", example.Apply(getSimpleResult =&gt; getSimpleResult.Ipam) },
        ///             { "reverse_dns", example.Apply(getSimpleResult =&gt; getSimpleResult.ReverseDns) },
        ///         },
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetSimpleResult> Invoke(GetSimpleInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSimpleResult>("proxmoxve:SDNZone/getSimple:getSimple", args ?? new GetSimpleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSimpleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique identifier of the SDN zone.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetSimpleArgs()
        {
        }
        public static new GetSimpleArgs Empty => new GetSimpleArgs();
    }

    public sealed class GetSimpleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique identifier of the SDN zone.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetSimpleInvokeArgs()
        {
        }
        public static new GetSimpleInvokeArgs Empty => new GetSimpleInvokeArgs();
    }


    [OutputType]
    public sealed class GetSimpleResult
    {
        /// <summary>
        /// DNS API server address.
        /// </summary>
        public readonly string Dns;
        /// <summary>
        /// DNS domain name. Used to register hostnames, such as `&lt;hostname&gt;.&lt;domain&gt;`. The DNS zone must already exist on the DNS server.
        /// </summary>
        public readonly string DnsZone;
        /// <summary>
        /// The unique identifier of the SDN zone.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// IP Address Management system.
        /// </summary>
        public readonly string Ipam;
        /// <summary>
        /// MTU value for the zone.
        /// </summary>
        public readonly int Mtu;
        /// <summary>
        /// The Proxmox nodes which the zone and associated VNets are deployed on
        /// </summary>
        public readonly ImmutableArray<string> Nodes;
        /// <summary>
        /// Indicates if the zone has pending configuration changes that need to be applied.
        /// </summary>
        public readonly bool Pending;
        /// <summary>
        /// Reverse DNS API server address.
        /// </summary>
        public readonly string ReverseDns;
        /// <summary>
        /// Indicates the current state of the zone.
        /// </summary>
        public readonly string State;

        [OutputConstructor]
        private GetSimpleResult(
            string dns,

            string dnsZone,

            string id,

            string ipam,

            int mtu,

            ImmutableArray<string> nodes,

            bool pending,

            string reverseDns,

            string state)
        {
            Dns = dns;
            DnsZone = dnsZone;
            Id = id;
            Ipam = ipam;
            Mtu = mtu;
            Nodes = nodes;
            Pending = pending;
            ReverseDns = reverseDns;
            State = state;
        }
    }
}

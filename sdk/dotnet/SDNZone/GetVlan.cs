// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ProxmoxVE.SDNZone
{
    public static class GetVlan
    {
        /// <summary>
        /// Retrieves information about a VLAN Zone in Proxmox SDN. It uses an existing local Linux or OVS bridge to connect to the node's physical interface. It uses VLAN tagging defined in the VNet to isolate the network segments. This allows connectivity of VMs between different nodes.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = ProxmoxVE.SDNZone.GetVlan.Invoke(new()
        ///     {
        ///         Id = "vlan1",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["dataProxmoxVirtualEnvironmentSdnZoneVlan"] = 
        ///         {
        ///             { "id", example.Apply(getVlanResult =&gt; getVlanResult.Id) },
        ///             { "nodes", example.Apply(getVlanResult =&gt; getVlanResult.Nodes) },
        ///             { "bridge", example.Apply(getVlanResult =&gt; getVlanResult.Bridge) },
        ///             { "mtu", example.Apply(getVlanResult =&gt; getVlanResult.Mtu) },
        ///             { "dns", example.Apply(getVlanResult =&gt; getVlanResult.Dns) },
        ///             { "dns_zone", example.Apply(getVlanResult =&gt; getVlanResult.DnsZone) },
        ///             { "ipam", example.Apply(getVlanResult =&gt; getVlanResult.Ipam) },
        ///             { "reverse_dns", example.Apply(getVlanResult =&gt; getVlanResult.ReverseDns) },
        ///         },
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetVlanResult> InvokeAsync(GetVlanArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVlanResult>("proxmoxve:SDNZone/getVlan:getVlan", args ?? new GetVlanArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves information about a VLAN Zone in Proxmox SDN. It uses an existing local Linux or OVS bridge to connect to the node's physical interface. It uses VLAN tagging defined in the VNet to isolate the network segments. This allows connectivity of VMs between different nodes.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = ProxmoxVE.SDNZone.GetVlan.Invoke(new()
        ///     {
        ///         Id = "vlan1",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["dataProxmoxVirtualEnvironmentSdnZoneVlan"] = 
        ///         {
        ///             { "id", example.Apply(getVlanResult =&gt; getVlanResult.Id) },
        ///             { "nodes", example.Apply(getVlanResult =&gt; getVlanResult.Nodes) },
        ///             { "bridge", example.Apply(getVlanResult =&gt; getVlanResult.Bridge) },
        ///             { "mtu", example.Apply(getVlanResult =&gt; getVlanResult.Mtu) },
        ///             { "dns", example.Apply(getVlanResult =&gt; getVlanResult.Dns) },
        ///             { "dns_zone", example.Apply(getVlanResult =&gt; getVlanResult.DnsZone) },
        ///             { "ipam", example.Apply(getVlanResult =&gt; getVlanResult.Ipam) },
        ///             { "reverse_dns", example.Apply(getVlanResult =&gt; getVlanResult.ReverseDns) },
        ///         },
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetVlanResult> Invoke(GetVlanInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVlanResult>("proxmoxve:SDNZone/getVlan:getVlan", args ?? new GetVlanInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves information about a VLAN Zone in Proxmox SDN. It uses an existing local Linux or OVS bridge to connect to the node's physical interface. It uses VLAN tagging defined in the VNet to isolate the network segments. This allows connectivity of VMs between different nodes.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = ProxmoxVE.SDNZone.GetVlan.Invoke(new()
        ///     {
        ///         Id = "vlan1",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["dataProxmoxVirtualEnvironmentSdnZoneVlan"] = 
        ///         {
        ///             { "id", example.Apply(getVlanResult =&gt; getVlanResult.Id) },
        ///             { "nodes", example.Apply(getVlanResult =&gt; getVlanResult.Nodes) },
        ///             { "bridge", example.Apply(getVlanResult =&gt; getVlanResult.Bridge) },
        ///             { "mtu", example.Apply(getVlanResult =&gt; getVlanResult.Mtu) },
        ///             { "dns", example.Apply(getVlanResult =&gt; getVlanResult.Dns) },
        ///             { "dns_zone", example.Apply(getVlanResult =&gt; getVlanResult.DnsZone) },
        ///             { "ipam", example.Apply(getVlanResult =&gt; getVlanResult.Ipam) },
        ///             { "reverse_dns", example.Apply(getVlanResult =&gt; getVlanResult.ReverseDns) },
        ///         },
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetVlanResult> Invoke(GetVlanInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVlanResult>("proxmoxve:SDNZone/getVlan:getVlan", args ?? new GetVlanInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVlanArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique identifier of the SDN zone.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetVlanArgs()
        {
        }
        public static new GetVlanArgs Empty => new GetVlanArgs();
    }

    public sealed class GetVlanInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique identifier of the SDN zone.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetVlanInvokeArgs()
        {
        }
        public static new GetVlanInvokeArgs Empty => new GetVlanInvokeArgs();
    }


    [OutputType]
    public sealed class GetVlanResult
    {
        /// <summary>
        /// The local bridge or OVS switch, already configured on *each* node that allows node-to-node connection.
        /// </summary>
        public readonly string Bridge;
        /// <summary>
        /// DNS API server address.
        /// </summary>
        public readonly string Dns;
        /// <summary>
        /// DNS domain name. Used to register hostnames, such as `&lt;hostname&gt;.&lt;domain&gt;`. The DNS zone must already exist on the DNS server.
        /// </summary>
        public readonly string DnsZone;
        /// <summary>
        /// The unique identifier of the SDN zone.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// IP Address Management system.
        /// </summary>
        public readonly string Ipam;
        /// <summary>
        /// MTU value for the zone.
        /// </summary>
        public readonly int Mtu;
        /// <summary>
        /// The Proxmox nodes which the zone and associated VNets are deployed on
        /// </summary>
        public readonly ImmutableArray<string> Nodes;
        /// <summary>
        /// Indicates if the zone has pending configuration changes that need to be applied.
        /// </summary>
        public readonly bool Pending;
        /// <summary>
        /// Reverse DNS API server address.
        /// </summary>
        public readonly string ReverseDns;
        /// <summary>
        /// Indicates the current state of the zone.
        /// </summary>
        public readonly string State;

        [OutputConstructor]
        private GetVlanResult(
            string bridge,

            string dns,

            string dnsZone,

            string id,

            string ipam,

            int mtu,

            ImmutableArray<string> nodes,

            bool pending,

            string reverseDns,

            string state)
        {
            Bridge = bridge;
            Dns = dns;
            DnsZone = dnsZone;
            Id = id;
            Ipam = ipam;
            Mtu = mtu;
            Nodes = nodes;
            Pending = pending;
            ReverseDns = reverseDns;
            State = state;
        }
    }
}

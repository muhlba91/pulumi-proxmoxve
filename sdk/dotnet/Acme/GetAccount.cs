// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ProxmoxVE.Acme
{
    public static class GetAccount
    {
        /// <summary>
        /// Retrieves information about a specific ACME account.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all = ProxmoxVE.Acme.GetAccounts.Invoke();
        /// 
        ///     var example = .Select(__value =&gt; 
        ///     {
        ///         return ProxmoxVE.Acme.GetAccount.Invoke(new()
        ///         {
        ///             Name = __value,
        ///         });
        ///     }).ToList();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["dataProxmoxVirtualEnvironmentAcmeAccount"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetAccountResult> InvokeAsync(GetAccountArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAccountResult>("proxmoxve:Acme/getAccount:getAccount", args ?? new GetAccountArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves information about a specific ACME account.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all = ProxmoxVE.Acme.GetAccounts.Invoke();
        /// 
        ///     var example = .Select(__value =&gt; 
        ///     {
        ///         return ProxmoxVE.Acme.GetAccount.Invoke(new()
        ///         {
        ///             Name = __value,
        ///         });
        ///     }).ToList();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["dataProxmoxVirtualEnvironmentAcmeAccount"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetAccountResult> Invoke(GetAccountInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAccountResult>("proxmoxve:Acme/getAccount:getAccount", args ?? new GetAccountInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves information about a specific ACME account.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all = ProxmoxVE.Acme.GetAccounts.Invoke();
        /// 
        ///     var example = .Select(__value =&gt; 
        ///     {
        ///         return ProxmoxVE.Acme.GetAccount.Invoke(new()
        ///         {
        ///             Name = __value,
        ///         });
        ///     }).ToList();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["dataProxmoxVirtualEnvironmentAcmeAccount"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetAccountResult> Invoke(GetAccountInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAccountResult>("proxmoxve:Acme/getAccount:getAccount", args ?? new GetAccountInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAccountArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The identifier of the ACME account to read.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetAccountArgs()
        {
        }
        public static new GetAccountArgs Empty => new GetAccountArgs();
    }

    public sealed class GetAccountInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The identifier of the ACME account to read.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetAccountInvokeArgs()
        {
        }
        public static new GetAccountInvokeArgs Empty => new GetAccountInvokeArgs();
    }


    [OutputType]
    public sealed class GetAccountResult
    {
        /// <summary>
        /// The ACME account information.
        /// </summary>
        public readonly Outputs.GetAccountAccountResult Account;
        /// <summary>
        /// The directory URL of the ACME account.
        /// </summary>
        public readonly string Directory;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The location URL of the ACME account.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The identifier of the ACME account to read.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The URL of the terms of service of the ACME account.
        /// </summary>
        public readonly string Tos;

        [OutputConstructor]
        private GetAccountResult(
            Outputs.GetAccountAccountResult account,

            string directory,

            string id,

            string location,

            string? name,

            string tos)
        {
            Account = account;
            Directory = directory;
            Id = id;
            Location = location;
            Name = name;
            Tos = tos;
        }
    }
}

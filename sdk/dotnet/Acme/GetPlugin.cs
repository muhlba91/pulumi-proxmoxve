// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ProxmoxVE.Acme
{
    public static class GetPlugin
    {
        /// <summary>
        /// Retrieves a single ACME plugin by plugin ID name.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = ProxmoxVE.Acme.GetPlugin.Invoke(new()
        ///     {
        ///         Plugin = "standalone",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["dataProxmoxVirtualEnvironmentAcmePlugin"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetPluginResult> InvokeAsync(GetPluginArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPluginResult>("proxmoxve:Acme/getPlugin:getPlugin", args ?? new GetPluginArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves a single ACME plugin by plugin ID name.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = ProxmoxVE.Acme.GetPlugin.Invoke(new()
        ///     {
        ///         Plugin = "standalone",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["dataProxmoxVirtualEnvironmentAcmePlugin"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetPluginResult> Invoke(GetPluginInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPluginResult>("proxmoxve:Acme/getPlugin:getPlugin", args ?? new GetPluginInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves a single ACME plugin by plugin ID name.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ProxmoxVE = Pulumi.ProxmoxVE;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = ProxmoxVE.Acme.GetPlugin.Invoke(new()
        ///     {
        ///         Plugin = "standalone",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["dataProxmoxVirtualEnvironmentAcmePlugin"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetPluginResult> Invoke(GetPluginInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPluginResult>("proxmoxve:Acme/getPlugin:getPlugin", args ?? new GetPluginInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPluginArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ACME Plugin ID name.
        /// </summary>
        [Input("plugin", required: true)]
        public string Plugin { get; set; } = null!;

        public GetPluginArgs()
        {
        }
        public static new GetPluginArgs Empty => new GetPluginArgs();
    }

    public sealed class GetPluginInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ACME Plugin ID name.
        /// </summary>
        [Input("plugin", required: true)]
        public Input<string> Plugin { get; set; } = null!;

        public GetPluginInvokeArgs()
        {
        }
        public static new GetPluginInvokeArgs Empty => new GetPluginInvokeArgs();
    }


    [OutputType]
    public sealed class GetPluginResult
    {
        /// <summary>
        /// API plugin name.
        /// </summary>
        public readonly string Api;
        /// <summary>
        /// DNS plugin data.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Data;
        /// <summary>
        /// Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.
        /// </summary>
        public readonly string Digest;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// ACME Plugin ID name.
        /// </summary>
        public readonly string Plugin;
        /// <summary>
        /// ACME challenge type (dns, standalone).
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Extra delay in seconds to wait before requesting validation. Allows to cope with a long TTL of DNS records (0 - 172800).
        /// </summary>
        public readonly int ValidationDelay;

        [OutputConstructor]
        private GetPluginResult(
            string api,

            ImmutableDictionary<string, string> data,

            string digest,

            string id,

            string plugin,

            string type,

            int validationDelay)
        {
            Api = api;
            Data = data;
            Digest = digest;
            Id = id;
            Plugin = plugin;
            Type = type;
            ValidationDelay = validationDelay;
        }
    }
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"errors"
	"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Linux Bridge network interface in a Proxmox VE node.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Network"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Network.NewNetworkBridge(ctx, "vmbr99", &Network.NetworkBridgeArgs{
//				NodeName: pulumi.String("pve"),
//				Address:  pulumi.String("99.99.99.99/16"),
//				Comment:  pulumi.String("vmbr99 comment"),
//				Ports: pulumi.StringArray{
//					pulumi.String("ens18.99"),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				proxmox_virtual_environment_network_linux_vlan.Vlan99,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// #!/usr/bin/env sh
//
// #Interfaces can be imported using the `node_name:iface` format, e.g.
//
// ```sh
// $ pulumi import proxmoxve:Network/networkBridge:NetworkBridge vmbr99 pve:vmbr99
// ```
type NetworkBridge struct {
	pulumi.CustomResourceState

	// The interface IPv4/CIDR address.
	Address pulumi.StringPtrOutput `pulumi:"address"`
	// The interface IPv6/CIDR address.
	Address6 pulumi.StringPtrOutput `pulumi:"address6"`
	// Automatically start interface on boot (defaults to `true`).
	Autostart pulumi.BoolOutput `pulumi:"autostart"`
	// Comment for the interface.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Default gateway address.
	Gateway pulumi.StringPtrOutput `pulumi:"gateway"`
	// Default IPv6 gateway address.
	Gateway6 pulumi.StringPtrOutput `pulumi:"gateway6"`
	// The interface MTU.
	Mtu pulumi.IntPtrOutput `pulumi:"mtu"`
	// The interface name. Must be `vmbrN`, where N is a number between 0 and 9999.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the node.
	NodeName pulumi.StringOutput `pulumi:"nodeName"`
	// The interface bridge ports.
	Ports pulumi.StringArrayOutput `pulumi:"ports"`
	// Whether the interface bridge is VLAN aware (defaults to `false`).
	VlanAware pulumi.BoolOutput `pulumi:"vlanAware"`
}

// NewNetworkBridge registers a new resource with the given unique name, arguments, and options.
func NewNetworkBridge(ctx *pulumi.Context,
	name string, args *NetworkBridgeArgs, opts ...pulumi.ResourceOption) (*NetworkBridge, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NodeName == nil {
		return nil, errors.New("invalid value for required argument 'NodeName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkBridge
	err := ctx.RegisterResource("proxmoxve:Network/networkBridge:NetworkBridge", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkBridge gets an existing NetworkBridge resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkBridge(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkBridgeState, opts ...pulumi.ResourceOption) (*NetworkBridge, error) {
	var resource NetworkBridge
	err := ctx.ReadResource("proxmoxve:Network/networkBridge:NetworkBridge", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkBridge resources.
type networkBridgeState struct {
	// The interface IPv4/CIDR address.
	Address *string `pulumi:"address"`
	// The interface IPv6/CIDR address.
	Address6 *string `pulumi:"address6"`
	// Automatically start interface on boot (defaults to `true`).
	Autostart *bool `pulumi:"autostart"`
	// Comment for the interface.
	Comment *string `pulumi:"comment"`
	// Default gateway address.
	Gateway *string `pulumi:"gateway"`
	// Default IPv6 gateway address.
	Gateway6 *string `pulumi:"gateway6"`
	// The interface MTU.
	Mtu *int `pulumi:"mtu"`
	// The interface name. Must be `vmbrN`, where N is a number between 0 and 9999.
	Name *string `pulumi:"name"`
	// The name of the node.
	NodeName *string `pulumi:"nodeName"`
	// The interface bridge ports.
	Ports []string `pulumi:"ports"`
	// Whether the interface bridge is VLAN aware (defaults to `false`).
	VlanAware *bool `pulumi:"vlanAware"`
}

type NetworkBridgeState struct {
	// The interface IPv4/CIDR address.
	Address pulumi.StringPtrInput
	// The interface IPv6/CIDR address.
	Address6 pulumi.StringPtrInput
	// Automatically start interface on boot (defaults to `true`).
	Autostart pulumi.BoolPtrInput
	// Comment for the interface.
	Comment pulumi.StringPtrInput
	// Default gateway address.
	Gateway pulumi.StringPtrInput
	// Default IPv6 gateway address.
	Gateway6 pulumi.StringPtrInput
	// The interface MTU.
	Mtu pulumi.IntPtrInput
	// The interface name. Must be `vmbrN`, where N is a number between 0 and 9999.
	Name pulumi.StringPtrInput
	// The name of the node.
	NodeName pulumi.StringPtrInput
	// The interface bridge ports.
	Ports pulumi.StringArrayInput
	// Whether the interface bridge is VLAN aware (defaults to `false`).
	VlanAware pulumi.BoolPtrInput
}

func (NetworkBridgeState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkBridgeState)(nil)).Elem()
}

type networkBridgeArgs struct {
	// The interface IPv4/CIDR address.
	Address *string `pulumi:"address"`
	// The interface IPv6/CIDR address.
	Address6 *string `pulumi:"address6"`
	// Automatically start interface on boot (defaults to `true`).
	Autostart *bool `pulumi:"autostart"`
	// Comment for the interface.
	Comment *string `pulumi:"comment"`
	// Default gateway address.
	Gateway *string `pulumi:"gateway"`
	// Default IPv6 gateway address.
	Gateway6 *string `pulumi:"gateway6"`
	// The interface MTU.
	Mtu *int `pulumi:"mtu"`
	// The interface name. Must be `vmbrN`, where N is a number between 0 and 9999.
	Name *string `pulumi:"name"`
	// The name of the node.
	NodeName string `pulumi:"nodeName"`
	// The interface bridge ports.
	Ports []string `pulumi:"ports"`
	// Whether the interface bridge is VLAN aware (defaults to `false`).
	VlanAware *bool `pulumi:"vlanAware"`
}

// The set of arguments for constructing a NetworkBridge resource.
type NetworkBridgeArgs struct {
	// The interface IPv4/CIDR address.
	Address pulumi.StringPtrInput
	// The interface IPv6/CIDR address.
	Address6 pulumi.StringPtrInput
	// Automatically start interface on boot (defaults to `true`).
	Autostart pulumi.BoolPtrInput
	// Comment for the interface.
	Comment pulumi.StringPtrInput
	// Default gateway address.
	Gateway pulumi.StringPtrInput
	// Default IPv6 gateway address.
	Gateway6 pulumi.StringPtrInput
	// The interface MTU.
	Mtu pulumi.IntPtrInput
	// The interface name. Must be `vmbrN`, where N is a number between 0 and 9999.
	Name pulumi.StringPtrInput
	// The name of the node.
	NodeName pulumi.StringInput
	// The interface bridge ports.
	Ports pulumi.StringArrayInput
	// Whether the interface bridge is VLAN aware (defaults to `false`).
	VlanAware pulumi.BoolPtrInput
}

func (NetworkBridgeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkBridgeArgs)(nil)).Elem()
}

type NetworkBridgeInput interface {
	pulumi.Input

	ToNetworkBridgeOutput() NetworkBridgeOutput
	ToNetworkBridgeOutputWithContext(ctx context.Context) NetworkBridgeOutput
}

func (*NetworkBridge) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkBridge)(nil)).Elem()
}

func (i *NetworkBridge) ToNetworkBridgeOutput() NetworkBridgeOutput {
	return i.ToNetworkBridgeOutputWithContext(context.Background())
}

func (i *NetworkBridge) ToNetworkBridgeOutputWithContext(ctx context.Context) NetworkBridgeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkBridgeOutput)
}

// NetworkBridgeArrayInput is an input type that accepts NetworkBridgeArray and NetworkBridgeArrayOutput values.
// You can construct a concrete instance of `NetworkBridgeArrayInput` via:
//
//	NetworkBridgeArray{ NetworkBridgeArgs{...} }
type NetworkBridgeArrayInput interface {
	pulumi.Input

	ToNetworkBridgeArrayOutput() NetworkBridgeArrayOutput
	ToNetworkBridgeArrayOutputWithContext(context.Context) NetworkBridgeArrayOutput
}

type NetworkBridgeArray []NetworkBridgeInput

func (NetworkBridgeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkBridge)(nil)).Elem()
}

func (i NetworkBridgeArray) ToNetworkBridgeArrayOutput() NetworkBridgeArrayOutput {
	return i.ToNetworkBridgeArrayOutputWithContext(context.Background())
}

func (i NetworkBridgeArray) ToNetworkBridgeArrayOutputWithContext(ctx context.Context) NetworkBridgeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkBridgeArrayOutput)
}

// NetworkBridgeMapInput is an input type that accepts NetworkBridgeMap and NetworkBridgeMapOutput values.
// You can construct a concrete instance of `NetworkBridgeMapInput` via:
//
//	NetworkBridgeMap{ "key": NetworkBridgeArgs{...} }
type NetworkBridgeMapInput interface {
	pulumi.Input

	ToNetworkBridgeMapOutput() NetworkBridgeMapOutput
	ToNetworkBridgeMapOutputWithContext(context.Context) NetworkBridgeMapOutput
}

type NetworkBridgeMap map[string]NetworkBridgeInput

func (NetworkBridgeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkBridge)(nil)).Elem()
}

func (i NetworkBridgeMap) ToNetworkBridgeMapOutput() NetworkBridgeMapOutput {
	return i.ToNetworkBridgeMapOutputWithContext(context.Background())
}

func (i NetworkBridgeMap) ToNetworkBridgeMapOutputWithContext(ctx context.Context) NetworkBridgeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkBridgeMapOutput)
}

type NetworkBridgeOutput struct{ *pulumi.OutputState }

func (NetworkBridgeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkBridge)(nil)).Elem()
}

func (o NetworkBridgeOutput) ToNetworkBridgeOutput() NetworkBridgeOutput {
	return o
}

func (o NetworkBridgeOutput) ToNetworkBridgeOutputWithContext(ctx context.Context) NetworkBridgeOutput {
	return o
}

// The interface IPv4/CIDR address.
func (o NetworkBridgeOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkBridge) pulumi.StringPtrOutput { return v.Address }).(pulumi.StringPtrOutput)
}

// The interface IPv6/CIDR address.
func (o NetworkBridgeOutput) Address6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkBridge) pulumi.StringPtrOutput { return v.Address6 }).(pulumi.StringPtrOutput)
}

// Automatically start interface on boot (defaults to `true`).
func (o NetworkBridgeOutput) Autostart() pulumi.BoolOutput {
	return o.ApplyT(func(v *NetworkBridge) pulumi.BoolOutput { return v.Autostart }).(pulumi.BoolOutput)
}

// Comment for the interface.
func (o NetworkBridgeOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkBridge) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Default gateway address.
func (o NetworkBridgeOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkBridge) pulumi.StringPtrOutput { return v.Gateway }).(pulumi.StringPtrOutput)
}

// Default IPv6 gateway address.
func (o NetworkBridgeOutput) Gateway6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkBridge) pulumi.StringPtrOutput { return v.Gateway6 }).(pulumi.StringPtrOutput)
}

// The interface MTU.
func (o NetworkBridgeOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkBridge) pulumi.IntPtrOutput { return v.Mtu }).(pulumi.IntPtrOutput)
}

// The interface name. Must be `vmbrN`, where N is a number between 0 and 9999.
func (o NetworkBridgeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkBridge) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the node.
func (o NetworkBridgeOutput) NodeName() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkBridge) pulumi.StringOutput { return v.NodeName }).(pulumi.StringOutput)
}

// The interface bridge ports.
func (o NetworkBridgeOutput) Ports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkBridge) pulumi.StringArrayOutput { return v.Ports }).(pulumi.StringArrayOutput)
}

// Whether the interface bridge is VLAN aware (defaults to `false`).
func (o NetworkBridgeOutput) VlanAware() pulumi.BoolOutput {
	return o.ApplyT(func(v *NetworkBridge) pulumi.BoolOutput { return v.VlanAware }).(pulumi.BoolOutput)
}

type NetworkBridgeArrayOutput struct{ *pulumi.OutputState }

func (NetworkBridgeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkBridge)(nil)).Elem()
}

func (o NetworkBridgeArrayOutput) ToNetworkBridgeArrayOutput() NetworkBridgeArrayOutput {
	return o
}

func (o NetworkBridgeArrayOutput) ToNetworkBridgeArrayOutputWithContext(ctx context.Context) NetworkBridgeArrayOutput {
	return o
}

func (o NetworkBridgeArrayOutput) Index(i pulumi.IntInput) NetworkBridgeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkBridge {
		return vs[0].([]*NetworkBridge)[vs[1].(int)]
	}).(NetworkBridgeOutput)
}

type NetworkBridgeMapOutput struct{ *pulumi.OutputState }

func (NetworkBridgeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkBridge)(nil)).Elem()
}

func (o NetworkBridgeMapOutput) ToNetworkBridgeMapOutput() NetworkBridgeMapOutput {
	return o
}

func (o NetworkBridgeMapOutput) ToNetworkBridgeMapOutputWithContext(ctx context.Context) NetworkBridgeMapOutput {
	return o
}

func (o NetworkBridgeMapOutput) MapIndex(k pulumi.StringInput) NetworkBridgeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkBridge {
		return vs[0].(map[string]*NetworkBridge)[vs[1].(string)]
	}).(NetworkBridgeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkBridgeInput)(nil)).Elem(), &NetworkBridge{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkBridgeArrayInput)(nil)).Elem(), NetworkBridgeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkBridgeMapInput)(nil)).Elem(), NetworkBridgeMap{})
	pulumi.RegisterOutputType(NetworkBridgeOutput{})
	pulumi.RegisterOutputType(NetworkBridgeArrayOutput{})
	pulumi.RegisterOutputType(NetworkBridgeMapOutput{})
}

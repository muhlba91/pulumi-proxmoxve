// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"github.com/muhlba91/pulumi-proxmoxve/sdk/v5/go/proxmoxve/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type Firewall struct {
	pulumi.CustomResourceState

	// Enable ebtables cluster-wide
	Ebtables pulumi.BoolPtrOutput `pulumi:"ebtables"`
	// Enable or disable the firewall cluster-wide
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Default policy for incoming traffic
	InputPolicy pulumi.StringPtrOutput `pulumi:"inputPolicy"`
	// Log ratelimiting settings
	LogRatelimit FirewallLogRatelimitPtrOutput `pulumi:"logRatelimit"`
	// Default policy for outgoing traffic
	OutputPolicy pulumi.StringPtrOutput `pulumi:"outputPolicy"`
}

// NewFirewall registers a new resource with the given unique name, arguments, and options.
func NewFirewall(ctx *pulumi.Context,
	name string, args *FirewallArgs, opts ...pulumi.ResourceOption) (*Firewall, error) {
	if args == nil {
		args = &FirewallArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Firewall
	err := ctx.RegisterResource("proxmoxve:Network/firewall:Firewall", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewall gets an existing Firewall resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewall(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallState, opts ...pulumi.ResourceOption) (*Firewall, error) {
	var resource Firewall
	err := ctx.ReadResource("proxmoxve:Network/firewall:Firewall", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Firewall resources.
type firewallState struct {
	// Enable ebtables cluster-wide
	Ebtables *bool `pulumi:"ebtables"`
	// Enable or disable the firewall cluster-wide
	Enabled *bool `pulumi:"enabled"`
	// Default policy for incoming traffic
	InputPolicy *string `pulumi:"inputPolicy"`
	// Log ratelimiting settings
	LogRatelimit *FirewallLogRatelimit `pulumi:"logRatelimit"`
	// Default policy for outgoing traffic
	OutputPolicy *string `pulumi:"outputPolicy"`
}

type FirewallState struct {
	// Enable ebtables cluster-wide
	Ebtables pulumi.BoolPtrInput
	// Enable or disable the firewall cluster-wide
	Enabled pulumi.BoolPtrInput
	// Default policy for incoming traffic
	InputPolicy pulumi.StringPtrInput
	// Log ratelimiting settings
	LogRatelimit FirewallLogRatelimitPtrInput
	// Default policy for outgoing traffic
	OutputPolicy pulumi.StringPtrInput
}

func (FirewallState) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallState)(nil)).Elem()
}

type firewallArgs struct {
	// Enable ebtables cluster-wide
	Ebtables *bool `pulumi:"ebtables"`
	// Enable or disable the firewall cluster-wide
	Enabled *bool `pulumi:"enabled"`
	// Default policy for incoming traffic
	InputPolicy *string `pulumi:"inputPolicy"`
	// Log ratelimiting settings
	LogRatelimit *FirewallLogRatelimit `pulumi:"logRatelimit"`
	// Default policy for outgoing traffic
	OutputPolicy *string `pulumi:"outputPolicy"`
}

// The set of arguments for constructing a Firewall resource.
type FirewallArgs struct {
	// Enable ebtables cluster-wide
	Ebtables pulumi.BoolPtrInput
	// Enable or disable the firewall cluster-wide
	Enabled pulumi.BoolPtrInput
	// Default policy for incoming traffic
	InputPolicy pulumi.StringPtrInput
	// Log ratelimiting settings
	LogRatelimit FirewallLogRatelimitPtrInput
	// Default policy for outgoing traffic
	OutputPolicy pulumi.StringPtrInput
}

func (FirewallArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallArgs)(nil)).Elem()
}

type FirewallInput interface {
	pulumi.Input

	ToFirewallOutput() FirewallOutput
	ToFirewallOutputWithContext(ctx context.Context) FirewallOutput
}

func (*Firewall) ElementType() reflect.Type {
	return reflect.TypeOf((**Firewall)(nil)).Elem()
}

func (i *Firewall) ToFirewallOutput() FirewallOutput {
	return i.ToFirewallOutputWithContext(context.Background())
}

func (i *Firewall) ToFirewallOutputWithContext(ctx context.Context) FirewallOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallOutput)
}

func (i *Firewall) ToOutput(ctx context.Context) pulumix.Output[*Firewall] {
	return pulumix.Output[*Firewall]{
		OutputState: i.ToFirewallOutputWithContext(ctx).OutputState,
	}
}

// FirewallArrayInput is an input type that accepts FirewallArray and FirewallArrayOutput values.
// You can construct a concrete instance of `FirewallArrayInput` via:
//
//	FirewallArray{ FirewallArgs{...} }
type FirewallArrayInput interface {
	pulumi.Input

	ToFirewallArrayOutput() FirewallArrayOutput
	ToFirewallArrayOutputWithContext(context.Context) FirewallArrayOutput
}

type FirewallArray []FirewallInput

func (FirewallArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Firewall)(nil)).Elem()
}

func (i FirewallArray) ToFirewallArrayOutput() FirewallArrayOutput {
	return i.ToFirewallArrayOutputWithContext(context.Background())
}

func (i FirewallArray) ToFirewallArrayOutputWithContext(ctx context.Context) FirewallArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallArrayOutput)
}

func (i FirewallArray) ToOutput(ctx context.Context) pulumix.Output[[]*Firewall] {
	return pulumix.Output[[]*Firewall]{
		OutputState: i.ToFirewallArrayOutputWithContext(ctx).OutputState,
	}
}

// FirewallMapInput is an input type that accepts FirewallMap and FirewallMapOutput values.
// You can construct a concrete instance of `FirewallMapInput` via:
//
//	FirewallMap{ "key": FirewallArgs{...} }
type FirewallMapInput interface {
	pulumi.Input

	ToFirewallMapOutput() FirewallMapOutput
	ToFirewallMapOutputWithContext(context.Context) FirewallMapOutput
}

type FirewallMap map[string]FirewallInput

func (FirewallMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Firewall)(nil)).Elem()
}

func (i FirewallMap) ToFirewallMapOutput() FirewallMapOutput {
	return i.ToFirewallMapOutputWithContext(context.Background())
}

func (i FirewallMap) ToFirewallMapOutputWithContext(ctx context.Context) FirewallMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallMapOutput)
}

func (i FirewallMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Firewall] {
	return pulumix.Output[map[string]*Firewall]{
		OutputState: i.ToFirewallMapOutputWithContext(ctx).OutputState,
	}
}

type FirewallOutput struct{ *pulumi.OutputState }

func (FirewallOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Firewall)(nil)).Elem()
}

func (o FirewallOutput) ToFirewallOutput() FirewallOutput {
	return o
}

func (o FirewallOutput) ToFirewallOutputWithContext(ctx context.Context) FirewallOutput {
	return o
}

func (o FirewallOutput) ToOutput(ctx context.Context) pulumix.Output[*Firewall] {
	return pulumix.Output[*Firewall]{
		OutputState: o.OutputState,
	}
}

// Enable ebtables cluster-wide
func (o FirewallOutput) Ebtables() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Firewall) pulumi.BoolPtrOutput { return v.Ebtables }).(pulumi.BoolPtrOutput)
}

// Enable or disable the firewall cluster-wide
func (o FirewallOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Firewall) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Default policy for incoming traffic
func (o FirewallOutput) InputPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Firewall) pulumi.StringPtrOutput { return v.InputPolicy }).(pulumi.StringPtrOutput)
}

// Log ratelimiting settings
func (o FirewallOutput) LogRatelimit() FirewallLogRatelimitPtrOutput {
	return o.ApplyT(func(v *Firewall) FirewallLogRatelimitPtrOutput { return v.LogRatelimit }).(FirewallLogRatelimitPtrOutput)
}

// Default policy for outgoing traffic
func (o FirewallOutput) OutputPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Firewall) pulumi.StringPtrOutput { return v.OutputPolicy }).(pulumi.StringPtrOutput)
}

type FirewallArrayOutput struct{ *pulumi.OutputState }

func (FirewallArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Firewall)(nil)).Elem()
}

func (o FirewallArrayOutput) ToFirewallArrayOutput() FirewallArrayOutput {
	return o
}

func (o FirewallArrayOutput) ToFirewallArrayOutputWithContext(ctx context.Context) FirewallArrayOutput {
	return o
}

func (o FirewallArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Firewall] {
	return pulumix.Output[[]*Firewall]{
		OutputState: o.OutputState,
	}
}

func (o FirewallArrayOutput) Index(i pulumi.IntInput) FirewallOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Firewall {
		return vs[0].([]*Firewall)[vs[1].(int)]
	}).(FirewallOutput)
}

type FirewallMapOutput struct{ *pulumi.OutputState }

func (FirewallMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Firewall)(nil)).Elem()
}

func (o FirewallMapOutput) ToFirewallMapOutput() FirewallMapOutput {
	return o
}

func (o FirewallMapOutput) ToFirewallMapOutputWithContext(ctx context.Context) FirewallMapOutput {
	return o
}

func (o FirewallMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Firewall] {
	return pulumix.Output[map[string]*Firewall]{
		OutputState: o.OutputState,
	}
}

func (o FirewallMapOutput) MapIndex(k pulumi.StringInput) FirewallOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Firewall {
		return vs[0].(map[string]*Firewall)[vs[1].(string)]
	}).(FirewallOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallInput)(nil)).Elem(), &Firewall{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallArrayInput)(nil)).Elem(), FirewallArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallMapInput)(nil)).Elem(), FirewallMap{})
	pulumi.RegisterOutputType(FirewallOutput{})
	pulumi.RegisterOutputType(FirewallArrayOutput{})
	pulumi.RegisterOutputType(FirewallMapOutput{})
}

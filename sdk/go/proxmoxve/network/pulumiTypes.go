// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"github.com/muhlba91/pulumi-proxmoxve/sdk/v5/go/proxmoxve/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type FirewallIPSetCidr struct {
	// Arbitrary string annotation.
	Comment *string `pulumi:"comment"`
	// Network/IP specification in CIDR format.
	Name string `pulumi:"name"`
	// Entries marked as `nomatch` are skipped as if those
	// were not added to the set.
	Nomatch *bool `pulumi:"nomatch"`
}

// FirewallIPSetCidrInput is an input type that accepts FirewallIPSetCidrArgs and FirewallIPSetCidrOutput values.
// You can construct a concrete instance of `FirewallIPSetCidrInput` via:
//
//	FirewallIPSetCidrArgs{...}
type FirewallIPSetCidrInput interface {
	pulumi.Input

	ToFirewallIPSetCidrOutput() FirewallIPSetCidrOutput
	ToFirewallIPSetCidrOutputWithContext(context.Context) FirewallIPSetCidrOutput
}

type FirewallIPSetCidrArgs struct {
	// Arbitrary string annotation.
	Comment pulumi.StringPtrInput `pulumi:"comment"`
	// Network/IP specification in CIDR format.
	Name pulumi.StringInput `pulumi:"name"`
	// Entries marked as `nomatch` are skipped as if those
	// were not added to the set.
	Nomatch pulumi.BoolPtrInput `pulumi:"nomatch"`
}

func (FirewallIPSetCidrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallIPSetCidr)(nil)).Elem()
}

func (i FirewallIPSetCidrArgs) ToFirewallIPSetCidrOutput() FirewallIPSetCidrOutput {
	return i.ToFirewallIPSetCidrOutputWithContext(context.Background())
}

func (i FirewallIPSetCidrArgs) ToFirewallIPSetCidrOutputWithContext(ctx context.Context) FirewallIPSetCidrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallIPSetCidrOutput)
}

// FirewallIPSetCidrArrayInput is an input type that accepts FirewallIPSetCidrArray and FirewallIPSetCidrArrayOutput values.
// You can construct a concrete instance of `FirewallIPSetCidrArrayInput` via:
//
//	FirewallIPSetCidrArray{ FirewallIPSetCidrArgs{...} }
type FirewallIPSetCidrArrayInput interface {
	pulumi.Input

	ToFirewallIPSetCidrArrayOutput() FirewallIPSetCidrArrayOutput
	ToFirewallIPSetCidrArrayOutputWithContext(context.Context) FirewallIPSetCidrArrayOutput
}

type FirewallIPSetCidrArray []FirewallIPSetCidrInput

func (FirewallIPSetCidrArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallIPSetCidr)(nil)).Elem()
}

func (i FirewallIPSetCidrArray) ToFirewallIPSetCidrArrayOutput() FirewallIPSetCidrArrayOutput {
	return i.ToFirewallIPSetCidrArrayOutputWithContext(context.Background())
}

func (i FirewallIPSetCidrArray) ToFirewallIPSetCidrArrayOutputWithContext(ctx context.Context) FirewallIPSetCidrArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallIPSetCidrArrayOutput)
}

type FirewallIPSetCidrOutput struct{ *pulumi.OutputState }

func (FirewallIPSetCidrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallIPSetCidr)(nil)).Elem()
}

func (o FirewallIPSetCidrOutput) ToFirewallIPSetCidrOutput() FirewallIPSetCidrOutput {
	return o
}

func (o FirewallIPSetCidrOutput) ToFirewallIPSetCidrOutputWithContext(ctx context.Context) FirewallIPSetCidrOutput {
	return o
}

// Arbitrary string annotation.
func (o FirewallIPSetCidrOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallIPSetCidr) *string { return v.Comment }).(pulumi.StringPtrOutput)
}

// Network/IP specification in CIDR format.
func (o FirewallIPSetCidrOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallIPSetCidr) string { return v.Name }).(pulumi.StringOutput)
}

// Entries marked as `nomatch` are skipped as if those
// were not added to the set.
func (o FirewallIPSetCidrOutput) Nomatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FirewallIPSetCidr) *bool { return v.Nomatch }).(pulumi.BoolPtrOutput)
}

type FirewallIPSetCidrArrayOutput struct{ *pulumi.OutputState }

func (FirewallIPSetCidrArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallIPSetCidr)(nil)).Elem()
}

func (o FirewallIPSetCidrArrayOutput) ToFirewallIPSetCidrArrayOutput() FirewallIPSetCidrArrayOutput {
	return o
}

func (o FirewallIPSetCidrArrayOutput) ToFirewallIPSetCidrArrayOutputWithContext(ctx context.Context) FirewallIPSetCidrArrayOutput {
	return o
}

func (o FirewallIPSetCidrArrayOutput) Index(i pulumi.IntInput) FirewallIPSetCidrOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallIPSetCidr {
		return vs[0].([]FirewallIPSetCidr)[vs[1].(int)]
	}).(FirewallIPSetCidrOutput)
}

type FirewallLogRatelimit struct {
	// Initial burst of packages which will always get
	// logged before the rate is applied (defaults to `5`).
	Burst *int `pulumi:"burst"`
	// Enable or disable the log rate limit.
	Enabled *bool `pulumi:"enabled"`
	// Frequency with which the burst bucket gets refilled
	// (defaults to `1/second`).
	Rate *string `pulumi:"rate"`
}

// FirewallLogRatelimitInput is an input type that accepts FirewallLogRatelimitArgs and FirewallLogRatelimitOutput values.
// You can construct a concrete instance of `FirewallLogRatelimitInput` via:
//
//	FirewallLogRatelimitArgs{...}
type FirewallLogRatelimitInput interface {
	pulumi.Input

	ToFirewallLogRatelimitOutput() FirewallLogRatelimitOutput
	ToFirewallLogRatelimitOutputWithContext(context.Context) FirewallLogRatelimitOutput
}

type FirewallLogRatelimitArgs struct {
	// Initial burst of packages which will always get
	// logged before the rate is applied (defaults to `5`).
	Burst pulumi.IntPtrInput `pulumi:"burst"`
	// Enable or disable the log rate limit.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Frequency with which the burst bucket gets refilled
	// (defaults to `1/second`).
	Rate pulumi.StringPtrInput `pulumi:"rate"`
}

func (FirewallLogRatelimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallLogRatelimit)(nil)).Elem()
}

func (i FirewallLogRatelimitArgs) ToFirewallLogRatelimitOutput() FirewallLogRatelimitOutput {
	return i.ToFirewallLogRatelimitOutputWithContext(context.Background())
}

func (i FirewallLogRatelimitArgs) ToFirewallLogRatelimitOutputWithContext(ctx context.Context) FirewallLogRatelimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallLogRatelimitOutput)
}

func (i FirewallLogRatelimitArgs) ToFirewallLogRatelimitPtrOutput() FirewallLogRatelimitPtrOutput {
	return i.ToFirewallLogRatelimitPtrOutputWithContext(context.Background())
}

func (i FirewallLogRatelimitArgs) ToFirewallLogRatelimitPtrOutputWithContext(ctx context.Context) FirewallLogRatelimitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallLogRatelimitOutput).ToFirewallLogRatelimitPtrOutputWithContext(ctx)
}

// FirewallLogRatelimitPtrInput is an input type that accepts FirewallLogRatelimitArgs, FirewallLogRatelimitPtr and FirewallLogRatelimitPtrOutput values.
// You can construct a concrete instance of `FirewallLogRatelimitPtrInput` via:
//
//	        FirewallLogRatelimitArgs{...}
//
//	or:
//
//	        nil
type FirewallLogRatelimitPtrInput interface {
	pulumi.Input

	ToFirewallLogRatelimitPtrOutput() FirewallLogRatelimitPtrOutput
	ToFirewallLogRatelimitPtrOutputWithContext(context.Context) FirewallLogRatelimitPtrOutput
}

type firewallLogRatelimitPtrType FirewallLogRatelimitArgs

func FirewallLogRatelimitPtr(v *FirewallLogRatelimitArgs) FirewallLogRatelimitPtrInput {
	return (*firewallLogRatelimitPtrType)(v)
}

func (*firewallLogRatelimitPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallLogRatelimit)(nil)).Elem()
}

func (i *firewallLogRatelimitPtrType) ToFirewallLogRatelimitPtrOutput() FirewallLogRatelimitPtrOutput {
	return i.ToFirewallLogRatelimitPtrOutputWithContext(context.Background())
}

func (i *firewallLogRatelimitPtrType) ToFirewallLogRatelimitPtrOutputWithContext(ctx context.Context) FirewallLogRatelimitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallLogRatelimitPtrOutput)
}

type FirewallLogRatelimitOutput struct{ *pulumi.OutputState }

func (FirewallLogRatelimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallLogRatelimit)(nil)).Elem()
}

func (o FirewallLogRatelimitOutput) ToFirewallLogRatelimitOutput() FirewallLogRatelimitOutput {
	return o
}

func (o FirewallLogRatelimitOutput) ToFirewallLogRatelimitOutputWithContext(ctx context.Context) FirewallLogRatelimitOutput {
	return o
}

func (o FirewallLogRatelimitOutput) ToFirewallLogRatelimitPtrOutput() FirewallLogRatelimitPtrOutput {
	return o.ToFirewallLogRatelimitPtrOutputWithContext(context.Background())
}

func (o FirewallLogRatelimitOutput) ToFirewallLogRatelimitPtrOutputWithContext(ctx context.Context) FirewallLogRatelimitPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FirewallLogRatelimit) *FirewallLogRatelimit {
		return &v
	}).(FirewallLogRatelimitPtrOutput)
}

// Initial burst of packages which will always get
// logged before the rate is applied (defaults to `5`).
func (o FirewallLogRatelimitOutput) Burst() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FirewallLogRatelimit) *int { return v.Burst }).(pulumi.IntPtrOutput)
}

// Enable or disable the log rate limit.
func (o FirewallLogRatelimitOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FirewallLogRatelimit) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Frequency with which the burst bucket gets refilled
// (defaults to `1/second`).
func (o FirewallLogRatelimitOutput) Rate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallLogRatelimit) *string { return v.Rate }).(pulumi.StringPtrOutput)
}

type FirewallLogRatelimitPtrOutput struct{ *pulumi.OutputState }

func (FirewallLogRatelimitPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallLogRatelimit)(nil)).Elem()
}

func (o FirewallLogRatelimitPtrOutput) ToFirewallLogRatelimitPtrOutput() FirewallLogRatelimitPtrOutput {
	return o
}

func (o FirewallLogRatelimitPtrOutput) ToFirewallLogRatelimitPtrOutputWithContext(ctx context.Context) FirewallLogRatelimitPtrOutput {
	return o
}

func (o FirewallLogRatelimitPtrOutput) Elem() FirewallLogRatelimitOutput {
	return o.ApplyT(func(v *FirewallLogRatelimit) FirewallLogRatelimit {
		if v != nil {
			return *v
		}
		var ret FirewallLogRatelimit
		return ret
	}).(FirewallLogRatelimitOutput)
}

// Initial burst of packages which will always get
// logged before the rate is applied (defaults to `5`).
func (o FirewallLogRatelimitPtrOutput) Burst() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FirewallLogRatelimit) *int {
		if v == nil {
			return nil
		}
		return v.Burst
	}).(pulumi.IntPtrOutput)
}

// Enable or disable the log rate limit.
func (o FirewallLogRatelimitPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FirewallLogRatelimit) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Frequency with which the burst bucket gets refilled
// (defaults to `1/second`).
func (o FirewallLogRatelimitPtrOutput) Rate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallLogRatelimit) *string {
		if v == nil {
			return nil
		}
		return v.Rate
	}).(pulumi.StringPtrOutput)
}

type FirewallRulesRule struct {
	// Rule action (`ACCEPT`, `DROP`, `REJECT`).
	Action *string `pulumi:"action"`
	// Rule comment.
	Comment *string `pulumi:"comment"`
	// Restrict packet destination address. This can
	// refer to a single IP address, an IP set ('+ipsetname') or an IP
	// alias definition. You can also specify an address range
	// like `20.34.101.207-201.3.9.99`, or a list of IP addresses and
	// networks (entries are separated by comma). Please do not mix IPv4
	// and IPv6 addresses inside such lists.
	Dest *string `pulumi:"dest"`
	// Restrict TCP/UDP destination port. You can use
	// service names or simple numbers (0-65535), as defined
	// in `/etc/services`. Port ranges can be specified with '\d+:\d+', for
	// example `80:85`, and you can use comma separated list to match
	// several ports or ranges.
	Dport *string `pulumi:"dport"`
	// Enable this rule. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Network interface name. You have to use network
	// configuration key names for VMs and containers ('net\d+'). Host
	// related rules can use arbitrary strings.
	Iface *string `pulumi:"iface"`
	// Log level for this rule (`emerg`, `alert`, `crit`,
	// `err`, `warning`, `notice`, `info`, `debug`, `nolog`).
	Log *string `pulumi:"log"`
	// Macro name. Use predefined standard macro
	// from <https://pve.proxmox.com/pve-docs/pve-admin-guide.html#_firewall_macro_definitions>
	Macro *string `pulumi:"macro"`
	// Position of the rule in the list.
	Pos *int `pulumi:"pos"`
	// Restrict packet protocol. You can use protocol
	// names as defined in '/etc/protocols'.
	Proto *string `pulumi:"proto"`
	// Security group name.
	SecurityGroup *string `pulumi:"securityGroup"`
	// Restrict packet source address. This can refer
	// to a single IP address, an IP set ('+ipsetname') or an IP alias
	// definition. You can also specify an address range
	// like `20.34.101.207-201.3.9.99`, or a list of IP addresses and
	// networks (entries are separated by comma). Please do not mix IPv4
	// and IPv6 addresses inside such lists.
	Source *string `pulumi:"source"`
	// Restrict TCP/UDP source port. You can use
	// service names or simple numbers (0-65535), as defined
	// in `/etc/services`. Port ranges can be specified with '\d+:\d+', for
	// example `80:85`, and you can use comma separated list to match
	// several ports or ranges.
	// - a security group insertion block, which includes the following arguments:
	Sport *string `pulumi:"sport"`
	// Rule type (`in`, `out`).
	Type *string `pulumi:"type"`
}

// FirewallRulesRuleInput is an input type that accepts FirewallRulesRuleArgs and FirewallRulesRuleOutput values.
// You can construct a concrete instance of `FirewallRulesRuleInput` via:
//
//	FirewallRulesRuleArgs{...}
type FirewallRulesRuleInput interface {
	pulumi.Input

	ToFirewallRulesRuleOutput() FirewallRulesRuleOutput
	ToFirewallRulesRuleOutputWithContext(context.Context) FirewallRulesRuleOutput
}

type FirewallRulesRuleArgs struct {
	// Rule action (`ACCEPT`, `DROP`, `REJECT`).
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Rule comment.
	Comment pulumi.StringPtrInput `pulumi:"comment"`
	// Restrict packet destination address. This can
	// refer to a single IP address, an IP set ('+ipsetname') or an IP
	// alias definition. You can also specify an address range
	// like `20.34.101.207-201.3.9.99`, or a list of IP addresses and
	// networks (entries are separated by comma). Please do not mix IPv4
	// and IPv6 addresses inside such lists.
	Dest pulumi.StringPtrInput `pulumi:"dest"`
	// Restrict TCP/UDP destination port. You can use
	// service names or simple numbers (0-65535), as defined
	// in `/etc/services`. Port ranges can be specified with '\d+:\d+', for
	// example `80:85`, and you can use comma separated list to match
	// several ports or ranges.
	Dport pulumi.StringPtrInput `pulumi:"dport"`
	// Enable this rule. Defaults to `true`.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Network interface name. You have to use network
	// configuration key names for VMs and containers ('net\d+'). Host
	// related rules can use arbitrary strings.
	Iface pulumi.StringPtrInput `pulumi:"iface"`
	// Log level for this rule (`emerg`, `alert`, `crit`,
	// `err`, `warning`, `notice`, `info`, `debug`, `nolog`).
	Log pulumi.StringPtrInput `pulumi:"log"`
	// Macro name. Use predefined standard macro
	// from <https://pve.proxmox.com/pve-docs/pve-admin-guide.html#_firewall_macro_definitions>
	Macro pulumi.StringPtrInput `pulumi:"macro"`
	// Position of the rule in the list.
	Pos pulumi.IntPtrInput `pulumi:"pos"`
	// Restrict packet protocol. You can use protocol
	// names as defined in '/etc/protocols'.
	Proto pulumi.StringPtrInput `pulumi:"proto"`
	// Security group name.
	SecurityGroup pulumi.StringPtrInput `pulumi:"securityGroup"`
	// Restrict packet source address. This can refer
	// to a single IP address, an IP set ('+ipsetname') or an IP alias
	// definition. You can also specify an address range
	// like `20.34.101.207-201.3.9.99`, or a list of IP addresses and
	// networks (entries are separated by comma). Please do not mix IPv4
	// and IPv6 addresses inside such lists.
	Source pulumi.StringPtrInput `pulumi:"source"`
	// Restrict TCP/UDP source port. You can use
	// service names or simple numbers (0-65535), as defined
	// in `/etc/services`. Port ranges can be specified with '\d+:\d+', for
	// example `80:85`, and you can use comma separated list to match
	// several ports or ranges.
	// - a security group insertion block, which includes the following arguments:
	Sport pulumi.StringPtrInput `pulumi:"sport"`
	// Rule type (`in`, `out`).
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (FirewallRulesRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallRulesRule)(nil)).Elem()
}

func (i FirewallRulesRuleArgs) ToFirewallRulesRuleOutput() FirewallRulesRuleOutput {
	return i.ToFirewallRulesRuleOutputWithContext(context.Background())
}

func (i FirewallRulesRuleArgs) ToFirewallRulesRuleOutputWithContext(ctx context.Context) FirewallRulesRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallRulesRuleOutput)
}

// FirewallRulesRuleArrayInput is an input type that accepts FirewallRulesRuleArray and FirewallRulesRuleArrayOutput values.
// You can construct a concrete instance of `FirewallRulesRuleArrayInput` via:
//
//	FirewallRulesRuleArray{ FirewallRulesRuleArgs{...} }
type FirewallRulesRuleArrayInput interface {
	pulumi.Input

	ToFirewallRulesRuleArrayOutput() FirewallRulesRuleArrayOutput
	ToFirewallRulesRuleArrayOutputWithContext(context.Context) FirewallRulesRuleArrayOutput
}

type FirewallRulesRuleArray []FirewallRulesRuleInput

func (FirewallRulesRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallRulesRule)(nil)).Elem()
}

func (i FirewallRulesRuleArray) ToFirewallRulesRuleArrayOutput() FirewallRulesRuleArrayOutput {
	return i.ToFirewallRulesRuleArrayOutputWithContext(context.Background())
}

func (i FirewallRulesRuleArray) ToFirewallRulesRuleArrayOutputWithContext(ctx context.Context) FirewallRulesRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallRulesRuleArrayOutput)
}

type FirewallRulesRuleOutput struct{ *pulumi.OutputState }

func (FirewallRulesRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallRulesRule)(nil)).Elem()
}

func (o FirewallRulesRuleOutput) ToFirewallRulesRuleOutput() FirewallRulesRuleOutput {
	return o
}

func (o FirewallRulesRuleOutput) ToFirewallRulesRuleOutputWithContext(ctx context.Context) FirewallRulesRuleOutput {
	return o
}

// Rule action (`ACCEPT`, `DROP`, `REJECT`).
func (o FirewallRulesRuleOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallRulesRule) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Rule comment.
func (o FirewallRulesRuleOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallRulesRule) *string { return v.Comment }).(pulumi.StringPtrOutput)
}

// Restrict packet destination address. This can
// refer to a single IP address, an IP set ('+ipsetname') or an IP
// alias definition. You can also specify an address range
// like `20.34.101.207-201.3.9.99`, or a list of IP addresses and
// networks (entries are separated by comma). Please do not mix IPv4
// and IPv6 addresses inside such lists.
func (o FirewallRulesRuleOutput) Dest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallRulesRule) *string { return v.Dest }).(pulumi.StringPtrOutput)
}

// Restrict TCP/UDP destination port. You can use
// service names or simple numbers (0-65535), as defined
// in `/etc/services`. Port ranges can be specified with '\d+:\d+', for
// example `80:85`, and you can use comma separated list to match
// several ports or ranges.
func (o FirewallRulesRuleOutput) Dport() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallRulesRule) *string { return v.Dport }).(pulumi.StringPtrOutput)
}

// Enable this rule. Defaults to `true`.
func (o FirewallRulesRuleOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FirewallRulesRule) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Network interface name. You have to use network
// configuration key names for VMs and containers ('net\d+'). Host
// related rules can use arbitrary strings.
func (o FirewallRulesRuleOutput) Iface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallRulesRule) *string { return v.Iface }).(pulumi.StringPtrOutput)
}

// Log level for this rule (`emerg`, `alert`, `crit`,
// `err`, `warning`, `notice`, `info`, `debug`, `nolog`).
func (o FirewallRulesRuleOutput) Log() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallRulesRule) *string { return v.Log }).(pulumi.StringPtrOutput)
}

// Macro name. Use predefined standard macro
// from <https://pve.proxmox.com/pve-docs/pve-admin-guide.html#_firewall_macro_definitions>
func (o FirewallRulesRuleOutput) Macro() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallRulesRule) *string { return v.Macro }).(pulumi.StringPtrOutput)
}

// Position of the rule in the list.
func (o FirewallRulesRuleOutput) Pos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FirewallRulesRule) *int { return v.Pos }).(pulumi.IntPtrOutput)
}

// Restrict packet protocol. You can use protocol
// names as defined in '/etc/protocols'.
func (o FirewallRulesRuleOutput) Proto() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallRulesRule) *string { return v.Proto }).(pulumi.StringPtrOutput)
}

// Security group name.
func (o FirewallRulesRuleOutput) SecurityGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallRulesRule) *string { return v.SecurityGroup }).(pulumi.StringPtrOutput)
}

// Restrict packet source address. This can refer
// to a single IP address, an IP set ('+ipsetname') or an IP alias
// definition. You can also specify an address range
// like `20.34.101.207-201.3.9.99`, or a list of IP addresses and
// networks (entries are separated by comma). Please do not mix IPv4
// and IPv6 addresses inside such lists.
func (o FirewallRulesRuleOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallRulesRule) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// Restrict TCP/UDP source port. You can use
// service names or simple numbers (0-65535), as defined
// in `/etc/services`. Port ranges can be specified with '\d+:\d+', for
// example `80:85`, and you can use comma separated list to match
// several ports or ranges.
// - a security group insertion block, which includes the following arguments:
func (o FirewallRulesRuleOutput) Sport() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallRulesRule) *string { return v.Sport }).(pulumi.StringPtrOutput)
}

// Rule type (`in`, `out`).
func (o FirewallRulesRuleOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallRulesRule) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type FirewallRulesRuleArrayOutput struct{ *pulumi.OutputState }

func (FirewallRulesRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallRulesRule)(nil)).Elem()
}

func (o FirewallRulesRuleArrayOutput) ToFirewallRulesRuleArrayOutput() FirewallRulesRuleArrayOutput {
	return o
}

func (o FirewallRulesRuleArrayOutput) ToFirewallRulesRuleArrayOutputWithContext(ctx context.Context) FirewallRulesRuleArrayOutput {
	return o
}

func (o FirewallRulesRuleArrayOutput) Index(i pulumi.IntInput) FirewallRulesRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallRulesRule {
		return vs[0].([]FirewallRulesRule)[vs[1].(int)]
	}).(FirewallRulesRuleOutput)
}

type FirewallSecurityGroupRule struct {
	// Rule action (`ACCEPT`, `DROP`, `REJECT`).
	Action *string `pulumi:"action"`
	// Rule comment.
	Comment *string `pulumi:"comment"`
	// Restrict packet destination address. This can refer to
	// a single IP address, an IP set ('+ipsetname') or an IP alias
	// definition. You can also specify an address range like
	// `20.34.101.207-201.3.9.99`, or a list of IP addresses and networks
	// (entries are separated by comma). Please do not mix IPv4 and IPv6
	// addresses inside such lists.
	Dest *string `pulumi:"dest"`
	// Restrict TCP/UDP destination port. You can use
	// service names or simple numbers (0-65535), as defined in '/etc/
	// services'. Port ranges can be specified with '\d+:\d+', for example
	// `80:85`, and you can use comma separated list to match several ports or
	// ranges.
	Dport *string `pulumi:"dport"`
	// Enable rule
	Enabled *bool `pulumi:"enabled"`
	// Network interface name. You have to use network
	// configuration key names for VMs and containers ('net\d+'). Host related
	// rules can use arbitrary strings.
	Iface *string `pulumi:"iface"`
	// Log level for this rule (`emerg`, `alert`, `crit`,
	// `err`, `warning`, `notice`, `info`, `debug`, `nolog`).
	Log *string `pulumi:"log"`
	// Macro name. Use predefined standard macro
	// from <https://pve.proxmox.com/pve-docs/pve-admin-guide.html#_firewall_macro_definitions>
	Macro *string `pulumi:"macro"`
	// Position of the rule in the list.
	Pos *int `pulumi:"pos"`
	// Restrict packet protocol. You can use protocol names
	// as defined in '/etc/protocols'.
	Proto *string `pulumi:"proto"`
	// Security group name
	SecurityGroup *string `pulumi:"securityGroup"`
	// Restrict packet source address. This can refer
	// to a single IP address, an IP set ('+ipsetname') or an IP alias
	// definition. You can also specify an address range like
	// `20.34.101.207-201.3.9.99`, or a list of IP addresses and networks (
	// entries are separated by comma). Please do not mix IPv4 and IPv6
	// addresses inside such lists.
	Source *string `pulumi:"source"`
	// Restrict TCP/UDP source port. You can use
	// service names or simple numbers (0-65535), as defined in '/etc/
	// services'. Port ranges can be specified with '\d+:\d+', for example
	// `80:85`, and you can use comma separated list to match several ports or
	// ranges.
	Sport *string `pulumi:"sport"`
	// Rule type (`in`, `out`).
	Type *string `pulumi:"type"`
}

// FirewallSecurityGroupRuleInput is an input type that accepts FirewallSecurityGroupRuleArgs and FirewallSecurityGroupRuleOutput values.
// You can construct a concrete instance of `FirewallSecurityGroupRuleInput` via:
//
//	FirewallSecurityGroupRuleArgs{...}
type FirewallSecurityGroupRuleInput interface {
	pulumi.Input

	ToFirewallSecurityGroupRuleOutput() FirewallSecurityGroupRuleOutput
	ToFirewallSecurityGroupRuleOutputWithContext(context.Context) FirewallSecurityGroupRuleOutput
}

type FirewallSecurityGroupRuleArgs struct {
	// Rule action (`ACCEPT`, `DROP`, `REJECT`).
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Rule comment.
	Comment pulumi.StringPtrInput `pulumi:"comment"`
	// Restrict packet destination address. This can refer to
	// a single IP address, an IP set ('+ipsetname') or an IP alias
	// definition. You can also specify an address range like
	// `20.34.101.207-201.3.9.99`, or a list of IP addresses and networks
	// (entries are separated by comma). Please do not mix IPv4 and IPv6
	// addresses inside such lists.
	Dest pulumi.StringPtrInput `pulumi:"dest"`
	// Restrict TCP/UDP destination port. You can use
	// service names or simple numbers (0-65535), as defined in '/etc/
	// services'. Port ranges can be specified with '\d+:\d+', for example
	// `80:85`, and you can use comma separated list to match several ports or
	// ranges.
	Dport pulumi.StringPtrInput `pulumi:"dport"`
	// Enable rule
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Network interface name. You have to use network
	// configuration key names for VMs and containers ('net\d+'). Host related
	// rules can use arbitrary strings.
	Iface pulumi.StringPtrInput `pulumi:"iface"`
	// Log level for this rule (`emerg`, `alert`, `crit`,
	// `err`, `warning`, `notice`, `info`, `debug`, `nolog`).
	Log pulumi.StringPtrInput `pulumi:"log"`
	// Macro name. Use predefined standard macro
	// from <https://pve.proxmox.com/pve-docs/pve-admin-guide.html#_firewall_macro_definitions>
	Macro pulumi.StringPtrInput `pulumi:"macro"`
	// Position of the rule in the list.
	Pos pulumi.IntPtrInput `pulumi:"pos"`
	// Restrict packet protocol. You can use protocol names
	// as defined in '/etc/protocols'.
	Proto pulumi.StringPtrInput `pulumi:"proto"`
	// Security group name
	SecurityGroup pulumi.StringPtrInput `pulumi:"securityGroup"`
	// Restrict packet source address. This can refer
	// to a single IP address, an IP set ('+ipsetname') or an IP alias
	// definition. You can also specify an address range like
	// `20.34.101.207-201.3.9.99`, or a list of IP addresses and networks (
	// entries are separated by comma). Please do not mix IPv4 and IPv6
	// addresses inside such lists.
	Source pulumi.StringPtrInput `pulumi:"source"`
	// Restrict TCP/UDP source port. You can use
	// service names or simple numbers (0-65535), as defined in '/etc/
	// services'. Port ranges can be specified with '\d+:\d+', for example
	// `80:85`, and you can use comma separated list to match several ports or
	// ranges.
	Sport pulumi.StringPtrInput `pulumi:"sport"`
	// Rule type (`in`, `out`).
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (FirewallSecurityGroupRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallSecurityGroupRule)(nil)).Elem()
}

func (i FirewallSecurityGroupRuleArgs) ToFirewallSecurityGroupRuleOutput() FirewallSecurityGroupRuleOutput {
	return i.ToFirewallSecurityGroupRuleOutputWithContext(context.Background())
}

func (i FirewallSecurityGroupRuleArgs) ToFirewallSecurityGroupRuleOutputWithContext(ctx context.Context) FirewallSecurityGroupRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallSecurityGroupRuleOutput)
}

// FirewallSecurityGroupRuleArrayInput is an input type that accepts FirewallSecurityGroupRuleArray and FirewallSecurityGroupRuleArrayOutput values.
// You can construct a concrete instance of `FirewallSecurityGroupRuleArrayInput` via:
//
//	FirewallSecurityGroupRuleArray{ FirewallSecurityGroupRuleArgs{...} }
type FirewallSecurityGroupRuleArrayInput interface {
	pulumi.Input

	ToFirewallSecurityGroupRuleArrayOutput() FirewallSecurityGroupRuleArrayOutput
	ToFirewallSecurityGroupRuleArrayOutputWithContext(context.Context) FirewallSecurityGroupRuleArrayOutput
}

type FirewallSecurityGroupRuleArray []FirewallSecurityGroupRuleInput

func (FirewallSecurityGroupRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallSecurityGroupRule)(nil)).Elem()
}

func (i FirewallSecurityGroupRuleArray) ToFirewallSecurityGroupRuleArrayOutput() FirewallSecurityGroupRuleArrayOutput {
	return i.ToFirewallSecurityGroupRuleArrayOutputWithContext(context.Background())
}

func (i FirewallSecurityGroupRuleArray) ToFirewallSecurityGroupRuleArrayOutputWithContext(ctx context.Context) FirewallSecurityGroupRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallSecurityGroupRuleArrayOutput)
}

type FirewallSecurityGroupRuleOutput struct{ *pulumi.OutputState }

func (FirewallSecurityGroupRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallSecurityGroupRule)(nil)).Elem()
}

func (o FirewallSecurityGroupRuleOutput) ToFirewallSecurityGroupRuleOutput() FirewallSecurityGroupRuleOutput {
	return o
}

func (o FirewallSecurityGroupRuleOutput) ToFirewallSecurityGroupRuleOutputWithContext(ctx context.Context) FirewallSecurityGroupRuleOutput {
	return o
}

// Rule action (`ACCEPT`, `DROP`, `REJECT`).
func (o FirewallSecurityGroupRuleOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallSecurityGroupRule) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Rule comment.
func (o FirewallSecurityGroupRuleOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallSecurityGroupRule) *string { return v.Comment }).(pulumi.StringPtrOutput)
}

// Restrict packet destination address. This can refer to
// a single IP address, an IP set ('+ipsetname') or an IP alias
// definition. You can also specify an address range like
// `20.34.101.207-201.3.9.99`, or a list of IP addresses and networks
// (entries are separated by comma). Please do not mix IPv4 and IPv6
// addresses inside such lists.
func (o FirewallSecurityGroupRuleOutput) Dest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallSecurityGroupRule) *string { return v.Dest }).(pulumi.StringPtrOutput)
}

// Restrict TCP/UDP destination port. You can use
// service names or simple numbers (0-65535), as defined in '/etc/
// services'. Port ranges can be specified with '\d+:\d+', for example
// `80:85`, and you can use comma separated list to match several ports or
// ranges.
func (o FirewallSecurityGroupRuleOutput) Dport() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallSecurityGroupRule) *string { return v.Dport }).(pulumi.StringPtrOutput)
}

// Enable rule
func (o FirewallSecurityGroupRuleOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FirewallSecurityGroupRule) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Network interface name. You have to use network
// configuration key names for VMs and containers ('net\d+'). Host related
// rules can use arbitrary strings.
func (o FirewallSecurityGroupRuleOutput) Iface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallSecurityGroupRule) *string { return v.Iface }).(pulumi.StringPtrOutput)
}

// Log level for this rule (`emerg`, `alert`, `crit`,
// `err`, `warning`, `notice`, `info`, `debug`, `nolog`).
func (o FirewallSecurityGroupRuleOutput) Log() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallSecurityGroupRule) *string { return v.Log }).(pulumi.StringPtrOutput)
}

// Macro name. Use predefined standard macro
// from <https://pve.proxmox.com/pve-docs/pve-admin-guide.html#_firewall_macro_definitions>
func (o FirewallSecurityGroupRuleOutput) Macro() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallSecurityGroupRule) *string { return v.Macro }).(pulumi.StringPtrOutput)
}

// Position of the rule in the list.
func (o FirewallSecurityGroupRuleOutput) Pos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FirewallSecurityGroupRule) *int { return v.Pos }).(pulumi.IntPtrOutput)
}

// Restrict packet protocol. You can use protocol names
// as defined in '/etc/protocols'.
func (o FirewallSecurityGroupRuleOutput) Proto() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallSecurityGroupRule) *string { return v.Proto }).(pulumi.StringPtrOutput)
}

// Security group name
func (o FirewallSecurityGroupRuleOutput) SecurityGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallSecurityGroupRule) *string { return v.SecurityGroup }).(pulumi.StringPtrOutput)
}

// Restrict packet source address. This can refer
// to a single IP address, an IP set ('+ipsetname') or an IP alias
// definition. You can also specify an address range like
// `20.34.101.207-201.3.9.99`, or a list of IP addresses and networks (
// entries are separated by comma). Please do not mix IPv4 and IPv6
// addresses inside such lists.
func (o FirewallSecurityGroupRuleOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallSecurityGroupRule) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// Restrict TCP/UDP source port. You can use
// service names or simple numbers (0-65535), as defined in '/etc/
// services'. Port ranges can be specified with '\d+:\d+', for example
// `80:85`, and you can use comma separated list to match several ports or
// ranges.
func (o FirewallSecurityGroupRuleOutput) Sport() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallSecurityGroupRule) *string { return v.Sport }).(pulumi.StringPtrOutput)
}

// Rule type (`in`, `out`).
func (o FirewallSecurityGroupRuleOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallSecurityGroupRule) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type FirewallSecurityGroupRuleArrayOutput struct{ *pulumi.OutputState }

func (FirewallSecurityGroupRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallSecurityGroupRule)(nil)).Elem()
}

func (o FirewallSecurityGroupRuleArrayOutput) ToFirewallSecurityGroupRuleArrayOutput() FirewallSecurityGroupRuleArrayOutput {
	return o
}

func (o FirewallSecurityGroupRuleArrayOutput) ToFirewallSecurityGroupRuleArrayOutputWithContext(ctx context.Context) FirewallSecurityGroupRuleArrayOutput {
	return o
}

func (o FirewallSecurityGroupRuleArrayOutput) Index(i pulumi.IntInput) FirewallSecurityGroupRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallSecurityGroupRule {
		return vs[0].([]FirewallSecurityGroupRule)[vs[1].(int)]
	}).(FirewallSecurityGroupRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallIPSetCidrInput)(nil)).Elem(), FirewallIPSetCidrArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallIPSetCidrArrayInput)(nil)).Elem(), FirewallIPSetCidrArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallLogRatelimitInput)(nil)).Elem(), FirewallLogRatelimitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallLogRatelimitPtrInput)(nil)).Elem(), FirewallLogRatelimitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallRulesRuleInput)(nil)).Elem(), FirewallRulesRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallRulesRuleArrayInput)(nil)).Elem(), FirewallRulesRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallSecurityGroupRuleInput)(nil)).Elem(), FirewallSecurityGroupRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallSecurityGroupRuleArrayInput)(nil)).Elem(), FirewallSecurityGroupRuleArray{})
	pulumi.RegisterOutputType(FirewallIPSetCidrOutput{})
	pulumi.RegisterOutputType(FirewallIPSetCidrArrayOutput{})
	pulumi.RegisterOutputType(FirewallLogRatelimitOutput{})
	pulumi.RegisterOutputType(FirewallLogRatelimitPtrOutput{})
	pulumi.RegisterOutputType(FirewallRulesRuleOutput{})
	pulumi.RegisterOutputType(FirewallRulesRuleArrayOutput{})
	pulumi.RegisterOutputType(FirewallSecurityGroupRuleOutput{})
	pulumi.RegisterOutputType(FirewallSecurityGroupRuleArrayOutput{})
}

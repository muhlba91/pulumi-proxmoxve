// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package proxmoxve

import (
	"context"
	"reflect"

	"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves information about a specific Container.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := proxmoxve.GetContainer(ctx, &proxmoxve.GetContainerArgs{
//				NodeName: "test",
//				VmId:     100,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetContainer(ctx *pulumi.Context, args *GetContainerArgs, opts ...pulumi.InvokeOption) (*GetContainerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetContainerResult
	err := ctx.Invoke("proxmoxve:index/getContainer:getContainer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getContainer.
type GetContainerArgs struct {
	// The node name.
	NodeName string `pulumi:"nodeName"`
	// Status of the container
	Status *string `pulumi:"status"`
	// Is container a template (true) or a regular container (false)
	Template *bool `pulumi:"template"`
	// The container identifier.
	VmId int `pulumi:"vmId"`
}

// A collection of values returned by getContainer.
type GetContainerResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The container name.
	Name     string `pulumi:"name"`
	NodeName string `pulumi:"nodeName"`
	// Status of the container
	Status *string `pulumi:"status"`
	// A list of tags of the container.
	Tags []string `pulumi:"tags"`
	// Is container a template (true) or a regular container (false)
	Template *bool `pulumi:"template"`
	VmId     int   `pulumi:"vmId"`
}

func GetContainerOutput(ctx *pulumi.Context, args GetContainerOutputArgs, opts ...pulumi.InvokeOption) GetContainerResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetContainerResultOutput, error) {
			args := v.(GetContainerArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("proxmoxve:index/getContainer:getContainer", args, GetContainerResultOutput{}, options).(GetContainerResultOutput), nil
		}).(GetContainerResultOutput)
}

// A collection of arguments for invoking getContainer.
type GetContainerOutputArgs struct {
	// The node name.
	NodeName pulumi.StringInput `pulumi:"nodeName"`
	// Status of the container
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Is container a template (true) or a regular container (false)
	Template pulumi.BoolPtrInput `pulumi:"template"`
	// The container identifier.
	VmId pulumi.IntInput `pulumi:"vmId"`
}

func (GetContainerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerArgs)(nil)).Elem()
}

// A collection of values returned by getContainer.
type GetContainerResultOutput struct{ *pulumi.OutputState }

func (GetContainerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerResult)(nil)).Elem()
}

func (o GetContainerResultOutput) ToGetContainerResultOutput() GetContainerResultOutput {
	return o
}

func (o GetContainerResultOutput) ToGetContainerResultOutputWithContext(ctx context.Context) GetContainerResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetContainerResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerResult) string { return v.Id }).(pulumi.StringOutput)
}

// The container name.
func (o GetContainerResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetContainerResultOutput) NodeName() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerResult) string { return v.NodeName }).(pulumi.StringOutput)
}

// Status of the container
func (o GetContainerResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetContainerResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// A list of tags of the container.
func (o GetContainerResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetContainerResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// Is container a template (true) or a regular container (false)
func (o GetContainerResultOutput) Template() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetContainerResult) *bool { return v.Template }).(pulumi.BoolPtrOutput)
}

func (o GetContainerResultOutput) VmId() pulumi.IntOutput {
	return o.ApplyT(func(v GetContainerResult) int { return v.VmId }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetContainerResultOutput{})
}

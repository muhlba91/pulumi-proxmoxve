// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package proxmoxve

import (
	"context"
	"reflect"

	"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves information about node.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := proxmoxve.GetNode(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetNode(ctx *pulumi.Context, args *GetNodeArgs, opts ...pulumi.InvokeOption) (*GetNodeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetNodeResult
	err := ctx.Invoke("proxmoxve:index/getNode:getNode", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNode.
type GetNodeArgs struct {
	// The node name.
	NodeName string `pulumi:"nodeName"`
}

// A collection of values returned by getNode.
type GetNodeResult struct {
	// The CPU count on the node.
	CpuCount int `pulumi:"cpuCount"`
	// The CPU model on the node.
	CpuModel string `pulumi:"cpuModel"`
	// The CPU utilization on the node.
	CpuSockets int `pulumi:"cpuSockets"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The memory available on the node.
	MemoryAvailable int `pulumi:"memoryAvailable"`
	// The total memory on the node.
	MemoryTotal int `pulumi:"memoryTotal"`
	// The memory used on the node.
	MemoryUsed int    `pulumi:"memoryUsed"`
	NodeName   string `pulumi:"nodeName"`
	// The uptime in seconds on the node.
	Uptime int `pulumi:"uptime"`
}

func GetNodeOutput(ctx *pulumi.Context, args GetNodeOutputArgs, opts ...pulumi.InvokeOption) GetNodeResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetNodeResultOutput, error) {
			args := v.(GetNodeArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetNodeResult
			secret, err := ctx.InvokePackageRaw("proxmoxve:index/getNode:getNode", args, &rv, "", opts...)
			if err != nil {
				return GetNodeResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetNodeResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetNodeResultOutput), nil
			}
			return output, nil
		}).(GetNodeResultOutput)
}

// A collection of arguments for invoking getNode.
type GetNodeOutputArgs struct {
	// The node name.
	NodeName pulumi.StringInput `pulumi:"nodeName"`
}

func (GetNodeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeArgs)(nil)).Elem()
}

// A collection of values returned by getNode.
type GetNodeResultOutput struct{ *pulumi.OutputState }

func (GetNodeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeResult)(nil)).Elem()
}

func (o GetNodeResultOutput) ToGetNodeResultOutput() GetNodeResultOutput {
	return o
}

func (o GetNodeResultOutput) ToGetNodeResultOutputWithContext(ctx context.Context) GetNodeResultOutput {
	return o
}

// The CPU count on the node.
func (o GetNodeResultOutput) CpuCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetNodeResult) int { return v.CpuCount }).(pulumi.IntOutput)
}

// The CPU model on the node.
func (o GetNodeResultOutput) CpuModel() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodeResult) string { return v.CpuModel }).(pulumi.StringOutput)
}

// The CPU utilization on the node.
func (o GetNodeResultOutput) CpuSockets() pulumi.IntOutput {
	return o.ApplyT(func(v GetNodeResult) int { return v.CpuSockets }).(pulumi.IntOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetNodeResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodeResult) string { return v.Id }).(pulumi.StringOutput)
}

// The memory available on the node.
func (o GetNodeResultOutput) MemoryAvailable() pulumi.IntOutput {
	return o.ApplyT(func(v GetNodeResult) int { return v.MemoryAvailable }).(pulumi.IntOutput)
}

// The total memory on the node.
func (o GetNodeResultOutput) MemoryTotal() pulumi.IntOutput {
	return o.ApplyT(func(v GetNodeResult) int { return v.MemoryTotal }).(pulumi.IntOutput)
}

// The memory used on the node.
func (o GetNodeResultOutput) MemoryUsed() pulumi.IntOutput {
	return o.ApplyT(func(v GetNodeResult) int { return v.MemoryUsed }).(pulumi.IntOutput)
}

func (o GetNodeResultOutput) NodeName() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodeResult) string { return v.NodeName }).(pulumi.StringOutput)
}

// The uptime in seconds on the node.
func (o GetNodeResultOutput) Uptime() pulumi.IntOutput {
	return o.ApplyT(func(v GetNodeResult) int { return v.Uptime }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetNodeResultOutput{})
}

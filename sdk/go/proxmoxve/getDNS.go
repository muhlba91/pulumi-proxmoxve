// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package proxmoxve

import (
	"context"
	"reflect"

	"github.com/muhlba91/pulumi-proxmoxve/sdk/v5/go/proxmoxve/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieves the DNS configuration for a specific node.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/muhlba91/pulumi-proxmoxve/sdk/v5/go/proxmoxve"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := proxmoxve.LookupDNS(ctx, &proxmoxve.LookupDNSArgs{
//				NodeName: "first-node",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupDNS(ctx *pulumi.Context, args *LookupDNSArgs, opts ...pulumi.InvokeOption) (*LookupDNSResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDNSResult
	err := ctx.Invoke("proxmoxve:index/getDNS:getDNS", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDNS.
type LookupDNSArgs struct {
	// A node name.
	NodeName string `pulumi:"nodeName"`
}

// A collection of values returned by getDNS.
type LookupDNSResult struct {
	// The DNS search domain.
	Domain string `pulumi:"domain"`
	// The provider-assigned unique ID for this managed resource.
	Id       string `pulumi:"id"`
	NodeName string `pulumi:"nodeName"`
	// The DNS servers.
	Servers []string `pulumi:"servers"`
}

func LookupDNSOutput(ctx *pulumi.Context, args LookupDNSOutputArgs, opts ...pulumi.InvokeOption) LookupDNSResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDNSResult, error) {
			args := v.(LookupDNSArgs)
			r, err := LookupDNS(ctx, &args, opts...)
			var s LookupDNSResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDNSResultOutput)
}

// A collection of arguments for invoking getDNS.
type LookupDNSOutputArgs struct {
	// A node name.
	NodeName pulumi.StringInput `pulumi:"nodeName"`
}

func (LookupDNSOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDNSArgs)(nil)).Elem()
}

// A collection of values returned by getDNS.
type LookupDNSResultOutput struct{ *pulumi.OutputState }

func (LookupDNSResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDNSResult)(nil)).Elem()
}

func (o LookupDNSResultOutput) ToLookupDNSResultOutput() LookupDNSResultOutput {
	return o
}

func (o LookupDNSResultOutput) ToLookupDNSResultOutputWithContext(ctx context.Context) LookupDNSResultOutput {
	return o
}

func (o LookupDNSResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupDNSResult] {
	return pulumix.Output[LookupDNSResult]{
		OutputState: o.OutputState,
	}
}

// The DNS search domain.
func (o LookupDNSResultOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDNSResult) string { return v.Domain }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupDNSResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDNSResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupDNSResultOutput) NodeName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDNSResult) string { return v.NodeName }).(pulumi.StringOutput)
}

// The DNS servers.
func (o LookupDNSResultOutput) Servers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDNSResult) []string { return v.Servers }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDNSResultOutput{})
}

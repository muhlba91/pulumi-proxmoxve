// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mapping

import (
	"context"
	"reflect"

	"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves a PCI hardware mapping from a Proxmox VE cluster.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Hardware"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := Hardware.GetPci(ctx, &mapping.GetPciArgs{
//				Name: "example",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("dataProxmoxVirtualEnvironmentHardwareMappingPci", example)
//			return nil
//		})
//	}
//
// ```
func LookupPci(ctx *pulumi.Context, args *LookupPciArgs, opts ...pulumi.InvokeOption) (*LookupPciResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPciResult
	err := ctx.Invoke("proxmoxve:Hardware/mapping/getPci:getPci", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPci.
type LookupPciArgs struct {
	// The name of this PCI hardware mapping.
	Name string `pulumi:"name"`
}

// A collection of values returned by getPci.
type LookupPciResult struct {
	// The comment of this PCI hardware mapping.
	Comment string `pulumi:"comment"`
	// The unique identifier of this PCI hardware mapping data source.
	Id string `pulumi:"id"`
	// The actual map of devices for the hardware mapping.
	Maps []GetPciMap `pulumi:"maps"`
	// Indicates whether to use with mediated devices.
	MediatedDevices bool `pulumi:"mediatedDevices"`
	// The name of this PCI hardware mapping.
	Name string `pulumi:"name"`
}

func LookupPciOutput(ctx *pulumi.Context, args LookupPciOutputArgs, opts ...pulumi.InvokeOption) LookupPciResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPciResultOutput, error) {
			args := v.(LookupPciArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupPciResult
			secret, err := ctx.InvokePackageRaw("proxmoxve:Hardware/mapping/getPci:getPci", args, &rv, "", opts...)
			if err != nil {
				return LookupPciResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupPciResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupPciResultOutput), nil
			}
			return output, nil
		}).(LookupPciResultOutput)
}

// A collection of arguments for invoking getPci.
type LookupPciOutputArgs struct {
	// The name of this PCI hardware mapping.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupPciOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPciArgs)(nil)).Elem()
}

// A collection of values returned by getPci.
type LookupPciResultOutput struct{ *pulumi.OutputState }

func (LookupPciResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPciResult)(nil)).Elem()
}

func (o LookupPciResultOutput) ToLookupPciResultOutput() LookupPciResultOutput {
	return o
}

func (o LookupPciResultOutput) ToLookupPciResultOutputWithContext(ctx context.Context) LookupPciResultOutput {
	return o
}

// The comment of this PCI hardware mapping.
func (o LookupPciResultOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPciResult) string { return v.Comment }).(pulumi.StringOutput)
}

// The unique identifier of this PCI hardware mapping data source.
func (o LookupPciResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPciResult) string { return v.Id }).(pulumi.StringOutput)
}

// The actual map of devices for the hardware mapping.
func (o LookupPciResultOutput) Maps() GetPciMapArrayOutput {
	return o.ApplyT(func(v LookupPciResult) []GetPciMap { return v.Maps }).(GetPciMapArrayOutput)
}

// Indicates whether to use with mediated devices.
func (o LookupPciResultOutput) MediatedDevices() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupPciResult) bool { return v.MediatedDevices }).(pulumi.BoolOutput)
}

// The name of this PCI hardware mapping.
func (o LookupPciResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPciResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPciResultOutput{})
}

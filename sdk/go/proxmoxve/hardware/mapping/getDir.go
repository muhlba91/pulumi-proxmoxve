// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mapping

import (
	"context"
	"reflect"

	"github.com/muhlba91/pulumi-proxmoxve/sdk/v7/go/proxmoxve/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves a directory mapping from a Proxmox VE cluster.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/muhlba91/pulumi-proxmoxve/sdk/v7/go/proxmoxve/hardware"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := hardware.GetDir(ctx, &mapping.GetDirArgs{
//				Name: "example",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("dataProxmoxVirtualEnvironmentHardwareMappingDir", example)
//			return nil
//		})
//	}
//
// ```
func LookupDir(ctx *pulumi.Context, args *LookupDirArgs, opts ...pulumi.InvokeOption) (*LookupDirResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDirResult
	err := ctx.Invoke("proxmoxve:Hardware/mapping/getDir:getDir", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDir.
type LookupDirArgs struct {
	// The name of this directory mapping.
	Name string `pulumi:"name"`
}

// A collection of values returned by getDir.
type LookupDirResult struct {
	// The comment of this directory mapping.
	Comment string `pulumi:"comment"`
	// The unique identifier of this directory mapping data source.
	Id string `pulumi:"id"`
	// The actual map of devices for the directory mapping.
	Maps []GetDirMap `pulumi:"maps"`
	// The name of this directory mapping.
	Name string `pulumi:"name"`
}

func LookupDirOutput(ctx *pulumi.Context, args LookupDirOutputArgs, opts ...pulumi.InvokeOption) LookupDirResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupDirResultOutput, error) {
			args := v.(LookupDirArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("proxmoxve:Hardware/mapping/getDir:getDir", args, LookupDirResultOutput{}, options).(LookupDirResultOutput), nil
		}).(LookupDirResultOutput)
}

// A collection of arguments for invoking getDir.
type LookupDirOutputArgs struct {
	// The name of this directory mapping.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupDirOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDirArgs)(nil)).Elem()
}

// A collection of values returned by getDir.
type LookupDirResultOutput struct{ *pulumi.OutputState }

func (LookupDirResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDirResult)(nil)).Elem()
}

func (o LookupDirResultOutput) ToLookupDirResultOutput() LookupDirResultOutput {
	return o
}

func (o LookupDirResultOutput) ToLookupDirResultOutputWithContext(ctx context.Context) LookupDirResultOutput {
	return o
}

// The comment of this directory mapping.
func (o LookupDirResultOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDirResult) string { return v.Comment }).(pulumi.StringOutput)
}

// The unique identifier of this directory mapping data source.
func (o LookupDirResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDirResult) string { return v.Id }).(pulumi.StringOutput)
}

// The actual map of devices for the directory mapping.
func (o LookupDirResultOutput) Maps() GetDirMapArrayOutput {
	return o.ApplyT(func(v LookupDirResult) []GetDirMap { return v.Maps }).(GetDirMapArrayOutput)
}

// The name of this directory mapping.
func (o LookupDirResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDirResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDirResultOutput{})
}

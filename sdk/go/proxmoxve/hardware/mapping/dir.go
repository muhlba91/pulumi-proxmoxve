// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mapping

import (
	"context"
	"reflect"

	"errors"
	"github.com/muhlba91/pulumi-proxmoxve/sdk/v7/go/proxmoxve/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a directory mapping in a Proxmox VE cluster.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/muhlba91/pulumi-proxmoxve/sdk/v7/go/proxmoxve/hardware"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := hardware.NewDir(ctx, "example", &hardware.DirArgs{
//				Comment: pulumi.String("This is a comment"),
//				Maps: mapping.DirMapTypeArray{
//					&mapping.DirMapTypeArgs{
//						Node: pulumi.String("pve"),
//						Path: pulumi.String("/mnt/data"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// #!/usr/bin/env sh
//
// A directory mapping can be imported using their name, e.g.:
//
// ```sh
// $ pulumi import proxmoxve:Hardware/mapping/dir:Dir example example
// ```
type Dir struct {
	pulumi.CustomResourceState

	// The comment of this directory mapping.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// The actual map of devices for the hardware mapping.
	Maps DirMapTypeArrayOutput `pulumi:"maps"`
	// The name of this directory mapping.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewDir registers a new resource with the given unique name, arguments, and options.
func NewDir(ctx *pulumi.Context,
	name string, args *DirArgs, opts ...pulumi.ResourceOption) (*Dir, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Maps == nil {
		return nil, errors.New("invalid value for required argument 'Maps'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Dir
	err := ctx.RegisterResource("proxmoxve:Hardware/mapping/dir:Dir", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDir gets an existing Dir resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDir(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DirState, opts ...pulumi.ResourceOption) (*Dir, error) {
	var resource Dir
	err := ctx.ReadResource("proxmoxve:Hardware/mapping/dir:Dir", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Dir resources.
type dirState struct {
	// The comment of this directory mapping.
	Comment *string `pulumi:"comment"`
	// The actual map of devices for the hardware mapping.
	Maps []DirMapType `pulumi:"maps"`
	// The name of this directory mapping.
	Name *string `pulumi:"name"`
}

type DirState struct {
	// The comment of this directory mapping.
	Comment pulumi.StringPtrInput
	// The actual map of devices for the hardware mapping.
	Maps DirMapTypeArrayInput
	// The name of this directory mapping.
	Name pulumi.StringPtrInput
}

func (DirState) ElementType() reflect.Type {
	return reflect.TypeOf((*dirState)(nil)).Elem()
}

type dirArgs struct {
	// The comment of this directory mapping.
	Comment *string `pulumi:"comment"`
	// The actual map of devices for the hardware mapping.
	Maps []DirMapType `pulumi:"maps"`
	// The name of this directory mapping.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a Dir resource.
type DirArgs struct {
	// The comment of this directory mapping.
	Comment pulumi.StringPtrInput
	// The actual map of devices for the hardware mapping.
	Maps DirMapTypeArrayInput
	// The name of this directory mapping.
	Name pulumi.StringPtrInput
}

func (DirArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dirArgs)(nil)).Elem()
}

type DirInput interface {
	pulumi.Input

	ToDirOutput() DirOutput
	ToDirOutputWithContext(ctx context.Context) DirOutput
}

func (*Dir) ElementType() reflect.Type {
	return reflect.TypeOf((**Dir)(nil)).Elem()
}

func (i *Dir) ToDirOutput() DirOutput {
	return i.ToDirOutputWithContext(context.Background())
}

func (i *Dir) ToDirOutputWithContext(ctx context.Context) DirOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirOutput)
}

// DirArrayInput is an input type that accepts DirArray and DirArrayOutput values.
// You can construct a concrete instance of `DirArrayInput` via:
//
//	DirArray{ DirArgs{...} }
type DirArrayInput interface {
	pulumi.Input

	ToDirArrayOutput() DirArrayOutput
	ToDirArrayOutputWithContext(context.Context) DirArrayOutput
}

type DirArray []DirInput

func (DirArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dir)(nil)).Elem()
}

func (i DirArray) ToDirArrayOutput() DirArrayOutput {
	return i.ToDirArrayOutputWithContext(context.Background())
}

func (i DirArray) ToDirArrayOutputWithContext(ctx context.Context) DirArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirArrayOutput)
}

// DirMapInput is an input type that accepts DirMap and DirMapOutput values.
// You can construct a concrete instance of `DirMapInput` via:
//
//	DirMap{ "key": DirArgs{...} }
type DirMapInput interface {
	pulumi.Input

	ToDirMapOutput() DirMapOutput
	ToDirMapOutputWithContext(context.Context) DirMapOutput
}

type DirMap map[string]DirInput

func (DirMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dir)(nil)).Elem()
}

func (i DirMap) ToDirMapOutput() DirMapOutput {
	return i.ToDirMapOutputWithContext(context.Background())
}

func (i DirMap) ToDirMapOutputWithContext(ctx context.Context) DirMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirMapOutput)
}

type DirOutput struct{ *pulumi.OutputState }

func (DirOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Dir)(nil)).Elem()
}

func (o DirOutput) ToDirOutput() DirOutput {
	return o
}

func (o DirOutput) ToDirOutputWithContext(ctx context.Context) DirOutput {
	return o
}

// The comment of this directory mapping.
func (o DirOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Dir) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// The actual map of devices for the hardware mapping.
func (o DirOutput) Maps() DirMapTypeArrayOutput {
	return o.ApplyT(func(v *Dir) DirMapTypeArrayOutput { return v.Maps }).(DirMapTypeArrayOutput)
}

// The name of this directory mapping.
func (o DirOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Dir) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type DirArrayOutput struct{ *pulumi.OutputState }

func (DirArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dir)(nil)).Elem()
}

func (o DirArrayOutput) ToDirArrayOutput() DirArrayOutput {
	return o
}

func (o DirArrayOutput) ToDirArrayOutputWithContext(ctx context.Context) DirArrayOutput {
	return o
}

func (o DirArrayOutput) Index(i pulumi.IntInput) DirOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Dir {
		return vs[0].([]*Dir)[vs[1].(int)]
	}).(DirOutput)
}

type DirMapOutput struct{ *pulumi.OutputState }

func (DirMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dir)(nil)).Elem()
}

func (o DirMapOutput) ToDirMapOutput() DirMapOutput {
	return o
}

func (o DirMapOutput) ToDirMapOutputWithContext(ctx context.Context) DirMapOutput {
	return o
}

func (o DirMapOutput) MapIndex(k pulumi.StringInput) DirOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Dir {
		return vs[0].(map[string]*Dir)[vs[1].(string)]
	}).(DirOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DirInput)(nil)).Elem(), &Dir{})
	pulumi.RegisterInputType(reflect.TypeOf((*DirArrayInput)(nil)).Elem(), DirArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DirMapInput)(nil)).Elem(), DirMap{})
	pulumi.RegisterOutputType(DirOutput{})
	pulumi.RegisterOutputType(DirArrayOutput{})
	pulumi.RegisterOutputType(DirMapOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package proxmoxve

import (
	"context"
	"reflect"

	"github.com/muhlba91/pulumi-proxmoxve/sdk/v7/go/proxmoxve/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves information about an existing file in a Proxmox Virtual Environment node.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/muhlba91/pulumi-proxmoxve/sdk/v7/go/proxmoxve"
//	"github.com/muhlba91/pulumi-proxmoxve/sdk/v7/go/proxmoxve/vm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			ubuntuIso, err := proxmoxve.GetFile(ctx, &proxmoxve.GetFileArgs{
//				NodeName:    "pve",
//				DatastoreId: "local",
//				ContentType: "iso",
//				FileName:    "ubuntu-22.04.3-live-server-amd64.iso",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ubuntuContainerTemplate, err := proxmoxve.GetFile(ctx, &proxmoxve.GetFileArgs{
//				NodeName:    "pve",
//				DatastoreId: "local",
//				ContentType: "vztmpl",
//				FileName:    "ubuntu-22.04-standard_22.04-1_amd64.tar.zst",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = proxmoxve.GetFile(ctx, &proxmoxve.GetFileArgs{
//				NodeName:    "pve",
//				DatastoreId: "local",
//				ContentType: "snippets",
//				FileName:    "cloud-init-config.yaml",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = proxmoxve.GetFile(ctx, &proxmoxve.GetFileArgs{
//				NodeName:    "pve",
//				DatastoreId: "local",
//				ContentType: "import",
//				FileName:    "imported-config.yaml",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("ubuntuIsoId", ubuntuIso.Id)
//			ctx.Export("ubuntuIsoSize", ubuntuIso.FileSize)
//			ctx.Export("containerTemplateFormat", ubuntuContainerTemplate.FileFormat)
//			_, err = vm.NewVirtualMachine(ctx, "example", &vm.VirtualMachineArgs{
//				NodeName: pulumi.String("pve"),
//				VmId:     pulumi.Int(100),
//				Cdrom: &vm.VirtualMachineCdromArgs{
//					FileId: pulumi.String(ubuntuIso.Id),
//				},
//				Cpu: &vm.VirtualMachineCpuArgs{
//					Cores: pulumi.Int(2),
//				},
//				Memory: &vm.VirtualMachineMemoryArgs{
//					Dedicated: pulumi.Int(2048),
//				},
//				Disks: vm.VirtualMachineDiskArray{
//					&vm.VirtualMachineDiskArgs{
//						DatastoreId: pulumi.String("local-lvm"),
//						FileFormat:  pulumi.String("qcow2"),
//						Size:        pulumi.Int(20),
//					},
//				},
//				NetworkDevices: vm.VirtualMachineNetworkDeviceArray{
//					&vm.VirtualMachineNetworkDeviceArgs{
//						Bridge: pulumi.String("vmbr0"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetFile(ctx *pulumi.Context, args *GetFileArgs, opts ...pulumi.InvokeOption) (*GetFileResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetFileResult
	err := ctx.Invoke("proxmoxve:index/getFile:getFile", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFile.
type GetFileArgs struct {
	// The content type of the file.
	ContentType string `pulumi:"contentType"`
	// The identifier of the datastore.
	DatastoreId string `pulumi:"datastoreId"`
	// The name of the file.
	FileName string `pulumi:"fileName"`
	// The name of the node.
	NodeName string `pulumi:"nodeName"`
}

// A collection of values returned by getFile.
type GetFileResult struct {
	// The content type of the file.
	ContentType string `pulumi:"contentType"`
	// The identifier of the datastore.
	DatastoreId string `pulumi:"datastoreId"`
	// The format of the file.
	FileFormat string `pulumi:"fileFormat"`
	// The name of the file.
	FileName string `pulumi:"fileName"`
	// The size of the file in bytes.
	FileSize int `pulumi:"fileSize"`
	// The unique identifier of the file (volume ID).
	Id string `pulumi:"id"`
	// The name of the node.
	NodeName string `pulumi:"nodeName"`
	// The VM ID associated with the file (if applicable).
	Vmid int `pulumi:"vmid"`
}

func GetFileOutput(ctx *pulumi.Context, args GetFileOutputArgs, opts ...pulumi.InvokeOption) GetFileResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetFileResultOutput, error) {
			args := v.(GetFileArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("proxmoxve:index/getFile:getFile", args, GetFileResultOutput{}, options).(GetFileResultOutput), nil
		}).(GetFileResultOutput)
}

// A collection of arguments for invoking getFile.
type GetFileOutputArgs struct {
	// The content type of the file.
	ContentType pulumi.StringInput `pulumi:"contentType"`
	// The identifier of the datastore.
	DatastoreId pulumi.StringInput `pulumi:"datastoreId"`
	// The name of the file.
	FileName pulumi.StringInput `pulumi:"fileName"`
	// The name of the node.
	NodeName pulumi.StringInput `pulumi:"nodeName"`
}

func (GetFileOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFileArgs)(nil)).Elem()
}

// A collection of values returned by getFile.
type GetFileResultOutput struct{ *pulumi.OutputState }

func (GetFileResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFileResult)(nil)).Elem()
}

func (o GetFileResultOutput) ToGetFileResultOutput() GetFileResultOutput {
	return o
}

func (o GetFileResultOutput) ToGetFileResultOutputWithContext(ctx context.Context) GetFileResultOutput {
	return o
}

// The content type of the file.
func (o GetFileResultOutput) ContentType() pulumi.StringOutput {
	return o.ApplyT(func(v GetFileResult) string { return v.ContentType }).(pulumi.StringOutput)
}

// The identifier of the datastore.
func (o GetFileResultOutput) DatastoreId() pulumi.StringOutput {
	return o.ApplyT(func(v GetFileResult) string { return v.DatastoreId }).(pulumi.StringOutput)
}

// The format of the file.
func (o GetFileResultOutput) FileFormat() pulumi.StringOutput {
	return o.ApplyT(func(v GetFileResult) string { return v.FileFormat }).(pulumi.StringOutput)
}

// The name of the file.
func (o GetFileResultOutput) FileName() pulumi.StringOutput {
	return o.ApplyT(func(v GetFileResult) string { return v.FileName }).(pulumi.StringOutput)
}

// The size of the file in bytes.
func (o GetFileResultOutput) FileSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetFileResult) int { return v.FileSize }).(pulumi.IntOutput)
}

// The unique identifier of the file (volume ID).
func (o GetFileResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetFileResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the node.
func (o GetFileResultOutput) NodeName() pulumi.StringOutput {
	return o.ApplyT(func(v GetFileResult) string { return v.NodeName }).(pulumi.StringOutput)
}

// The VM ID associated with the file (if applicable).
func (o GetFileResultOutput) Vmid() pulumi.IntOutput {
	return o.ApplyT(func(v GetFileResult) int { return v.Vmid }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetFileResultOutput{})
}

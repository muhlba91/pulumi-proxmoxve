// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package metrics

import (
	"context"
	"reflect"

	"errors"
	"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages PVE metrics server.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/metrics"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := metrics.NewMetricsServer(ctx, "influxdbServer", &metrics.MetricsServerArgs{
//				Port:   pulumi.Int(8089),
//				Server: pulumi.String("192.168.3.2"),
//				Type:   pulumi.String("influxdb"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = metrics.NewMetricsServer(ctx, "graphiteServer", &metrics.MetricsServerArgs{
//				Port:   pulumi.Int(2003),
//				Server: pulumi.String("192.168.4.2"),
//				Type:   pulumi.String("graphite"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// #!/usr/bin/env sh
//
// ```sh
// $ pulumi import proxmoxve:Metrics/metricsServer:MetricsServer example example
// ```
type MetricsServer struct {
	pulumi.CustomResourceState

	// Set this to `true` to disable this metric server.
	Disable pulumi.BoolPtrOutput `pulumi:"disable"`
	// Root graphite path (ex: `proxmox.mycluster.mykey`).
	GraphitePath pulumi.StringPtrOutput `pulumi:"graphitePath"`
	// Protocol to send graphite data. Choice is between `udp` | `tcp`. If not set, PVE default is `udp`.
	GraphiteProto pulumi.StringPtrOutput `pulumi:"graphiteProto"`
	// An API path prefix inserted between `<host>:<port>/` and `/api2/`. Can be useful if the InfluxDB service runs behind a reverse proxy.
	InfluxApiPathPrefix pulumi.StringPtrOutput `pulumi:"influxApiPathPrefix"`
	// The InfluxDB bucket/db. Only necessary when using the http v2 api.
	InfluxBucket pulumi.StringPtrOutput `pulumi:"influxBucket"`
	// Protocol for InfluxDB. Choice is between `udp` | `http` | `https`. If not set, PVE default is `udp`.
	InfluxDbProto pulumi.StringPtrOutput `pulumi:"influxDbProto"`
	// InfluxDB max-body-size in bytes. Requests are batched up to this size. If not set, PVE default is `25000000`.
	InfluxMaxBodySize pulumi.IntPtrOutput `pulumi:"influxMaxBodySize"`
	// The InfluxDB organization. Only necessary when using the http v2 api. Has no meaning when using v2 compatibility api.
	InfluxOrganization pulumi.StringPtrOutput `pulumi:"influxOrganization"`
	// The InfluxDB access token. Only necessary when using the http v2 api. If the v2 compatibility api is used, use `user:password` instead.
	InfluxToken pulumi.StringPtrOutput `pulumi:"influxToken"`
	// Set to `false` to disable certificate verification for https endpoints.
	InfluxVerify pulumi.BoolPtrOutput `pulumi:"influxVerify"`
	// MTU (maximum transmission unit) for metrics transmission over UDP. If not set, PVE default is `1500` (allowed `512` - `65536`).
	Mtu pulumi.IntPtrOutput `pulumi:"mtu"`
	// Unique name that will be ID of this metric server in PVE.
	Name pulumi.StringOutput `pulumi:"name"`
	// Server network port.
	Port pulumi.IntOutput `pulumi:"port"`
	// Server dns name or IP address.
	Server pulumi.StringOutput `pulumi:"server"`
	// TCP socket timeout in seconds. If not set, PVE default is `1`.
	Timeout pulumi.IntPtrOutput `pulumi:"timeout"`
	// Plugin type. Choice is between `graphite` | `influxdb`.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewMetricsServer registers a new resource with the given unique name, arguments, and options.
func NewMetricsServer(ctx *pulumi.Context,
	name string, args *MetricsServerArgs, opts ...pulumi.ResourceOption) (*MetricsServer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Port == nil {
		return nil, errors.New("invalid value for required argument 'Port'")
	}
	if args.Server == nil {
		return nil, errors.New("invalid value for required argument 'Server'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.InfluxToken != nil {
		args.InfluxToken = pulumi.ToSecret(args.InfluxToken).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"influxToken",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MetricsServer
	err := ctx.RegisterResource("proxmoxve:Metrics/metricsServer:MetricsServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetricsServer gets an existing MetricsServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetricsServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetricsServerState, opts ...pulumi.ResourceOption) (*MetricsServer, error) {
	var resource MetricsServer
	err := ctx.ReadResource("proxmoxve:Metrics/metricsServer:MetricsServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MetricsServer resources.
type metricsServerState struct {
	// Set this to `true` to disable this metric server.
	Disable *bool `pulumi:"disable"`
	// Root graphite path (ex: `proxmox.mycluster.mykey`).
	GraphitePath *string `pulumi:"graphitePath"`
	// Protocol to send graphite data. Choice is between `udp` | `tcp`. If not set, PVE default is `udp`.
	GraphiteProto *string `pulumi:"graphiteProto"`
	// An API path prefix inserted between `<host>:<port>/` and `/api2/`. Can be useful if the InfluxDB service runs behind a reverse proxy.
	InfluxApiPathPrefix *string `pulumi:"influxApiPathPrefix"`
	// The InfluxDB bucket/db. Only necessary when using the http v2 api.
	InfluxBucket *string `pulumi:"influxBucket"`
	// Protocol for InfluxDB. Choice is between `udp` | `http` | `https`. If not set, PVE default is `udp`.
	InfluxDbProto *string `pulumi:"influxDbProto"`
	// InfluxDB max-body-size in bytes. Requests are batched up to this size. If not set, PVE default is `25000000`.
	InfluxMaxBodySize *int `pulumi:"influxMaxBodySize"`
	// The InfluxDB organization. Only necessary when using the http v2 api. Has no meaning when using v2 compatibility api.
	InfluxOrganization *string `pulumi:"influxOrganization"`
	// The InfluxDB access token. Only necessary when using the http v2 api. If the v2 compatibility api is used, use `user:password` instead.
	InfluxToken *string `pulumi:"influxToken"`
	// Set to `false` to disable certificate verification for https endpoints.
	InfluxVerify *bool `pulumi:"influxVerify"`
	// MTU (maximum transmission unit) for metrics transmission over UDP. If not set, PVE default is `1500` (allowed `512` - `65536`).
	Mtu *int `pulumi:"mtu"`
	// Unique name that will be ID of this metric server in PVE.
	Name *string `pulumi:"name"`
	// Server network port.
	Port *int `pulumi:"port"`
	// Server dns name or IP address.
	Server *string `pulumi:"server"`
	// TCP socket timeout in seconds. If not set, PVE default is `1`.
	Timeout *int `pulumi:"timeout"`
	// Plugin type. Choice is between `graphite` | `influxdb`.
	Type *string `pulumi:"type"`
}

type MetricsServerState struct {
	// Set this to `true` to disable this metric server.
	Disable pulumi.BoolPtrInput
	// Root graphite path (ex: `proxmox.mycluster.mykey`).
	GraphitePath pulumi.StringPtrInput
	// Protocol to send graphite data. Choice is between `udp` | `tcp`. If not set, PVE default is `udp`.
	GraphiteProto pulumi.StringPtrInput
	// An API path prefix inserted between `<host>:<port>/` and `/api2/`. Can be useful if the InfluxDB service runs behind a reverse proxy.
	InfluxApiPathPrefix pulumi.StringPtrInput
	// The InfluxDB bucket/db. Only necessary when using the http v2 api.
	InfluxBucket pulumi.StringPtrInput
	// Protocol for InfluxDB. Choice is between `udp` | `http` | `https`. If not set, PVE default is `udp`.
	InfluxDbProto pulumi.StringPtrInput
	// InfluxDB max-body-size in bytes. Requests are batched up to this size. If not set, PVE default is `25000000`.
	InfluxMaxBodySize pulumi.IntPtrInput
	// The InfluxDB organization. Only necessary when using the http v2 api. Has no meaning when using v2 compatibility api.
	InfluxOrganization pulumi.StringPtrInput
	// The InfluxDB access token. Only necessary when using the http v2 api. If the v2 compatibility api is used, use `user:password` instead.
	InfluxToken pulumi.StringPtrInput
	// Set to `false` to disable certificate verification for https endpoints.
	InfluxVerify pulumi.BoolPtrInput
	// MTU (maximum transmission unit) for metrics transmission over UDP. If not set, PVE default is `1500` (allowed `512` - `65536`).
	Mtu pulumi.IntPtrInput
	// Unique name that will be ID of this metric server in PVE.
	Name pulumi.StringPtrInput
	// Server network port.
	Port pulumi.IntPtrInput
	// Server dns name or IP address.
	Server pulumi.StringPtrInput
	// TCP socket timeout in seconds. If not set, PVE default is `1`.
	Timeout pulumi.IntPtrInput
	// Plugin type. Choice is between `graphite` | `influxdb`.
	Type pulumi.StringPtrInput
}

func (MetricsServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*metricsServerState)(nil)).Elem()
}

type metricsServerArgs struct {
	// Set this to `true` to disable this metric server.
	Disable *bool `pulumi:"disable"`
	// Root graphite path (ex: `proxmox.mycluster.mykey`).
	GraphitePath *string `pulumi:"graphitePath"`
	// Protocol to send graphite data. Choice is between `udp` | `tcp`. If not set, PVE default is `udp`.
	GraphiteProto *string `pulumi:"graphiteProto"`
	// An API path prefix inserted between `<host>:<port>/` and `/api2/`. Can be useful if the InfluxDB service runs behind a reverse proxy.
	InfluxApiPathPrefix *string `pulumi:"influxApiPathPrefix"`
	// The InfluxDB bucket/db. Only necessary when using the http v2 api.
	InfluxBucket *string `pulumi:"influxBucket"`
	// Protocol for InfluxDB. Choice is between `udp` | `http` | `https`. If not set, PVE default is `udp`.
	InfluxDbProto *string `pulumi:"influxDbProto"`
	// InfluxDB max-body-size in bytes. Requests are batched up to this size. If not set, PVE default is `25000000`.
	InfluxMaxBodySize *int `pulumi:"influxMaxBodySize"`
	// The InfluxDB organization. Only necessary when using the http v2 api. Has no meaning when using v2 compatibility api.
	InfluxOrganization *string `pulumi:"influxOrganization"`
	// The InfluxDB access token. Only necessary when using the http v2 api. If the v2 compatibility api is used, use `user:password` instead.
	InfluxToken *string `pulumi:"influxToken"`
	// Set to `false` to disable certificate verification for https endpoints.
	InfluxVerify *bool `pulumi:"influxVerify"`
	// MTU (maximum transmission unit) for metrics transmission over UDP. If not set, PVE default is `1500` (allowed `512` - `65536`).
	Mtu *int `pulumi:"mtu"`
	// Unique name that will be ID of this metric server in PVE.
	Name *string `pulumi:"name"`
	// Server network port.
	Port int `pulumi:"port"`
	// Server dns name or IP address.
	Server string `pulumi:"server"`
	// TCP socket timeout in seconds. If not set, PVE default is `1`.
	Timeout *int `pulumi:"timeout"`
	// Plugin type. Choice is between `graphite` | `influxdb`.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a MetricsServer resource.
type MetricsServerArgs struct {
	// Set this to `true` to disable this metric server.
	Disable pulumi.BoolPtrInput
	// Root graphite path (ex: `proxmox.mycluster.mykey`).
	GraphitePath pulumi.StringPtrInput
	// Protocol to send graphite data. Choice is between `udp` | `tcp`. If not set, PVE default is `udp`.
	GraphiteProto pulumi.StringPtrInput
	// An API path prefix inserted between `<host>:<port>/` and `/api2/`. Can be useful if the InfluxDB service runs behind a reverse proxy.
	InfluxApiPathPrefix pulumi.StringPtrInput
	// The InfluxDB bucket/db. Only necessary when using the http v2 api.
	InfluxBucket pulumi.StringPtrInput
	// Protocol for InfluxDB. Choice is between `udp` | `http` | `https`. If not set, PVE default is `udp`.
	InfluxDbProto pulumi.StringPtrInput
	// InfluxDB max-body-size in bytes. Requests are batched up to this size. If not set, PVE default is `25000000`.
	InfluxMaxBodySize pulumi.IntPtrInput
	// The InfluxDB organization. Only necessary when using the http v2 api. Has no meaning when using v2 compatibility api.
	InfluxOrganization pulumi.StringPtrInput
	// The InfluxDB access token. Only necessary when using the http v2 api. If the v2 compatibility api is used, use `user:password` instead.
	InfluxToken pulumi.StringPtrInput
	// Set to `false` to disable certificate verification for https endpoints.
	InfluxVerify pulumi.BoolPtrInput
	// MTU (maximum transmission unit) for metrics transmission over UDP. If not set, PVE default is `1500` (allowed `512` - `65536`).
	Mtu pulumi.IntPtrInput
	// Unique name that will be ID of this metric server in PVE.
	Name pulumi.StringPtrInput
	// Server network port.
	Port pulumi.IntInput
	// Server dns name or IP address.
	Server pulumi.StringInput
	// TCP socket timeout in seconds. If not set, PVE default is `1`.
	Timeout pulumi.IntPtrInput
	// Plugin type. Choice is between `graphite` | `influxdb`.
	Type pulumi.StringInput
}

func (MetricsServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metricsServerArgs)(nil)).Elem()
}

type MetricsServerInput interface {
	pulumi.Input

	ToMetricsServerOutput() MetricsServerOutput
	ToMetricsServerOutputWithContext(ctx context.Context) MetricsServerOutput
}

func (*MetricsServer) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricsServer)(nil)).Elem()
}

func (i *MetricsServer) ToMetricsServerOutput() MetricsServerOutput {
	return i.ToMetricsServerOutputWithContext(context.Background())
}

func (i *MetricsServer) ToMetricsServerOutputWithContext(ctx context.Context) MetricsServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricsServerOutput)
}

// MetricsServerArrayInput is an input type that accepts MetricsServerArray and MetricsServerArrayOutput values.
// You can construct a concrete instance of `MetricsServerArrayInput` via:
//
//	MetricsServerArray{ MetricsServerArgs{...} }
type MetricsServerArrayInput interface {
	pulumi.Input

	ToMetricsServerArrayOutput() MetricsServerArrayOutput
	ToMetricsServerArrayOutputWithContext(context.Context) MetricsServerArrayOutput
}

type MetricsServerArray []MetricsServerInput

func (MetricsServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetricsServer)(nil)).Elem()
}

func (i MetricsServerArray) ToMetricsServerArrayOutput() MetricsServerArrayOutput {
	return i.ToMetricsServerArrayOutputWithContext(context.Background())
}

func (i MetricsServerArray) ToMetricsServerArrayOutputWithContext(ctx context.Context) MetricsServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricsServerArrayOutput)
}

// MetricsServerMapInput is an input type that accepts MetricsServerMap and MetricsServerMapOutput values.
// You can construct a concrete instance of `MetricsServerMapInput` via:
//
//	MetricsServerMap{ "key": MetricsServerArgs{...} }
type MetricsServerMapInput interface {
	pulumi.Input

	ToMetricsServerMapOutput() MetricsServerMapOutput
	ToMetricsServerMapOutputWithContext(context.Context) MetricsServerMapOutput
}

type MetricsServerMap map[string]MetricsServerInput

func (MetricsServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetricsServer)(nil)).Elem()
}

func (i MetricsServerMap) ToMetricsServerMapOutput() MetricsServerMapOutput {
	return i.ToMetricsServerMapOutputWithContext(context.Background())
}

func (i MetricsServerMap) ToMetricsServerMapOutputWithContext(ctx context.Context) MetricsServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricsServerMapOutput)
}

type MetricsServerOutput struct{ *pulumi.OutputState }

func (MetricsServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricsServer)(nil)).Elem()
}

func (o MetricsServerOutput) ToMetricsServerOutput() MetricsServerOutput {
	return o
}

func (o MetricsServerOutput) ToMetricsServerOutputWithContext(ctx context.Context) MetricsServerOutput {
	return o
}

// Set this to `true` to disable this metric server.
func (o MetricsServerOutput) Disable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MetricsServer) pulumi.BoolPtrOutput { return v.Disable }).(pulumi.BoolPtrOutput)
}

// Root graphite path (ex: `proxmox.mycluster.mykey`).
func (o MetricsServerOutput) GraphitePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricsServer) pulumi.StringPtrOutput { return v.GraphitePath }).(pulumi.StringPtrOutput)
}

// Protocol to send graphite data. Choice is between `udp` | `tcp`. If not set, PVE default is `udp`.
func (o MetricsServerOutput) GraphiteProto() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricsServer) pulumi.StringPtrOutput { return v.GraphiteProto }).(pulumi.StringPtrOutput)
}

// An API path prefix inserted between `<host>:<port>/` and `/api2/`. Can be useful if the InfluxDB service runs behind a reverse proxy.
func (o MetricsServerOutput) InfluxApiPathPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricsServer) pulumi.StringPtrOutput { return v.InfluxApiPathPrefix }).(pulumi.StringPtrOutput)
}

// The InfluxDB bucket/db. Only necessary when using the http v2 api.
func (o MetricsServerOutput) InfluxBucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricsServer) pulumi.StringPtrOutput { return v.InfluxBucket }).(pulumi.StringPtrOutput)
}

// Protocol for InfluxDB. Choice is between `udp` | `http` | `https`. If not set, PVE default is `udp`.
func (o MetricsServerOutput) InfluxDbProto() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricsServer) pulumi.StringPtrOutput { return v.InfluxDbProto }).(pulumi.StringPtrOutput)
}

// InfluxDB max-body-size in bytes. Requests are batched up to this size. If not set, PVE default is `25000000`.
func (o MetricsServerOutput) InfluxMaxBodySize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MetricsServer) pulumi.IntPtrOutput { return v.InfluxMaxBodySize }).(pulumi.IntPtrOutput)
}

// The InfluxDB organization. Only necessary when using the http v2 api. Has no meaning when using v2 compatibility api.
func (o MetricsServerOutput) InfluxOrganization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricsServer) pulumi.StringPtrOutput { return v.InfluxOrganization }).(pulumi.StringPtrOutput)
}

// The InfluxDB access token. Only necessary when using the http v2 api. If the v2 compatibility api is used, use `user:password` instead.
func (o MetricsServerOutput) InfluxToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricsServer) pulumi.StringPtrOutput { return v.InfluxToken }).(pulumi.StringPtrOutput)
}

// Set to `false` to disable certificate verification for https endpoints.
func (o MetricsServerOutput) InfluxVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MetricsServer) pulumi.BoolPtrOutput { return v.InfluxVerify }).(pulumi.BoolPtrOutput)
}

// MTU (maximum transmission unit) for metrics transmission over UDP. If not set, PVE default is `1500` (allowed `512` - `65536`).
func (o MetricsServerOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MetricsServer) pulumi.IntPtrOutput { return v.Mtu }).(pulumi.IntPtrOutput)
}

// Unique name that will be ID of this metric server in PVE.
func (o MetricsServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricsServer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Server network port.
func (o MetricsServerOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *MetricsServer) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// Server dns name or IP address.
func (o MetricsServerOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricsServer) pulumi.StringOutput { return v.Server }).(pulumi.StringOutput)
}

// TCP socket timeout in seconds. If not set, PVE default is `1`.
func (o MetricsServerOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MetricsServer) pulumi.IntPtrOutput { return v.Timeout }).(pulumi.IntPtrOutput)
}

// Plugin type. Choice is between `graphite` | `influxdb`.
func (o MetricsServerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricsServer) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type MetricsServerArrayOutput struct{ *pulumi.OutputState }

func (MetricsServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetricsServer)(nil)).Elem()
}

func (o MetricsServerArrayOutput) ToMetricsServerArrayOutput() MetricsServerArrayOutput {
	return o
}

func (o MetricsServerArrayOutput) ToMetricsServerArrayOutputWithContext(ctx context.Context) MetricsServerArrayOutput {
	return o
}

func (o MetricsServerArrayOutput) Index(i pulumi.IntInput) MetricsServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MetricsServer {
		return vs[0].([]*MetricsServer)[vs[1].(int)]
	}).(MetricsServerOutput)
}

type MetricsServerMapOutput struct{ *pulumi.OutputState }

func (MetricsServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetricsServer)(nil)).Elem()
}

func (o MetricsServerMapOutput) ToMetricsServerMapOutput() MetricsServerMapOutput {
	return o
}

func (o MetricsServerMapOutput) ToMetricsServerMapOutputWithContext(ctx context.Context) MetricsServerMapOutput {
	return o
}

func (o MetricsServerMapOutput) MapIndex(k pulumi.StringInput) MetricsServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MetricsServer {
		return vs[0].(map[string]*MetricsServer)[vs[1].(string)]
	}).(MetricsServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MetricsServerInput)(nil)).Elem(), &MetricsServer{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricsServerArrayInput)(nil)).Elem(), MetricsServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricsServerMapInput)(nil)).Elem(), MetricsServerMap{})
	pulumi.RegisterOutputType(MetricsServerOutput{})
	pulumi.RegisterOutputType(MetricsServerArrayOutput{})
	pulumi.RegisterOutputType(MetricsServerMapOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package metrics

import (
	"context"
	"reflect"

	"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves information about a specific PVE metric server.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/metrics"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := metrics.GetServer(ctx, &metrics.GetServerArgs{
//				Name: "example_influxdb",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("dataProxmoxVirtualEnvironmentMetricsServer", pulumi.Map{
//				"server": example.Server,
//				"port":   example.Port,
//			})
//			return nil
//		})
//	}
//
// ```
func GetServer(ctx *pulumi.Context, args *GetServerArgs, opts ...pulumi.InvokeOption) (*GetServerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetServerResult
	err := ctx.Invoke("proxmoxve:Metrics/getServer:getServer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getServer.
type GetServerArgs struct {
	// Unique name that will be ID of this metric server in PVE.
	Name string `pulumi:"name"`
}

// A collection of values returned by getServer.
type GetServerResult struct {
	// Indicates if the metric server is disabled.
	Disable bool `pulumi:"disable"`
	// The unique identifier of this resource.
	Id string `pulumi:"id"`
	// Unique name that will be ID of this metric server in PVE.
	Name string `pulumi:"name"`
	// Server network port.
	Port int `pulumi:"port"`
	// Server dns name or IP address.
	Server string `pulumi:"server"`
	// Plugin type. Either `graphite` or `influxdb`.
	Type string `pulumi:"type"`
}

func GetServerOutput(ctx *pulumi.Context, args GetServerOutputArgs, opts ...pulumi.InvokeOption) GetServerResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetServerResultOutput, error) {
			args := v.(GetServerArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("proxmoxve:Metrics/getServer:getServer", args, GetServerResultOutput{}, options).(GetServerResultOutput), nil
		}).(GetServerResultOutput)
}

// A collection of arguments for invoking getServer.
type GetServerOutputArgs struct {
	// Unique name that will be ID of this metric server in PVE.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetServerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerArgs)(nil)).Elem()
}

// A collection of values returned by getServer.
type GetServerResultOutput struct{ *pulumi.OutputState }

func (GetServerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerResult)(nil)).Elem()
}

func (o GetServerResultOutput) ToGetServerResultOutput() GetServerResultOutput {
	return o
}

func (o GetServerResultOutput) ToGetServerResultOutputWithContext(ctx context.Context) GetServerResultOutput {
	return o
}

// Indicates if the metric server is disabled.
func (o GetServerResultOutput) Disable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServerResult) bool { return v.Disable }).(pulumi.BoolOutput)
}

// The unique identifier of this resource.
func (o GetServerResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerResult) string { return v.Id }).(pulumi.StringOutput)
}

// Unique name that will be ID of this metric server in PVE.
func (o GetServerResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerResult) string { return v.Name }).(pulumi.StringOutput)
}

// Server network port.
func (o GetServerResultOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerResult) int { return v.Port }).(pulumi.IntOutput)
}

// Server dns name or IP address.
func (o GetServerResultOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerResult) string { return v.Server }).(pulumi.StringOutput)
}

// Plugin type. Either `graphite` or `influxdb`.
func (o GetServerResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetServerResultOutput{})
}

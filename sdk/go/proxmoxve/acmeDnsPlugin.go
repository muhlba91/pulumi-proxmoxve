// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package proxmoxve

import (
	"context"
	"reflect"

	"errors"
	"github.com/muhlba91/pulumi-proxmoxve/sdk/v7/go/proxmoxve/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an ACME plugin in a Proxmox VE cluster.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/muhlba91/pulumi-proxmoxve/sdk/v7/go/proxmoxve"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := proxmoxve.NewAcmeDnsPlugin(ctx, "example", &proxmoxve.AcmeDnsPluginArgs{
//				Api: pulumi.String("aws"),
//				Data: pulumi.StringMap{
//					"AWS_ACCESS_KEY_ID":     pulumi.String("EXAMPLE"),
//					"AWS_SECRET_ACCESS_KEY": pulumi.String("EXAMPLE"),
//				},
//				Plugin: pulumi.String("test"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// #!/usr/bin/env sh
//
// ACME accounts can be imported using their name, e.g.:
//
// ```sh
// $ pulumi import proxmoxve:index/acmeDnsPlugin:AcmeDnsPlugin example test
// ```
type AcmeDnsPlugin struct {
	pulumi.CustomResourceState

	// API plugin name.
	Api pulumi.StringOutput `pulumi:"api"`
	// DNS plugin data.
	Data pulumi.StringMapOutput `pulumi:"data"`
	// SHA1 digest of the current configuration. Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.
	Digest pulumi.StringOutput `pulumi:"digest"`
	// Flag to disable the config.
	Disable pulumi.BoolPtrOutput `pulumi:"disable"`
	// ACME Plugin ID name.
	Plugin pulumi.StringOutput `pulumi:"plugin"`
	// Extra delay in seconds to wait before requesting validation. Allows to cope with a long TTL of DNS records (0 - 172800).
	ValidationDelay pulumi.IntOutput `pulumi:"validationDelay"`
}

// NewAcmeDnsPlugin registers a new resource with the given unique name, arguments, and options.
func NewAcmeDnsPlugin(ctx *pulumi.Context,
	name string, args *AcmeDnsPluginArgs, opts ...pulumi.ResourceOption) (*AcmeDnsPlugin, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Api == nil {
		return nil, errors.New("invalid value for required argument 'Api'")
	}
	if args.Plugin == nil {
		return nil, errors.New("invalid value for required argument 'Plugin'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AcmeDnsPlugin
	err := ctx.RegisterResource("proxmoxve:index/acmeDnsPlugin:AcmeDnsPlugin", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAcmeDnsPlugin gets an existing AcmeDnsPlugin resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAcmeDnsPlugin(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AcmeDnsPluginState, opts ...pulumi.ResourceOption) (*AcmeDnsPlugin, error) {
	var resource AcmeDnsPlugin
	err := ctx.ReadResource("proxmoxve:index/acmeDnsPlugin:AcmeDnsPlugin", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AcmeDnsPlugin resources.
type acmeDnsPluginState struct {
	// API plugin name.
	Api *string `pulumi:"api"`
	// DNS plugin data.
	Data map[string]string `pulumi:"data"`
	// SHA1 digest of the current configuration. Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.
	Digest *string `pulumi:"digest"`
	// Flag to disable the config.
	Disable *bool `pulumi:"disable"`
	// ACME Plugin ID name.
	Plugin *string `pulumi:"plugin"`
	// Extra delay in seconds to wait before requesting validation. Allows to cope with a long TTL of DNS records (0 - 172800).
	ValidationDelay *int `pulumi:"validationDelay"`
}

type AcmeDnsPluginState struct {
	// API plugin name.
	Api pulumi.StringPtrInput
	// DNS plugin data.
	Data pulumi.StringMapInput
	// SHA1 digest of the current configuration. Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.
	Digest pulumi.StringPtrInput
	// Flag to disable the config.
	Disable pulumi.BoolPtrInput
	// ACME Plugin ID name.
	Plugin pulumi.StringPtrInput
	// Extra delay in seconds to wait before requesting validation. Allows to cope with a long TTL of DNS records (0 - 172800).
	ValidationDelay pulumi.IntPtrInput
}

func (AcmeDnsPluginState) ElementType() reflect.Type {
	return reflect.TypeOf((*acmeDnsPluginState)(nil)).Elem()
}

type acmeDnsPluginArgs struct {
	// API plugin name.
	Api string `pulumi:"api"`
	// DNS plugin data.
	Data map[string]string `pulumi:"data"`
	// SHA1 digest of the current configuration. Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.
	Digest *string `pulumi:"digest"`
	// Flag to disable the config.
	Disable *bool `pulumi:"disable"`
	// ACME Plugin ID name.
	Plugin string `pulumi:"plugin"`
	// Extra delay in seconds to wait before requesting validation. Allows to cope with a long TTL of DNS records (0 - 172800).
	ValidationDelay *int `pulumi:"validationDelay"`
}

// The set of arguments for constructing a AcmeDnsPlugin resource.
type AcmeDnsPluginArgs struct {
	// API plugin name.
	Api pulumi.StringInput
	// DNS plugin data.
	Data pulumi.StringMapInput
	// SHA1 digest of the current configuration. Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.
	Digest pulumi.StringPtrInput
	// Flag to disable the config.
	Disable pulumi.BoolPtrInput
	// ACME Plugin ID name.
	Plugin pulumi.StringInput
	// Extra delay in seconds to wait before requesting validation. Allows to cope with a long TTL of DNS records (0 - 172800).
	ValidationDelay pulumi.IntPtrInput
}

func (AcmeDnsPluginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*acmeDnsPluginArgs)(nil)).Elem()
}

type AcmeDnsPluginInput interface {
	pulumi.Input

	ToAcmeDnsPluginOutput() AcmeDnsPluginOutput
	ToAcmeDnsPluginOutputWithContext(ctx context.Context) AcmeDnsPluginOutput
}

func (*AcmeDnsPlugin) ElementType() reflect.Type {
	return reflect.TypeOf((**AcmeDnsPlugin)(nil)).Elem()
}

func (i *AcmeDnsPlugin) ToAcmeDnsPluginOutput() AcmeDnsPluginOutput {
	return i.ToAcmeDnsPluginOutputWithContext(context.Background())
}

func (i *AcmeDnsPlugin) ToAcmeDnsPluginOutputWithContext(ctx context.Context) AcmeDnsPluginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcmeDnsPluginOutput)
}

// AcmeDnsPluginArrayInput is an input type that accepts AcmeDnsPluginArray and AcmeDnsPluginArrayOutput values.
// You can construct a concrete instance of `AcmeDnsPluginArrayInput` via:
//
//	AcmeDnsPluginArray{ AcmeDnsPluginArgs{...} }
type AcmeDnsPluginArrayInput interface {
	pulumi.Input

	ToAcmeDnsPluginArrayOutput() AcmeDnsPluginArrayOutput
	ToAcmeDnsPluginArrayOutputWithContext(context.Context) AcmeDnsPluginArrayOutput
}

type AcmeDnsPluginArray []AcmeDnsPluginInput

func (AcmeDnsPluginArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AcmeDnsPlugin)(nil)).Elem()
}

func (i AcmeDnsPluginArray) ToAcmeDnsPluginArrayOutput() AcmeDnsPluginArrayOutput {
	return i.ToAcmeDnsPluginArrayOutputWithContext(context.Background())
}

func (i AcmeDnsPluginArray) ToAcmeDnsPluginArrayOutputWithContext(ctx context.Context) AcmeDnsPluginArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcmeDnsPluginArrayOutput)
}

// AcmeDnsPluginMapInput is an input type that accepts AcmeDnsPluginMap and AcmeDnsPluginMapOutput values.
// You can construct a concrete instance of `AcmeDnsPluginMapInput` via:
//
//	AcmeDnsPluginMap{ "key": AcmeDnsPluginArgs{...} }
type AcmeDnsPluginMapInput interface {
	pulumi.Input

	ToAcmeDnsPluginMapOutput() AcmeDnsPluginMapOutput
	ToAcmeDnsPluginMapOutputWithContext(context.Context) AcmeDnsPluginMapOutput
}

type AcmeDnsPluginMap map[string]AcmeDnsPluginInput

func (AcmeDnsPluginMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AcmeDnsPlugin)(nil)).Elem()
}

func (i AcmeDnsPluginMap) ToAcmeDnsPluginMapOutput() AcmeDnsPluginMapOutput {
	return i.ToAcmeDnsPluginMapOutputWithContext(context.Background())
}

func (i AcmeDnsPluginMap) ToAcmeDnsPluginMapOutputWithContext(ctx context.Context) AcmeDnsPluginMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcmeDnsPluginMapOutput)
}

type AcmeDnsPluginOutput struct{ *pulumi.OutputState }

func (AcmeDnsPluginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AcmeDnsPlugin)(nil)).Elem()
}

func (o AcmeDnsPluginOutput) ToAcmeDnsPluginOutput() AcmeDnsPluginOutput {
	return o
}

func (o AcmeDnsPluginOutput) ToAcmeDnsPluginOutputWithContext(ctx context.Context) AcmeDnsPluginOutput {
	return o
}

// API plugin name.
func (o AcmeDnsPluginOutput) Api() pulumi.StringOutput {
	return o.ApplyT(func(v *AcmeDnsPlugin) pulumi.StringOutput { return v.Api }).(pulumi.StringOutput)
}

// DNS plugin data.
func (o AcmeDnsPluginOutput) Data() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AcmeDnsPlugin) pulumi.StringMapOutput { return v.Data }).(pulumi.StringMapOutput)
}

// SHA1 digest of the current configuration. Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.
func (o AcmeDnsPluginOutput) Digest() pulumi.StringOutput {
	return o.ApplyT(func(v *AcmeDnsPlugin) pulumi.StringOutput { return v.Digest }).(pulumi.StringOutput)
}

// Flag to disable the config.
func (o AcmeDnsPluginOutput) Disable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AcmeDnsPlugin) pulumi.BoolPtrOutput { return v.Disable }).(pulumi.BoolPtrOutput)
}

// ACME Plugin ID name.
func (o AcmeDnsPluginOutput) Plugin() pulumi.StringOutput {
	return o.ApplyT(func(v *AcmeDnsPlugin) pulumi.StringOutput { return v.Plugin }).(pulumi.StringOutput)
}

// Extra delay in seconds to wait before requesting validation. Allows to cope with a long TTL of DNS records (0 - 172800).
func (o AcmeDnsPluginOutput) ValidationDelay() pulumi.IntOutput {
	return o.ApplyT(func(v *AcmeDnsPlugin) pulumi.IntOutput { return v.ValidationDelay }).(pulumi.IntOutput)
}

type AcmeDnsPluginArrayOutput struct{ *pulumi.OutputState }

func (AcmeDnsPluginArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AcmeDnsPlugin)(nil)).Elem()
}

func (o AcmeDnsPluginArrayOutput) ToAcmeDnsPluginArrayOutput() AcmeDnsPluginArrayOutput {
	return o
}

func (o AcmeDnsPluginArrayOutput) ToAcmeDnsPluginArrayOutputWithContext(ctx context.Context) AcmeDnsPluginArrayOutput {
	return o
}

func (o AcmeDnsPluginArrayOutput) Index(i pulumi.IntInput) AcmeDnsPluginOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AcmeDnsPlugin {
		return vs[0].([]*AcmeDnsPlugin)[vs[1].(int)]
	}).(AcmeDnsPluginOutput)
}

type AcmeDnsPluginMapOutput struct{ *pulumi.OutputState }

func (AcmeDnsPluginMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AcmeDnsPlugin)(nil)).Elem()
}

func (o AcmeDnsPluginMapOutput) ToAcmeDnsPluginMapOutput() AcmeDnsPluginMapOutput {
	return o
}

func (o AcmeDnsPluginMapOutput) ToAcmeDnsPluginMapOutputWithContext(ctx context.Context) AcmeDnsPluginMapOutput {
	return o
}

func (o AcmeDnsPluginMapOutput) MapIndex(k pulumi.StringInput) AcmeDnsPluginOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AcmeDnsPlugin {
		return vs[0].(map[string]*AcmeDnsPlugin)[vs[1].(string)]
	}).(AcmeDnsPluginOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AcmeDnsPluginInput)(nil)).Elem(), &AcmeDnsPlugin{})
	pulumi.RegisterInputType(reflect.TypeOf((*AcmeDnsPluginArrayInput)(nil)).Elem(), AcmeDnsPluginArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AcmeDnsPluginMapInput)(nil)).Elem(), AcmeDnsPluginMap{})
	pulumi.RegisterOutputType(AcmeDnsPluginOutput{})
	pulumi.RegisterOutputType(AcmeDnsPluginArrayOutput{})
	pulumi.RegisterOutputType(AcmeDnsPluginMapOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdnzone

import (
	"context"
	"reflect"

	"errors"
	"github.com/muhlba91/pulumi-proxmoxve/sdk/v7/go/proxmoxve/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// EVPN Zone in Proxmox SDN. The EVPN zone creates a routable Layer 3 network, capable of spanning across multiple clusters.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/muhlba91/pulumi-proxmoxve/sdk/v7/go/proxmoxve/sdnzone"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdnzone.NewEvpn(ctx, "example", &sdnzone.EvpnArgs{
//				AdvertiseSubnets:        pulumi.Bool(true),
//				Controller:              pulumi.String("evpn-controller1"),
//				DisableArpNdSuppression: pulumi.Bool(false),
//				Dns:                     pulumi.String("1.1.1.1"),
//				DnsZone:                 pulumi.String("example.com"),
//				ExitNodes: pulumi.StringArray{
//					pulumi.String("pve-exit1"),
//					pulumi.String("pve-exit2"),
//				},
//				ExitNodesLocalRouting: pulumi.Bool(true),
//				ZoneId:                pulumi.String("evpn1"),
//				Ipam:                  pulumi.String("pve"),
//				Mtu:                   pulumi.Int(1450),
//				Nodes: pulumi.StringArray{
//					pulumi.String("pve"),
//				},
//				PrimaryExitNode: pulumi.String("pve-exit1"),
//				ReverseDns:      pulumi.String("1.1.1.1"),
//				RtImport:        pulumi.String("65000:65000"),
//				VrfVxlan:        pulumi.Int(4000),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// #!/usr/bin/env sh
//
// EVPN SDN zone can be imported using its unique identifier (zone ID)
//
// ```sh
// $ pulumi import proxmoxve:SDNZone/evpn:Evpn example evpn1
// ```
type Evpn struct {
	pulumi.CustomResourceState

	// Enable subnet advertisement for EVPN.
	AdvertiseSubnets pulumi.BoolPtrOutput `pulumi:"advertiseSubnets"`
	// EVPN controller address.
	Controller pulumi.StringOutput `pulumi:"controller"`
	// Disable ARP/ND suppression for EVPN.
	DisableArpNdSuppression pulumi.BoolPtrOutput `pulumi:"disableArpNdSuppression"`
	// DNS API server address.
	Dns pulumi.StringPtrOutput `pulumi:"dns"`
	// DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
	DnsZone pulumi.StringPtrOutput `pulumi:"dnsZone"`
	// List of exit nodes for EVPN.
	ExitNodes pulumi.StringArrayOutput `pulumi:"exitNodes"`
	// Enable local routing for EVPN exit nodes.
	ExitNodesLocalRouting pulumi.BoolPtrOutput `pulumi:"exitNodesLocalRouting"`
	// IP Address Management system.
	Ipam pulumi.StringPtrOutput `pulumi:"ipam"`
	// MTU value for the zone.
	Mtu pulumi.IntPtrOutput `pulumi:"mtu"`
	// The Proxmox nodes which the zone and associated VNets should be deployed on
	Nodes pulumi.StringArrayOutput `pulumi:"nodes"`
	// Indicates if the zone has pending configuration changes that need to be applied.
	Pending pulumi.BoolOutput `pulumi:"pending"`
	// Primary exit node for EVPN.
	PrimaryExitNode pulumi.StringPtrOutput `pulumi:"primaryExitNode"`
	// Reverse DNS API server address.
	ReverseDns pulumi.StringPtrOutput `pulumi:"reverseDns"`
	// Route target import for EVPN.
	RtImport pulumi.StringPtrOutput `pulumi:"rtImport"`
	// Indicates the current state of the zone.
	State pulumi.StringOutput `pulumi:"state"`
	// VRF VXLAN-ID used for dedicated routing interconnect between VNets. It must be different than the VXLAN-ID of the VNets.
	VrfVxlan pulumi.IntOutput `pulumi:"vrfVxlan"`
	// The unique identifier of the SDN zone.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewEvpn registers a new resource with the given unique name, arguments, and options.
func NewEvpn(ctx *pulumi.Context,
	name string, args *EvpnArgs, opts ...pulumi.ResourceOption) (*Evpn, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Controller == nil {
		return nil, errors.New("invalid value for required argument 'Controller'")
	}
	if args.Nodes == nil {
		return nil, errors.New("invalid value for required argument 'Nodes'")
	}
	if args.VrfVxlan == nil {
		return nil, errors.New("invalid value for required argument 'VrfVxlan'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Evpn
	err := ctx.RegisterResource("proxmoxve:SDNZone/evpn:Evpn", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEvpn gets an existing Evpn resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEvpn(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EvpnState, opts ...pulumi.ResourceOption) (*Evpn, error) {
	var resource Evpn
	err := ctx.ReadResource("proxmoxve:SDNZone/evpn:Evpn", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Evpn resources.
type evpnState struct {
	// Enable subnet advertisement for EVPN.
	AdvertiseSubnets *bool `pulumi:"advertiseSubnets"`
	// EVPN controller address.
	Controller *string `pulumi:"controller"`
	// Disable ARP/ND suppression for EVPN.
	DisableArpNdSuppression *bool `pulumi:"disableArpNdSuppression"`
	// DNS API server address.
	Dns *string `pulumi:"dns"`
	// DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
	DnsZone *string `pulumi:"dnsZone"`
	// List of exit nodes for EVPN.
	ExitNodes []string `pulumi:"exitNodes"`
	// Enable local routing for EVPN exit nodes.
	ExitNodesLocalRouting *bool `pulumi:"exitNodesLocalRouting"`
	// IP Address Management system.
	Ipam *string `pulumi:"ipam"`
	// MTU value for the zone.
	Mtu *int `pulumi:"mtu"`
	// The Proxmox nodes which the zone and associated VNets should be deployed on
	Nodes []string `pulumi:"nodes"`
	// Indicates if the zone has pending configuration changes that need to be applied.
	Pending *bool `pulumi:"pending"`
	// Primary exit node for EVPN.
	PrimaryExitNode *string `pulumi:"primaryExitNode"`
	// Reverse DNS API server address.
	ReverseDns *string `pulumi:"reverseDns"`
	// Route target import for EVPN.
	RtImport *string `pulumi:"rtImport"`
	// Indicates the current state of the zone.
	State *string `pulumi:"state"`
	// VRF VXLAN-ID used for dedicated routing interconnect between VNets. It must be different than the VXLAN-ID of the VNets.
	VrfVxlan *int `pulumi:"vrfVxlan"`
	// The unique identifier of the SDN zone.
	ZoneId *string `pulumi:"zoneId"`
}

type EvpnState struct {
	// Enable subnet advertisement for EVPN.
	AdvertiseSubnets pulumi.BoolPtrInput
	// EVPN controller address.
	Controller pulumi.StringPtrInput
	// Disable ARP/ND suppression for EVPN.
	DisableArpNdSuppression pulumi.BoolPtrInput
	// DNS API server address.
	Dns pulumi.StringPtrInput
	// DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
	DnsZone pulumi.StringPtrInput
	// List of exit nodes for EVPN.
	ExitNodes pulumi.StringArrayInput
	// Enable local routing for EVPN exit nodes.
	ExitNodesLocalRouting pulumi.BoolPtrInput
	// IP Address Management system.
	Ipam pulumi.StringPtrInput
	// MTU value for the zone.
	Mtu pulumi.IntPtrInput
	// The Proxmox nodes which the zone and associated VNets should be deployed on
	Nodes pulumi.StringArrayInput
	// Indicates if the zone has pending configuration changes that need to be applied.
	Pending pulumi.BoolPtrInput
	// Primary exit node for EVPN.
	PrimaryExitNode pulumi.StringPtrInput
	// Reverse DNS API server address.
	ReverseDns pulumi.StringPtrInput
	// Route target import for EVPN.
	RtImport pulumi.StringPtrInput
	// Indicates the current state of the zone.
	State pulumi.StringPtrInput
	// VRF VXLAN-ID used for dedicated routing interconnect between VNets. It must be different than the VXLAN-ID of the VNets.
	VrfVxlan pulumi.IntPtrInput
	// The unique identifier of the SDN zone.
	ZoneId pulumi.StringPtrInput
}

func (EvpnState) ElementType() reflect.Type {
	return reflect.TypeOf((*evpnState)(nil)).Elem()
}

type evpnArgs struct {
	// Enable subnet advertisement for EVPN.
	AdvertiseSubnets *bool `pulumi:"advertiseSubnets"`
	// EVPN controller address.
	Controller string `pulumi:"controller"`
	// Disable ARP/ND suppression for EVPN.
	DisableArpNdSuppression *bool `pulumi:"disableArpNdSuppression"`
	// DNS API server address.
	Dns *string `pulumi:"dns"`
	// DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
	DnsZone *string `pulumi:"dnsZone"`
	// List of exit nodes for EVPN.
	ExitNodes []string `pulumi:"exitNodes"`
	// Enable local routing for EVPN exit nodes.
	ExitNodesLocalRouting *bool `pulumi:"exitNodesLocalRouting"`
	// IP Address Management system.
	Ipam *string `pulumi:"ipam"`
	// MTU value for the zone.
	Mtu *int `pulumi:"mtu"`
	// The Proxmox nodes which the zone and associated VNets should be deployed on
	Nodes []string `pulumi:"nodes"`
	// Primary exit node for EVPN.
	PrimaryExitNode *string `pulumi:"primaryExitNode"`
	// Reverse DNS API server address.
	ReverseDns *string `pulumi:"reverseDns"`
	// Route target import for EVPN.
	RtImport *string `pulumi:"rtImport"`
	// VRF VXLAN-ID used for dedicated routing interconnect between VNets. It must be different than the VXLAN-ID of the VNets.
	VrfVxlan int `pulumi:"vrfVxlan"`
	// The unique identifier of the SDN zone.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a Evpn resource.
type EvpnArgs struct {
	// Enable subnet advertisement for EVPN.
	AdvertiseSubnets pulumi.BoolPtrInput
	// EVPN controller address.
	Controller pulumi.StringInput
	// Disable ARP/ND suppression for EVPN.
	DisableArpNdSuppression pulumi.BoolPtrInput
	// DNS API server address.
	Dns pulumi.StringPtrInput
	// DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
	DnsZone pulumi.StringPtrInput
	// List of exit nodes for EVPN.
	ExitNodes pulumi.StringArrayInput
	// Enable local routing for EVPN exit nodes.
	ExitNodesLocalRouting pulumi.BoolPtrInput
	// IP Address Management system.
	Ipam pulumi.StringPtrInput
	// MTU value for the zone.
	Mtu pulumi.IntPtrInput
	// The Proxmox nodes which the zone and associated VNets should be deployed on
	Nodes pulumi.StringArrayInput
	// Primary exit node for EVPN.
	PrimaryExitNode pulumi.StringPtrInput
	// Reverse DNS API server address.
	ReverseDns pulumi.StringPtrInput
	// Route target import for EVPN.
	RtImport pulumi.StringPtrInput
	// VRF VXLAN-ID used for dedicated routing interconnect between VNets. It must be different than the VXLAN-ID of the VNets.
	VrfVxlan pulumi.IntInput
	// The unique identifier of the SDN zone.
	ZoneId pulumi.StringInput
}

func (EvpnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*evpnArgs)(nil)).Elem()
}

type EvpnInput interface {
	pulumi.Input

	ToEvpnOutput() EvpnOutput
	ToEvpnOutputWithContext(ctx context.Context) EvpnOutput
}

func (*Evpn) ElementType() reflect.Type {
	return reflect.TypeOf((**Evpn)(nil)).Elem()
}

func (i *Evpn) ToEvpnOutput() EvpnOutput {
	return i.ToEvpnOutputWithContext(context.Background())
}

func (i *Evpn) ToEvpnOutputWithContext(ctx context.Context) EvpnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EvpnOutput)
}

// EvpnArrayInput is an input type that accepts EvpnArray and EvpnArrayOutput values.
// You can construct a concrete instance of `EvpnArrayInput` via:
//
//	EvpnArray{ EvpnArgs{...} }
type EvpnArrayInput interface {
	pulumi.Input

	ToEvpnArrayOutput() EvpnArrayOutput
	ToEvpnArrayOutputWithContext(context.Context) EvpnArrayOutput
}

type EvpnArray []EvpnInput

func (EvpnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Evpn)(nil)).Elem()
}

func (i EvpnArray) ToEvpnArrayOutput() EvpnArrayOutput {
	return i.ToEvpnArrayOutputWithContext(context.Background())
}

func (i EvpnArray) ToEvpnArrayOutputWithContext(ctx context.Context) EvpnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EvpnArrayOutput)
}

// EvpnMapInput is an input type that accepts EvpnMap and EvpnMapOutput values.
// You can construct a concrete instance of `EvpnMapInput` via:
//
//	EvpnMap{ "key": EvpnArgs{...} }
type EvpnMapInput interface {
	pulumi.Input

	ToEvpnMapOutput() EvpnMapOutput
	ToEvpnMapOutputWithContext(context.Context) EvpnMapOutput
}

type EvpnMap map[string]EvpnInput

func (EvpnMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Evpn)(nil)).Elem()
}

func (i EvpnMap) ToEvpnMapOutput() EvpnMapOutput {
	return i.ToEvpnMapOutputWithContext(context.Background())
}

func (i EvpnMap) ToEvpnMapOutputWithContext(ctx context.Context) EvpnMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EvpnMapOutput)
}

type EvpnOutput struct{ *pulumi.OutputState }

func (EvpnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Evpn)(nil)).Elem()
}

func (o EvpnOutput) ToEvpnOutput() EvpnOutput {
	return o
}

func (o EvpnOutput) ToEvpnOutputWithContext(ctx context.Context) EvpnOutput {
	return o
}

// Enable subnet advertisement for EVPN.
func (o EvpnOutput) AdvertiseSubnets() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Evpn) pulumi.BoolPtrOutput { return v.AdvertiseSubnets }).(pulumi.BoolPtrOutput)
}

// EVPN controller address.
func (o EvpnOutput) Controller() pulumi.StringOutput {
	return o.ApplyT(func(v *Evpn) pulumi.StringOutput { return v.Controller }).(pulumi.StringOutput)
}

// Disable ARP/ND suppression for EVPN.
func (o EvpnOutput) DisableArpNdSuppression() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Evpn) pulumi.BoolPtrOutput { return v.DisableArpNdSuppression }).(pulumi.BoolPtrOutput)
}

// DNS API server address.
func (o EvpnOutput) Dns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Evpn) pulumi.StringPtrOutput { return v.Dns }).(pulumi.StringPtrOutput)
}

// DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
func (o EvpnOutput) DnsZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Evpn) pulumi.StringPtrOutput { return v.DnsZone }).(pulumi.StringPtrOutput)
}

// List of exit nodes for EVPN.
func (o EvpnOutput) ExitNodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Evpn) pulumi.StringArrayOutput { return v.ExitNodes }).(pulumi.StringArrayOutput)
}

// Enable local routing for EVPN exit nodes.
func (o EvpnOutput) ExitNodesLocalRouting() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Evpn) pulumi.BoolPtrOutput { return v.ExitNodesLocalRouting }).(pulumi.BoolPtrOutput)
}

// IP Address Management system.
func (o EvpnOutput) Ipam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Evpn) pulumi.StringPtrOutput { return v.Ipam }).(pulumi.StringPtrOutput)
}

// MTU value for the zone.
func (o EvpnOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Evpn) pulumi.IntPtrOutput { return v.Mtu }).(pulumi.IntPtrOutput)
}

// The Proxmox nodes which the zone and associated VNets should be deployed on
func (o EvpnOutput) Nodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Evpn) pulumi.StringArrayOutput { return v.Nodes }).(pulumi.StringArrayOutput)
}

// Indicates if the zone has pending configuration changes that need to be applied.
func (o EvpnOutput) Pending() pulumi.BoolOutput {
	return o.ApplyT(func(v *Evpn) pulumi.BoolOutput { return v.Pending }).(pulumi.BoolOutput)
}

// Primary exit node for EVPN.
func (o EvpnOutput) PrimaryExitNode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Evpn) pulumi.StringPtrOutput { return v.PrimaryExitNode }).(pulumi.StringPtrOutput)
}

// Reverse DNS API server address.
func (o EvpnOutput) ReverseDns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Evpn) pulumi.StringPtrOutput { return v.ReverseDns }).(pulumi.StringPtrOutput)
}

// Route target import for EVPN.
func (o EvpnOutput) RtImport() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Evpn) pulumi.StringPtrOutput { return v.RtImport }).(pulumi.StringPtrOutput)
}

// Indicates the current state of the zone.
func (o EvpnOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Evpn) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// VRF VXLAN-ID used for dedicated routing interconnect between VNets. It must be different than the VXLAN-ID of the VNets.
func (o EvpnOutput) VrfVxlan() pulumi.IntOutput {
	return o.ApplyT(func(v *Evpn) pulumi.IntOutput { return v.VrfVxlan }).(pulumi.IntOutput)
}

// The unique identifier of the SDN zone.
func (o EvpnOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *Evpn) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type EvpnArrayOutput struct{ *pulumi.OutputState }

func (EvpnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Evpn)(nil)).Elem()
}

func (o EvpnArrayOutput) ToEvpnArrayOutput() EvpnArrayOutput {
	return o
}

func (o EvpnArrayOutput) ToEvpnArrayOutputWithContext(ctx context.Context) EvpnArrayOutput {
	return o
}

func (o EvpnArrayOutput) Index(i pulumi.IntInput) EvpnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Evpn {
		return vs[0].([]*Evpn)[vs[1].(int)]
	}).(EvpnOutput)
}

type EvpnMapOutput struct{ *pulumi.OutputState }

func (EvpnMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Evpn)(nil)).Elem()
}

func (o EvpnMapOutput) ToEvpnMapOutput() EvpnMapOutput {
	return o
}

func (o EvpnMapOutput) ToEvpnMapOutputWithContext(ctx context.Context) EvpnMapOutput {
	return o
}

func (o EvpnMapOutput) MapIndex(k pulumi.StringInput) EvpnOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Evpn {
		return vs[0].(map[string]*Evpn)[vs[1].(string)]
	}).(EvpnOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EvpnInput)(nil)).Elem(), &Evpn{})
	pulumi.RegisterInputType(reflect.TypeOf((*EvpnArrayInput)(nil)).Elem(), EvpnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EvpnMapInput)(nil)).Elem(), EvpnMap{})
	pulumi.RegisterOutputType(EvpnOutput{})
	pulumi.RegisterOutputType(EvpnArrayOutput{})
	pulumi.RegisterOutputType(EvpnMapOutput{})
}

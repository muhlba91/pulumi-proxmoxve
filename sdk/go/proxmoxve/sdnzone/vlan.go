// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdnzone

import (
	"context"
	"reflect"

	"errors"
	"github.com/muhlba91/pulumi-proxmoxve/sdk/v7/go/proxmoxve/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// VLAN Zone in Proxmox SDN. It uses an existing local Linux or OVS bridge to connect to the node's physical interface. It uses VLAN tagging defined in the VNet to isolate the network segments. This allows connectivity of VMs between different nodes.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/muhlba91/pulumi-proxmoxve/sdk/v7/go/proxmoxve/sdnzone"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdnzone.NewVlan(ctx, "example", &sdnzone.VlanArgs{
//				Bridge:  pulumi.String("vmbr0"),
//				Dns:     pulumi.String("1.1.1.1"),
//				DnsZone: pulumi.String("example.com"),
//				ZoneId:  pulumi.String("vlan1"),
//				Ipam:    pulumi.String("pve"),
//				Mtu:     pulumi.Int(1500),
//				Nodes: pulumi.StringArray{
//					pulumi.String("pve"),
//				},
//				ReverseDns: pulumi.String("1.1.1.1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// #!/usr/bin/env sh
//
// VLAN SDN zone can be imported using its unique identifier (zone ID)
//
// ```sh
// $ pulumi import proxmoxve:SDNZone/vlan:Vlan example vlan1
// ```
type Vlan struct {
	pulumi.CustomResourceState

	// The local bridge or OVS switch, already configured on *each* node that allows node-to-node connection.
	Bridge pulumi.StringOutput `pulumi:"bridge"`
	// DNS API server address.
	Dns pulumi.StringPtrOutput `pulumi:"dns"`
	// DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
	DnsZone pulumi.StringPtrOutput `pulumi:"dnsZone"`
	// IP Address Management system.
	Ipam pulumi.StringPtrOutput `pulumi:"ipam"`
	// MTU value for the zone.
	Mtu pulumi.IntPtrOutput `pulumi:"mtu"`
	// The Proxmox nodes which the zone and associated VNets should be deployed on
	Nodes pulumi.StringArrayOutput `pulumi:"nodes"`
	// Reverse DNS API server address.
	ReverseDns pulumi.StringPtrOutput `pulumi:"reverseDns"`
	// The unique identifier of the SDN zone.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewVlan registers a new resource with the given unique name, arguments, and options.
func NewVlan(ctx *pulumi.Context,
	name string, args *VlanArgs, opts ...pulumi.ResourceOption) (*Vlan, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bridge == nil {
		return nil, errors.New("invalid value for required argument 'Bridge'")
	}
	if args.Nodes == nil {
		return nil, errors.New("invalid value for required argument 'Nodes'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Vlan
	err := ctx.RegisterResource("proxmoxve:SDNZone/vlan:Vlan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVlan gets an existing Vlan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VlanState, opts ...pulumi.ResourceOption) (*Vlan, error) {
	var resource Vlan
	err := ctx.ReadResource("proxmoxve:SDNZone/vlan:Vlan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vlan resources.
type vlanState struct {
	// The local bridge or OVS switch, already configured on *each* node that allows node-to-node connection.
	Bridge *string `pulumi:"bridge"`
	// DNS API server address.
	Dns *string `pulumi:"dns"`
	// DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
	DnsZone *string `pulumi:"dnsZone"`
	// IP Address Management system.
	Ipam *string `pulumi:"ipam"`
	// MTU value for the zone.
	Mtu *int `pulumi:"mtu"`
	// The Proxmox nodes which the zone and associated VNets should be deployed on
	Nodes []string `pulumi:"nodes"`
	// Reverse DNS API server address.
	ReverseDns *string `pulumi:"reverseDns"`
	// The unique identifier of the SDN zone.
	ZoneId *string `pulumi:"zoneId"`
}

type VlanState struct {
	// The local bridge or OVS switch, already configured on *each* node that allows node-to-node connection.
	Bridge pulumi.StringPtrInput
	// DNS API server address.
	Dns pulumi.StringPtrInput
	// DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
	DnsZone pulumi.StringPtrInput
	// IP Address Management system.
	Ipam pulumi.StringPtrInput
	// MTU value for the zone.
	Mtu pulumi.IntPtrInput
	// The Proxmox nodes which the zone and associated VNets should be deployed on
	Nodes pulumi.StringArrayInput
	// Reverse DNS API server address.
	ReverseDns pulumi.StringPtrInput
	// The unique identifier of the SDN zone.
	ZoneId pulumi.StringPtrInput
}

func (VlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*vlanState)(nil)).Elem()
}

type vlanArgs struct {
	// The local bridge or OVS switch, already configured on *each* node that allows node-to-node connection.
	Bridge string `pulumi:"bridge"`
	// DNS API server address.
	Dns *string `pulumi:"dns"`
	// DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
	DnsZone *string `pulumi:"dnsZone"`
	// IP Address Management system.
	Ipam *string `pulumi:"ipam"`
	// MTU value for the zone.
	Mtu *int `pulumi:"mtu"`
	// The Proxmox nodes which the zone and associated VNets should be deployed on
	Nodes []string `pulumi:"nodes"`
	// Reverse DNS API server address.
	ReverseDns *string `pulumi:"reverseDns"`
	// The unique identifier of the SDN zone.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a Vlan resource.
type VlanArgs struct {
	// The local bridge or OVS switch, already configured on *each* node that allows node-to-node connection.
	Bridge pulumi.StringInput
	// DNS API server address.
	Dns pulumi.StringPtrInput
	// DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
	DnsZone pulumi.StringPtrInput
	// IP Address Management system.
	Ipam pulumi.StringPtrInput
	// MTU value for the zone.
	Mtu pulumi.IntPtrInput
	// The Proxmox nodes which the zone and associated VNets should be deployed on
	Nodes pulumi.StringArrayInput
	// Reverse DNS API server address.
	ReverseDns pulumi.StringPtrInput
	// The unique identifier of the SDN zone.
	ZoneId pulumi.StringInput
}

func (VlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vlanArgs)(nil)).Elem()
}

type VlanInput interface {
	pulumi.Input

	ToVlanOutput() VlanOutput
	ToVlanOutputWithContext(ctx context.Context) VlanOutput
}

func (*Vlan) ElementType() reflect.Type {
	return reflect.TypeOf((**Vlan)(nil)).Elem()
}

func (i *Vlan) ToVlanOutput() VlanOutput {
	return i.ToVlanOutputWithContext(context.Background())
}

func (i *Vlan) ToVlanOutputWithContext(ctx context.Context) VlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VlanOutput)
}

// VlanArrayInput is an input type that accepts VlanArray and VlanArrayOutput values.
// You can construct a concrete instance of `VlanArrayInput` via:
//
//	VlanArray{ VlanArgs{...} }
type VlanArrayInput interface {
	pulumi.Input

	ToVlanArrayOutput() VlanArrayOutput
	ToVlanArrayOutputWithContext(context.Context) VlanArrayOutput
}

type VlanArray []VlanInput

func (VlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vlan)(nil)).Elem()
}

func (i VlanArray) ToVlanArrayOutput() VlanArrayOutput {
	return i.ToVlanArrayOutputWithContext(context.Background())
}

func (i VlanArray) ToVlanArrayOutputWithContext(ctx context.Context) VlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VlanArrayOutput)
}

// VlanMapInput is an input type that accepts VlanMap and VlanMapOutput values.
// You can construct a concrete instance of `VlanMapInput` via:
//
//	VlanMap{ "key": VlanArgs{...} }
type VlanMapInput interface {
	pulumi.Input

	ToVlanMapOutput() VlanMapOutput
	ToVlanMapOutputWithContext(context.Context) VlanMapOutput
}

type VlanMap map[string]VlanInput

func (VlanMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vlan)(nil)).Elem()
}

func (i VlanMap) ToVlanMapOutput() VlanMapOutput {
	return i.ToVlanMapOutputWithContext(context.Background())
}

func (i VlanMap) ToVlanMapOutputWithContext(ctx context.Context) VlanMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VlanMapOutput)
}

type VlanOutput struct{ *pulumi.OutputState }

func (VlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vlan)(nil)).Elem()
}

func (o VlanOutput) ToVlanOutput() VlanOutput {
	return o
}

func (o VlanOutput) ToVlanOutputWithContext(ctx context.Context) VlanOutput {
	return o
}

// The local bridge or OVS switch, already configured on *each* node that allows node-to-node connection.
func (o VlanOutput) Bridge() pulumi.StringOutput {
	return o.ApplyT(func(v *Vlan) pulumi.StringOutput { return v.Bridge }).(pulumi.StringOutput)
}

// DNS API server address.
func (o VlanOutput) Dns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vlan) pulumi.StringPtrOutput { return v.Dns }).(pulumi.StringPtrOutput)
}

// DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
func (o VlanOutput) DnsZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vlan) pulumi.StringPtrOutput { return v.DnsZone }).(pulumi.StringPtrOutput)
}

// IP Address Management system.
func (o VlanOutput) Ipam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vlan) pulumi.StringPtrOutput { return v.Ipam }).(pulumi.StringPtrOutput)
}

// MTU value for the zone.
func (o VlanOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Vlan) pulumi.IntPtrOutput { return v.Mtu }).(pulumi.IntPtrOutput)
}

// The Proxmox nodes which the zone and associated VNets should be deployed on
func (o VlanOutput) Nodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Vlan) pulumi.StringArrayOutput { return v.Nodes }).(pulumi.StringArrayOutput)
}

// Reverse DNS API server address.
func (o VlanOutput) ReverseDns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vlan) pulumi.StringPtrOutput { return v.ReverseDns }).(pulumi.StringPtrOutput)
}

// The unique identifier of the SDN zone.
func (o VlanOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *Vlan) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type VlanArrayOutput struct{ *pulumi.OutputState }

func (VlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vlan)(nil)).Elem()
}

func (o VlanArrayOutput) ToVlanArrayOutput() VlanArrayOutput {
	return o
}

func (o VlanArrayOutput) ToVlanArrayOutputWithContext(ctx context.Context) VlanArrayOutput {
	return o
}

func (o VlanArrayOutput) Index(i pulumi.IntInput) VlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Vlan {
		return vs[0].([]*Vlan)[vs[1].(int)]
	}).(VlanOutput)
}

type VlanMapOutput struct{ *pulumi.OutputState }

func (VlanMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vlan)(nil)).Elem()
}

func (o VlanMapOutput) ToVlanMapOutput() VlanMapOutput {
	return o
}

func (o VlanMapOutput) ToVlanMapOutputWithContext(ctx context.Context) VlanMapOutput {
	return o
}

func (o VlanMapOutput) MapIndex(k pulumi.StringInput) VlanOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Vlan {
		return vs[0].(map[string]*Vlan)[vs[1].(string)]
	}).(VlanOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VlanInput)(nil)).Elem(), &Vlan{})
	pulumi.RegisterInputType(reflect.TypeOf((*VlanArrayInput)(nil)).Elem(), VlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VlanMapInput)(nil)).Elem(), VlanMap{})
	pulumi.RegisterOutputType(VlanOutput{})
	pulumi.RegisterOutputType(VlanArrayOutput{})
	pulumi.RegisterOutputType(VlanMapOutput{})
}

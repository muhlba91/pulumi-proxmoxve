// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdnzone

import (
	"context"
	"reflect"

	"errors"
	"github.com/muhlba91/pulumi-proxmoxve/sdk/v7/go/proxmoxve/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Simple Zone in Proxmox SDN. It will create an isolated VNet bridge. This bridge is not linked to a physical interface, and VM traffic is only local on each the node. It can be used in NAT or routed setups.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/muhlba91/pulumi-proxmoxve/sdk/v7/go/proxmoxve/sdnzone"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdnzone.NewSimple(ctx, "example", &sdnzone.SimpleArgs{
//				Dns:     pulumi.String("1.1.1.1"),
//				DnsZone: pulumi.String("example.com"),
//				ZoneId:  pulumi.String("simple1"),
//				Ipam:    pulumi.String("pve"),
//				Mtu:     pulumi.Int(1500),
//				Nodes: pulumi.StringArray{
//					pulumi.String("pve"),
//				},
//				ReverseDns: pulumi.String("1.1.1.1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// #!/usr/bin/env sh
//
// Simple SDN zone can be imported using its unique identifier (zone ID)
//
// ```sh
// $ pulumi import proxmoxve:SDNZone/simple:Simple example simple1
// ```
type Simple struct {
	pulumi.CustomResourceState

	// DNS API server address.
	Dns pulumi.StringPtrOutput `pulumi:"dns"`
	// DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
	DnsZone pulumi.StringPtrOutput `pulumi:"dnsZone"`
	// IP Address Management system.
	Ipam pulumi.StringPtrOutput `pulumi:"ipam"`
	// MTU value for the zone.
	Mtu pulumi.IntPtrOutput `pulumi:"mtu"`
	// The Proxmox nodes which the zone and associated VNets should be deployed on
	Nodes pulumi.StringArrayOutput `pulumi:"nodes"`
	// Reverse DNS API server address.
	ReverseDns pulumi.StringPtrOutput `pulumi:"reverseDns"`
	// The unique identifier of the SDN zone.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewSimple registers a new resource with the given unique name, arguments, and options.
func NewSimple(ctx *pulumi.Context,
	name string, args *SimpleArgs, opts ...pulumi.ResourceOption) (*Simple, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Nodes == nil {
		return nil, errors.New("invalid value for required argument 'Nodes'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Simple
	err := ctx.RegisterResource("proxmoxve:SDNZone/simple:Simple", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSimple gets an existing Simple resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSimple(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SimpleState, opts ...pulumi.ResourceOption) (*Simple, error) {
	var resource Simple
	err := ctx.ReadResource("proxmoxve:SDNZone/simple:Simple", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Simple resources.
type simpleState struct {
	// DNS API server address.
	Dns *string `pulumi:"dns"`
	// DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
	DnsZone *string `pulumi:"dnsZone"`
	// IP Address Management system.
	Ipam *string `pulumi:"ipam"`
	// MTU value for the zone.
	Mtu *int `pulumi:"mtu"`
	// The Proxmox nodes which the zone and associated VNets should be deployed on
	Nodes []string `pulumi:"nodes"`
	// Reverse DNS API server address.
	ReverseDns *string `pulumi:"reverseDns"`
	// The unique identifier of the SDN zone.
	ZoneId *string `pulumi:"zoneId"`
}

type SimpleState struct {
	// DNS API server address.
	Dns pulumi.StringPtrInput
	// DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
	DnsZone pulumi.StringPtrInput
	// IP Address Management system.
	Ipam pulumi.StringPtrInput
	// MTU value for the zone.
	Mtu pulumi.IntPtrInput
	// The Proxmox nodes which the zone and associated VNets should be deployed on
	Nodes pulumi.StringArrayInput
	// Reverse DNS API server address.
	ReverseDns pulumi.StringPtrInput
	// The unique identifier of the SDN zone.
	ZoneId pulumi.StringPtrInput
}

func (SimpleState) ElementType() reflect.Type {
	return reflect.TypeOf((*simpleState)(nil)).Elem()
}

type simpleArgs struct {
	// DNS API server address.
	Dns *string `pulumi:"dns"`
	// DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
	DnsZone *string `pulumi:"dnsZone"`
	// IP Address Management system.
	Ipam *string `pulumi:"ipam"`
	// MTU value for the zone.
	Mtu *int `pulumi:"mtu"`
	// The Proxmox nodes which the zone and associated VNets should be deployed on
	Nodes []string `pulumi:"nodes"`
	// Reverse DNS API server address.
	ReverseDns *string `pulumi:"reverseDns"`
	// The unique identifier of the SDN zone.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a Simple resource.
type SimpleArgs struct {
	// DNS API server address.
	Dns pulumi.StringPtrInput
	// DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
	DnsZone pulumi.StringPtrInput
	// IP Address Management system.
	Ipam pulumi.StringPtrInput
	// MTU value for the zone.
	Mtu pulumi.IntPtrInput
	// The Proxmox nodes which the zone and associated VNets should be deployed on
	Nodes pulumi.StringArrayInput
	// Reverse DNS API server address.
	ReverseDns pulumi.StringPtrInput
	// The unique identifier of the SDN zone.
	ZoneId pulumi.StringInput
}

func (SimpleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*simpleArgs)(nil)).Elem()
}

type SimpleInput interface {
	pulumi.Input

	ToSimpleOutput() SimpleOutput
	ToSimpleOutputWithContext(ctx context.Context) SimpleOutput
}

func (*Simple) ElementType() reflect.Type {
	return reflect.TypeOf((**Simple)(nil)).Elem()
}

func (i *Simple) ToSimpleOutput() SimpleOutput {
	return i.ToSimpleOutputWithContext(context.Background())
}

func (i *Simple) ToSimpleOutputWithContext(ctx context.Context) SimpleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SimpleOutput)
}

// SimpleArrayInput is an input type that accepts SimpleArray and SimpleArrayOutput values.
// You can construct a concrete instance of `SimpleArrayInput` via:
//
//	SimpleArray{ SimpleArgs{...} }
type SimpleArrayInput interface {
	pulumi.Input

	ToSimpleArrayOutput() SimpleArrayOutput
	ToSimpleArrayOutputWithContext(context.Context) SimpleArrayOutput
}

type SimpleArray []SimpleInput

func (SimpleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Simple)(nil)).Elem()
}

func (i SimpleArray) ToSimpleArrayOutput() SimpleArrayOutput {
	return i.ToSimpleArrayOutputWithContext(context.Background())
}

func (i SimpleArray) ToSimpleArrayOutputWithContext(ctx context.Context) SimpleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SimpleArrayOutput)
}

// SimpleMapInput is an input type that accepts SimpleMap and SimpleMapOutput values.
// You can construct a concrete instance of `SimpleMapInput` via:
//
//	SimpleMap{ "key": SimpleArgs{...} }
type SimpleMapInput interface {
	pulumi.Input

	ToSimpleMapOutput() SimpleMapOutput
	ToSimpleMapOutputWithContext(context.Context) SimpleMapOutput
}

type SimpleMap map[string]SimpleInput

func (SimpleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Simple)(nil)).Elem()
}

func (i SimpleMap) ToSimpleMapOutput() SimpleMapOutput {
	return i.ToSimpleMapOutputWithContext(context.Background())
}

func (i SimpleMap) ToSimpleMapOutputWithContext(ctx context.Context) SimpleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SimpleMapOutput)
}

type SimpleOutput struct{ *pulumi.OutputState }

func (SimpleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Simple)(nil)).Elem()
}

func (o SimpleOutput) ToSimpleOutput() SimpleOutput {
	return o
}

func (o SimpleOutput) ToSimpleOutputWithContext(ctx context.Context) SimpleOutput {
	return o
}

// DNS API server address.
func (o SimpleOutput) Dns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Simple) pulumi.StringPtrOutput { return v.Dns }).(pulumi.StringPtrOutput)
}

// DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
func (o SimpleOutput) DnsZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Simple) pulumi.StringPtrOutput { return v.DnsZone }).(pulumi.StringPtrOutput)
}

// IP Address Management system.
func (o SimpleOutput) Ipam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Simple) pulumi.StringPtrOutput { return v.Ipam }).(pulumi.StringPtrOutput)
}

// MTU value for the zone.
func (o SimpleOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Simple) pulumi.IntPtrOutput { return v.Mtu }).(pulumi.IntPtrOutput)
}

// The Proxmox nodes which the zone and associated VNets should be deployed on
func (o SimpleOutput) Nodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Simple) pulumi.StringArrayOutput { return v.Nodes }).(pulumi.StringArrayOutput)
}

// Reverse DNS API server address.
func (o SimpleOutput) ReverseDns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Simple) pulumi.StringPtrOutput { return v.ReverseDns }).(pulumi.StringPtrOutput)
}

// The unique identifier of the SDN zone.
func (o SimpleOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *Simple) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type SimpleArrayOutput struct{ *pulumi.OutputState }

func (SimpleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Simple)(nil)).Elem()
}

func (o SimpleArrayOutput) ToSimpleArrayOutput() SimpleArrayOutput {
	return o
}

func (o SimpleArrayOutput) ToSimpleArrayOutputWithContext(ctx context.Context) SimpleArrayOutput {
	return o
}

func (o SimpleArrayOutput) Index(i pulumi.IntInput) SimpleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Simple {
		return vs[0].([]*Simple)[vs[1].(int)]
	}).(SimpleOutput)
}

type SimpleMapOutput struct{ *pulumi.OutputState }

func (SimpleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Simple)(nil)).Elem()
}

func (o SimpleMapOutput) ToSimpleMapOutput() SimpleMapOutput {
	return o
}

func (o SimpleMapOutput) ToSimpleMapOutputWithContext(ctx context.Context) SimpleMapOutput {
	return o
}

func (o SimpleMapOutput) MapIndex(k pulumi.StringInput) SimpleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Simple {
		return vs[0].(map[string]*Simple)[vs[1].(string)]
	}).(SimpleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SimpleInput)(nil)).Elem(), &Simple{})
	pulumi.RegisterInputType(reflect.TypeOf((*SimpleArrayInput)(nil)).Elem(), SimpleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SimpleMapInput)(nil)).Elem(), SimpleMap{})
	pulumi.RegisterOutputType(SimpleOutput{})
	pulumi.RegisterOutputType(SimpleArrayOutput{})
	pulumi.RegisterOutputType(SimpleMapOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdnzone

import (
	"context"
	"reflect"

	"errors"
	"github.com/muhlba91/pulumi-proxmoxve/sdk/v7/go/proxmoxve/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// QinQ Zone in Proxmox SDN. QinQ also known as VLAN stacking, that uses multiple layers of VLAN tags for isolation. The QinQ zone defines the outer VLAN tag (the Service VLAN) whereas the inner VLAN tag is defined by the VNet. Your physical network switches must support stacked VLANs for this configuration. Due to the double stacking of tags, you need 4 more bytes for QinQ VLANs. For example, you must reduce the MTU to 1496 if you physical interface MTU is 1500.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/muhlba91/pulumi-proxmoxve/sdk/v7/go/proxmoxve/sdnzone"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdnzone.NewQinq(ctx, "example", &sdnzone.QinqArgs{
//				Bridge:  pulumi.String("vmbr0"),
//				Dns:     pulumi.String("1.1.1.1"),
//				DnsZone: pulumi.String("example.com"),
//				ZoneId:  pulumi.String("qinq1"),
//				Ipam:    pulumi.String("pve"),
//				Mtu:     pulumi.Int(1496),
//				Nodes: pulumi.StringArray{
//					pulumi.String("pve"),
//				},
//				ReverseDns:          pulumi.String("1.1.1.1"),
//				ServiceVlan:         pulumi.Int(100),
//				ServiceVlanProtocol: pulumi.String("802.1ad"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// #!/usr/bin/env sh
//
// QinQ SDN zone can be imported using its unique identifier (zone ID)
//
// ```sh
// $ pulumi import proxmoxve:SDNZone/qinq:Qinq example qinq1
// ```
type Qinq struct {
	pulumi.CustomResourceState

	// A local, VLAN-aware bridge that is already configured on each local node
	Bridge pulumi.StringOutput `pulumi:"bridge"`
	// DNS API server address.
	Dns pulumi.StringPtrOutput `pulumi:"dns"`
	// DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
	DnsZone pulumi.StringPtrOutput `pulumi:"dnsZone"`
	// IP Address Management system.
	Ipam pulumi.StringPtrOutput `pulumi:"ipam"`
	// MTU value for the zone.
	Mtu pulumi.IntPtrOutput `pulumi:"mtu"`
	// The Proxmox nodes which the zone and associated VNets should be deployed on
	Nodes pulumi.StringArrayOutput `pulumi:"nodes"`
	// Reverse DNS API server address.
	ReverseDns pulumi.StringPtrOutput `pulumi:"reverseDns"`
	// Service VLAN tag for QinQ. The tag must be between `1` and `4094`.
	ServiceVlan pulumi.IntOutput `pulumi:"serviceVlan"`
	// Service VLAN protocol for QinQ. The protocol must be `802.1ad` or `802.1q`.
	ServiceVlanProtocol pulumi.StringPtrOutput `pulumi:"serviceVlanProtocol"`
	// The unique identifier of the SDN zone.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewQinq registers a new resource with the given unique name, arguments, and options.
func NewQinq(ctx *pulumi.Context,
	name string, args *QinqArgs, opts ...pulumi.ResourceOption) (*Qinq, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bridge == nil {
		return nil, errors.New("invalid value for required argument 'Bridge'")
	}
	if args.Nodes == nil {
		return nil, errors.New("invalid value for required argument 'Nodes'")
	}
	if args.ServiceVlan == nil {
		return nil, errors.New("invalid value for required argument 'ServiceVlan'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Qinq
	err := ctx.RegisterResource("proxmoxve:SDNZone/qinq:Qinq", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQinq gets an existing Qinq resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQinq(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QinqState, opts ...pulumi.ResourceOption) (*Qinq, error) {
	var resource Qinq
	err := ctx.ReadResource("proxmoxve:SDNZone/qinq:Qinq", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Qinq resources.
type qinqState struct {
	// A local, VLAN-aware bridge that is already configured on each local node
	Bridge *string `pulumi:"bridge"`
	// DNS API server address.
	Dns *string `pulumi:"dns"`
	// DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
	DnsZone *string `pulumi:"dnsZone"`
	// IP Address Management system.
	Ipam *string `pulumi:"ipam"`
	// MTU value for the zone.
	Mtu *int `pulumi:"mtu"`
	// The Proxmox nodes which the zone and associated VNets should be deployed on
	Nodes []string `pulumi:"nodes"`
	// Reverse DNS API server address.
	ReverseDns *string `pulumi:"reverseDns"`
	// Service VLAN tag for QinQ. The tag must be between `1` and `4094`.
	ServiceVlan *int `pulumi:"serviceVlan"`
	// Service VLAN protocol for QinQ. The protocol must be `802.1ad` or `802.1q`.
	ServiceVlanProtocol *string `pulumi:"serviceVlanProtocol"`
	// The unique identifier of the SDN zone.
	ZoneId *string `pulumi:"zoneId"`
}

type QinqState struct {
	// A local, VLAN-aware bridge that is already configured on each local node
	Bridge pulumi.StringPtrInput
	// DNS API server address.
	Dns pulumi.StringPtrInput
	// DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
	DnsZone pulumi.StringPtrInput
	// IP Address Management system.
	Ipam pulumi.StringPtrInput
	// MTU value for the zone.
	Mtu pulumi.IntPtrInput
	// The Proxmox nodes which the zone and associated VNets should be deployed on
	Nodes pulumi.StringArrayInput
	// Reverse DNS API server address.
	ReverseDns pulumi.StringPtrInput
	// Service VLAN tag for QinQ. The tag must be between `1` and `4094`.
	ServiceVlan pulumi.IntPtrInput
	// Service VLAN protocol for QinQ. The protocol must be `802.1ad` or `802.1q`.
	ServiceVlanProtocol pulumi.StringPtrInput
	// The unique identifier of the SDN zone.
	ZoneId pulumi.StringPtrInput
}

func (QinqState) ElementType() reflect.Type {
	return reflect.TypeOf((*qinqState)(nil)).Elem()
}

type qinqArgs struct {
	// A local, VLAN-aware bridge that is already configured on each local node
	Bridge string `pulumi:"bridge"`
	// DNS API server address.
	Dns *string `pulumi:"dns"`
	// DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
	DnsZone *string `pulumi:"dnsZone"`
	// IP Address Management system.
	Ipam *string `pulumi:"ipam"`
	// MTU value for the zone.
	Mtu *int `pulumi:"mtu"`
	// The Proxmox nodes which the zone and associated VNets should be deployed on
	Nodes []string `pulumi:"nodes"`
	// Reverse DNS API server address.
	ReverseDns *string `pulumi:"reverseDns"`
	// Service VLAN tag for QinQ. The tag must be between `1` and `4094`.
	ServiceVlan int `pulumi:"serviceVlan"`
	// Service VLAN protocol for QinQ. The protocol must be `802.1ad` or `802.1q`.
	ServiceVlanProtocol *string `pulumi:"serviceVlanProtocol"`
	// The unique identifier of the SDN zone.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a Qinq resource.
type QinqArgs struct {
	// A local, VLAN-aware bridge that is already configured on each local node
	Bridge pulumi.StringInput
	// DNS API server address.
	Dns pulumi.StringPtrInput
	// DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
	DnsZone pulumi.StringPtrInput
	// IP Address Management system.
	Ipam pulumi.StringPtrInput
	// MTU value for the zone.
	Mtu pulumi.IntPtrInput
	// The Proxmox nodes which the zone and associated VNets should be deployed on
	Nodes pulumi.StringArrayInput
	// Reverse DNS API server address.
	ReverseDns pulumi.StringPtrInput
	// Service VLAN tag for QinQ. The tag must be between `1` and `4094`.
	ServiceVlan pulumi.IntInput
	// Service VLAN protocol for QinQ. The protocol must be `802.1ad` or `802.1q`.
	ServiceVlanProtocol pulumi.StringPtrInput
	// The unique identifier of the SDN zone.
	ZoneId pulumi.StringInput
}

func (QinqArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*qinqArgs)(nil)).Elem()
}

type QinqInput interface {
	pulumi.Input

	ToQinqOutput() QinqOutput
	ToQinqOutputWithContext(ctx context.Context) QinqOutput
}

func (*Qinq) ElementType() reflect.Type {
	return reflect.TypeOf((**Qinq)(nil)).Elem()
}

func (i *Qinq) ToQinqOutput() QinqOutput {
	return i.ToQinqOutputWithContext(context.Background())
}

func (i *Qinq) ToQinqOutputWithContext(ctx context.Context) QinqOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QinqOutput)
}

// QinqArrayInput is an input type that accepts QinqArray and QinqArrayOutput values.
// You can construct a concrete instance of `QinqArrayInput` via:
//
//	QinqArray{ QinqArgs{...} }
type QinqArrayInput interface {
	pulumi.Input

	ToQinqArrayOutput() QinqArrayOutput
	ToQinqArrayOutputWithContext(context.Context) QinqArrayOutput
}

type QinqArray []QinqInput

func (QinqArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Qinq)(nil)).Elem()
}

func (i QinqArray) ToQinqArrayOutput() QinqArrayOutput {
	return i.ToQinqArrayOutputWithContext(context.Background())
}

func (i QinqArray) ToQinqArrayOutputWithContext(ctx context.Context) QinqArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QinqArrayOutput)
}

// QinqMapInput is an input type that accepts QinqMap and QinqMapOutput values.
// You can construct a concrete instance of `QinqMapInput` via:
//
//	QinqMap{ "key": QinqArgs{...} }
type QinqMapInput interface {
	pulumi.Input

	ToQinqMapOutput() QinqMapOutput
	ToQinqMapOutputWithContext(context.Context) QinqMapOutput
}

type QinqMap map[string]QinqInput

func (QinqMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Qinq)(nil)).Elem()
}

func (i QinqMap) ToQinqMapOutput() QinqMapOutput {
	return i.ToQinqMapOutputWithContext(context.Background())
}

func (i QinqMap) ToQinqMapOutputWithContext(ctx context.Context) QinqMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QinqMapOutput)
}

type QinqOutput struct{ *pulumi.OutputState }

func (QinqOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Qinq)(nil)).Elem()
}

func (o QinqOutput) ToQinqOutput() QinqOutput {
	return o
}

func (o QinqOutput) ToQinqOutputWithContext(ctx context.Context) QinqOutput {
	return o
}

// A local, VLAN-aware bridge that is already configured on each local node
func (o QinqOutput) Bridge() pulumi.StringOutput {
	return o.ApplyT(func(v *Qinq) pulumi.StringOutput { return v.Bridge }).(pulumi.StringOutput)
}

// DNS API server address.
func (o QinqOutput) Dns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Qinq) pulumi.StringPtrOutput { return v.Dns }).(pulumi.StringPtrOutput)
}

// DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
func (o QinqOutput) DnsZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Qinq) pulumi.StringPtrOutput { return v.DnsZone }).(pulumi.StringPtrOutput)
}

// IP Address Management system.
func (o QinqOutput) Ipam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Qinq) pulumi.StringPtrOutput { return v.Ipam }).(pulumi.StringPtrOutput)
}

// MTU value for the zone.
func (o QinqOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Qinq) pulumi.IntPtrOutput { return v.Mtu }).(pulumi.IntPtrOutput)
}

// The Proxmox nodes which the zone and associated VNets should be deployed on
func (o QinqOutput) Nodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Qinq) pulumi.StringArrayOutput { return v.Nodes }).(pulumi.StringArrayOutput)
}

// Reverse DNS API server address.
func (o QinqOutput) ReverseDns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Qinq) pulumi.StringPtrOutput { return v.ReverseDns }).(pulumi.StringPtrOutput)
}

// Service VLAN tag for QinQ. The tag must be between `1` and `4094`.
func (o QinqOutput) ServiceVlan() pulumi.IntOutput {
	return o.ApplyT(func(v *Qinq) pulumi.IntOutput { return v.ServiceVlan }).(pulumi.IntOutput)
}

// Service VLAN protocol for QinQ. The protocol must be `802.1ad` or `802.1q`.
func (o QinqOutput) ServiceVlanProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Qinq) pulumi.StringPtrOutput { return v.ServiceVlanProtocol }).(pulumi.StringPtrOutput)
}

// The unique identifier of the SDN zone.
func (o QinqOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *Qinq) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type QinqArrayOutput struct{ *pulumi.OutputState }

func (QinqArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Qinq)(nil)).Elem()
}

func (o QinqArrayOutput) ToQinqArrayOutput() QinqArrayOutput {
	return o
}

func (o QinqArrayOutput) ToQinqArrayOutputWithContext(ctx context.Context) QinqArrayOutput {
	return o
}

func (o QinqArrayOutput) Index(i pulumi.IntInput) QinqOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Qinq {
		return vs[0].([]*Qinq)[vs[1].(int)]
	}).(QinqOutput)
}

type QinqMapOutput struct{ *pulumi.OutputState }

func (QinqMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Qinq)(nil)).Elem()
}

func (o QinqMapOutput) ToQinqMapOutput() QinqMapOutput {
	return o
}

func (o QinqMapOutput) ToQinqMapOutputWithContext(ctx context.Context) QinqMapOutput {
	return o
}

func (o QinqMapOutput) MapIndex(k pulumi.StringInput) QinqOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Qinq {
		return vs[0].(map[string]*Qinq)[vs[1].(string)]
	}).(QinqOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*QinqInput)(nil)).Elem(), &Qinq{})
	pulumi.RegisterInputType(reflect.TypeOf((*QinqArrayInput)(nil)).Elem(), QinqArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QinqMapInput)(nil)).Elem(), QinqMap{})
	pulumi.RegisterOutputType(QinqOutput{})
	pulumi.RegisterOutputType(QinqArrayOutput{})
	pulumi.RegisterOutputType(QinqMapOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdnzone

import (
	"context"
	"reflect"

	"github.com/muhlba91/pulumi-proxmoxve/sdk/v7/go/proxmoxve/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves information about a VLAN Zone in Proxmox SDN. It uses an existing local Linux or OVS bridge to connect to the node's physical interface. It uses VLAN tagging defined in the VNet to isolate the network segments. This allows connectivity of VMs between different nodes.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/muhlba91/pulumi-proxmoxve/sdk/v7/go/proxmoxve/sdnzone"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := sdnzone.GetVlan(ctx, &sdnzone.GetVlanArgs{
//				Id: "vlan1",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("dataProxmoxVirtualEnvironmentSdnZoneVlan", pulumi.Map{
//				"id":          example.Id,
//				"nodes":       example.Nodes,
//				"bridge":      example.Bridge,
//				"mtu":         example.Mtu,
//				"dns":         example.Dns,
//				"dns_zone":    example.DnsZone,
//				"ipam":        example.Ipam,
//				"reverse_dns": example.ReverseDns,
//			})
//			return nil
//		})
//	}
//
// ```
func LookupVlan(ctx *pulumi.Context, args *LookupVlanArgs, opts ...pulumi.InvokeOption) (*LookupVlanResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVlanResult
	err := ctx.Invoke("proxmoxve:SDNZone/getVlan:getVlan", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVlan.
type LookupVlanArgs struct {
	// The unique identifier of the SDN zone.
	Id string `pulumi:"id"`
}

// A collection of values returned by getVlan.
type LookupVlanResult struct {
	// The local bridge or OVS switch, already configured on *each* node that allows node-to-node connection.
	Bridge string `pulumi:"bridge"`
	// DNS API server address.
	Dns string `pulumi:"dns"`
	// DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
	DnsZone string `pulumi:"dnsZone"`
	// The unique identifier of the SDN zone.
	Id string `pulumi:"id"`
	// IP Address Management system.
	Ipam string `pulumi:"ipam"`
	// MTU value for the zone.
	Mtu int `pulumi:"mtu"`
	// The Proxmox nodes which the zone and associated VNets are deployed on
	Nodes []string `pulumi:"nodes"`
	// Reverse DNS API server address.
	ReverseDns string `pulumi:"reverseDns"`
}

func LookupVlanOutput(ctx *pulumi.Context, args LookupVlanOutputArgs, opts ...pulumi.InvokeOption) LookupVlanResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupVlanResultOutput, error) {
			args := v.(LookupVlanArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("proxmoxve:SDNZone/getVlan:getVlan", args, LookupVlanResultOutput{}, options).(LookupVlanResultOutput), nil
		}).(LookupVlanResultOutput)
}

// A collection of arguments for invoking getVlan.
type LookupVlanOutputArgs struct {
	// The unique identifier of the SDN zone.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupVlanOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVlanArgs)(nil)).Elem()
}

// A collection of values returned by getVlan.
type LookupVlanResultOutput struct{ *pulumi.OutputState }

func (LookupVlanResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVlanResult)(nil)).Elem()
}

func (o LookupVlanResultOutput) ToLookupVlanResultOutput() LookupVlanResultOutput {
	return o
}

func (o LookupVlanResultOutput) ToLookupVlanResultOutputWithContext(ctx context.Context) LookupVlanResultOutput {
	return o
}

// The local bridge or OVS switch, already configured on *each* node that allows node-to-node connection.
func (o LookupVlanResultOutput) Bridge() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVlanResult) string { return v.Bridge }).(pulumi.StringOutput)
}

// DNS API server address.
func (o LookupVlanResultOutput) Dns() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVlanResult) string { return v.Dns }).(pulumi.StringOutput)
}

// DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
func (o LookupVlanResultOutput) DnsZone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVlanResult) string { return v.DnsZone }).(pulumi.StringOutput)
}

// The unique identifier of the SDN zone.
func (o LookupVlanResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVlanResult) string { return v.Id }).(pulumi.StringOutput)
}

// IP Address Management system.
func (o LookupVlanResultOutput) Ipam() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVlanResult) string { return v.Ipam }).(pulumi.StringOutput)
}

// MTU value for the zone.
func (o LookupVlanResultOutput) Mtu() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVlanResult) int { return v.Mtu }).(pulumi.IntOutput)
}

// The Proxmox nodes which the zone and associated VNets are deployed on
func (o LookupVlanResultOutput) Nodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupVlanResult) []string { return v.Nodes }).(pulumi.StringArrayOutput)
}

// Reverse DNS API server address.
func (o LookupVlanResultOutput) ReverseDns() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVlanResult) string { return v.ReverseDns }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVlanResultOutput{})
}

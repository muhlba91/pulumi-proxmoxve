// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdnzone

import (
	"context"
	"reflect"

	"github.com/muhlba91/pulumi-proxmoxve/sdk/v7/go/proxmoxve/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves information about a VXLAN Zone in Proxmox SDN. It establishes a tunnel (overlay) on top of an existing network (underlay). This encapsulates layer 2 Ethernet frames within layer 4 UDP datagrams using the default destination port 4789. You have to configure the underlay network yourself to enable UDP connectivity between all peers. Because VXLAN encapsulation uses 50 bytes, the MTU needs to be 50 bytes lower than the outgoing physical interface.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/muhlba91/pulumi-proxmoxve/sdk/v7/go/proxmoxve/sdnzone"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := sdnzone.GetVxlan(ctx, &sdnzone.GetVxlanArgs{
//				Id: "vxlan1",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("dataProxmoxVirtualEnvironmentSdnZoneVxlan", pulumi.Map{
//				"id":          example.Id,
//				"nodes":       example.Nodes,
//				"peers":       example.Peers,
//				"mtu":         example.Mtu,
//				"dns":         example.Dns,
//				"dns_zone":    example.DnsZone,
//				"ipam":        example.Ipam,
//				"reverse_dns": example.ReverseDns,
//			})
//			return nil
//		})
//	}
//
// ```
func LookupVxlan(ctx *pulumi.Context, args *LookupVxlanArgs, opts ...pulumi.InvokeOption) (*LookupVxlanResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVxlanResult
	err := ctx.Invoke("proxmoxve:SDNZone/getVxlan:getVxlan", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVxlan.
type LookupVxlanArgs struct {
	// The unique identifier of the SDN zone.
	Id string `pulumi:"id"`
}

// A collection of values returned by getVxlan.
type LookupVxlanResult struct {
	// DNS API server address.
	Dns string `pulumi:"dns"`
	// DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
	DnsZone string `pulumi:"dnsZone"`
	// The unique identifier of the SDN zone.
	Id string `pulumi:"id"`
	// IP Address Management system.
	Ipam string `pulumi:"ipam"`
	// MTU value for the zone.
	Mtu int `pulumi:"mtu"`
	// The Proxmox nodes which the zone and associated VNets are deployed on
	Nodes []string `pulumi:"nodes"`
	// A list of IP addresses of each node in the VXLAN zone. This can be external nodes reachable at this IP address. All nodes in the cluster need to be mentioned here
	Peers []string `pulumi:"peers"`
	// Reverse DNS API server address.
	ReverseDns string `pulumi:"reverseDns"`
}

func LookupVxlanOutput(ctx *pulumi.Context, args LookupVxlanOutputArgs, opts ...pulumi.InvokeOption) LookupVxlanResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupVxlanResultOutput, error) {
			args := v.(LookupVxlanArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("proxmoxve:SDNZone/getVxlan:getVxlan", args, LookupVxlanResultOutput{}, options).(LookupVxlanResultOutput), nil
		}).(LookupVxlanResultOutput)
}

// A collection of arguments for invoking getVxlan.
type LookupVxlanOutputArgs struct {
	// The unique identifier of the SDN zone.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupVxlanOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVxlanArgs)(nil)).Elem()
}

// A collection of values returned by getVxlan.
type LookupVxlanResultOutput struct{ *pulumi.OutputState }

func (LookupVxlanResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVxlanResult)(nil)).Elem()
}

func (o LookupVxlanResultOutput) ToLookupVxlanResultOutput() LookupVxlanResultOutput {
	return o
}

func (o LookupVxlanResultOutput) ToLookupVxlanResultOutputWithContext(ctx context.Context) LookupVxlanResultOutput {
	return o
}

// DNS API server address.
func (o LookupVxlanResultOutput) Dns() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVxlanResult) string { return v.Dns }).(pulumi.StringOutput)
}

// DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
func (o LookupVxlanResultOutput) DnsZone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVxlanResult) string { return v.DnsZone }).(pulumi.StringOutput)
}

// The unique identifier of the SDN zone.
func (o LookupVxlanResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVxlanResult) string { return v.Id }).(pulumi.StringOutput)
}

// IP Address Management system.
func (o LookupVxlanResultOutput) Ipam() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVxlanResult) string { return v.Ipam }).(pulumi.StringOutput)
}

// MTU value for the zone.
func (o LookupVxlanResultOutput) Mtu() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVxlanResult) int { return v.Mtu }).(pulumi.IntOutput)
}

// The Proxmox nodes which the zone and associated VNets are deployed on
func (o LookupVxlanResultOutput) Nodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupVxlanResult) []string { return v.Nodes }).(pulumi.StringArrayOutput)
}

// A list of IP addresses of each node in the VXLAN zone. This can be external nodes reachable at this IP address. All nodes in the cluster need to be mentioned here
func (o LookupVxlanResultOutput) Peers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupVxlanResult) []string { return v.Peers }).(pulumi.StringArrayOutput)
}

// Reverse DNS API server address.
func (o LookupVxlanResultOutput) ReverseDns() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVxlanResult) string { return v.ReverseDns }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVxlanResultOutput{})
}

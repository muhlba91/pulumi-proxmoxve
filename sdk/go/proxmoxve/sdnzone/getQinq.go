// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdnzone

import (
	"context"
	"reflect"

	"github.com/muhlba91/pulumi-proxmoxve/sdk/v7/go/proxmoxve/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves information about a QinQ Zone in Proxmox SDN. QinQ also known as VLAN stacking, that uses multiple layers of VLAN tags for isolation. The QinQ zone defines the outer VLAN tag (the Service VLAN) whereas the inner VLAN tag is defined by the VNet. Your physical network switches must support stacked VLANs for this configuration. Due to the double stacking of tags, you need 4 more bytes for QinQ VLANs. For example, you must reduce the MTU to 1496 if you physical interface MTU is 1500.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/muhlba91/pulumi-proxmoxve/sdk/v7/go/proxmoxve/sdnzone"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := sdnzone.GetQinq(ctx, &sdnzone.GetQinqArgs{
//				Id: "qinq1",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("dataProxmoxVirtualEnvironmentSdnZoneQinq", pulumi.Map{
//				"id":                    example.Id,
//				"nodes":                 example.Nodes,
//				"bridge":                example.Bridge,
//				"service_vlan":          example.ServiceVlan,
//				"service_vlan_protocol": example.ServiceVlanProtocol,
//				"mtu":                   example.Mtu,
//				"dns":                   example.Dns,
//				"dns_zone":              example.DnsZone,
//				"ipam":                  example.Ipam,
//				"reverse_dns":           example.ReverseDns,
//			})
//			return nil
//		})
//	}
//
// ```
func LookupQinq(ctx *pulumi.Context, args *LookupQinqArgs, opts ...pulumi.InvokeOption) (*LookupQinqResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupQinqResult
	err := ctx.Invoke("proxmoxve:SDNZone/getQinq:getQinq", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getQinq.
type LookupQinqArgs struct {
	// The unique identifier of the SDN zone.
	Id string `pulumi:"id"`
}

// A collection of values returned by getQinq.
type LookupQinqResult struct {
	// A local, VLAN-aware bridge that is already configured on each local node
	Bridge string `pulumi:"bridge"`
	// DNS API server address.
	Dns string `pulumi:"dns"`
	// DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
	DnsZone string `pulumi:"dnsZone"`
	// The unique identifier of the SDN zone.
	Id string `pulumi:"id"`
	// IP Address Management system.
	Ipam string `pulumi:"ipam"`
	// MTU value for the zone.
	Mtu int `pulumi:"mtu"`
	// The Proxmox nodes which the zone and associated VNets are deployed on
	Nodes []string `pulumi:"nodes"`
	// Indicates if the zone has pending configuration changes that need to be applied.
	Pending bool `pulumi:"pending"`
	// Reverse DNS API server address.
	ReverseDns string `pulumi:"reverseDns"`
	// Service VLAN tag for QinQ. The tag must be between `1` and `4094`.
	ServiceVlan int `pulumi:"serviceVlan"`
	// Service VLAN protocol for QinQ. The protocol must be `802.1ad` or `802.1q`.
	ServiceVlanProtocol string `pulumi:"serviceVlanProtocol"`
	// Indicates the current state of the zone.
	State string `pulumi:"state"`
}

func LookupQinqOutput(ctx *pulumi.Context, args LookupQinqOutputArgs, opts ...pulumi.InvokeOption) LookupQinqResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupQinqResultOutput, error) {
			args := v.(LookupQinqArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("proxmoxve:SDNZone/getQinq:getQinq", args, LookupQinqResultOutput{}, options).(LookupQinqResultOutput), nil
		}).(LookupQinqResultOutput)
}

// A collection of arguments for invoking getQinq.
type LookupQinqOutputArgs struct {
	// The unique identifier of the SDN zone.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupQinqOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupQinqArgs)(nil)).Elem()
}

// A collection of values returned by getQinq.
type LookupQinqResultOutput struct{ *pulumi.OutputState }

func (LookupQinqResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupQinqResult)(nil)).Elem()
}

func (o LookupQinqResultOutput) ToLookupQinqResultOutput() LookupQinqResultOutput {
	return o
}

func (o LookupQinqResultOutput) ToLookupQinqResultOutputWithContext(ctx context.Context) LookupQinqResultOutput {
	return o
}

// A local, VLAN-aware bridge that is already configured on each local node
func (o LookupQinqResultOutput) Bridge() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQinqResult) string { return v.Bridge }).(pulumi.StringOutput)
}

// DNS API server address.
func (o LookupQinqResultOutput) Dns() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQinqResult) string { return v.Dns }).(pulumi.StringOutput)
}

// DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
func (o LookupQinqResultOutput) DnsZone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQinqResult) string { return v.DnsZone }).(pulumi.StringOutput)
}

// The unique identifier of the SDN zone.
func (o LookupQinqResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQinqResult) string { return v.Id }).(pulumi.StringOutput)
}

// IP Address Management system.
func (o LookupQinqResultOutput) Ipam() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQinqResult) string { return v.Ipam }).(pulumi.StringOutput)
}

// MTU value for the zone.
func (o LookupQinqResultOutput) Mtu() pulumi.IntOutput {
	return o.ApplyT(func(v LookupQinqResult) int { return v.Mtu }).(pulumi.IntOutput)
}

// The Proxmox nodes which the zone and associated VNets are deployed on
func (o LookupQinqResultOutput) Nodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupQinqResult) []string { return v.Nodes }).(pulumi.StringArrayOutput)
}

// Indicates if the zone has pending configuration changes that need to be applied.
func (o LookupQinqResultOutput) Pending() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupQinqResult) bool { return v.Pending }).(pulumi.BoolOutput)
}

// Reverse DNS API server address.
func (o LookupQinqResultOutput) ReverseDns() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQinqResult) string { return v.ReverseDns }).(pulumi.StringOutput)
}

// Service VLAN tag for QinQ. The tag must be between `1` and `4094`.
func (o LookupQinqResultOutput) ServiceVlan() pulumi.IntOutput {
	return o.ApplyT(func(v LookupQinqResult) int { return v.ServiceVlan }).(pulumi.IntOutput)
}

// Service VLAN protocol for QinQ. The protocol must be `802.1ad` or `802.1q`.
func (o LookupQinqResultOutput) ServiceVlanProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQinqResult) string { return v.ServiceVlanProtocol }).(pulumi.StringOutput)
}

// Indicates the current state of the zone.
func (o LookupQinqResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQinqResult) string { return v.State }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupQinqResultOutput{})
}

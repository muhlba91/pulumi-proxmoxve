// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdnzone

import (
	"context"
	"reflect"

	"github.com/muhlba91/pulumi-proxmoxve/sdk/v7/go/proxmoxve/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves information about an EVPN Zone in Proxmox SDN. The EVPN zone creates a routable Layer 3 network, capable of spanning across multiple clusters.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/muhlba91/pulumi-proxmoxve/sdk/v7/go/proxmoxve/sdnzone"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := sdnzone.GetEvpn(ctx, &sdnzone.GetEvpnArgs{
//				Id: "evpn1",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("dataProxmoxVirtualEnvironmentSdnZoneEvpn", pulumi.Map{
//				"id":                         example.Id,
//				"nodes":                      example.Nodes,
//				"controller":                 example.Controller,
//				"vrf_vxlan":                  example.VrfVxlan,
//				"advertise_subnets":          example.AdvertiseSubnets,
//				"disable_arp_nd_suppression": example.DisableArpNdSuppression,
//				"exit_nodes":                 example.ExitNodes,
//				"exit_nodes_local_routing":   example.ExitNodesLocalRouting,
//				"primary_exit_node":          example.PrimaryExitNode,
//				"rt_import":                  example.RtImport,
//				"mtu":                        example.Mtu,
//				"dns":                        example.Dns,
//				"dns_zone":                   example.DnsZone,
//				"ipam":                       example.Ipam,
//				"reverse_dns":                example.ReverseDns,
//			})
//			return nil
//		})
//	}
//
// ```
func LookupEvpn(ctx *pulumi.Context, args *LookupEvpnArgs, opts ...pulumi.InvokeOption) (*LookupEvpnResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupEvpnResult
	err := ctx.Invoke("proxmoxve:SDNZone/getEvpn:getEvpn", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEvpn.
type LookupEvpnArgs struct {
	// The unique identifier of the SDN zone.
	Id string `pulumi:"id"`
}

// A collection of values returned by getEvpn.
type LookupEvpnResult struct {
	// Enable subnet advertisement for EVPN.
	AdvertiseSubnets bool `pulumi:"advertiseSubnets"`
	// EVPN controller address.
	Controller string `pulumi:"controller"`
	// Disable ARP/ND suppression for EVPN.
	DisableArpNdSuppression bool `pulumi:"disableArpNdSuppression"`
	// DNS API server address.
	Dns string `pulumi:"dns"`
	// DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
	DnsZone string `pulumi:"dnsZone"`
	// List of exit nodes for EVPN.
	ExitNodes []string `pulumi:"exitNodes"`
	// Enable local routing for EVPN exit nodes.
	ExitNodesLocalRouting bool `pulumi:"exitNodesLocalRouting"`
	// The unique identifier of the SDN zone.
	Id string `pulumi:"id"`
	// IP Address Management system.
	Ipam string `pulumi:"ipam"`
	// MTU value for the zone.
	Mtu int `pulumi:"mtu"`
	// The Proxmox nodes which the zone and associated VNets are deployed on
	Nodes []string `pulumi:"nodes"`
	// Indicates if the zone has pending configuration changes that need to be applied.
	Pending bool `pulumi:"pending"`
	// Primary exit node for EVPN.
	PrimaryExitNode string `pulumi:"primaryExitNode"`
	// Reverse DNS API server address.
	ReverseDns string `pulumi:"reverseDns"`
	// Route target import for EVPN. Must be in the format '\n\n:\n\n' (e.g., '65000:65000').
	RtImport string `pulumi:"rtImport"`
	// Indicates the current state of the zone.
	State string `pulumi:"state"`
	// VRF VXLAN-ID used for dedicated routing interconnect between VNets. It must be different than the VXLAN-ID of the VNets.
	VrfVxlan int `pulumi:"vrfVxlan"`
}

func LookupEvpnOutput(ctx *pulumi.Context, args LookupEvpnOutputArgs, opts ...pulumi.InvokeOption) LookupEvpnResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupEvpnResultOutput, error) {
			args := v.(LookupEvpnArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("proxmoxve:SDNZone/getEvpn:getEvpn", args, LookupEvpnResultOutput{}, options).(LookupEvpnResultOutput), nil
		}).(LookupEvpnResultOutput)
}

// A collection of arguments for invoking getEvpn.
type LookupEvpnOutputArgs struct {
	// The unique identifier of the SDN zone.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupEvpnOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEvpnArgs)(nil)).Elem()
}

// A collection of values returned by getEvpn.
type LookupEvpnResultOutput struct{ *pulumi.OutputState }

func (LookupEvpnResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEvpnResult)(nil)).Elem()
}

func (o LookupEvpnResultOutput) ToLookupEvpnResultOutput() LookupEvpnResultOutput {
	return o
}

func (o LookupEvpnResultOutput) ToLookupEvpnResultOutputWithContext(ctx context.Context) LookupEvpnResultOutput {
	return o
}

// Enable subnet advertisement for EVPN.
func (o LookupEvpnResultOutput) AdvertiseSubnets() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEvpnResult) bool { return v.AdvertiseSubnets }).(pulumi.BoolOutput)
}

// EVPN controller address.
func (o LookupEvpnResultOutput) Controller() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEvpnResult) string { return v.Controller }).(pulumi.StringOutput)
}

// Disable ARP/ND suppression for EVPN.
func (o LookupEvpnResultOutput) DisableArpNdSuppression() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEvpnResult) bool { return v.DisableArpNdSuppression }).(pulumi.BoolOutput)
}

// DNS API server address.
func (o LookupEvpnResultOutput) Dns() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEvpnResult) string { return v.Dns }).(pulumi.StringOutput)
}

// DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
func (o LookupEvpnResultOutput) DnsZone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEvpnResult) string { return v.DnsZone }).(pulumi.StringOutput)
}

// List of exit nodes for EVPN.
func (o LookupEvpnResultOutput) ExitNodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupEvpnResult) []string { return v.ExitNodes }).(pulumi.StringArrayOutput)
}

// Enable local routing for EVPN exit nodes.
func (o LookupEvpnResultOutput) ExitNodesLocalRouting() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEvpnResult) bool { return v.ExitNodesLocalRouting }).(pulumi.BoolOutput)
}

// The unique identifier of the SDN zone.
func (o LookupEvpnResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEvpnResult) string { return v.Id }).(pulumi.StringOutput)
}

// IP Address Management system.
func (o LookupEvpnResultOutput) Ipam() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEvpnResult) string { return v.Ipam }).(pulumi.StringOutput)
}

// MTU value for the zone.
func (o LookupEvpnResultOutput) Mtu() pulumi.IntOutput {
	return o.ApplyT(func(v LookupEvpnResult) int { return v.Mtu }).(pulumi.IntOutput)
}

// The Proxmox nodes which the zone and associated VNets are deployed on
func (o LookupEvpnResultOutput) Nodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupEvpnResult) []string { return v.Nodes }).(pulumi.StringArrayOutput)
}

// Indicates if the zone has pending configuration changes that need to be applied.
func (o LookupEvpnResultOutput) Pending() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEvpnResult) bool { return v.Pending }).(pulumi.BoolOutput)
}

// Primary exit node for EVPN.
func (o LookupEvpnResultOutput) PrimaryExitNode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEvpnResult) string { return v.PrimaryExitNode }).(pulumi.StringOutput)
}

// Reverse DNS API server address.
func (o LookupEvpnResultOutput) ReverseDns() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEvpnResult) string { return v.ReverseDns }).(pulumi.StringOutput)
}

// Route target import for EVPN. Must be in the format '\n\n:\n\n' (e.g., '65000:65000').
func (o LookupEvpnResultOutput) RtImport() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEvpnResult) string { return v.RtImport }).(pulumi.StringOutput)
}

// Indicates the current state of the zone.
func (o LookupEvpnResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEvpnResult) string { return v.State }).(pulumi.StringOutput)
}

// VRF VXLAN-ID used for dedicated routing interconnect between VNets. It must be different than the VXLAN-ID of the VNets.
func (o LookupEvpnResultOutput) VrfVxlan() pulumi.IntOutput {
	return o.ApplyT(func(v LookupEvpnResult) int { return v.VrfVxlan }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupEvpnResultOutput{})
}

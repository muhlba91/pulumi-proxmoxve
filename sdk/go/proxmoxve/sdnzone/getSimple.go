// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdnzone

import (
	"context"
	"reflect"

	"github.com/muhlba91/pulumi-proxmoxve/sdk/v7/go/proxmoxve/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves information about a Simple Zone in Proxmox SDN. It will create an isolated VNet bridge. This bridge is not linked to a physical interface, and VM traffic is only local on each the node. It can be used in NAT or routed setups.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/muhlba91/pulumi-proxmoxve/sdk/v7/go/proxmoxve/sdnzone"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := sdnzone.GetSimple(ctx, &sdnzone.GetSimpleArgs{
//				Id: "simple1",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("dataProxmoxVirtualEnvironmentSdnZoneSimple", pulumi.Map{
//				"id":          example.Id,
//				"nodes":       example.Nodes,
//				"mtu":         example.Mtu,
//				"dns":         example.Dns,
//				"dns_zone":    example.DnsZone,
//				"ipam":        example.Ipam,
//				"reverse_dns": example.ReverseDns,
//			})
//			return nil
//		})
//	}
//
// ```
func LookupSimple(ctx *pulumi.Context, args *LookupSimpleArgs, opts ...pulumi.InvokeOption) (*LookupSimpleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSimpleResult
	err := ctx.Invoke("proxmoxve:SDNZone/getSimple:getSimple", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSimple.
type LookupSimpleArgs struct {
	// The unique identifier of the SDN zone.
	Id string `pulumi:"id"`
}

// A collection of values returned by getSimple.
type LookupSimpleResult struct {
	// DNS API server address.
	Dns string `pulumi:"dns"`
	// DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
	DnsZone string `pulumi:"dnsZone"`
	// The unique identifier of the SDN zone.
	Id string `pulumi:"id"`
	// IP Address Management system.
	Ipam string `pulumi:"ipam"`
	// MTU value for the zone.
	Mtu int `pulumi:"mtu"`
	// The Proxmox nodes which the zone and associated VNets are deployed on
	Nodes []string `pulumi:"nodes"`
	// Reverse DNS API server address.
	ReverseDns string `pulumi:"reverseDns"`
}

func LookupSimpleOutput(ctx *pulumi.Context, args LookupSimpleOutputArgs, opts ...pulumi.InvokeOption) LookupSimpleResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSimpleResultOutput, error) {
			args := v.(LookupSimpleArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("proxmoxve:SDNZone/getSimple:getSimple", args, LookupSimpleResultOutput{}, options).(LookupSimpleResultOutput), nil
		}).(LookupSimpleResultOutput)
}

// A collection of arguments for invoking getSimple.
type LookupSimpleOutputArgs struct {
	// The unique identifier of the SDN zone.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupSimpleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSimpleArgs)(nil)).Elem()
}

// A collection of values returned by getSimple.
type LookupSimpleResultOutput struct{ *pulumi.OutputState }

func (LookupSimpleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSimpleResult)(nil)).Elem()
}

func (o LookupSimpleResultOutput) ToLookupSimpleResultOutput() LookupSimpleResultOutput {
	return o
}

func (o LookupSimpleResultOutput) ToLookupSimpleResultOutputWithContext(ctx context.Context) LookupSimpleResultOutput {
	return o
}

// DNS API server address.
func (o LookupSimpleResultOutput) Dns() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSimpleResult) string { return v.Dns }).(pulumi.StringOutput)
}

// DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
func (o LookupSimpleResultOutput) DnsZone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSimpleResult) string { return v.DnsZone }).(pulumi.StringOutput)
}

// The unique identifier of the SDN zone.
func (o LookupSimpleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSimpleResult) string { return v.Id }).(pulumi.StringOutput)
}

// IP Address Management system.
func (o LookupSimpleResultOutput) Ipam() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSimpleResult) string { return v.Ipam }).(pulumi.StringOutput)
}

// MTU value for the zone.
func (o LookupSimpleResultOutput) Mtu() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSimpleResult) int { return v.Mtu }).(pulumi.IntOutput)
}

// The Proxmox nodes which the zone and associated VNets are deployed on
func (o LookupSimpleResultOutput) Nodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSimpleResult) []string { return v.Nodes }).(pulumi.StringArrayOutput)
}

// Reverse DNS API server address.
func (o LookupSimpleResultOutput) ReverseDns() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSimpleResult) string { return v.ReverseDns }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSimpleResultOutput{})
}

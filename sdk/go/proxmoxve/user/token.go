// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package user

import (
	"context"
	"reflect"

	"errors"
	"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// User API tokens.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/permission"
//	"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/user"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// if creating a user token, the user must be created first
//			user, err := permission.NewUser(ctx, "user", &permission.UserArgs{
//				Comment:        pulumi.String("Managed by Pulumi"),
//				Email:          pulumi.String("user@pve"),
//				Enabled:        pulumi.Bool(true),
//				ExpirationDate: pulumi.String("2034-01-01T22:00:00Z"),
//				UserId:         pulumi.String("user@pve"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = user.NewToken(ctx, "userToken", &user.TokenArgs{
//				Comment:        pulumi.String("Managed by Pulumi"),
//				ExpirationDate: pulumi.String("2033-01-01T22:00:00Z"),
//				TokenName:      pulumi.String("tk1"),
//				UserId:         user.UserId,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// #!/usr/bin/env sh
//
// #Tokens can be imported using they identifiers in format `user_id!token_name` format, e.g.:
//
// ```sh
// $ pulumi import proxmoxve:User/token:Token token1 user@pve!token1
// ```
type Token struct {
	pulumi.CustomResourceState

	// Comment for the token.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Expiration date for the token.
	ExpirationDate pulumi.StringPtrOutput `pulumi:"expirationDate"`
	// Restrict API token privileges with separate ACLs (default), or give full privileges of corresponding user.
	PrivilegesSeparation pulumi.BoolOutput `pulumi:"privilegesSeparation"`
	// User-specific token identifier.
	TokenName pulumi.StringOutput `pulumi:"tokenName"`
	// User identifier.
	UserId pulumi.StringOutput `pulumi:"userId"`
	// API token value used for authentication. It is populated only when creating a new token, and can't be retrieved at import.
	Value pulumi.StringOutput `pulumi:"value"`
}

// NewToken registers a new resource with the given unique name, arguments, and options.
func NewToken(ctx *pulumi.Context,
	name string, args *TokenArgs, opts ...pulumi.ResourceOption) (*Token, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TokenName == nil {
		return nil, errors.New("invalid value for required argument 'TokenName'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"value",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Token
	err := ctx.RegisterResource("proxmoxve:User/token:Token", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetToken gets an existing Token resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TokenState, opts ...pulumi.ResourceOption) (*Token, error) {
	var resource Token
	err := ctx.ReadResource("proxmoxve:User/token:Token", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Token resources.
type tokenState struct {
	// Comment for the token.
	Comment *string `pulumi:"comment"`
	// Expiration date for the token.
	ExpirationDate *string `pulumi:"expirationDate"`
	// Restrict API token privileges with separate ACLs (default), or give full privileges of corresponding user.
	PrivilegesSeparation *bool `pulumi:"privilegesSeparation"`
	// User-specific token identifier.
	TokenName *string `pulumi:"tokenName"`
	// User identifier.
	UserId *string `pulumi:"userId"`
	// API token value used for authentication. It is populated only when creating a new token, and can't be retrieved at import.
	Value *string `pulumi:"value"`
}

type TokenState struct {
	// Comment for the token.
	Comment pulumi.StringPtrInput
	// Expiration date for the token.
	ExpirationDate pulumi.StringPtrInput
	// Restrict API token privileges with separate ACLs (default), or give full privileges of corresponding user.
	PrivilegesSeparation pulumi.BoolPtrInput
	// User-specific token identifier.
	TokenName pulumi.StringPtrInput
	// User identifier.
	UserId pulumi.StringPtrInput
	// API token value used for authentication. It is populated only when creating a new token, and can't be retrieved at import.
	Value pulumi.StringPtrInput
}

func (TokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*tokenState)(nil)).Elem()
}

type tokenArgs struct {
	// Comment for the token.
	Comment *string `pulumi:"comment"`
	// Expiration date for the token.
	ExpirationDate *string `pulumi:"expirationDate"`
	// Restrict API token privileges with separate ACLs (default), or give full privileges of corresponding user.
	PrivilegesSeparation *bool `pulumi:"privilegesSeparation"`
	// User-specific token identifier.
	TokenName string `pulumi:"tokenName"`
	// User identifier.
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a Token resource.
type TokenArgs struct {
	// Comment for the token.
	Comment pulumi.StringPtrInput
	// Expiration date for the token.
	ExpirationDate pulumi.StringPtrInput
	// Restrict API token privileges with separate ACLs (default), or give full privileges of corresponding user.
	PrivilegesSeparation pulumi.BoolPtrInput
	// User-specific token identifier.
	TokenName pulumi.StringInput
	// User identifier.
	UserId pulumi.StringInput
}

func (TokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tokenArgs)(nil)).Elem()
}

type TokenInput interface {
	pulumi.Input

	ToTokenOutput() TokenOutput
	ToTokenOutputWithContext(ctx context.Context) TokenOutput
}

func (*Token) ElementType() reflect.Type {
	return reflect.TypeOf((**Token)(nil)).Elem()
}

func (i *Token) ToTokenOutput() TokenOutput {
	return i.ToTokenOutputWithContext(context.Background())
}

func (i *Token) ToTokenOutputWithContext(ctx context.Context) TokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenOutput)
}

// TokenArrayInput is an input type that accepts TokenArray and TokenArrayOutput values.
// You can construct a concrete instance of `TokenArrayInput` via:
//
//	TokenArray{ TokenArgs{...} }
type TokenArrayInput interface {
	pulumi.Input

	ToTokenArrayOutput() TokenArrayOutput
	ToTokenArrayOutputWithContext(context.Context) TokenArrayOutput
}

type TokenArray []TokenInput

func (TokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Token)(nil)).Elem()
}

func (i TokenArray) ToTokenArrayOutput() TokenArrayOutput {
	return i.ToTokenArrayOutputWithContext(context.Background())
}

func (i TokenArray) ToTokenArrayOutputWithContext(ctx context.Context) TokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenArrayOutput)
}

// TokenMapInput is an input type that accepts TokenMap and TokenMapOutput values.
// You can construct a concrete instance of `TokenMapInput` via:
//
//	TokenMap{ "key": TokenArgs{...} }
type TokenMapInput interface {
	pulumi.Input

	ToTokenMapOutput() TokenMapOutput
	ToTokenMapOutputWithContext(context.Context) TokenMapOutput
}

type TokenMap map[string]TokenInput

func (TokenMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Token)(nil)).Elem()
}

func (i TokenMap) ToTokenMapOutput() TokenMapOutput {
	return i.ToTokenMapOutputWithContext(context.Background())
}

func (i TokenMap) ToTokenMapOutputWithContext(ctx context.Context) TokenMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenMapOutput)
}

type TokenOutput struct{ *pulumi.OutputState }

func (TokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Token)(nil)).Elem()
}

func (o TokenOutput) ToTokenOutput() TokenOutput {
	return o
}

func (o TokenOutput) ToTokenOutputWithContext(ctx context.Context) TokenOutput {
	return o
}

// Comment for the token.
func (o TokenOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Token) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Expiration date for the token.
func (o TokenOutput) ExpirationDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Token) pulumi.StringPtrOutput { return v.ExpirationDate }).(pulumi.StringPtrOutput)
}

// Restrict API token privileges with separate ACLs (default), or give full privileges of corresponding user.
func (o TokenOutput) PrivilegesSeparation() pulumi.BoolOutput {
	return o.ApplyT(func(v *Token) pulumi.BoolOutput { return v.PrivilegesSeparation }).(pulumi.BoolOutput)
}

// User-specific token identifier.
func (o TokenOutput) TokenName() pulumi.StringOutput {
	return o.ApplyT(func(v *Token) pulumi.StringOutput { return v.TokenName }).(pulumi.StringOutput)
}

// User identifier.
func (o TokenOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *Token) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

// API token value used for authentication. It is populated only when creating a new token, and can't be retrieved at import.
func (o TokenOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *Token) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

type TokenArrayOutput struct{ *pulumi.OutputState }

func (TokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Token)(nil)).Elem()
}

func (o TokenArrayOutput) ToTokenArrayOutput() TokenArrayOutput {
	return o
}

func (o TokenArrayOutput) ToTokenArrayOutputWithContext(ctx context.Context) TokenArrayOutput {
	return o
}

func (o TokenArrayOutput) Index(i pulumi.IntInput) TokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Token {
		return vs[0].([]*Token)[vs[1].(int)]
	}).(TokenOutput)
}

type TokenMapOutput struct{ *pulumi.OutputState }

func (TokenMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Token)(nil)).Elem()
}

func (o TokenMapOutput) ToTokenMapOutput() TokenMapOutput {
	return o
}

func (o TokenMapOutput) ToTokenMapOutputWithContext(ctx context.Context) TokenMapOutput {
	return o
}

func (o TokenMapOutput) MapIndex(k pulumi.StringInput) TokenOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Token {
		return vs[0].(map[string]*Token)[vs[1].(string)]
	}).(TokenOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TokenInput)(nil)).Elem(), &Token{})
	pulumi.RegisterInputType(reflect.TypeOf((*TokenArrayInput)(nil)).Elem(), TokenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TokenMapInput)(nil)).Elem(), TokenMap{})
	pulumi.RegisterOutputType(TokenOutput{})
	pulumi.RegisterOutputType(TokenArrayOutput{})
	pulumi.RegisterOutputType(TokenMapOutput{})
}

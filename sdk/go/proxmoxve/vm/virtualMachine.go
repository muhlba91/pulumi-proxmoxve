// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vm

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VirtualMachine struct {
	pulumi.CustomResourceState

	// Whether to enable ACPI
	Acpi pulumi.BoolPtrOutput `pulumi:"acpi"`
	// The QEMU agent configuration
	Agent VirtualMachineAgentPtrOutput `pulumi:"agent"`
	// The audio devices
	AudioDevice VirtualMachineAudioDevicePtrOutput `pulumi:"audioDevice"`
	// The BIOS implementation
	Bios pulumi.StringPtrOutput `pulumi:"bios"`
	// The CDROM drive
	Cdrom VirtualMachineCdromPtrOutput `pulumi:"cdrom"`
	// The cloning configuration
	Clone VirtualMachineClonePtrOutput `pulumi:"clone"`
	// The CPU allocation
	Cpu VirtualMachineCpuPtrOutput `pulumi:"cpu"`
	// The description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The disk devices
	Disks VirtualMachineDiskArrayOutput `pulumi:"disks"`
	// The cloud-init configuration
	Initialization VirtualMachineInitializationPtrOutput `pulumi:"initialization"`
	// The IPv4 addresses published by the QEMU agent
	Ipv4Addresses pulumi.StringArrayArrayOutput `pulumi:"ipv4Addresses"`
	// The IPv6 addresses published by the QEMU agent
	Ipv6Addresses pulumi.StringArrayArrayOutput `pulumi:"ipv6Addresses"`
	// The keyboard layout
	KeyboardLayout pulumi.StringPtrOutput `pulumi:"keyboardLayout"`
	// The MAC addresses for the network interfaces
	MacAddresses pulumi.StringArrayOutput `pulumi:"macAddresses"`
	// The memory allocation
	Memory VirtualMachineMemoryPtrOutput `pulumi:"memory"`
	// The name
	Name pulumi.StringOutput `pulumi:"name"`
	// The network devices
	NetworkDevices VirtualMachineNetworkDeviceArrayOutput `pulumi:"networkDevices"`
	// The network interface names published by the QEMU agent
	NetworkInterfaceNames pulumi.StringArrayOutput `pulumi:"networkInterfaceNames"`
	// The node name
	NodeName pulumi.StringOutput `pulumi:"nodeName"`
	// Start VM on Node boot
	OnBoot pulumi.BoolPtrOutput `pulumi:"onBoot"`
	// The operating system configuration
	OperatingSystem VirtualMachineOperatingSystemPtrOutput `pulumi:"operatingSystem"`
	// The ID of the pool to assign the virtual machine to
	PoolId pulumi.StringPtrOutput `pulumi:"poolId"`
	// Wether to reboot vm after creation
	Reboot pulumi.BoolPtrOutput `pulumi:"reboot"`
	// The serial devices
	SerialDevices VirtualMachineSerialDeviceArrayOutput `pulumi:"serialDevices"`
	// Whether to start the virtual machine
	Started pulumi.BoolPtrOutput `pulumi:"started"`
	// Whether to enable the USB tablet device
	TabletDevice pulumi.BoolPtrOutput `pulumi:"tabletDevice"`
	// Whether to create a template
	Template pulumi.BoolPtrOutput `pulumi:"template"`
	// Clone VM timeout
	TimeoutClone pulumi.IntPtrOutput `pulumi:"timeoutClone"`
	// MoveDisk timeout
	TimeoutMoveDisk pulumi.IntPtrOutput `pulumi:"timeoutMoveDisk"`
	// Reboot timeout
	TimeoutReboot pulumi.IntPtrOutput `pulumi:"timeoutReboot"`
	// Shutdown timeout
	TimeoutShutdownVm pulumi.IntPtrOutput `pulumi:"timeoutShutdownVm"`
	// Start VM timeout
	TimeoutStartVm pulumi.IntPtrOutput `pulumi:"timeoutStartVm"`
	// Stop VM timeout
	TimeoutStopVm pulumi.IntPtrOutput `pulumi:"timeoutStopVm"`
	// The VGA configuration
	Vga VirtualMachineVgaPtrOutput `pulumi:"vga"`
	// The VM identifier
	VmId pulumi.IntPtrOutput `pulumi:"vmId"`
}

// NewVirtualMachine registers a new resource with the given unique name, arguments, and options.
func NewVirtualMachine(ctx *pulumi.Context,
	name string, args *VirtualMachineArgs, opts ...pulumi.ResourceOption) (*VirtualMachine, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NodeName == nil {
		return nil, errors.New("invalid value for required argument 'NodeName'")
	}
	var resource VirtualMachine
	err := ctx.RegisterResource("proxmoxve:VM/virtualMachine:VirtualMachine", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualMachine gets an existing VirtualMachine resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualMachine(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualMachineState, opts ...pulumi.ResourceOption) (*VirtualMachine, error) {
	var resource VirtualMachine
	err := ctx.ReadResource("proxmoxve:VM/virtualMachine:VirtualMachine", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualMachine resources.
type virtualMachineState struct {
	// Whether to enable ACPI
	Acpi *bool `pulumi:"acpi"`
	// The QEMU agent configuration
	Agent *VirtualMachineAgent `pulumi:"agent"`
	// The audio devices
	AudioDevice *VirtualMachineAudioDevice `pulumi:"audioDevice"`
	// The BIOS implementation
	Bios *string `pulumi:"bios"`
	// The CDROM drive
	Cdrom *VirtualMachineCdrom `pulumi:"cdrom"`
	// The cloning configuration
	Clone *VirtualMachineClone `pulumi:"clone"`
	// The CPU allocation
	Cpu *VirtualMachineCpu `pulumi:"cpu"`
	// The description
	Description *string `pulumi:"description"`
	// The disk devices
	Disks []VirtualMachineDisk `pulumi:"disks"`
	// The cloud-init configuration
	Initialization *VirtualMachineInitialization `pulumi:"initialization"`
	// The IPv4 addresses published by the QEMU agent
	Ipv4Addresses [][]string `pulumi:"ipv4Addresses"`
	// The IPv6 addresses published by the QEMU agent
	Ipv6Addresses [][]string `pulumi:"ipv6Addresses"`
	// The keyboard layout
	KeyboardLayout *string `pulumi:"keyboardLayout"`
	// The MAC addresses for the network interfaces
	MacAddresses []string `pulumi:"macAddresses"`
	// The memory allocation
	Memory *VirtualMachineMemory `pulumi:"memory"`
	// The name
	Name *string `pulumi:"name"`
	// The network devices
	NetworkDevices []VirtualMachineNetworkDevice `pulumi:"networkDevices"`
	// The network interface names published by the QEMU agent
	NetworkInterfaceNames []string `pulumi:"networkInterfaceNames"`
	// The node name
	NodeName *string `pulumi:"nodeName"`
	// Start VM on Node boot
	OnBoot *bool `pulumi:"onBoot"`
	// The operating system configuration
	OperatingSystem *VirtualMachineOperatingSystem `pulumi:"operatingSystem"`
	// The ID of the pool to assign the virtual machine to
	PoolId *string `pulumi:"poolId"`
	// Wether to reboot vm after creation
	Reboot *bool `pulumi:"reboot"`
	// The serial devices
	SerialDevices []VirtualMachineSerialDevice `pulumi:"serialDevices"`
	// Whether to start the virtual machine
	Started *bool `pulumi:"started"`
	// Whether to enable the USB tablet device
	TabletDevice *bool `pulumi:"tabletDevice"`
	// Whether to create a template
	Template *bool `pulumi:"template"`
	// Clone VM timeout
	TimeoutClone *int `pulumi:"timeoutClone"`
	// MoveDisk timeout
	TimeoutMoveDisk *int `pulumi:"timeoutMoveDisk"`
	// Reboot timeout
	TimeoutReboot *int `pulumi:"timeoutReboot"`
	// Shutdown timeout
	TimeoutShutdownVm *int `pulumi:"timeoutShutdownVm"`
	// Start VM timeout
	TimeoutStartVm *int `pulumi:"timeoutStartVm"`
	// Stop VM timeout
	TimeoutStopVm *int `pulumi:"timeoutStopVm"`
	// The VGA configuration
	Vga *VirtualMachineVga `pulumi:"vga"`
	// The VM identifier
	VmId *int `pulumi:"vmId"`
}

type VirtualMachineState struct {
	// Whether to enable ACPI
	Acpi pulumi.BoolPtrInput
	// The QEMU agent configuration
	Agent VirtualMachineAgentPtrInput
	// The audio devices
	AudioDevice VirtualMachineAudioDevicePtrInput
	// The BIOS implementation
	Bios pulumi.StringPtrInput
	// The CDROM drive
	Cdrom VirtualMachineCdromPtrInput
	// The cloning configuration
	Clone VirtualMachineClonePtrInput
	// The CPU allocation
	Cpu VirtualMachineCpuPtrInput
	// The description
	Description pulumi.StringPtrInput
	// The disk devices
	Disks VirtualMachineDiskArrayInput
	// The cloud-init configuration
	Initialization VirtualMachineInitializationPtrInput
	// The IPv4 addresses published by the QEMU agent
	Ipv4Addresses pulumi.StringArrayArrayInput
	// The IPv6 addresses published by the QEMU agent
	Ipv6Addresses pulumi.StringArrayArrayInput
	// The keyboard layout
	KeyboardLayout pulumi.StringPtrInput
	// The MAC addresses for the network interfaces
	MacAddresses pulumi.StringArrayInput
	// The memory allocation
	Memory VirtualMachineMemoryPtrInput
	// The name
	Name pulumi.StringPtrInput
	// The network devices
	NetworkDevices VirtualMachineNetworkDeviceArrayInput
	// The network interface names published by the QEMU agent
	NetworkInterfaceNames pulumi.StringArrayInput
	// The node name
	NodeName pulumi.StringPtrInput
	// Start VM on Node boot
	OnBoot pulumi.BoolPtrInput
	// The operating system configuration
	OperatingSystem VirtualMachineOperatingSystemPtrInput
	// The ID of the pool to assign the virtual machine to
	PoolId pulumi.StringPtrInput
	// Wether to reboot vm after creation
	Reboot pulumi.BoolPtrInput
	// The serial devices
	SerialDevices VirtualMachineSerialDeviceArrayInput
	// Whether to start the virtual machine
	Started pulumi.BoolPtrInput
	// Whether to enable the USB tablet device
	TabletDevice pulumi.BoolPtrInput
	// Whether to create a template
	Template pulumi.BoolPtrInput
	// Clone VM timeout
	TimeoutClone pulumi.IntPtrInput
	// MoveDisk timeout
	TimeoutMoveDisk pulumi.IntPtrInput
	// Reboot timeout
	TimeoutReboot pulumi.IntPtrInput
	// Shutdown timeout
	TimeoutShutdownVm pulumi.IntPtrInput
	// Start VM timeout
	TimeoutStartVm pulumi.IntPtrInput
	// Stop VM timeout
	TimeoutStopVm pulumi.IntPtrInput
	// The VGA configuration
	Vga VirtualMachineVgaPtrInput
	// The VM identifier
	VmId pulumi.IntPtrInput
}

func (VirtualMachineState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualMachineState)(nil)).Elem()
}

type virtualMachineArgs struct {
	// Whether to enable ACPI
	Acpi *bool `pulumi:"acpi"`
	// The QEMU agent configuration
	Agent *VirtualMachineAgent `pulumi:"agent"`
	// The audio devices
	AudioDevice *VirtualMachineAudioDevice `pulumi:"audioDevice"`
	// The BIOS implementation
	Bios *string `pulumi:"bios"`
	// The CDROM drive
	Cdrom *VirtualMachineCdrom `pulumi:"cdrom"`
	// The cloning configuration
	Clone *VirtualMachineClone `pulumi:"clone"`
	// The CPU allocation
	Cpu *VirtualMachineCpu `pulumi:"cpu"`
	// The description
	Description *string `pulumi:"description"`
	// The disk devices
	Disks []VirtualMachineDisk `pulumi:"disks"`
	// The cloud-init configuration
	Initialization *VirtualMachineInitialization `pulumi:"initialization"`
	// The keyboard layout
	KeyboardLayout *string `pulumi:"keyboardLayout"`
	// The memory allocation
	Memory *VirtualMachineMemory `pulumi:"memory"`
	// The name
	Name *string `pulumi:"name"`
	// The network devices
	NetworkDevices []VirtualMachineNetworkDevice `pulumi:"networkDevices"`
	// The node name
	NodeName string `pulumi:"nodeName"`
	// Start VM on Node boot
	OnBoot *bool `pulumi:"onBoot"`
	// The operating system configuration
	OperatingSystem *VirtualMachineOperatingSystem `pulumi:"operatingSystem"`
	// The ID of the pool to assign the virtual machine to
	PoolId *string `pulumi:"poolId"`
	// Wether to reboot vm after creation
	Reboot *bool `pulumi:"reboot"`
	// The serial devices
	SerialDevices []VirtualMachineSerialDevice `pulumi:"serialDevices"`
	// Whether to start the virtual machine
	Started *bool `pulumi:"started"`
	// Whether to enable the USB tablet device
	TabletDevice *bool `pulumi:"tabletDevice"`
	// Whether to create a template
	Template *bool `pulumi:"template"`
	// Clone VM timeout
	TimeoutClone *int `pulumi:"timeoutClone"`
	// MoveDisk timeout
	TimeoutMoveDisk *int `pulumi:"timeoutMoveDisk"`
	// Reboot timeout
	TimeoutReboot *int `pulumi:"timeoutReboot"`
	// Shutdown timeout
	TimeoutShutdownVm *int `pulumi:"timeoutShutdownVm"`
	// Start VM timeout
	TimeoutStartVm *int `pulumi:"timeoutStartVm"`
	// Stop VM timeout
	TimeoutStopVm *int `pulumi:"timeoutStopVm"`
	// The VGA configuration
	Vga *VirtualMachineVga `pulumi:"vga"`
	// The VM identifier
	VmId *int `pulumi:"vmId"`
}

// The set of arguments for constructing a VirtualMachine resource.
type VirtualMachineArgs struct {
	// Whether to enable ACPI
	Acpi pulumi.BoolPtrInput
	// The QEMU agent configuration
	Agent VirtualMachineAgentPtrInput
	// The audio devices
	AudioDevice VirtualMachineAudioDevicePtrInput
	// The BIOS implementation
	Bios pulumi.StringPtrInput
	// The CDROM drive
	Cdrom VirtualMachineCdromPtrInput
	// The cloning configuration
	Clone VirtualMachineClonePtrInput
	// The CPU allocation
	Cpu VirtualMachineCpuPtrInput
	// The description
	Description pulumi.StringPtrInput
	// The disk devices
	Disks VirtualMachineDiskArrayInput
	// The cloud-init configuration
	Initialization VirtualMachineInitializationPtrInput
	// The keyboard layout
	KeyboardLayout pulumi.StringPtrInput
	// The memory allocation
	Memory VirtualMachineMemoryPtrInput
	// The name
	Name pulumi.StringPtrInput
	// The network devices
	NetworkDevices VirtualMachineNetworkDeviceArrayInput
	// The node name
	NodeName pulumi.StringInput
	// Start VM on Node boot
	OnBoot pulumi.BoolPtrInput
	// The operating system configuration
	OperatingSystem VirtualMachineOperatingSystemPtrInput
	// The ID of the pool to assign the virtual machine to
	PoolId pulumi.StringPtrInput
	// Wether to reboot vm after creation
	Reboot pulumi.BoolPtrInput
	// The serial devices
	SerialDevices VirtualMachineSerialDeviceArrayInput
	// Whether to start the virtual machine
	Started pulumi.BoolPtrInput
	// Whether to enable the USB tablet device
	TabletDevice pulumi.BoolPtrInput
	// Whether to create a template
	Template pulumi.BoolPtrInput
	// Clone VM timeout
	TimeoutClone pulumi.IntPtrInput
	// MoveDisk timeout
	TimeoutMoveDisk pulumi.IntPtrInput
	// Reboot timeout
	TimeoutReboot pulumi.IntPtrInput
	// Shutdown timeout
	TimeoutShutdownVm pulumi.IntPtrInput
	// Start VM timeout
	TimeoutStartVm pulumi.IntPtrInput
	// Stop VM timeout
	TimeoutStopVm pulumi.IntPtrInput
	// The VGA configuration
	Vga VirtualMachineVgaPtrInput
	// The VM identifier
	VmId pulumi.IntPtrInput
}

func (VirtualMachineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualMachineArgs)(nil)).Elem()
}

type VirtualMachineInput interface {
	pulumi.Input

	ToVirtualMachineOutput() VirtualMachineOutput
	ToVirtualMachineOutputWithContext(ctx context.Context) VirtualMachineOutput
}

func (*VirtualMachine) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachine)(nil))
}

func (i *VirtualMachine) ToVirtualMachineOutput() VirtualMachineOutput {
	return i.ToVirtualMachineOutputWithContext(context.Background())
}

func (i *VirtualMachine) ToVirtualMachineOutputWithContext(ctx context.Context) VirtualMachineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineOutput)
}

func (i *VirtualMachine) ToVirtualMachinePtrOutput() VirtualMachinePtrOutput {
	return i.ToVirtualMachinePtrOutputWithContext(context.Background())
}

func (i *VirtualMachine) ToVirtualMachinePtrOutputWithContext(ctx context.Context) VirtualMachinePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachinePtrOutput)
}

type VirtualMachinePtrInput interface {
	pulumi.Input

	ToVirtualMachinePtrOutput() VirtualMachinePtrOutput
	ToVirtualMachinePtrOutputWithContext(ctx context.Context) VirtualMachinePtrOutput
}

type virtualMachinePtrType VirtualMachineArgs

func (*virtualMachinePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachine)(nil))
}

func (i *virtualMachinePtrType) ToVirtualMachinePtrOutput() VirtualMachinePtrOutput {
	return i.ToVirtualMachinePtrOutputWithContext(context.Background())
}

func (i *virtualMachinePtrType) ToVirtualMachinePtrOutputWithContext(ctx context.Context) VirtualMachinePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachinePtrOutput)
}

// VirtualMachineArrayInput is an input type that accepts VirtualMachineArray and VirtualMachineArrayOutput values.
// You can construct a concrete instance of `VirtualMachineArrayInput` via:
//
//          VirtualMachineArray{ VirtualMachineArgs{...} }
type VirtualMachineArrayInput interface {
	pulumi.Input

	ToVirtualMachineArrayOutput() VirtualMachineArrayOutput
	ToVirtualMachineArrayOutputWithContext(context.Context) VirtualMachineArrayOutput
}

type VirtualMachineArray []VirtualMachineInput

func (VirtualMachineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualMachine)(nil)).Elem()
}

func (i VirtualMachineArray) ToVirtualMachineArrayOutput() VirtualMachineArrayOutput {
	return i.ToVirtualMachineArrayOutputWithContext(context.Background())
}

func (i VirtualMachineArray) ToVirtualMachineArrayOutputWithContext(ctx context.Context) VirtualMachineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineArrayOutput)
}

// VirtualMachineMapInput is an input type that accepts VirtualMachineMap and VirtualMachineMapOutput values.
// You can construct a concrete instance of `VirtualMachineMapInput` via:
//
//          VirtualMachineMap{ "key": VirtualMachineArgs{...} }
type VirtualMachineMapInput interface {
	pulumi.Input

	ToVirtualMachineMapOutput() VirtualMachineMapOutput
	ToVirtualMachineMapOutputWithContext(context.Context) VirtualMachineMapOutput
}

type VirtualMachineMap map[string]VirtualMachineInput

func (VirtualMachineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualMachine)(nil)).Elem()
}

func (i VirtualMachineMap) ToVirtualMachineMapOutput() VirtualMachineMapOutput {
	return i.ToVirtualMachineMapOutputWithContext(context.Background())
}

func (i VirtualMachineMap) ToVirtualMachineMapOutputWithContext(ctx context.Context) VirtualMachineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineMapOutput)
}

type VirtualMachineOutput struct{ *pulumi.OutputState }

func (VirtualMachineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachine)(nil))
}

func (o VirtualMachineOutput) ToVirtualMachineOutput() VirtualMachineOutput {
	return o
}

func (o VirtualMachineOutput) ToVirtualMachineOutputWithContext(ctx context.Context) VirtualMachineOutput {
	return o
}

func (o VirtualMachineOutput) ToVirtualMachinePtrOutput() VirtualMachinePtrOutput {
	return o.ToVirtualMachinePtrOutputWithContext(context.Background())
}

func (o VirtualMachineOutput) ToVirtualMachinePtrOutputWithContext(ctx context.Context) VirtualMachinePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachine) *VirtualMachine {
		return &v
	}).(VirtualMachinePtrOutput)
}

type VirtualMachinePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachinePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachine)(nil))
}

func (o VirtualMachinePtrOutput) ToVirtualMachinePtrOutput() VirtualMachinePtrOutput {
	return o
}

func (o VirtualMachinePtrOutput) ToVirtualMachinePtrOutputWithContext(ctx context.Context) VirtualMachinePtrOutput {
	return o
}

func (o VirtualMachinePtrOutput) Elem() VirtualMachineOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachine {
		if v != nil {
			return *v
		}
		var ret VirtualMachine
		return ret
	}).(VirtualMachineOutput)
}

type VirtualMachineArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachine)(nil))
}

func (o VirtualMachineArrayOutput) ToVirtualMachineArrayOutput() VirtualMachineArrayOutput {
	return o
}

func (o VirtualMachineArrayOutput) ToVirtualMachineArrayOutputWithContext(ctx context.Context) VirtualMachineArrayOutput {
	return o
}

func (o VirtualMachineArrayOutput) Index(i pulumi.IntInput) VirtualMachineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachine {
		return vs[0].([]VirtualMachine)[vs[1].(int)]
	}).(VirtualMachineOutput)
}

type VirtualMachineMapOutput struct{ *pulumi.OutputState }

func (VirtualMachineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]VirtualMachine)(nil))
}

func (o VirtualMachineMapOutput) ToVirtualMachineMapOutput() VirtualMachineMapOutput {
	return o
}

func (o VirtualMachineMapOutput) ToVirtualMachineMapOutputWithContext(ctx context.Context) VirtualMachineMapOutput {
	return o
}

func (o VirtualMachineMapOutput) MapIndex(k pulumi.StringInput) VirtualMachineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) VirtualMachine {
		return vs[0].(map[string]VirtualMachine)[vs[1].(string)]
	}).(VirtualMachineOutput)
}

func init() {
	pulumi.RegisterOutputType(VirtualMachineOutput{})
	pulumi.RegisterOutputType(VirtualMachinePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineMapOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vm

import (
	"context"
	"reflect"

	"errors"
	"github.com/muhlba91/pulumi-proxmoxve/sdk/v5/go/proxmoxve/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a virtual machine.
//
// > This resource uses SSH access to the node. You might need to configure the `ssh` option in the `provider` section.
//
// ## Qemu guest agent
//
// Qemu-guest-agent is an application which can be installed inside guest VM, see
// [Proxmox Wiki](https://pve.proxmox.com/wiki/Qemu-guest-agent) and [Proxmox
// Documentation](https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm_qemu_agent)
//
// For VM with `agent.enabled = false`, Proxmox uses ACPI for `Shutdown` and
// `Reboot`, and `qemu-guest-agent` is not needed inside the VM.
//
// Setting `agent.enabled = true` informs Proxmox that the guest agent is expected
// to be *running* inside the VM. Proxmox then uses `qemu-guest-agent` instead of
// ACPI to control the VM. If the agent is not running, Proxmox operations
// `Shutdown` and `Reboot` time out and fail. The failing operation gets a lock on
// the VM, and until the operation times out, other operations like `Stop` and
// `Reboot` cannot be used.
//
// Do **not** run VM with `agent.enabled = true`, unless the VM is configured to
// automatically **start** `qemu-guest-agent` at some point.
//
// "Monitor" tab in Proxmox GUI can be used to send low-level commands to `qemu`.
// See the [documentation](https://www.qemu.org/docs/master/system/monitor.html).
// Commands `systemPowerdown` and `quit` have proven useful in shutting down VMs
// with `agent.enabled = true` and no agent running.
//
// Cloud images usually do not have `qemu-guest-agent` installed. It is possible to
// install and *start* it using cloud-init, e.g. using custom `userDataFileId`
// file.
//
// This provider requires `agent.enabled = true` to populate `ipv4Addresses`,
// `ipv6Addresses` and `networkInterfaceNames` output attributes.
//
// Setting `agent.enabled = true` without running `qemu-guest-agent` in the VM will
// also result in long timeouts when using the provider, both when creating VMs,
// and when refreshing resources.  The provider has no way to distinguish between
// "qemu-guest-agent not installed" and "very long boot due to a disk check", it
// trusts the user to set `agent.enabled` correctly and waits for
// `qemu-guest-agent` to start.
//
// ## Important Notes
//
// When cloning an existing virtual machine, whether it's a template or not, the
// resource will only detect changes to the arguments which are not set to their
// default values.
//
// Furthermore, when cloning from one node to a different one, the behavior changes
// depening on the datastores of the source VM. If at least one non-shared
// datastore is used, the VM is first cloned to the source node before being
// migrated to the target node. This circumvents a limitation in the Proxmox clone
// API.
//
// **Note:** Because the migration step after the clone tries to preserve the used
// datastores by their name, it may fail if a datastore used in the source VM is
// not available on the target node (e.g. `local-lvm` is used on the source node in
// the VM but no `local-lvm` datastore is available on the target node). In this
// case, it is recommended to set the `datastoreId` argument in the `clone` block
// to force the migration step to migrate all disks to a specific datastore on the
// target node. If you need certain disks to be on specific datastores, set
// the `datastoreId` argument of the disks in the `disks` block to move the disks
// to the correct datastore after the cloning and migrating succeeded.
//
// ## Import
//
// Instances can be imported using the `node_name` and the `vm_id`, e.g., bash
//
// ```sh
//
//	$ pulumi import proxmoxve:VM/virtualMachine:VirtualMachine ubuntu_vm first-node/4321
//
// ```
type VirtualMachine struct {
	pulumi.CustomResourceState

	// Whether to enable ACPI (defaults to `true`).
	Acpi pulumi.BoolPtrOutput `pulumi:"acpi"`
	// The QEMU agent configuration.
	Agent VirtualMachineAgentPtrOutput `pulumi:"agent"`
	// An audio device.
	AudioDevice VirtualMachineAudioDevicePtrOutput `pulumi:"audioDevice"`
	// The BIOS implementation (defaults to `seabios`).
	Bios pulumi.StringPtrOutput `pulumi:"bios"`
	// Specify a list of devices to boot from in the order
	// they appear in the list (defaults to `[]`).
	BootOrders pulumi.StringArrayOutput `pulumi:"bootOrders"`
	// The CDROM configuration.
	Cdrom VirtualMachineCdromPtrOutput `pulumi:"cdrom"`
	// The cloning configuration.
	Clone VirtualMachineClonePtrOutput `pulumi:"clone"`
	// The CPU configuration.
	Cpu VirtualMachineCpuPtrOutput `pulumi:"cpu"`
	// The description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A disk (multiple blocks supported).
	Disks VirtualMachineDiskArrayOutput `pulumi:"disks"`
	// The efi disk device (required if `bios` is set
	// to `ovmf`)
	EfiDisk VirtualMachineEfiDiskPtrOutput `pulumi:"efiDisk"`
	// The identifier for a file containing a hook script (needs to be executable).
	HookScriptFileId pulumi.StringPtrOutput `pulumi:"hookScriptFileId"`
	// A host PCI device mapping (multiple blocks supported).
	Hostpcis VirtualMachineHostpciArrayOutput `pulumi:"hostpcis"`
	// The cloud-init configuration.
	Initialization VirtualMachineInitializationPtrOutput `pulumi:"initialization"`
	// The IPv4 addresses per network interface published by the
	// QEMU agent (empty list when `agent.enabled` is `false`)
	Ipv4Addresses pulumi.StringArrayArrayOutput `pulumi:"ipv4Addresses"`
	// The IPv6 addresses per network interface published by the
	// QEMU agent (empty list when `agent.enabled` is `false`)
	Ipv6Addresses pulumi.StringArrayArrayOutput `pulumi:"ipv6Addresses"`
	// The keyboard layout (defaults to `en-us`).
	KeyboardLayout pulumi.StringPtrOutput `pulumi:"keyboardLayout"`
	// Arbitrary arguments passed to kvm.
	KvmArguments pulumi.StringPtrOutput `pulumi:"kvmArguments"`
	// The MAC addresses published by the QEMU agent with fallback
	// to the network device configuration, if the agent is disabled
	MacAddresses pulumi.StringArrayOutput `pulumi:"macAddresses"`
	// The VM machine type (defaults to `pc`).
	Machine pulumi.StringPtrOutput `pulumi:"machine"`
	// The VGA memory in megabytes (defaults to `16`).
	Memory VirtualMachineMemoryPtrOutput `pulumi:"memory"`
	// Migrate the VM on node change instead of re-creating
	// it (defaults to `false`).
	Migrate pulumi.BoolPtrOutput `pulumi:"migrate"`
	// The virtual machine name.
	Name pulumi.StringOutput `pulumi:"name"`
	// A network device (multiple blocks supported).
	NetworkDevices VirtualMachineNetworkDeviceArrayOutput `pulumi:"networkDevices"`
	// The network interface names published by the QEMU
	// agent (empty list when `agent.enabled` is `false`)
	NetworkInterfaceNames pulumi.StringArrayOutput `pulumi:"networkInterfaceNames"`
	// The name of the node to assign the virtual machine
	// to.
	NodeName pulumi.StringOutput `pulumi:"nodeName"`
	// Specifies whether a VM will be started during system
	// boot. (defaults to `true`)
	OnBoot pulumi.BoolPtrOutput `pulumi:"onBoot"`
	// The Operating System configuration.
	OperatingSystem VirtualMachineOperatingSystemPtrOutput `pulumi:"operatingSystem"`
	// The identifier for a pool to assign the virtual machine
	// to.
	PoolId pulumi.StringPtrOutput `pulumi:"poolId"`
	// Reboot the VM after initial creation. (defaults
	// to `false`)
	Reboot pulumi.BoolPtrOutput `pulumi:"reboot"`
	// The SCSI hardware type (defaults to
	// `virtio-scsi-pci`).
	ScsiHardware pulumi.StringPtrOutput `pulumi:"scsiHardware"`
	// A serial device (multiple blocks supported).
	SerialDevices VirtualMachineSerialDeviceArrayOutput `pulumi:"serialDevices"`
	// The SMBIOS (type1) settings for the VM.
	Smbios VirtualMachineSmbiosPtrOutput `pulumi:"smbios"`
	// Whether to start the virtual machine (defaults
	// to `true`).
	Started pulumi.BoolPtrOutput `pulumi:"started"`
	// Defines startup and shutdown behavior of the VM.
	Startup VirtualMachineStartupPtrOutput `pulumi:"startup"`
	// Whether to stop rather than shutdown on VM destroy (defaults to `false`)
	StopOnDestroy pulumi.BoolPtrOutput `pulumi:"stopOnDestroy"`
	// Whether to enable the USB tablet device (defaults
	// to `true`).
	TabletDevice pulumi.BoolPtrOutput `pulumi:"tabletDevice"`
	// A list of tags of the VM. This is only meta information (
	// defaults to `[]`). Note: Proxmox always sorts the VM tags. If the list in
	// template is not sorted, then Proxmox will always report a difference on the
	// resource. You may use the `ignoreChanges` lifecycle meta-argument to ignore
	// changes to this attribute.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Whether to create a template (defaults to `false`).
	Template pulumi.BoolPtrOutput `pulumi:"template"`
	// Timeout for cloning a VM in seconds (defaults to
	// 1800).
	TimeoutClone pulumi.IntPtrOutput `pulumi:"timeoutClone"`
	// Timeout for creating a VM in seconds (defaults to
	// 1800).
	TimeoutCreate pulumi.IntPtrOutput `pulumi:"timeoutCreate"`
	// Timeout for migrating the VM (defaults to
	// 1800).
	TimeoutMigrate pulumi.IntPtrOutput `pulumi:"timeoutMigrate"`
	// Timeout for moving the disk of a VM in
	// seconds (defaults to 1800).
	TimeoutMoveDisk pulumi.IntPtrOutput `pulumi:"timeoutMoveDisk"`
	// Timeout for rebooting a VM in seconds (defaults
	// to 1800).
	TimeoutReboot pulumi.IntPtrOutput `pulumi:"timeoutReboot"`
	// Timeout for shutting down a VM in seconds (
	// defaults to 1800).
	TimeoutShutdownVm pulumi.IntPtrOutput `pulumi:"timeoutShutdownVm"`
	// Timeout for starting a VM in seconds (defaults
	// to 1800).
	TimeoutStartVm pulumi.IntPtrOutput `pulumi:"timeoutStartVm"`
	// Timeout for stopping a VM in seconds (defaults
	// to 300).
	TimeoutStopVm pulumi.IntPtrOutput `pulumi:"timeoutStopVm"`
	// The TPM state device.
	TpmState VirtualMachineTpmStatePtrOutput `pulumi:"tpmState"`
	// A host USB device mapping (multiple blocks supported).
	Usbs VirtualMachineUsbArrayOutput `pulumi:"usbs"`
	// The VGA configuration.
	Vga VirtualMachineVgaPtrOutput `pulumi:"vga"`
	// The VM identifier.
	VmId pulumi.IntOutput `pulumi:"vmId"`
}

// NewVirtualMachine registers a new resource with the given unique name, arguments, and options.
func NewVirtualMachine(ctx *pulumi.Context,
	name string, args *VirtualMachineArgs, opts ...pulumi.ResourceOption) (*VirtualMachine, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NodeName == nil {
		return nil, errors.New("invalid value for required argument 'NodeName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VirtualMachine
	err := ctx.RegisterResource("proxmoxve:VM/virtualMachine:VirtualMachine", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualMachine gets an existing VirtualMachine resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualMachine(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualMachineState, opts ...pulumi.ResourceOption) (*VirtualMachine, error) {
	var resource VirtualMachine
	err := ctx.ReadResource("proxmoxve:VM/virtualMachine:VirtualMachine", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualMachine resources.
type virtualMachineState struct {
	// Whether to enable ACPI (defaults to `true`).
	Acpi *bool `pulumi:"acpi"`
	// The QEMU agent configuration.
	Agent *VirtualMachineAgent `pulumi:"agent"`
	// An audio device.
	AudioDevice *VirtualMachineAudioDevice `pulumi:"audioDevice"`
	// The BIOS implementation (defaults to `seabios`).
	Bios *string `pulumi:"bios"`
	// Specify a list of devices to boot from in the order
	// they appear in the list (defaults to `[]`).
	BootOrders []string `pulumi:"bootOrders"`
	// The CDROM configuration.
	Cdrom *VirtualMachineCdrom `pulumi:"cdrom"`
	// The cloning configuration.
	Clone *VirtualMachineClone `pulumi:"clone"`
	// The CPU configuration.
	Cpu *VirtualMachineCpu `pulumi:"cpu"`
	// The description.
	Description *string `pulumi:"description"`
	// A disk (multiple blocks supported).
	Disks []VirtualMachineDisk `pulumi:"disks"`
	// The efi disk device (required if `bios` is set
	// to `ovmf`)
	EfiDisk *VirtualMachineEfiDisk `pulumi:"efiDisk"`
	// The identifier for a file containing a hook script (needs to be executable).
	HookScriptFileId *string `pulumi:"hookScriptFileId"`
	// A host PCI device mapping (multiple blocks supported).
	Hostpcis []VirtualMachineHostpci `pulumi:"hostpcis"`
	// The cloud-init configuration.
	Initialization *VirtualMachineInitialization `pulumi:"initialization"`
	// The IPv4 addresses per network interface published by the
	// QEMU agent (empty list when `agent.enabled` is `false`)
	Ipv4Addresses [][]string `pulumi:"ipv4Addresses"`
	// The IPv6 addresses per network interface published by the
	// QEMU agent (empty list when `agent.enabled` is `false`)
	Ipv6Addresses [][]string `pulumi:"ipv6Addresses"`
	// The keyboard layout (defaults to `en-us`).
	KeyboardLayout *string `pulumi:"keyboardLayout"`
	// Arbitrary arguments passed to kvm.
	KvmArguments *string `pulumi:"kvmArguments"`
	// The MAC addresses published by the QEMU agent with fallback
	// to the network device configuration, if the agent is disabled
	MacAddresses []string `pulumi:"macAddresses"`
	// The VM machine type (defaults to `pc`).
	Machine *string `pulumi:"machine"`
	// The VGA memory in megabytes (defaults to `16`).
	Memory *VirtualMachineMemory `pulumi:"memory"`
	// Migrate the VM on node change instead of re-creating
	// it (defaults to `false`).
	Migrate *bool `pulumi:"migrate"`
	// The virtual machine name.
	Name *string `pulumi:"name"`
	// A network device (multiple blocks supported).
	NetworkDevices []VirtualMachineNetworkDevice `pulumi:"networkDevices"`
	// The network interface names published by the QEMU
	// agent (empty list when `agent.enabled` is `false`)
	NetworkInterfaceNames []string `pulumi:"networkInterfaceNames"`
	// The name of the node to assign the virtual machine
	// to.
	NodeName *string `pulumi:"nodeName"`
	// Specifies whether a VM will be started during system
	// boot. (defaults to `true`)
	OnBoot *bool `pulumi:"onBoot"`
	// The Operating System configuration.
	OperatingSystem *VirtualMachineOperatingSystem `pulumi:"operatingSystem"`
	// The identifier for a pool to assign the virtual machine
	// to.
	PoolId *string `pulumi:"poolId"`
	// Reboot the VM after initial creation. (defaults
	// to `false`)
	Reboot *bool `pulumi:"reboot"`
	// The SCSI hardware type (defaults to
	// `virtio-scsi-pci`).
	ScsiHardware *string `pulumi:"scsiHardware"`
	// A serial device (multiple blocks supported).
	SerialDevices []VirtualMachineSerialDevice `pulumi:"serialDevices"`
	// The SMBIOS (type1) settings for the VM.
	Smbios *VirtualMachineSmbios `pulumi:"smbios"`
	// Whether to start the virtual machine (defaults
	// to `true`).
	Started *bool `pulumi:"started"`
	// Defines startup and shutdown behavior of the VM.
	Startup *VirtualMachineStartup `pulumi:"startup"`
	// Whether to stop rather than shutdown on VM destroy (defaults to `false`)
	StopOnDestroy *bool `pulumi:"stopOnDestroy"`
	// Whether to enable the USB tablet device (defaults
	// to `true`).
	TabletDevice *bool `pulumi:"tabletDevice"`
	// A list of tags of the VM. This is only meta information (
	// defaults to `[]`). Note: Proxmox always sorts the VM tags. If the list in
	// template is not sorted, then Proxmox will always report a difference on the
	// resource. You may use the `ignoreChanges` lifecycle meta-argument to ignore
	// changes to this attribute.
	Tags []string `pulumi:"tags"`
	// Whether to create a template (defaults to `false`).
	Template *bool `pulumi:"template"`
	// Timeout for cloning a VM in seconds (defaults to
	// 1800).
	TimeoutClone *int `pulumi:"timeoutClone"`
	// Timeout for creating a VM in seconds (defaults to
	// 1800).
	TimeoutCreate *int `pulumi:"timeoutCreate"`
	// Timeout for migrating the VM (defaults to
	// 1800).
	TimeoutMigrate *int `pulumi:"timeoutMigrate"`
	// Timeout for moving the disk of a VM in
	// seconds (defaults to 1800).
	TimeoutMoveDisk *int `pulumi:"timeoutMoveDisk"`
	// Timeout for rebooting a VM in seconds (defaults
	// to 1800).
	TimeoutReboot *int `pulumi:"timeoutReboot"`
	// Timeout for shutting down a VM in seconds (
	// defaults to 1800).
	TimeoutShutdownVm *int `pulumi:"timeoutShutdownVm"`
	// Timeout for starting a VM in seconds (defaults
	// to 1800).
	TimeoutStartVm *int `pulumi:"timeoutStartVm"`
	// Timeout for stopping a VM in seconds (defaults
	// to 300).
	TimeoutStopVm *int `pulumi:"timeoutStopVm"`
	// The TPM state device.
	TpmState *VirtualMachineTpmState `pulumi:"tpmState"`
	// A host USB device mapping (multiple blocks supported).
	Usbs []VirtualMachineUsb `pulumi:"usbs"`
	// The VGA configuration.
	Vga *VirtualMachineVga `pulumi:"vga"`
	// The VM identifier.
	VmId *int `pulumi:"vmId"`
}

type VirtualMachineState struct {
	// Whether to enable ACPI (defaults to `true`).
	Acpi pulumi.BoolPtrInput
	// The QEMU agent configuration.
	Agent VirtualMachineAgentPtrInput
	// An audio device.
	AudioDevice VirtualMachineAudioDevicePtrInput
	// The BIOS implementation (defaults to `seabios`).
	Bios pulumi.StringPtrInput
	// Specify a list of devices to boot from in the order
	// they appear in the list (defaults to `[]`).
	BootOrders pulumi.StringArrayInput
	// The CDROM configuration.
	Cdrom VirtualMachineCdromPtrInput
	// The cloning configuration.
	Clone VirtualMachineClonePtrInput
	// The CPU configuration.
	Cpu VirtualMachineCpuPtrInput
	// The description.
	Description pulumi.StringPtrInput
	// A disk (multiple blocks supported).
	Disks VirtualMachineDiskArrayInput
	// The efi disk device (required if `bios` is set
	// to `ovmf`)
	EfiDisk VirtualMachineEfiDiskPtrInput
	// The identifier for a file containing a hook script (needs to be executable).
	HookScriptFileId pulumi.StringPtrInput
	// A host PCI device mapping (multiple blocks supported).
	Hostpcis VirtualMachineHostpciArrayInput
	// The cloud-init configuration.
	Initialization VirtualMachineInitializationPtrInput
	// The IPv4 addresses per network interface published by the
	// QEMU agent (empty list when `agent.enabled` is `false`)
	Ipv4Addresses pulumi.StringArrayArrayInput
	// The IPv6 addresses per network interface published by the
	// QEMU agent (empty list when `agent.enabled` is `false`)
	Ipv6Addresses pulumi.StringArrayArrayInput
	// The keyboard layout (defaults to `en-us`).
	KeyboardLayout pulumi.StringPtrInput
	// Arbitrary arguments passed to kvm.
	KvmArguments pulumi.StringPtrInput
	// The MAC addresses published by the QEMU agent with fallback
	// to the network device configuration, if the agent is disabled
	MacAddresses pulumi.StringArrayInput
	// The VM machine type (defaults to `pc`).
	Machine pulumi.StringPtrInput
	// The VGA memory in megabytes (defaults to `16`).
	Memory VirtualMachineMemoryPtrInput
	// Migrate the VM on node change instead of re-creating
	// it (defaults to `false`).
	Migrate pulumi.BoolPtrInput
	// The virtual machine name.
	Name pulumi.StringPtrInput
	// A network device (multiple blocks supported).
	NetworkDevices VirtualMachineNetworkDeviceArrayInput
	// The network interface names published by the QEMU
	// agent (empty list when `agent.enabled` is `false`)
	NetworkInterfaceNames pulumi.StringArrayInput
	// The name of the node to assign the virtual machine
	// to.
	NodeName pulumi.StringPtrInput
	// Specifies whether a VM will be started during system
	// boot. (defaults to `true`)
	OnBoot pulumi.BoolPtrInput
	// The Operating System configuration.
	OperatingSystem VirtualMachineOperatingSystemPtrInput
	// The identifier for a pool to assign the virtual machine
	// to.
	PoolId pulumi.StringPtrInput
	// Reboot the VM after initial creation. (defaults
	// to `false`)
	Reboot pulumi.BoolPtrInput
	// The SCSI hardware type (defaults to
	// `virtio-scsi-pci`).
	ScsiHardware pulumi.StringPtrInput
	// A serial device (multiple blocks supported).
	SerialDevices VirtualMachineSerialDeviceArrayInput
	// The SMBIOS (type1) settings for the VM.
	Smbios VirtualMachineSmbiosPtrInput
	// Whether to start the virtual machine (defaults
	// to `true`).
	Started pulumi.BoolPtrInput
	// Defines startup and shutdown behavior of the VM.
	Startup VirtualMachineStartupPtrInput
	// Whether to stop rather than shutdown on VM destroy (defaults to `false`)
	StopOnDestroy pulumi.BoolPtrInput
	// Whether to enable the USB tablet device (defaults
	// to `true`).
	TabletDevice pulumi.BoolPtrInput
	// A list of tags of the VM. This is only meta information (
	// defaults to `[]`). Note: Proxmox always sorts the VM tags. If the list in
	// template is not sorted, then Proxmox will always report a difference on the
	// resource. You may use the `ignoreChanges` lifecycle meta-argument to ignore
	// changes to this attribute.
	Tags pulumi.StringArrayInput
	// Whether to create a template (defaults to `false`).
	Template pulumi.BoolPtrInput
	// Timeout for cloning a VM in seconds (defaults to
	// 1800).
	TimeoutClone pulumi.IntPtrInput
	// Timeout for creating a VM in seconds (defaults to
	// 1800).
	TimeoutCreate pulumi.IntPtrInput
	// Timeout for migrating the VM (defaults to
	// 1800).
	TimeoutMigrate pulumi.IntPtrInput
	// Timeout for moving the disk of a VM in
	// seconds (defaults to 1800).
	TimeoutMoveDisk pulumi.IntPtrInput
	// Timeout for rebooting a VM in seconds (defaults
	// to 1800).
	TimeoutReboot pulumi.IntPtrInput
	// Timeout for shutting down a VM in seconds (
	// defaults to 1800).
	TimeoutShutdownVm pulumi.IntPtrInput
	// Timeout for starting a VM in seconds (defaults
	// to 1800).
	TimeoutStartVm pulumi.IntPtrInput
	// Timeout for stopping a VM in seconds (defaults
	// to 300).
	TimeoutStopVm pulumi.IntPtrInput
	// The TPM state device.
	TpmState VirtualMachineTpmStatePtrInput
	// A host USB device mapping (multiple blocks supported).
	Usbs VirtualMachineUsbArrayInput
	// The VGA configuration.
	Vga VirtualMachineVgaPtrInput
	// The VM identifier.
	VmId pulumi.IntPtrInput
}

func (VirtualMachineState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualMachineState)(nil)).Elem()
}

type virtualMachineArgs struct {
	// Whether to enable ACPI (defaults to `true`).
	Acpi *bool `pulumi:"acpi"`
	// The QEMU agent configuration.
	Agent *VirtualMachineAgent `pulumi:"agent"`
	// An audio device.
	AudioDevice *VirtualMachineAudioDevice `pulumi:"audioDevice"`
	// The BIOS implementation (defaults to `seabios`).
	Bios *string `pulumi:"bios"`
	// Specify a list of devices to boot from in the order
	// they appear in the list (defaults to `[]`).
	BootOrders []string `pulumi:"bootOrders"`
	// The CDROM configuration.
	Cdrom *VirtualMachineCdrom `pulumi:"cdrom"`
	// The cloning configuration.
	Clone *VirtualMachineClone `pulumi:"clone"`
	// The CPU configuration.
	Cpu *VirtualMachineCpu `pulumi:"cpu"`
	// The description.
	Description *string `pulumi:"description"`
	// A disk (multiple blocks supported).
	Disks []VirtualMachineDisk `pulumi:"disks"`
	// The efi disk device (required if `bios` is set
	// to `ovmf`)
	EfiDisk *VirtualMachineEfiDisk `pulumi:"efiDisk"`
	// The identifier for a file containing a hook script (needs to be executable).
	HookScriptFileId *string `pulumi:"hookScriptFileId"`
	// A host PCI device mapping (multiple blocks supported).
	Hostpcis []VirtualMachineHostpci `pulumi:"hostpcis"`
	// The cloud-init configuration.
	Initialization *VirtualMachineInitialization `pulumi:"initialization"`
	// The keyboard layout (defaults to `en-us`).
	KeyboardLayout *string `pulumi:"keyboardLayout"`
	// Arbitrary arguments passed to kvm.
	KvmArguments *string `pulumi:"kvmArguments"`
	// The MAC addresses published by the QEMU agent with fallback
	// to the network device configuration, if the agent is disabled
	MacAddresses []string `pulumi:"macAddresses"`
	// The VM machine type (defaults to `pc`).
	Machine *string `pulumi:"machine"`
	// The VGA memory in megabytes (defaults to `16`).
	Memory *VirtualMachineMemory `pulumi:"memory"`
	// Migrate the VM on node change instead of re-creating
	// it (defaults to `false`).
	Migrate *bool `pulumi:"migrate"`
	// The virtual machine name.
	Name *string `pulumi:"name"`
	// A network device (multiple blocks supported).
	NetworkDevices []VirtualMachineNetworkDevice `pulumi:"networkDevices"`
	// The name of the node to assign the virtual machine
	// to.
	NodeName string `pulumi:"nodeName"`
	// Specifies whether a VM will be started during system
	// boot. (defaults to `true`)
	OnBoot *bool `pulumi:"onBoot"`
	// The Operating System configuration.
	OperatingSystem *VirtualMachineOperatingSystem `pulumi:"operatingSystem"`
	// The identifier for a pool to assign the virtual machine
	// to.
	PoolId *string `pulumi:"poolId"`
	// Reboot the VM after initial creation. (defaults
	// to `false`)
	Reboot *bool `pulumi:"reboot"`
	// The SCSI hardware type (defaults to
	// `virtio-scsi-pci`).
	ScsiHardware *string `pulumi:"scsiHardware"`
	// A serial device (multiple blocks supported).
	SerialDevices []VirtualMachineSerialDevice `pulumi:"serialDevices"`
	// The SMBIOS (type1) settings for the VM.
	Smbios *VirtualMachineSmbios `pulumi:"smbios"`
	// Whether to start the virtual machine (defaults
	// to `true`).
	Started *bool `pulumi:"started"`
	// Defines startup and shutdown behavior of the VM.
	Startup *VirtualMachineStartup `pulumi:"startup"`
	// Whether to stop rather than shutdown on VM destroy (defaults to `false`)
	StopOnDestroy *bool `pulumi:"stopOnDestroy"`
	// Whether to enable the USB tablet device (defaults
	// to `true`).
	TabletDevice *bool `pulumi:"tabletDevice"`
	// A list of tags of the VM. This is only meta information (
	// defaults to `[]`). Note: Proxmox always sorts the VM tags. If the list in
	// template is not sorted, then Proxmox will always report a difference on the
	// resource. You may use the `ignoreChanges` lifecycle meta-argument to ignore
	// changes to this attribute.
	Tags []string `pulumi:"tags"`
	// Whether to create a template (defaults to `false`).
	Template *bool `pulumi:"template"`
	// Timeout for cloning a VM in seconds (defaults to
	// 1800).
	TimeoutClone *int `pulumi:"timeoutClone"`
	// Timeout for creating a VM in seconds (defaults to
	// 1800).
	TimeoutCreate *int `pulumi:"timeoutCreate"`
	// Timeout for migrating the VM (defaults to
	// 1800).
	TimeoutMigrate *int `pulumi:"timeoutMigrate"`
	// Timeout for moving the disk of a VM in
	// seconds (defaults to 1800).
	TimeoutMoveDisk *int `pulumi:"timeoutMoveDisk"`
	// Timeout for rebooting a VM in seconds (defaults
	// to 1800).
	TimeoutReboot *int `pulumi:"timeoutReboot"`
	// Timeout for shutting down a VM in seconds (
	// defaults to 1800).
	TimeoutShutdownVm *int `pulumi:"timeoutShutdownVm"`
	// Timeout for starting a VM in seconds (defaults
	// to 1800).
	TimeoutStartVm *int `pulumi:"timeoutStartVm"`
	// Timeout for stopping a VM in seconds (defaults
	// to 300).
	TimeoutStopVm *int `pulumi:"timeoutStopVm"`
	// The TPM state device.
	TpmState *VirtualMachineTpmState `pulumi:"tpmState"`
	// A host USB device mapping (multiple blocks supported).
	Usbs []VirtualMachineUsb `pulumi:"usbs"`
	// The VGA configuration.
	Vga *VirtualMachineVga `pulumi:"vga"`
	// The VM identifier.
	VmId *int `pulumi:"vmId"`
}

// The set of arguments for constructing a VirtualMachine resource.
type VirtualMachineArgs struct {
	// Whether to enable ACPI (defaults to `true`).
	Acpi pulumi.BoolPtrInput
	// The QEMU agent configuration.
	Agent VirtualMachineAgentPtrInput
	// An audio device.
	AudioDevice VirtualMachineAudioDevicePtrInput
	// The BIOS implementation (defaults to `seabios`).
	Bios pulumi.StringPtrInput
	// Specify a list of devices to boot from in the order
	// they appear in the list (defaults to `[]`).
	BootOrders pulumi.StringArrayInput
	// The CDROM configuration.
	Cdrom VirtualMachineCdromPtrInput
	// The cloning configuration.
	Clone VirtualMachineClonePtrInput
	// The CPU configuration.
	Cpu VirtualMachineCpuPtrInput
	// The description.
	Description pulumi.StringPtrInput
	// A disk (multiple blocks supported).
	Disks VirtualMachineDiskArrayInput
	// The efi disk device (required if `bios` is set
	// to `ovmf`)
	EfiDisk VirtualMachineEfiDiskPtrInput
	// The identifier for a file containing a hook script (needs to be executable).
	HookScriptFileId pulumi.StringPtrInput
	// A host PCI device mapping (multiple blocks supported).
	Hostpcis VirtualMachineHostpciArrayInput
	// The cloud-init configuration.
	Initialization VirtualMachineInitializationPtrInput
	// The keyboard layout (defaults to `en-us`).
	KeyboardLayout pulumi.StringPtrInput
	// Arbitrary arguments passed to kvm.
	KvmArguments pulumi.StringPtrInput
	// The MAC addresses published by the QEMU agent with fallback
	// to the network device configuration, if the agent is disabled
	MacAddresses pulumi.StringArrayInput
	// The VM machine type (defaults to `pc`).
	Machine pulumi.StringPtrInput
	// The VGA memory in megabytes (defaults to `16`).
	Memory VirtualMachineMemoryPtrInput
	// Migrate the VM on node change instead of re-creating
	// it (defaults to `false`).
	Migrate pulumi.BoolPtrInput
	// The virtual machine name.
	Name pulumi.StringPtrInput
	// A network device (multiple blocks supported).
	NetworkDevices VirtualMachineNetworkDeviceArrayInput
	// The name of the node to assign the virtual machine
	// to.
	NodeName pulumi.StringInput
	// Specifies whether a VM will be started during system
	// boot. (defaults to `true`)
	OnBoot pulumi.BoolPtrInput
	// The Operating System configuration.
	OperatingSystem VirtualMachineOperatingSystemPtrInput
	// The identifier for a pool to assign the virtual machine
	// to.
	PoolId pulumi.StringPtrInput
	// Reboot the VM after initial creation. (defaults
	// to `false`)
	Reboot pulumi.BoolPtrInput
	// The SCSI hardware type (defaults to
	// `virtio-scsi-pci`).
	ScsiHardware pulumi.StringPtrInput
	// A serial device (multiple blocks supported).
	SerialDevices VirtualMachineSerialDeviceArrayInput
	// The SMBIOS (type1) settings for the VM.
	Smbios VirtualMachineSmbiosPtrInput
	// Whether to start the virtual machine (defaults
	// to `true`).
	Started pulumi.BoolPtrInput
	// Defines startup and shutdown behavior of the VM.
	Startup VirtualMachineStartupPtrInput
	// Whether to stop rather than shutdown on VM destroy (defaults to `false`)
	StopOnDestroy pulumi.BoolPtrInput
	// Whether to enable the USB tablet device (defaults
	// to `true`).
	TabletDevice pulumi.BoolPtrInput
	// A list of tags of the VM. This is only meta information (
	// defaults to `[]`). Note: Proxmox always sorts the VM tags. If the list in
	// template is not sorted, then Proxmox will always report a difference on the
	// resource. You may use the `ignoreChanges` lifecycle meta-argument to ignore
	// changes to this attribute.
	Tags pulumi.StringArrayInput
	// Whether to create a template (defaults to `false`).
	Template pulumi.BoolPtrInput
	// Timeout for cloning a VM in seconds (defaults to
	// 1800).
	TimeoutClone pulumi.IntPtrInput
	// Timeout for creating a VM in seconds (defaults to
	// 1800).
	TimeoutCreate pulumi.IntPtrInput
	// Timeout for migrating the VM (defaults to
	// 1800).
	TimeoutMigrate pulumi.IntPtrInput
	// Timeout for moving the disk of a VM in
	// seconds (defaults to 1800).
	TimeoutMoveDisk pulumi.IntPtrInput
	// Timeout for rebooting a VM in seconds (defaults
	// to 1800).
	TimeoutReboot pulumi.IntPtrInput
	// Timeout for shutting down a VM in seconds (
	// defaults to 1800).
	TimeoutShutdownVm pulumi.IntPtrInput
	// Timeout for starting a VM in seconds (defaults
	// to 1800).
	TimeoutStartVm pulumi.IntPtrInput
	// Timeout for stopping a VM in seconds (defaults
	// to 300).
	TimeoutStopVm pulumi.IntPtrInput
	// The TPM state device.
	TpmState VirtualMachineTpmStatePtrInput
	// A host USB device mapping (multiple blocks supported).
	Usbs VirtualMachineUsbArrayInput
	// The VGA configuration.
	Vga VirtualMachineVgaPtrInput
	// The VM identifier.
	VmId pulumi.IntPtrInput
}

func (VirtualMachineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualMachineArgs)(nil)).Elem()
}

type VirtualMachineInput interface {
	pulumi.Input

	ToVirtualMachineOutput() VirtualMachineOutput
	ToVirtualMachineOutputWithContext(ctx context.Context) VirtualMachineOutput
}

func (*VirtualMachine) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachine)(nil)).Elem()
}

func (i *VirtualMachine) ToVirtualMachineOutput() VirtualMachineOutput {
	return i.ToVirtualMachineOutputWithContext(context.Background())
}

func (i *VirtualMachine) ToVirtualMachineOutputWithContext(ctx context.Context) VirtualMachineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineOutput)
}

// VirtualMachineArrayInput is an input type that accepts VirtualMachineArray and VirtualMachineArrayOutput values.
// You can construct a concrete instance of `VirtualMachineArrayInput` via:
//
//	VirtualMachineArray{ VirtualMachineArgs{...} }
type VirtualMachineArrayInput interface {
	pulumi.Input

	ToVirtualMachineArrayOutput() VirtualMachineArrayOutput
	ToVirtualMachineArrayOutputWithContext(context.Context) VirtualMachineArrayOutput
}

type VirtualMachineArray []VirtualMachineInput

func (VirtualMachineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualMachine)(nil)).Elem()
}

func (i VirtualMachineArray) ToVirtualMachineArrayOutput() VirtualMachineArrayOutput {
	return i.ToVirtualMachineArrayOutputWithContext(context.Background())
}

func (i VirtualMachineArray) ToVirtualMachineArrayOutputWithContext(ctx context.Context) VirtualMachineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineArrayOutput)
}

// VirtualMachineMapInput is an input type that accepts VirtualMachineMap and VirtualMachineMapOutput values.
// You can construct a concrete instance of `VirtualMachineMapInput` via:
//
//	VirtualMachineMap{ "key": VirtualMachineArgs{...} }
type VirtualMachineMapInput interface {
	pulumi.Input

	ToVirtualMachineMapOutput() VirtualMachineMapOutput
	ToVirtualMachineMapOutputWithContext(context.Context) VirtualMachineMapOutput
}

type VirtualMachineMap map[string]VirtualMachineInput

func (VirtualMachineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualMachine)(nil)).Elem()
}

func (i VirtualMachineMap) ToVirtualMachineMapOutput() VirtualMachineMapOutput {
	return i.ToVirtualMachineMapOutputWithContext(context.Background())
}

func (i VirtualMachineMap) ToVirtualMachineMapOutputWithContext(ctx context.Context) VirtualMachineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineMapOutput)
}

type VirtualMachineOutput struct{ *pulumi.OutputState }

func (VirtualMachineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachine)(nil)).Elem()
}

func (o VirtualMachineOutput) ToVirtualMachineOutput() VirtualMachineOutput {
	return o
}

func (o VirtualMachineOutput) ToVirtualMachineOutputWithContext(ctx context.Context) VirtualMachineOutput {
	return o
}

// Whether to enable ACPI (defaults to `true`).
func (o VirtualMachineOutput) Acpi() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.Acpi }).(pulumi.BoolPtrOutput)
}

// The QEMU agent configuration.
func (o VirtualMachineOutput) Agent() VirtualMachineAgentPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineAgentPtrOutput { return v.Agent }).(VirtualMachineAgentPtrOutput)
}

// An audio device.
func (o VirtualMachineOutput) AudioDevice() VirtualMachineAudioDevicePtrOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineAudioDevicePtrOutput { return v.AudioDevice }).(VirtualMachineAudioDevicePtrOutput)
}

// The BIOS implementation (defaults to `seabios`).
func (o VirtualMachineOutput) Bios() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.Bios }).(pulumi.StringPtrOutput)
}

// Specify a list of devices to boot from in the order
// they appear in the list (defaults to `[]`).
func (o VirtualMachineOutput) BootOrders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringArrayOutput { return v.BootOrders }).(pulumi.StringArrayOutput)
}

// The CDROM configuration.
func (o VirtualMachineOutput) Cdrom() VirtualMachineCdromPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineCdromPtrOutput { return v.Cdrom }).(VirtualMachineCdromPtrOutput)
}

// The cloning configuration.
func (o VirtualMachineOutput) Clone() VirtualMachineClonePtrOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineClonePtrOutput { return v.Clone }).(VirtualMachineClonePtrOutput)
}

// The CPU configuration.
func (o VirtualMachineOutput) Cpu() VirtualMachineCpuPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineCpuPtrOutput { return v.Cpu }).(VirtualMachineCpuPtrOutput)
}

// The description.
func (o VirtualMachineOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A disk (multiple blocks supported).
func (o VirtualMachineOutput) Disks() VirtualMachineDiskArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineDiskArrayOutput { return v.Disks }).(VirtualMachineDiskArrayOutput)
}

// The efi disk device (required if `bios` is set
// to `ovmf`)
func (o VirtualMachineOutput) EfiDisk() VirtualMachineEfiDiskPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineEfiDiskPtrOutput { return v.EfiDisk }).(VirtualMachineEfiDiskPtrOutput)
}

// The identifier for a file containing a hook script (needs to be executable).
func (o VirtualMachineOutput) HookScriptFileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.HookScriptFileId }).(pulumi.StringPtrOutput)
}

// A host PCI device mapping (multiple blocks supported).
func (o VirtualMachineOutput) Hostpcis() VirtualMachineHostpciArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineHostpciArrayOutput { return v.Hostpcis }).(VirtualMachineHostpciArrayOutput)
}

// The cloud-init configuration.
func (o VirtualMachineOutput) Initialization() VirtualMachineInitializationPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineInitializationPtrOutput { return v.Initialization }).(VirtualMachineInitializationPtrOutput)
}

// The IPv4 addresses per network interface published by the
// QEMU agent (empty list when `agent.enabled` is `false`)
func (o VirtualMachineOutput) Ipv4Addresses() pulumi.StringArrayArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringArrayArrayOutput { return v.Ipv4Addresses }).(pulumi.StringArrayArrayOutput)
}

// The IPv6 addresses per network interface published by the
// QEMU agent (empty list when `agent.enabled` is `false`)
func (o VirtualMachineOutput) Ipv6Addresses() pulumi.StringArrayArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringArrayArrayOutput { return v.Ipv6Addresses }).(pulumi.StringArrayArrayOutput)
}

// The keyboard layout (defaults to `en-us`).
func (o VirtualMachineOutput) KeyboardLayout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.KeyboardLayout }).(pulumi.StringPtrOutput)
}

// Arbitrary arguments passed to kvm.
func (o VirtualMachineOutput) KvmArguments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.KvmArguments }).(pulumi.StringPtrOutput)
}

// The MAC addresses published by the QEMU agent with fallback
// to the network device configuration, if the agent is disabled
func (o VirtualMachineOutput) MacAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringArrayOutput { return v.MacAddresses }).(pulumi.StringArrayOutput)
}

// The VM machine type (defaults to `pc`).
func (o VirtualMachineOutput) Machine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.Machine }).(pulumi.StringPtrOutput)
}

// The VGA memory in megabytes (defaults to `16`).
func (o VirtualMachineOutput) Memory() VirtualMachineMemoryPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineMemoryPtrOutput { return v.Memory }).(VirtualMachineMemoryPtrOutput)
}

// Migrate the VM on node change instead of re-creating
// it (defaults to `false`).
func (o VirtualMachineOutput) Migrate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.Migrate }).(pulumi.BoolPtrOutput)
}

// The virtual machine name.
func (o VirtualMachineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A network device (multiple blocks supported).
func (o VirtualMachineOutput) NetworkDevices() VirtualMachineNetworkDeviceArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineNetworkDeviceArrayOutput { return v.NetworkDevices }).(VirtualMachineNetworkDeviceArrayOutput)
}

// The network interface names published by the QEMU
// agent (empty list when `agent.enabled` is `false`)
func (o VirtualMachineOutput) NetworkInterfaceNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringArrayOutput { return v.NetworkInterfaceNames }).(pulumi.StringArrayOutput)
}

// The name of the node to assign the virtual machine
// to.
func (o VirtualMachineOutput) NodeName() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.NodeName }).(pulumi.StringOutput)
}

// Specifies whether a VM will be started during system
// boot. (defaults to `true`)
func (o VirtualMachineOutput) OnBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.OnBoot }).(pulumi.BoolPtrOutput)
}

// The Operating System configuration.
func (o VirtualMachineOutput) OperatingSystem() VirtualMachineOperatingSystemPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineOperatingSystemPtrOutput { return v.OperatingSystem }).(VirtualMachineOperatingSystemPtrOutput)
}

// The identifier for a pool to assign the virtual machine
// to.
func (o VirtualMachineOutput) PoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.PoolId }).(pulumi.StringPtrOutput)
}

// Reboot the VM after initial creation. (defaults
// to `false`)
func (o VirtualMachineOutput) Reboot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.Reboot }).(pulumi.BoolPtrOutput)
}

// The SCSI hardware type (defaults to
// `virtio-scsi-pci`).
func (o VirtualMachineOutput) ScsiHardware() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.ScsiHardware }).(pulumi.StringPtrOutput)
}

// A serial device (multiple blocks supported).
func (o VirtualMachineOutput) SerialDevices() VirtualMachineSerialDeviceArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineSerialDeviceArrayOutput { return v.SerialDevices }).(VirtualMachineSerialDeviceArrayOutput)
}

// The SMBIOS (type1) settings for the VM.
func (o VirtualMachineOutput) Smbios() VirtualMachineSmbiosPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineSmbiosPtrOutput { return v.Smbios }).(VirtualMachineSmbiosPtrOutput)
}

// Whether to start the virtual machine (defaults
// to `true`).
func (o VirtualMachineOutput) Started() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.Started }).(pulumi.BoolPtrOutput)
}

// Defines startup and shutdown behavior of the VM.
func (o VirtualMachineOutput) Startup() VirtualMachineStartupPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineStartupPtrOutput { return v.Startup }).(VirtualMachineStartupPtrOutput)
}

// Whether to stop rather than shutdown on VM destroy (defaults to `false`)
func (o VirtualMachineOutput) StopOnDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.StopOnDestroy }).(pulumi.BoolPtrOutput)
}

// Whether to enable the USB tablet device (defaults
// to `true`).
func (o VirtualMachineOutput) TabletDevice() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.TabletDevice }).(pulumi.BoolPtrOutput)
}

// A list of tags of the VM. This is only meta information (
// defaults to `[]`). Note: Proxmox always sorts the VM tags. If the list in
// template is not sorted, then Proxmox will always report a difference on the
// resource. You may use the `ignoreChanges` lifecycle meta-argument to ignore
// changes to this attribute.
func (o VirtualMachineOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Whether to create a template (defaults to `false`).
func (o VirtualMachineOutput) Template() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.Template }).(pulumi.BoolPtrOutput)
}

// Timeout for cloning a VM in seconds (defaults to
// 1800).
func (o VirtualMachineOutput) TimeoutClone() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.TimeoutClone }).(pulumi.IntPtrOutput)
}

// Timeout for creating a VM in seconds (defaults to
// 1800).
func (o VirtualMachineOutput) TimeoutCreate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.TimeoutCreate }).(pulumi.IntPtrOutput)
}

// Timeout for migrating the VM (defaults to
// 1800).
func (o VirtualMachineOutput) TimeoutMigrate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.TimeoutMigrate }).(pulumi.IntPtrOutput)
}

// Timeout for moving the disk of a VM in
// seconds (defaults to 1800).
func (o VirtualMachineOutput) TimeoutMoveDisk() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.TimeoutMoveDisk }).(pulumi.IntPtrOutput)
}

// Timeout for rebooting a VM in seconds (defaults
// to 1800).
func (o VirtualMachineOutput) TimeoutReboot() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.TimeoutReboot }).(pulumi.IntPtrOutput)
}

// Timeout for shutting down a VM in seconds (
// defaults to 1800).
func (o VirtualMachineOutput) TimeoutShutdownVm() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.TimeoutShutdownVm }).(pulumi.IntPtrOutput)
}

// Timeout for starting a VM in seconds (defaults
// to 1800).
func (o VirtualMachineOutput) TimeoutStartVm() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.TimeoutStartVm }).(pulumi.IntPtrOutput)
}

// Timeout for stopping a VM in seconds (defaults
// to 300).
func (o VirtualMachineOutput) TimeoutStopVm() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.TimeoutStopVm }).(pulumi.IntPtrOutput)
}

// The TPM state device.
func (o VirtualMachineOutput) TpmState() VirtualMachineTpmStatePtrOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineTpmStatePtrOutput { return v.TpmState }).(VirtualMachineTpmStatePtrOutput)
}

// A host USB device mapping (multiple blocks supported).
func (o VirtualMachineOutput) Usbs() VirtualMachineUsbArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineUsbArrayOutput { return v.Usbs }).(VirtualMachineUsbArrayOutput)
}

// The VGA configuration.
func (o VirtualMachineOutput) Vga() VirtualMachineVgaPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineVgaPtrOutput { return v.Vga }).(VirtualMachineVgaPtrOutput)
}

// The VM identifier.
func (o VirtualMachineOutput) VmId() pulumi.IntOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntOutput { return v.VmId }).(pulumi.IntOutput)
}

type VirtualMachineArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualMachine)(nil)).Elem()
}

func (o VirtualMachineArrayOutput) ToVirtualMachineArrayOutput() VirtualMachineArrayOutput {
	return o
}

func (o VirtualMachineArrayOutput) ToVirtualMachineArrayOutputWithContext(ctx context.Context) VirtualMachineArrayOutput {
	return o
}

func (o VirtualMachineArrayOutput) Index(i pulumi.IntInput) VirtualMachineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VirtualMachine {
		return vs[0].([]*VirtualMachine)[vs[1].(int)]
	}).(VirtualMachineOutput)
}

type VirtualMachineMapOutput struct{ *pulumi.OutputState }

func (VirtualMachineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualMachine)(nil)).Elem()
}

func (o VirtualMachineMapOutput) ToVirtualMachineMapOutput() VirtualMachineMapOutput {
	return o
}

func (o VirtualMachineMapOutput) ToVirtualMachineMapOutputWithContext(ctx context.Context) VirtualMachineMapOutput {
	return o
}

func (o VirtualMachineMapOutput) MapIndex(k pulumi.StringInput) VirtualMachineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VirtualMachine {
		return vs[0].(map[string]*VirtualMachine)[vs[1].(string)]
	}).(VirtualMachineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineInput)(nil)).Elem(), &VirtualMachine{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineArrayInput)(nil)).Elem(), VirtualMachineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineMapInput)(nil)).Elem(), VirtualMachineMap{})
	pulumi.RegisterOutputType(VirtualMachineOutput{})
	pulumi.RegisterOutputType(VirtualMachineArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineMapOutput{})
}

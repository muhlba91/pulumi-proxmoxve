// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vm

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VirtualMachine struct {
	pulumi.CustomResourceState

	// Whether to enable ACPI
	Acpi pulumi.BoolPtrOutput `pulumi:"acpi"`
	// The QEMU agent configuration
	Agent VirtualMachineAgentPtrOutput `pulumi:"agent"`
	// The audio devices
	AudioDevice VirtualMachineAudioDevicePtrOutput `pulumi:"audioDevice"`
	// The BIOS implementation
	Bios pulumi.StringPtrOutput `pulumi:"bios"`
	// The guest will attempt to boot from devices in the order they appear here
	BootOrders pulumi.StringArrayOutput `pulumi:"bootOrders"`
	// The CDROM drive
	Cdrom VirtualMachineCdromPtrOutput `pulumi:"cdrom"`
	// The cloning configuration
	Clone VirtualMachineClonePtrOutput `pulumi:"clone"`
	// The CPU allocation
	Cpu VirtualMachineCpuPtrOutput `pulumi:"cpu"`
	// The description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The disk devices
	Disks VirtualMachineDiskArrayOutput `pulumi:"disks"`
	// The Host PCI devices mapped to the VM
	Hostpcis VirtualMachineHostpciArrayOutput `pulumi:"hostpcis"`
	// The cloud-init configuration
	Initialization VirtualMachineInitializationPtrOutput `pulumi:"initialization"`
	// The IPv4 addresses published by the QEMU agent
	Ipv4Addresses pulumi.StringArrayArrayOutput `pulumi:"ipv4Addresses"`
	// The IPv6 addresses published by the QEMU agent
	Ipv6Addresses pulumi.StringArrayArrayOutput `pulumi:"ipv6Addresses"`
	// The keyboard layout
	KeyboardLayout pulumi.StringPtrOutput `pulumi:"keyboardLayout"`
	// The args implementation
	KvmArguments pulumi.StringPtrOutput `pulumi:"kvmArguments"`
	// The MAC addresses for the network interfaces
	MacAddresses pulumi.StringArrayOutput `pulumi:"macAddresses"`
	// The VM machine type, either default i440fx or q35
	Machine pulumi.StringPtrOutput `pulumi:"machine"`
	// The memory allocation
	Memory VirtualMachineMemoryPtrOutput `pulumi:"memory"`
	// The name
	Name pulumi.StringOutput `pulumi:"name"`
	// The network devices
	NetworkDevices VirtualMachineNetworkDeviceArrayOutput `pulumi:"networkDevices"`
	// The network interface names published by the QEMU agent
	NetworkInterfaceNames pulumi.StringArrayOutput `pulumi:"networkInterfaceNames"`
	// The node name
	NodeName pulumi.StringOutput `pulumi:"nodeName"`
	// Start VM on Node boot
	OnBoot pulumi.BoolPtrOutput `pulumi:"onBoot"`
	// The operating system configuration
	OperatingSystem VirtualMachineOperatingSystemPtrOutput `pulumi:"operatingSystem"`
	// The ID of the pool to assign the virtual machine to
	PoolId pulumi.StringPtrOutput `pulumi:"poolId"`
	// Whether to reboot vm after creation
	Reboot pulumi.BoolPtrOutput `pulumi:"reboot"`
	// The SCSI hardware type
	ScsiHardware pulumi.StringPtrOutput `pulumi:"scsiHardware"`
	// The serial devices
	SerialDevices VirtualMachineSerialDeviceArrayOutput `pulumi:"serialDevices"`
	// Whether to start the virtual machine
	Started pulumi.BoolPtrOutput `pulumi:"started"`
	// Whether to enable the USB tablet device
	TabletDevice pulumi.BoolPtrOutput `pulumi:"tabletDevice"`
	// Tags of the virtual machine. This is only meta information.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Whether to create a template
	Template pulumi.BoolPtrOutput `pulumi:"template"`
	// Clone VM timeout
	TimeoutClone pulumi.IntPtrOutput `pulumi:"timeoutClone"`
	// MoveDisk timeout
	TimeoutMoveDisk pulumi.IntPtrOutput `pulumi:"timeoutMoveDisk"`
	// Reboot timeout
	TimeoutReboot pulumi.IntPtrOutput `pulumi:"timeoutReboot"`
	// Shutdown timeout
	TimeoutShutdownVm pulumi.IntPtrOutput `pulumi:"timeoutShutdownVm"`
	// Start VM timeout
	TimeoutStartVm pulumi.IntPtrOutput `pulumi:"timeoutStartVm"`
	// Stop VM timeout
	TimeoutStopVm pulumi.IntPtrOutput `pulumi:"timeoutStopVm"`
	// The VGA configuration
	Vga VirtualMachineVgaPtrOutput `pulumi:"vga"`
	// The VM identifier
	VmId pulumi.IntPtrOutput `pulumi:"vmId"`
}

// NewVirtualMachine registers a new resource with the given unique name, arguments, and options.
func NewVirtualMachine(ctx *pulumi.Context,
	name string, args *VirtualMachineArgs, opts ...pulumi.ResourceOption) (*VirtualMachine, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NodeName == nil {
		return nil, errors.New("invalid value for required argument 'NodeName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource VirtualMachine
	err := ctx.RegisterResource("proxmoxve:VM/virtualMachine:VirtualMachine", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualMachine gets an existing VirtualMachine resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualMachine(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualMachineState, opts ...pulumi.ResourceOption) (*VirtualMachine, error) {
	var resource VirtualMachine
	err := ctx.ReadResource("proxmoxve:VM/virtualMachine:VirtualMachine", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualMachine resources.
type virtualMachineState struct {
	// Whether to enable ACPI
	Acpi *bool `pulumi:"acpi"`
	// The QEMU agent configuration
	Agent *VirtualMachineAgent `pulumi:"agent"`
	// The audio devices
	AudioDevice *VirtualMachineAudioDevice `pulumi:"audioDevice"`
	// The BIOS implementation
	Bios *string `pulumi:"bios"`
	// The guest will attempt to boot from devices in the order they appear here
	BootOrders []string `pulumi:"bootOrders"`
	// The CDROM drive
	Cdrom *VirtualMachineCdrom `pulumi:"cdrom"`
	// The cloning configuration
	Clone *VirtualMachineClone `pulumi:"clone"`
	// The CPU allocation
	Cpu *VirtualMachineCpu `pulumi:"cpu"`
	// The description
	Description *string `pulumi:"description"`
	// The disk devices
	Disks []VirtualMachineDisk `pulumi:"disks"`
	// The Host PCI devices mapped to the VM
	Hostpcis []VirtualMachineHostpci `pulumi:"hostpcis"`
	// The cloud-init configuration
	Initialization *VirtualMachineInitialization `pulumi:"initialization"`
	// The IPv4 addresses published by the QEMU agent
	Ipv4Addresses [][]string `pulumi:"ipv4Addresses"`
	// The IPv6 addresses published by the QEMU agent
	Ipv6Addresses [][]string `pulumi:"ipv6Addresses"`
	// The keyboard layout
	KeyboardLayout *string `pulumi:"keyboardLayout"`
	// The args implementation
	KvmArguments *string `pulumi:"kvmArguments"`
	// The MAC addresses for the network interfaces
	MacAddresses []string `pulumi:"macAddresses"`
	// The VM machine type, either default i440fx or q35
	Machine *string `pulumi:"machine"`
	// The memory allocation
	Memory *VirtualMachineMemory `pulumi:"memory"`
	// The name
	Name *string `pulumi:"name"`
	// The network devices
	NetworkDevices []VirtualMachineNetworkDevice `pulumi:"networkDevices"`
	// The network interface names published by the QEMU agent
	NetworkInterfaceNames []string `pulumi:"networkInterfaceNames"`
	// The node name
	NodeName *string `pulumi:"nodeName"`
	// Start VM on Node boot
	OnBoot *bool `pulumi:"onBoot"`
	// The operating system configuration
	OperatingSystem *VirtualMachineOperatingSystem `pulumi:"operatingSystem"`
	// The ID of the pool to assign the virtual machine to
	PoolId *string `pulumi:"poolId"`
	// Whether to reboot vm after creation
	Reboot *bool `pulumi:"reboot"`
	// The SCSI hardware type
	ScsiHardware *string `pulumi:"scsiHardware"`
	// The serial devices
	SerialDevices []VirtualMachineSerialDevice `pulumi:"serialDevices"`
	// Whether to start the virtual machine
	Started *bool `pulumi:"started"`
	// Whether to enable the USB tablet device
	TabletDevice *bool `pulumi:"tabletDevice"`
	// Tags of the virtual machine. This is only meta information.
	Tags []string `pulumi:"tags"`
	// Whether to create a template
	Template *bool `pulumi:"template"`
	// Clone VM timeout
	TimeoutClone *int `pulumi:"timeoutClone"`
	// MoveDisk timeout
	TimeoutMoveDisk *int `pulumi:"timeoutMoveDisk"`
	// Reboot timeout
	TimeoutReboot *int `pulumi:"timeoutReboot"`
	// Shutdown timeout
	TimeoutShutdownVm *int `pulumi:"timeoutShutdownVm"`
	// Start VM timeout
	TimeoutStartVm *int `pulumi:"timeoutStartVm"`
	// Stop VM timeout
	TimeoutStopVm *int `pulumi:"timeoutStopVm"`
	// The VGA configuration
	Vga *VirtualMachineVga `pulumi:"vga"`
	// The VM identifier
	VmId *int `pulumi:"vmId"`
}

type VirtualMachineState struct {
	// Whether to enable ACPI
	Acpi pulumi.BoolPtrInput
	// The QEMU agent configuration
	Agent VirtualMachineAgentPtrInput
	// The audio devices
	AudioDevice VirtualMachineAudioDevicePtrInput
	// The BIOS implementation
	Bios pulumi.StringPtrInput
	// The guest will attempt to boot from devices in the order they appear here
	BootOrders pulumi.StringArrayInput
	// The CDROM drive
	Cdrom VirtualMachineCdromPtrInput
	// The cloning configuration
	Clone VirtualMachineClonePtrInput
	// The CPU allocation
	Cpu VirtualMachineCpuPtrInput
	// The description
	Description pulumi.StringPtrInput
	// The disk devices
	Disks VirtualMachineDiskArrayInput
	// The Host PCI devices mapped to the VM
	Hostpcis VirtualMachineHostpciArrayInput
	// The cloud-init configuration
	Initialization VirtualMachineInitializationPtrInput
	// The IPv4 addresses published by the QEMU agent
	Ipv4Addresses pulumi.StringArrayArrayInput
	// The IPv6 addresses published by the QEMU agent
	Ipv6Addresses pulumi.StringArrayArrayInput
	// The keyboard layout
	KeyboardLayout pulumi.StringPtrInput
	// The args implementation
	KvmArguments pulumi.StringPtrInput
	// The MAC addresses for the network interfaces
	MacAddresses pulumi.StringArrayInput
	// The VM machine type, either default i440fx or q35
	Machine pulumi.StringPtrInput
	// The memory allocation
	Memory VirtualMachineMemoryPtrInput
	// The name
	Name pulumi.StringPtrInput
	// The network devices
	NetworkDevices VirtualMachineNetworkDeviceArrayInput
	// The network interface names published by the QEMU agent
	NetworkInterfaceNames pulumi.StringArrayInput
	// The node name
	NodeName pulumi.StringPtrInput
	// Start VM on Node boot
	OnBoot pulumi.BoolPtrInput
	// The operating system configuration
	OperatingSystem VirtualMachineOperatingSystemPtrInput
	// The ID of the pool to assign the virtual machine to
	PoolId pulumi.StringPtrInput
	// Whether to reboot vm after creation
	Reboot pulumi.BoolPtrInput
	// The SCSI hardware type
	ScsiHardware pulumi.StringPtrInput
	// The serial devices
	SerialDevices VirtualMachineSerialDeviceArrayInput
	// Whether to start the virtual machine
	Started pulumi.BoolPtrInput
	// Whether to enable the USB tablet device
	TabletDevice pulumi.BoolPtrInput
	// Tags of the virtual machine. This is only meta information.
	Tags pulumi.StringArrayInput
	// Whether to create a template
	Template pulumi.BoolPtrInput
	// Clone VM timeout
	TimeoutClone pulumi.IntPtrInput
	// MoveDisk timeout
	TimeoutMoveDisk pulumi.IntPtrInput
	// Reboot timeout
	TimeoutReboot pulumi.IntPtrInput
	// Shutdown timeout
	TimeoutShutdownVm pulumi.IntPtrInput
	// Start VM timeout
	TimeoutStartVm pulumi.IntPtrInput
	// Stop VM timeout
	TimeoutStopVm pulumi.IntPtrInput
	// The VGA configuration
	Vga VirtualMachineVgaPtrInput
	// The VM identifier
	VmId pulumi.IntPtrInput
}

func (VirtualMachineState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualMachineState)(nil)).Elem()
}

type virtualMachineArgs struct {
	// Whether to enable ACPI
	Acpi *bool `pulumi:"acpi"`
	// The QEMU agent configuration
	Agent *VirtualMachineAgent `pulumi:"agent"`
	// The audio devices
	AudioDevice *VirtualMachineAudioDevice `pulumi:"audioDevice"`
	// The BIOS implementation
	Bios *string `pulumi:"bios"`
	// The guest will attempt to boot from devices in the order they appear here
	BootOrders []string `pulumi:"bootOrders"`
	// The CDROM drive
	Cdrom *VirtualMachineCdrom `pulumi:"cdrom"`
	// The cloning configuration
	Clone *VirtualMachineClone `pulumi:"clone"`
	// The CPU allocation
	Cpu *VirtualMachineCpu `pulumi:"cpu"`
	// The description
	Description *string `pulumi:"description"`
	// The disk devices
	Disks []VirtualMachineDisk `pulumi:"disks"`
	// The Host PCI devices mapped to the VM
	Hostpcis []VirtualMachineHostpci `pulumi:"hostpcis"`
	// The cloud-init configuration
	Initialization *VirtualMachineInitialization `pulumi:"initialization"`
	// The keyboard layout
	KeyboardLayout *string `pulumi:"keyboardLayout"`
	// The args implementation
	KvmArguments *string `pulumi:"kvmArguments"`
	// The VM machine type, either default i440fx or q35
	Machine *string `pulumi:"machine"`
	// The memory allocation
	Memory *VirtualMachineMemory `pulumi:"memory"`
	// The name
	Name *string `pulumi:"name"`
	// The network devices
	NetworkDevices []VirtualMachineNetworkDevice `pulumi:"networkDevices"`
	// The node name
	NodeName string `pulumi:"nodeName"`
	// Start VM on Node boot
	OnBoot *bool `pulumi:"onBoot"`
	// The operating system configuration
	OperatingSystem *VirtualMachineOperatingSystem `pulumi:"operatingSystem"`
	// The ID of the pool to assign the virtual machine to
	PoolId *string `pulumi:"poolId"`
	// Whether to reboot vm after creation
	Reboot *bool `pulumi:"reboot"`
	// The SCSI hardware type
	ScsiHardware *string `pulumi:"scsiHardware"`
	// The serial devices
	SerialDevices []VirtualMachineSerialDevice `pulumi:"serialDevices"`
	// Whether to start the virtual machine
	Started *bool `pulumi:"started"`
	// Whether to enable the USB tablet device
	TabletDevice *bool `pulumi:"tabletDevice"`
	// Tags of the virtual machine. This is only meta information.
	Tags []string `pulumi:"tags"`
	// Whether to create a template
	Template *bool `pulumi:"template"`
	// Clone VM timeout
	TimeoutClone *int `pulumi:"timeoutClone"`
	// MoveDisk timeout
	TimeoutMoveDisk *int `pulumi:"timeoutMoveDisk"`
	// Reboot timeout
	TimeoutReboot *int `pulumi:"timeoutReboot"`
	// Shutdown timeout
	TimeoutShutdownVm *int `pulumi:"timeoutShutdownVm"`
	// Start VM timeout
	TimeoutStartVm *int `pulumi:"timeoutStartVm"`
	// Stop VM timeout
	TimeoutStopVm *int `pulumi:"timeoutStopVm"`
	// The VGA configuration
	Vga *VirtualMachineVga `pulumi:"vga"`
	// The VM identifier
	VmId *int `pulumi:"vmId"`
}

// The set of arguments for constructing a VirtualMachine resource.
type VirtualMachineArgs struct {
	// Whether to enable ACPI
	Acpi pulumi.BoolPtrInput
	// The QEMU agent configuration
	Agent VirtualMachineAgentPtrInput
	// The audio devices
	AudioDevice VirtualMachineAudioDevicePtrInput
	// The BIOS implementation
	Bios pulumi.StringPtrInput
	// The guest will attempt to boot from devices in the order they appear here
	BootOrders pulumi.StringArrayInput
	// The CDROM drive
	Cdrom VirtualMachineCdromPtrInput
	// The cloning configuration
	Clone VirtualMachineClonePtrInput
	// The CPU allocation
	Cpu VirtualMachineCpuPtrInput
	// The description
	Description pulumi.StringPtrInput
	// The disk devices
	Disks VirtualMachineDiskArrayInput
	// The Host PCI devices mapped to the VM
	Hostpcis VirtualMachineHostpciArrayInput
	// The cloud-init configuration
	Initialization VirtualMachineInitializationPtrInput
	// The keyboard layout
	KeyboardLayout pulumi.StringPtrInput
	// The args implementation
	KvmArguments pulumi.StringPtrInput
	// The VM machine type, either default i440fx or q35
	Machine pulumi.StringPtrInput
	// The memory allocation
	Memory VirtualMachineMemoryPtrInput
	// The name
	Name pulumi.StringPtrInput
	// The network devices
	NetworkDevices VirtualMachineNetworkDeviceArrayInput
	// The node name
	NodeName pulumi.StringInput
	// Start VM on Node boot
	OnBoot pulumi.BoolPtrInput
	// The operating system configuration
	OperatingSystem VirtualMachineOperatingSystemPtrInput
	// The ID of the pool to assign the virtual machine to
	PoolId pulumi.StringPtrInput
	// Whether to reboot vm after creation
	Reboot pulumi.BoolPtrInput
	// The SCSI hardware type
	ScsiHardware pulumi.StringPtrInput
	// The serial devices
	SerialDevices VirtualMachineSerialDeviceArrayInput
	// Whether to start the virtual machine
	Started pulumi.BoolPtrInput
	// Whether to enable the USB tablet device
	TabletDevice pulumi.BoolPtrInput
	// Tags of the virtual machine. This is only meta information.
	Tags pulumi.StringArrayInput
	// Whether to create a template
	Template pulumi.BoolPtrInput
	// Clone VM timeout
	TimeoutClone pulumi.IntPtrInput
	// MoveDisk timeout
	TimeoutMoveDisk pulumi.IntPtrInput
	// Reboot timeout
	TimeoutReboot pulumi.IntPtrInput
	// Shutdown timeout
	TimeoutShutdownVm pulumi.IntPtrInput
	// Start VM timeout
	TimeoutStartVm pulumi.IntPtrInput
	// Stop VM timeout
	TimeoutStopVm pulumi.IntPtrInput
	// The VGA configuration
	Vga VirtualMachineVgaPtrInput
	// The VM identifier
	VmId pulumi.IntPtrInput
}

func (VirtualMachineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualMachineArgs)(nil)).Elem()
}

type VirtualMachineInput interface {
	pulumi.Input

	ToVirtualMachineOutput() VirtualMachineOutput
	ToVirtualMachineOutputWithContext(ctx context.Context) VirtualMachineOutput
}

func (*VirtualMachine) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachine)(nil)).Elem()
}

func (i *VirtualMachine) ToVirtualMachineOutput() VirtualMachineOutput {
	return i.ToVirtualMachineOutputWithContext(context.Background())
}

func (i *VirtualMachine) ToVirtualMachineOutputWithContext(ctx context.Context) VirtualMachineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineOutput)
}

// VirtualMachineArrayInput is an input type that accepts VirtualMachineArray and VirtualMachineArrayOutput values.
// You can construct a concrete instance of `VirtualMachineArrayInput` via:
//
//	VirtualMachineArray{ VirtualMachineArgs{...} }
type VirtualMachineArrayInput interface {
	pulumi.Input

	ToVirtualMachineArrayOutput() VirtualMachineArrayOutput
	ToVirtualMachineArrayOutputWithContext(context.Context) VirtualMachineArrayOutput
}

type VirtualMachineArray []VirtualMachineInput

func (VirtualMachineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualMachine)(nil)).Elem()
}

func (i VirtualMachineArray) ToVirtualMachineArrayOutput() VirtualMachineArrayOutput {
	return i.ToVirtualMachineArrayOutputWithContext(context.Background())
}

func (i VirtualMachineArray) ToVirtualMachineArrayOutputWithContext(ctx context.Context) VirtualMachineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineArrayOutput)
}

// VirtualMachineMapInput is an input type that accepts VirtualMachineMap and VirtualMachineMapOutput values.
// You can construct a concrete instance of `VirtualMachineMapInput` via:
//
//	VirtualMachineMap{ "key": VirtualMachineArgs{...} }
type VirtualMachineMapInput interface {
	pulumi.Input

	ToVirtualMachineMapOutput() VirtualMachineMapOutput
	ToVirtualMachineMapOutputWithContext(context.Context) VirtualMachineMapOutput
}

type VirtualMachineMap map[string]VirtualMachineInput

func (VirtualMachineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualMachine)(nil)).Elem()
}

func (i VirtualMachineMap) ToVirtualMachineMapOutput() VirtualMachineMapOutput {
	return i.ToVirtualMachineMapOutputWithContext(context.Background())
}

func (i VirtualMachineMap) ToVirtualMachineMapOutputWithContext(ctx context.Context) VirtualMachineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineMapOutput)
}

type VirtualMachineOutput struct{ *pulumi.OutputState }

func (VirtualMachineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachine)(nil)).Elem()
}

func (o VirtualMachineOutput) ToVirtualMachineOutput() VirtualMachineOutput {
	return o
}

func (o VirtualMachineOutput) ToVirtualMachineOutputWithContext(ctx context.Context) VirtualMachineOutput {
	return o
}

// Whether to enable ACPI
func (o VirtualMachineOutput) Acpi() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.Acpi }).(pulumi.BoolPtrOutput)
}

// The QEMU agent configuration
func (o VirtualMachineOutput) Agent() VirtualMachineAgentPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineAgentPtrOutput { return v.Agent }).(VirtualMachineAgentPtrOutput)
}

// The audio devices
func (o VirtualMachineOutput) AudioDevice() VirtualMachineAudioDevicePtrOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineAudioDevicePtrOutput { return v.AudioDevice }).(VirtualMachineAudioDevicePtrOutput)
}

// The BIOS implementation
func (o VirtualMachineOutput) Bios() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.Bios }).(pulumi.StringPtrOutput)
}

// The guest will attempt to boot from devices in the order they appear here
func (o VirtualMachineOutput) BootOrders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringArrayOutput { return v.BootOrders }).(pulumi.StringArrayOutput)
}

// The CDROM drive
func (o VirtualMachineOutput) Cdrom() VirtualMachineCdromPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineCdromPtrOutput { return v.Cdrom }).(VirtualMachineCdromPtrOutput)
}

// The cloning configuration
func (o VirtualMachineOutput) Clone() VirtualMachineClonePtrOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineClonePtrOutput { return v.Clone }).(VirtualMachineClonePtrOutput)
}

// The CPU allocation
func (o VirtualMachineOutput) Cpu() VirtualMachineCpuPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineCpuPtrOutput { return v.Cpu }).(VirtualMachineCpuPtrOutput)
}

// The description
func (o VirtualMachineOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The disk devices
func (o VirtualMachineOutput) Disks() VirtualMachineDiskArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineDiskArrayOutput { return v.Disks }).(VirtualMachineDiskArrayOutput)
}

// The Host PCI devices mapped to the VM
func (o VirtualMachineOutput) Hostpcis() VirtualMachineHostpciArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineHostpciArrayOutput { return v.Hostpcis }).(VirtualMachineHostpciArrayOutput)
}

// The cloud-init configuration
func (o VirtualMachineOutput) Initialization() VirtualMachineInitializationPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineInitializationPtrOutput { return v.Initialization }).(VirtualMachineInitializationPtrOutput)
}

// The IPv4 addresses published by the QEMU agent
func (o VirtualMachineOutput) Ipv4Addresses() pulumi.StringArrayArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringArrayArrayOutput { return v.Ipv4Addresses }).(pulumi.StringArrayArrayOutput)
}

// The IPv6 addresses published by the QEMU agent
func (o VirtualMachineOutput) Ipv6Addresses() pulumi.StringArrayArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringArrayArrayOutput { return v.Ipv6Addresses }).(pulumi.StringArrayArrayOutput)
}

// The keyboard layout
func (o VirtualMachineOutput) KeyboardLayout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.KeyboardLayout }).(pulumi.StringPtrOutput)
}

// The args implementation
func (o VirtualMachineOutput) KvmArguments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.KvmArguments }).(pulumi.StringPtrOutput)
}

// The MAC addresses for the network interfaces
func (o VirtualMachineOutput) MacAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringArrayOutput { return v.MacAddresses }).(pulumi.StringArrayOutput)
}

// The VM machine type, either default i440fx or q35
func (o VirtualMachineOutput) Machine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.Machine }).(pulumi.StringPtrOutput)
}

// The memory allocation
func (o VirtualMachineOutput) Memory() VirtualMachineMemoryPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineMemoryPtrOutput { return v.Memory }).(VirtualMachineMemoryPtrOutput)
}

// The name
func (o VirtualMachineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The network devices
func (o VirtualMachineOutput) NetworkDevices() VirtualMachineNetworkDeviceArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineNetworkDeviceArrayOutput { return v.NetworkDevices }).(VirtualMachineNetworkDeviceArrayOutput)
}

// The network interface names published by the QEMU agent
func (o VirtualMachineOutput) NetworkInterfaceNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringArrayOutput { return v.NetworkInterfaceNames }).(pulumi.StringArrayOutput)
}

// The node name
func (o VirtualMachineOutput) NodeName() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.NodeName }).(pulumi.StringOutput)
}

// Start VM on Node boot
func (o VirtualMachineOutput) OnBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.OnBoot }).(pulumi.BoolPtrOutput)
}

// The operating system configuration
func (o VirtualMachineOutput) OperatingSystem() VirtualMachineOperatingSystemPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineOperatingSystemPtrOutput { return v.OperatingSystem }).(VirtualMachineOperatingSystemPtrOutput)
}

// The ID of the pool to assign the virtual machine to
func (o VirtualMachineOutput) PoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.PoolId }).(pulumi.StringPtrOutput)
}

// Whether to reboot vm after creation
func (o VirtualMachineOutput) Reboot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.Reboot }).(pulumi.BoolPtrOutput)
}

// The SCSI hardware type
func (o VirtualMachineOutput) ScsiHardware() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.ScsiHardware }).(pulumi.StringPtrOutput)
}

// The serial devices
func (o VirtualMachineOutput) SerialDevices() VirtualMachineSerialDeviceArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineSerialDeviceArrayOutput { return v.SerialDevices }).(VirtualMachineSerialDeviceArrayOutput)
}

// Whether to start the virtual machine
func (o VirtualMachineOutput) Started() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.Started }).(pulumi.BoolPtrOutput)
}

// Whether to enable the USB tablet device
func (o VirtualMachineOutput) TabletDevice() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.TabletDevice }).(pulumi.BoolPtrOutput)
}

// Tags of the virtual machine. This is only meta information.
func (o VirtualMachineOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Whether to create a template
func (o VirtualMachineOutput) Template() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.Template }).(pulumi.BoolPtrOutput)
}

// Clone VM timeout
func (o VirtualMachineOutput) TimeoutClone() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.TimeoutClone }).(pulumi.IntPtrOutput)
}

// MoveDisk timeout
func (o VirtualMachineOutput) TimeoutMoveDisk() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.TimeoutMoveDisk }).(pulumi.IntPtrOutput)
}

// Reboot timeout
func (o VirtualMachineOutput) TimeoutReboot() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.TimeoutReboot }).(pulumi.IntPtrOutput)
}

// Shutdown timeout
func (o VirtualMachineOutput) TimeoutShutdownVm() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.TimeoutShutdownVm }).(pulumi.IntPtrOutput)
}

// Start VM timeout
func (o VirtualMachineOutput) TimeoutStartVm() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.TimeoutStartVm }).(pulumi.IntPtrOutput)
}

// Stop VM timeout
func (o VirtualMachineOutput) TimeoutStopVm() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.TimeoutStopVm }).(pulumi.IntPtrOutput)
}

// The VGA configuration
func (o VirtualMachineOutput) Vga() VirtualMachineVgaPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineVgaPtrOutput { return v.Vga }).(VirtualMachineVgaPtrOutput)
}

// The VM identifier
func (o VirtualMachineOutput) VmId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.IntPtrOutput { return v.VmId }).(pulumi.IntPtrOutput)
}

type VirtualMachineArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualMachine)(nil)).Elem()
}

func (o VirtualMachineArrayOutput) ToVirtualMachineArrayOutput() VirtualMachineArrayOutput {
	return o
}

func (o VirtualMachineArrayOutput) ToVirtualMachineArrayOutputWithContext(ctx context.Context) VirtualMachineArrayOutput {
	return o
}

func (o VirtualMachineArrayOutput) Index(i pulumi.IntInput) VirtualMachineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VirtualMachine {
		return vs[0].([]*VirtualMachine)[vs[1].(int)]
	}).(VirtualMachineOutput)
}

type VirtualMachineMapOutput struct{ *pulumi.OutputState }

func (VirtualMachineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualMachine)(nil)).Elem()
}

func (o VirtualMachineMapOutput) ToVirtualMachineMapOutput() VirtualMachineMapOutput {
	return o
}

func (o VirtualMachineMapOutput) ToVirtualMachineMapOutputWithContext(ctx context.Context) VirtualMachineMapOutput {
	return o
}

func (o VirtualMachineMapOutput) MapIndex(k pulumi.StringInput) VirtualMachineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VirtualMachine {
		return vs[0].(map[string]*VirtualMachine)[vs[1].(string)]
	}).(VirtualMachineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineInput)(nil)).Elem(), &VirtualMachine{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineArrayInput)(nil)).Elem(), VirtualMachineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineMapInput)(nil)).Elem(), VirtualMachineMap{})
	pulumi.RegisterOutputType(VirtualMachineOutput{})
	pulumi.RegisterOutputType(VirtualMachineArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineMapOutput{})
}

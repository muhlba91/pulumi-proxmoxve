// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vm

import (
	"context"
	"reflect"

	"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves information about all VMs in the Proxmox cluster.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/VM"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := VM.GetVirtualMachines(ctx, &vm.GetVirtualMachinesArgs{
//				Tags: []string{
//					"ubuntu",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = VM.GetVirtualMachines(ctx, &vm.GetVirtualMachinesArgs{
//				Filters: []vm.GetVirtualMachinesFilter{
//					{
//						Name: "template",
//						Values: []string{
//							"true",
//						},
//					},
//					{
//						Name: "status",
//						Values: []string{
//							"stopped",
//						},
//					},
//					{
//						Name:  "name",
//						Regex: pulumi.BoolRef(true),
//						Values: []string{
//							"^ubuntu-20.*$",
//						},
//					},
//					{
//						Name:  "node_name",
//						Regex: pulumi.BoolRef(true),
//						Values: []string{
//							"node_us_[1-3]",
//							"node_eu_[1-3]",
//						},
//					},
//				},
//				Tags: []string{
//					"template",
//					"latest",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetVirtualMachines(ctx *pulumi.Context, args *GetVirtualMachinesArgs, opts ...pulumi.InvokeOption) (*GetVirtualMachinesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetVirtualMachinesResult
	err := ctx.Invoke("proxmoxve:VM/getVirtualMachines:getVirtualMachines", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVirtualMachines.
type GetVirtualMachinesArgs struct {
	// Filter blocks. The VM must satisfy all filter blocks to be included in the result.
	Filters []GetVirtualMachinesFilter `pulumi:"filters"`
	// The node name. All cluster nodes will be queried in case this is omitted
	NodeName *string `pulumi:"nodeName"`
	// A list of tags to filter the VMs. The VM must have all
	// the tags to be included in the result.
	Tags []string `pulumi:"tags"`
}

// A collection of values returned by getVirtualMachines.
type GetVirtualMachinesResult struct {
	Filters []GetVirtualMachinesFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The node name.
	NodeName *string `pulumi:"nodeName"`
	// A list of tags of the VM.
	Tags []string `pulumi:"tags"`
	// The VMs list.
	Vms []GetVirtualMachinesVm `pulumi:"vms"`
}

func GetVirtualMachinesOutput(ctx *pulumi.Context, args GetVirtualMachinesOutputArgs, opts ...pulumi.InvokeOption) GetVirtualMachinesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetVirtualMachinesResultOutput, error) {
			args := v.(GetVirtualMachinesArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetVirtualMachinesResult
			secret, err := ctx.InvokePackageRaw("proxmoxve:VM/getVirtualMachines:getVirtualMachines", args, &rv, "", opts...)
			if err != nil {
				return GetVirtualMachinesResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetVirtualMachinesResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetVirtualMachinesResultOutput), nil
			}
			return output, nil
		}).(GetVirtualMachinesResultOutput)
}

// A collection of arguments for invoking getVirtualMachines.
type GetVirtualMachinesOutputArgs struct {
	// Filter blocks. The VM must satisfy all filter blocks to be included in the result.
	Filters GetVirtualMachinesFilterArrayInput `pulumi:"filters"`
	// The node name. All cluster nodes will be queried in case this is omitted
	NodeName pulumi.StringPtrInput `pulumi:"nodeName"`
	// A list of tags to filter the VMs. The VM must have all
	// the tags to be included in the result.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
}

func (GetVirtualMachinesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualMachinesArgs)(nil)).Elem()
}

// A collection of values returned by getVirtualMachines.
type GetVirtualMachinesResultOutput struct{ *pulumi.OutputState }

func (GetVirtualMachinesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualMachinesResult)(nil)).Elem()
}

func (o GetVirtualMachinesResultOutput) ToGetVirtualMachinesResultOutput() GetVirtualMachinesResultOutput {
	return o
}

func (o GetVirtualMachinesResultOutput) ToGetVirtualMachinesResultOutputWithContext(ctx context.Context) GetVirtualMachinesResultOutput {
	return o
}

func (o GetVirtualMachinesResultOutput) Filters() GetVirtualMachinesFilterArrayOutput {
	return o.ApplyT(func(v GetVirtualMachinesResult) []GetVirtualMachinesFilter { return v.Filters }).(GetVirtualMachinesFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetVirtualMachinesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVirtualMachinesResult) string { return v.Id }).(pulumi.StringOutput)
}

// The node name.
func (o GetVirtualMachinesResultOutput) NodeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVirtualMachinesResult) *string { return v.NodeName }).(pulumi.StringPtrOutput)
}

// A list of tags of the VM.
func (o GetVirtualMachinesResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetVirtualMachinesResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// The VMs list.
func (o GetVirtualMachinesResultOutput) Vms() GetVirtualMachinesVmArrayOutput {
	return o.ApplyT(func(v GetVirtualMachinesResult) []GetVirtualMachinesVm { return v.Vms }).(GetVirtualMachinesVmArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetVirtualMachinesResultOutput{})
}

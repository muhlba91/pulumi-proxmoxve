// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vm

import (
	"context"
	"reflect"

	"github.com/muhlba91/pulumi-proxmoxve/sdk/v5/go/proxmoxve/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type VirtualMachineAgent struct {
	// Whether to enable the VGA device (defaults
	// to `true`).
	Enabled *bool `pulumi:"enabled"`
	// The maximum amount of time to wait for data from
	// the QEMU agent to become available ( defaults to `15m`).
	Timeout *string `pulumi:"timeout"`
	// Whether to enable the FSTRIM feature in the QEMU agent
	// (defaults to `false`).
	Trim *bool `pulumi:"trim"`
	// The VGA type (defaults to `std`).
	Type *string `pulumi:"type"`
}

// VirtualMachineAgentInput is an input type that accepts VirtualMachineAgentArgs and VirtualMachineAgentOutput values.
// You can construct a concrete instance of `VirtualMachineAgentInput` via:
//
//	VirtualMachineAgentArgs{...}
type VirtualMachineAgentInput interface {
	pulumi.Input

	ToVirtualMachineAgentOutput() VirtualMachineAgentOutput
	ToVirtualMachineAgentOutputWithContext(context.Context) VirtualMachineAgentOutput
}

type VirtualMachineAgentArgs struct {
	// Whether to enable the VGA device (defaults
	// to `true`).
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The maximum amount of time to wait for data from
	// the QEMU agent to become available ( defaults to `15m`).
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
	// Whether to enable the FSTRIM feature in the QEMU agent
	// (defaults to `false`).
	Trim pulumi.BoolPtrInput `pulumi:"trim"`
	// The VGA type (defaults to `std`).
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (VirtualMachineAgentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineAgent)(nil)).Elem()
}

func (i VirtualMachineAgentArgs) ToVirtualMachineAgentOutput() VirtualMachineAgentOutput {
	return i.ToVirtualMachineAgentOutputWithContext(context.Background())
}

func (i VirtualMachineAgentArgs) ToVirtualMachineAgentOutputWithContext(ctx context.Context) VirtualMachineAgentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineAgentOutput)
}

func (i VirtualMachineAgentArgs) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineAgent] {
	return pulumix.Output[VirtualMachineAgent]{
		OutputState: i.ToVirtualMachineAgentOutputWithContext(ctx).OutputState,
	}
}

func (i VirtualMachineAgentArgs) ToVirtualMachineAgentPtrOutput() VirtualMachineAgentPtrOutput {
	return i.ToVirtualMachineAgentPtrOutputWithContext(context.Background())
}

func (i VirtualMachineAgentArgs) ToVirtualMachineAgentPtrOutputWithContext(ctx context.Context) VirtualMachineAgentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineAgentOutput).ToVirtualMachineAgentPtrOutputWithContext(ctx)
}

// VirtualMachineAgentPtrInput is an input type that accepts VirtualMachineAgentArgs, VirtualMachineAgentPtr and VirtualMachineAgentPtrOutput values.
// You can construct a concrete instance of `VirtualMachineAgentPtrInput` via:
//
//	        VirtualMachineAgentArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineAgentPtrInput interface {
	pulumi.Input

	ToVirtualMachineAgentPtrOutput() VirtualMachineAgentPtrOutput
	ToVirtualMachineAgentPtrOutputWithContext(context.Context) VirtualMachineAgentPtrOutput
}

type virtualMachineAgentPtrType VirtualMachineAgentArgs

func VirtualMachineAgentPtr(v *VirtualMachineAgentArgs) VirtualMachineAgentPtrInput {
	return (*virtualMachineAgentPtrType)(v)
}

func (*virtualMachineAgentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineAgent)(nil)).Elem()
}

func (i *virtualMachineAgentPtrType) ToVirtualMachineAgentPtrOutput() VirtualMachineAgentPtrOutput {
	return i.ToVirtualMachineAgentPtrOutputWithContext(context.Background())
}

func (i *virtualMachineAgentPtrType) ToVirtualMachineAgentPtrOutputWithContext(ctx context.Context) VirtualMachineAgentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineAgentPtrOutput)
}

func (i *virtualMachineAgentPtrType) ToOutput(ctx context.Context) pulumix.Output[*VirtualMachineAgent] {
	return pulumix.Output[*VirtualMachineAgent]{
		OutputState: i.ToVirtualMachineAgentPtrOutputWithContext(ctx).OutputState,
	}
}

type VirtualMachineAgentOutput struct{ *pulumi.OutputState }

func (VirtualMachineAgentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineAgent)(nil)).Elem()
}

func (o VirtualMachineAgentOutput) ToVirtualMachineAgentOutput() VirtualMachineAgentOutput {
	return o
}

func (o VirtualMachineAgentOutput) ToVirtualMachineAgentOutputWithContext(ctx context.Context) VirtualMachineAgentOutput {
	return o
}

func (o VirtualMachineAgentOutput) ToVirtualMachineAgentPtrOutput() VirtualMachineAgentPtrOutput {
	return o.ToVirtualMachineAgentPtrOutputWithContext(context.Background())
}

func (o VirtualMachineAgentOutput) ToVirtualMachineAgentPtrOutputWithContext(ctx context.Context) VirtualMachineAgentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineAgent) *VirtualMachineAgent {
		return &v
	}).(VirtualMachineAgentPtrOutput)
}

func (o VirtualMachineAgentOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineAgent] {
	return pulumix.Output[VirtualMachineAgent]{
		OutputState: o.OutputState,
	}
}

// Whether to enable the VGA device (defaults
// to `true`).
func (o VirtualMachineAgentOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineAgent) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The maximum amount of time to wait for data from
// the QEMU agent to become available ( defaults to `15m`).
func (o VirtualMachineAgentOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineAgent) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// Whether to enable the FSTRIM feature in the QEMU agent
// (defaults to `false`).
func (o VirtualMachineAgentOutput) Trim() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineAgent) *bool { return v.Trim }).(pulumi.BoolPtrOutput)
}

// The VGA type (defaults to `std`).
func (o VirtualMachineAgentOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineAgent) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type VirtualMachineAgentPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineAgentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineAgent)(nil)).Elem()
}

func (o VirtualMachineAgentPtrOutput) ToVirtualMachineAgentPtrOutput() VirtualMachineAgentPtrOutput {
	return o
}

func (o VirtualMachineAgentPtrOutput) ToVirtualMachineAgentPtrOutputWithContext(ctx context.Context) VirtualMachineAgentPtrOutput {
	return o
}

func (o VirtualMachineAgentPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*VirtualMachineAgent] {
	return pulumix.Output[*VirtualMachineAgent]{
		OutputState: o.OutputState,
	}
}

func (o VirtualMachineAgentPtrOutput) Elem() VirtualMachineAgentOutput {
	return o.ApplyT(func(v *VirtualMachineAgent) VirtualMachineAgent {
		if v != nil {
			return *v
		}
		var ret VirtualMachineAgent
		return ret
	}).(VirtualMachineAgentOutput)
}

// Whether to enable the VGA device (defaults
// to `true`).
func (o VirtualMachineAgentPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachineAgent) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The maximum amount of time to wait for data from
// the QEMU agent to become available ( defaults to `15m`).
func (o VirtualMachineAgentPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineAgent) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Whether to enable the FSTRIM feature in the QEMU agent
// (defaults to `false`).
func (o VirtualMachineAgentPtrOutput) Trim() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachineAgent) *bool {
		if v == nil {
			return nil
		}
		return v.Trim
	}).(pulumi.BoolPtrOutput)
}

// The VGA type (defaults to `std`).
func (o VirtualMachineAgentPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineAgent) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type VirtualMachineAudioDevice struct {
	// The device (defaults to `socket`).
	// - `/dev/*` - A host serial device.
	Device *string `pulumi:"device"`
	// The driver (defaults to `spice`).
	Driver *string `pulumi:"driver"`
	// Whether to enable the VGA device (defaults
	// to `true`).
	Enabled *bool `pulumi:"enabled"`
}

// VirtualMachineAudioDeviceInput is an input type that accepts VirtualMachineAudioDeviceArgs and VirtualMachineAudioDeviceOutput values.
// You can construct a concrete instance of `VirtualMachineAudioDeviceInput` via:
//
//	VirtualMachineAudioDeviceArgs{...}
type VirtualMachineAudioDeviceInput interface {
	pulumi.Input

	ToVirtualMachineAudioDeviceOutput() VirtualMachineAudioDeviceOutput
	ToVirtualMachineAudioDeviceOutputWithContext(context.Context) VirtualMachineAudioDeviceOutput
}

type VirtualMachineAudioDeviceArgs struct {
	// The device (defaults to `socket`).
	// - `/dev/*` - A host serial device.
	Device pulumi.StringPtrInput `pulumi:"device"`
	// The driver (defaults to `spice`).
	Driver pulumi.StringPtrInput `pulumi:"driver"`
	// Whether to enable the VGA device (defaults
	// to `true`).
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (VirtualMachineAudioDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineAudioDevice)(nil)).Elem()
}

func (i VirtualMachineAudioDeviceArgs) ToVirtualMachineAudioDeviceOutput() VirtualMachineAudioDeviceOutput {
	return i.ToVirtualMachineAudioDeviceOutputWithContext(context.Background())
}

func (i VirtualMachineAudioDeviceArgs) ToVirtualMachineAudioDeviceOutputWithContext(ctx context.Context) VirtualMachineAudioDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineAudioDeviceOutput)
}

func (i VirtualMachineAudioDeviceArgs) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineAudioDevice] {
	return pulumix.Output[VirtualMachineAudioDevice]{
		OutputState: i.ToVirtualMachineAudioDeviceOutputWithContext(ctx).OutputState,
	}
}

func (i VirtualMachineAudioDeviceArgs) ToVirtualMachineAudioDevicePtrOutput() VirtualMachineAudioDevicePtrOutput {
	return i.ToVirtualMachineAudioDevicePtrOutputWithContext(context.Background())
}

func (i VirtualMachineAudioDeviceArgs) ToVirtualMachineAudioDevicePtrOutputWithContext(ctx context.Context) VirtualMachineAudioDevicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineAudioDeviceOutput).ToVirtualMachineAudioDevicePtrOutputWithContext(ctx)
}

// VirtualMachineAudioDevicePtrInput is an input type that accepts VirtualMachineAudioDeviceArgs, VirtualMachineAudioDevicePtr and VirtualMachineAudioDevicePtrOutput values.
// You can construct a concrete instance of `VirtualMachineAudioDevicePtrInput` via:
//
//	        VirtualMachineAudioDeviceArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineAudioDevicePtrInput interface {
	pulumi.Input

	ToVirtualMachineAudioDevicePtrOutput() VirtualMachineAudioDevicePtrOutput
	ToVirtualMachineAudioDevicePtrOutputWithContext(context.Context) VirtualMachineAudioDevicePtrOutput
}

type virtualMachineAudioDevicePtrType VirtualMachineAudioDeviceArgs

func VirtualMachineAudioDevicePtr(v *VirtualMachineAudioDeviceArgs) VirtualMachineAudioDevicePtrInput {
	return (*virtualMachineAudioDevicePtrType)(v)
}

func (*virtualMachineAudioDevicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineAudioDevice)(nil)).Elem()
}

func (i *virtualMachineAudioDevicePtrType) ToVirtualMachineAudioDevicePtrOutput() VirtualMachineAudioDevicePtrOutput {
	return i.ToVirtualMachineAudioDevicePtrOutputWithContext(context.Background())
}

func (i *virtualMachineAudioDevicePtrType) ToVirtualMachineAudioDevicePtrOutputWithContext(ctx context.Context) VirtualMachineAudioDevicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineAudioDevicePtrOutput)
}

func (i *virtualMachineAudioDevicePtrType) ToOutput(ctx context.Context) pulumix.Output[*VirtualMachineAudioDevice] {
	return pulumix.Output[*VirtualMachineAudioDevice]{
		OutputState: i.ToVirtualMachineAudioDevicePtrOutputWithContext(ctx).OutputState,
	}
}

type VirtualMachineAudioDeviceOutput struct{ *pulumi.OutputState }

func (VirtualMachineAudioDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineAudioDevice)(nil)).Elem()
}

func (o VirtualMachineAudioDeviceOutput) ToVirtualMachineAudioDeviceOutput() VirtualMachineAudioDeviceOutput {
	return o
}

func (o VirtualMachineAudioDeviceOutput) ToVirtualMachineAudioDeviceOutputWithContext(ctx context.Context) VirtualMachineAudioDeviceOutput {
	return o
}

func (o VirtualMachineAudioDeviceOutput) ToVirtualMachineAudioDevicePtrOutput() VirtualMachineAudioDevicePtrOutput {
	return o.ToVirtualMachineAudioDevicePtrOutputWithContext(context.Background())
}

func (o VirtualMachineAudioDeviceOutput) ToVirtualMachineAudioDevicePtrOutputWithContext(ctx context.Context) VirtualMachineAudioDevicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineAudioDevice) *VirtualMachineAudioDevice {
		return &v
	}).(VirtualMachineAudioDevicePtrOutput)
}

func (o VirtualMachineAudioDeviceOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineAudioDevice] {
	return pulumix.Output[VirtualMachineAudioDevice]{
		OutputState: o.OutputState,
	}
}

// The device (defaults to `socket`).
// - `/dev/*` - A host serial device.
func (o VirtualMachineAudioDeviceOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineAudioDevice) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// The driver (defaults to `spice`).
func (o VirtualMachineAudioDeviceOutput) Driver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineAudioDevice) *string { return v.Driver }).(pulumi.StringPtrOutput)
}

// Whether to enable the VGA device (defaults
// to `true`).
func (o VirtualMachineAudioDeviceOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineAudioDevice) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type VirtualMachineAudioDevicePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineAudioDevicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineAudioDevice)(nil)).Elem()
}

func (o VirtualMachineAudioDevicePtrOutput) ToVirtualMachineAudioDevicePtrOutput() VirtualMachineAudioDevicePtrOutput {
	return o
}

func (o VirtualMachineAudioDevicePtrOutput) ToVirtualMachineAudioDevicePtrOutputWithContext(ctx context.Context) VirtualMachineAudioDevicePtrOutput {
	return o
}

func (o VirtualMachineAudioDevicePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*VirtualMachineAudioDevice] {
	return pulumix.Output[*VirtualMachineAudioDevice]{
		OutputState: o.OutputState,
	}
}

func (o VirtualMachineAudioDevicePtrOutput) Elem() VirtualMachineAudioDeviceOutput {
	return o.ApplyT(func(v *VirtualMachineAudioDevice) VirtualMachineAudioDevice {
		if v != nil {
			return *v
		}
		var ret VirtualMachineAudioDevice
		return ret
	}).(VirtualMachineAudioDeviceOutput)
}

// The device (defaults to `socket`).
// - `/dev/*` - A host serial device.
func (o VirtualMachineAudioDevicePtrOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineAudioDevice) *string {
		if v == nil {
			return nil
		}
		return v.Device
	}).(pulumi.StringPtrOutput)
}

// The driver (defaults to `spice`).
func (o VirtualMachineAudioDevicePtrOutput) Driver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineAudioDevice) *string {
		if v == nil {
			return nil
		}
		return v.Driver
	}).(pulumi.StringPtrOutput)
}

// Whether to enable the VGA device (defaults
// to `true`).
func (o VirtualMachineAudioDevicePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachineAudioDevice) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type VirtualMachineCdrom struct {
	// Whether to enable the VGA device (defaults
	// to `true`).
	Enabled *bool `pulumi:"enabled"`
	// The file ID for a disk image (experimental -
	// might cause high CPU utilization during import, especially with large
	// disk images).
	FileId *string `pulumi:"fileId"`
	// The hardware interface to connect the cloud-init
	// image to. Must be one of `ide0..3`, `sata0..5`, `scsi0..30`. Will be
	// detected if the setting is missing but a cloud-init image is present,
	// otherwise defaults to `ide2`.
	Interface *string `pulumi:"interface"`
}

// VirtualMachineCdromInput is an input type that accepts VirtualMachineCdromArgs and VirtualMachineCdromOutput values.
// You can construct a concrete instance of `VirtualMachineCdromInput` via:
//
//	VirtualMachineCdromArgs{...}
type VirtualMachineCdromInput interface {
	pulumi.Input

	ToVirtualMachineCdromOutput() VirtualMachineCdromOutput
	ToVirtualMachineCdromOutputWithContext(context.Context) VirtualMachineCdromOutput
}

type VirtualMachineCdromArgs struct {
	// Whether to enable the VGA device (defaults
	// to `true`).
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The file ID for a disk image (experimental -
	// might cause high CPU utilization during import, especially with large
	// disk images).
	FileId pulumi.StringPtrInput `pulumi:"fileId"`
	// The hardware interface to connect the cloud-init
	// image to. Must be one of `ide0..3`, `sata0..5`, `scsi0..30`. Will be
	// detected if the setting is missing but a cloud-init image is present,
	// otherwise defaults to `ide2`.
	Interface pulumi.StringPtrInput `pulumi:"interface"`
}

func (VirtualMachineCdromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineCdrom)(nil)).Elem()
}

func (i VirtualMachineCdromArgs) ToVirtualMachineCdromOutput() VirtualMachineCdromOutput {
	return i.ToVirtualMachineCdromOutputWithContext(context.Background())
}

func (i VirtualMachineCdromArgs) ToVirtualMachineCdromOutputWithContext(ctx context.Context) VirtualMachineCdromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineCdromOutput)
}

func (i VirtualMachineCdromArgs) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineCdrom] {
	return pulumix.Output[VirtualMachineCdrom]{
		OutputState: i.ToVirtualMachineCdromOutputWithContext(ctx).OutputState,
	}
}

func (i VirtualMachineCdromArgs) ToVirtualMachineCdromPtrOutput() VirtualMachineCdromPtrOutput {
	return i.ToVirtualMachineCdromPtrOutputWithContext(context.Background())
}

func (i VirtualMachineCdromArgs) ToVirtualMachineCdromPtrOutputWithContext(ctx context.Context) VirtualMachineCdromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineCdromOutput).ToVirtualMachineCdromPtrOutputWithContext(ctx)
}

// VirtualMachineCdromPtrInput is an input type that accepts VirtualMachineCdromArgs, VirtualMachineCdromPtr and VirtualMachineCdromPtrOutput values.
// You can construct a concrete instance of `VirtualMachineCdromPtrInput` via:
//
//	        VirtualMachineCdromArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineCdromPtrInput interface {
	pulumi.Input

	ToVirtualMachineCdromPtrOutput() VirtualMachineCdromPtrOutput
	ToVirtualMachineCdromPtrOutputWithContext(context.Context) VirtualMachineCdromPtrOutput
}

type virtualMachineCdromPtrType VirtualMachineCdromArgs

func VirtualMachineCdromPtr(v *VirtualMachineCdromArgs) VirtualMachineCdromPtrInput {
	return (*virtualMachineCdromPtrType)(v)
}

func (*virtualMachineCdromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineCdrom)(nil)).Elem()
}

func (i *virtualMachineCdromPtrType) ToVirtualMachineCdromPtrOutput() VirtualMachineCdromPtrOutput {
	return i.ToVirtualMachineCdromPtrOutputWithContext(context.Background())
}

func (i *virtualMachineCdromPtrType) ToVirtualMachineCdromPtrOutputWithContext(ctx context.Context) VirtualMachineCdromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineCdromPtrOutput)
}

func (i *virtualMachineCdromPtrType) ToOutput(ctx context.Context) pulumix.Output[*VirtualMachineCdrom] {
	return pulumix.Output[*VirtualMachineCdrom]{
		OutputState: i.ToVirtualMachineCdromPtrOutputWithContext(ctx).OutputState,
	}
}

type VirtualMachineCdromOutput struct{ *pulumi.OutputState }

func (VirtualMachineCdromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineCdrom)(nil)).Elem()
}

func (o VirtualMachineCdromOutput) ToVirtualMachineCdromOutput() VirtualMachineCdromOutput {
	return o
}

func (o VirtualMachineCdromOutput) ToVirtualMachineCdromOutputWithContext(ctx context.Context) VirtualMachineCdromOutput {
	return o
}

func (o VirtualMachineCdromOutput) ToVirtualMachineCdromPtrOutput() VirtualMachineCdromPtrOutput {
	return o.ToVirtualMachineCdromPtrOutputWithContext(context.Background())
}

func (o VirtualMachineCdromOutput) ToVirtualMachineCdromPtrOutputWithContext(ctx context.Context) VirtualMachineCdromPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineCdrom) *VirtualMachineCdrom {
		return &v
	}).(VirtualMachineCdromPtrOutput)
}

func (o VirtualMachineCdromOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineCdrom] {
	return pulumix.Output[VirtualMachineCdrom]{
		OutputState: o.OutputState,
	}
}

// Whether to enable the VGA device (defaults
// to `true`).
func (o VirtualMachineCdromOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineCdrom) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The file ID for a disk image (experimental -
// might cause high CPU utilization during import, especially with large
// disk images).
func (o VirtualMachineCdromOutput) FileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineCdrom) *string { return v.FileId }).(pulumi.StringPtrOutput)
}

// The hardware interface to connect the cloud-init
// image to. Must be one of `ide0..3`, `sata0..5`, `scsi0..30`. Will be
// detected if the setting is missing but a cloud-init image is present,
// otherwise defaults to `ide2`.
func (o VirtualMachineCdromOutput) Interface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineCdrom) *string { return v.Interface }).(pulumi.StringPtrOutput)
}

type VirtualMachineCdromPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineCdromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineCdrom)(nil)).Elem()
}

func (o VirtualMachineCdromPtrOutput) ToVirtualMachineCdromPtrOutput() VirtualMachineCdromPtrOutput {
	return o
}

func (o VirtualMachineCdromPtrOutput) ToVirtualMachineCdromPtrOutputWithContext(ctx context.Context) VirtualMachineCdromPtrOutput {
	return o
}

func (o VirtualMachineCdromPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*VirtualMachineCdrom] {
	return pulumix.Output[*VirtualMachineCdrom]{
		OutputState: o.OutputState,
	}
}

func (o VirtualMachineCdromPtrOutput) Elem() VirtualMachineCdromOutput {
	return o.ApplyT(func(v *VirtualMachineCdrom) VirtualMachineCdrom {
		if v != nil {
			return *v
		}
		var ret VirtualMachineCdrom
		return ret
	}).(VirtualMachineCdromOutput)
}

// Whether to enable the VGA device (defaults
// to `true`).
func (o VirtualMachineCdromPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachineCdrom) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The file ID for a disk image (experimental -
// might cause high CPU utilization during import, especially with large
// disk images).
func (o VirtualMachineCdromPtrOutput) FileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineCdrom) *string {
		if v == nil {
			return nil
		}
		return v.FileId
	}).(pulumi.StringPtrOutput)
}

// The hardware interface to connect the cloud-init
// image to. Must be one of `ide0..3`, `sata0..5`, `scsi0..30`. Will be
// detected if the setting is missing but a cloud-init image is present,
// otherwise defaults to `ide2`.
func (o VirtualMachineCdromPtrOutput) Interface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineCdrom) *string {
		if v == nil {
			return nil
		}
		return v.Interface
	}).(pulumi.StringPtrOutput)
}

type VirtualMachineClone struct {
	// The identifier for the datastore to create the
	// cloud-init disk in (defaults to `local-lvm`).
	DatastoreId *string `pulumi:"datastoreId"`
	Full        *bool   `pulumi:"full"`
	// The name of the node to assign the virtual machine
	// to.
	NodeName *string `pulumi:"nodeName"`
	// Number of retries in Proxmox for clone vm.
	// Sometimes Proxmox errors with timeout when creating multiple clones at
	// once.
	Retries *int `pulumi:"retries"`
	// The VM identifier.
	VmId int `pulumi:"vmId"`
}

// VirtualMachineCloneInput is an input type that accepts VirtualMachineCloneArgs and VirtualMachineCloneOutput values.
// You can construct a concrete instance of `VirtualMachineCloneInput` via:
//
//	VirtualMachineCloneArgs{...}
type VirtualMachineCloneInput interface {
	pulumi.Input

	ToVirtualMachineCloneOutput() VirtualMachineCloneOutput
	ToVirtualMachineCloneOutputWithContext(context.Context) VirtualMachineCloneOutput
}

type VirtualMachineCloneArgs struct {
	// The identifier for the datastore to create the
	// cloud-init disk in (defaults to `local-lvm`).
	DatastoreId pulumi.StringPtrInput `pulumi:"datastoreId"`
	Full        pulumi.BoolPtrInput   `pulumi:"full"`
	// The name of the node to assign the virtual machine
	// to.
	NodeName pulumi.StringPtrInput `pulumi:"nodeName"`
	// Number of retries in Proxmox for clone vm.
	// Sometimes Proxmox errors with timeout when creating multiple clones at
	// once.
	Retries pulumi.IntPtrInput `pulumi:"retries"`
	// The VM identifier.
	VmId pulumi.IntInput `pulumi:"vmId"`
}

func (VirtualMachineCloneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineClone)(nil)).Elem()
}

func (i VirtualMachineCloneArgs) ToVirtualMachineCloneOutput() VirtualMachineCloneOutput {
	return i.ToVirtualMachineCloneOutputWithContext(context.Background())
}

func (i VirtualMachineCloneArgs) ToVirtualMachineCloneOutputWithContext(ctx context.Context) VirtualMachineCloneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineCloneOutput)
}

func (i VirtualMachineCloneArgs) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineClone] {
	return pulumix.Output[VirtualMachineClone]{
		OutputState: i.ToVirtualMachineCloneOutputWithContext(ctx).OutputState,
	}
}

func (i VirtualMachineCloneArgs) ToVirtualMachineClonePtrOutput() VirtualMachineClonePtrOutput {
	return i.ToVirtualMachineClonePtrOutputWithContext(context.Background())
}

func (i VirtualMachineCloneArgs) ToVirtualMachineClonePtrOutputWithContext(ctx context.Context) VirtualMachineClonePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineCloneOutput).ToVirtualMachineClonePtrOutputWithContext(ctx)
}

// VirtualMachineClonePtrInput is an input type that accepts VirtualMachineCloneArgs, VirtualMachineClonePtr and VirtualMachineClonePtrOutput values.
// You can construct a concrete instance of `VirtualMachineClonePtrInput` via:
//
//	        VirtualMachineCloneArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineClonePtrInput interface {
	pulumi.Input

	ToVirtualMachineClonePtrOutput() VirtualMachineClonePtrOutput
	ToVirtualMachineClonePtrOutputWithContext(context.Context) VirtualMachineClonePtrOutput
}

type virtualMachineClonePtrType VirtualMachineCloneArgs

func VirtualMachineClonePtr(v *VirtualMachineCloneArgs) VirtualMachineClonePtrInput {
	return (*virtualMachineClonePtrType)(v)
}

func (*virtualMachineClonePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineClone)(nil)).Elem()
}

func (i *virtualMachineClonePtrType) ToVirtualMachineClonePtrOutput() VirtualMachineClonePtrOutput {
	return i.ToVirtualMachineClonePtrOutputWithContext(context.Background())
}

func (i *virtualMachineClonePtrType) ToVirtualMachineClonePtrOutputWithContext(ctx context.Context) VirtualMachineClonePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineClonePtrOutput)
}

func (i *virtualMachineClonePtrType) ToOutput(ctx context.Context) pulumix.Output[*VirtualMachineClone] {
	return pulumix.Output[*VirtualMachineClone]{
		OutputState: i.ToVirtualMachineClonePtrOutputWithContext(ctx).OutputState,
	}
}

type VirtualMachineCloneOutput struct{ *pulumi.OutputState }

func (VirtualMachineCloneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineClone)(nil)).Elem()
}

func (o VirtualMachineCloneOutput) ToVirtualMachineCloneOutput() VirtualMachineCloneOutput {
	return o
}

func (o VirtualMachineCloneOutput) ToVirtualMachineCloneOutputWithContext(ctx context.Context) VirtualMachineCloneOutput {
	return o
}

func (o VirtualMachineCloneOutput) ToVirtualMachineClonePtrOutput() VirtualMachineClonePtrOutput {
	return o.ToVirtualMachineClonePtrOutputWithContext(context.Background())
}

func (o VirtualMachineCloneOutput) ToVirtualMachineClonePtrOutputWithContext(ctx context.Context) VirtualMachineClonePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineClone) *VirtualMachineClone {
		return &v
	}).(VirtualMachineClonePtrOutput)
}

func (o VirtualMachineCloneOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineClone] {
	return pulumix.Output[VirtualMachineClone]{
		OutputState: o.OutputState,
	}
}

// The identifier for the datastore to create the
// cloud-init disk in (defaults to `local-lvm`).
func (o VirtualMachineCloneOutput) DatastoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineClone) *string { return v.DatastoreId }).(pulumi.StringPtrOutput)
}

func (o VirtualMachineCloneOutput) Full() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineClone) *bool { return v.Full }).(pulumi.BoolPtrOutput)
}

// The name of the node to assign the virtual machine
// to.
func (o VirtualMachineCloneOutput) NodeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineClone) *string { return v.NodeName }).(pulumi.StringPtrOutput)
}

// Number of retries in Proxmox for clone vm.
// Sometimes Proxmox errors with timeout when creating multiple clones at
// once.
func (o VirtualMachineCloneOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineClone) *int { return v.Retries }).(pulumi.IntPtrOutput)
}

// The VM identifier.
func (o VirtualMachineCloneOutput) VmId() pulumi.IntOutput {
	return o.ApplyT(func(v VirtualMachineClone) int { return v.VmId }).(pulumi.IntOutput)
}

type VirtualMachineClonePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineClonePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineClone)(nil)).Elem()
}

func (o VirtualMachineClonePtrOutput) ToVirtualMachineClonePtrOutput() VirtualMachineClonePtrOutput {
	return o
}

func (o VirtualMachineClonePtrOutput) ToVirtualMachineClonePtrOutputWithContext(ctx context.Context) VirtualMachineClonePtrOutput {
	return o
}

func (o VirtualMachineClonePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*VirtualMachineClone] {
	return pulumix.Output[*VirtualMachineClone]{
		OutputState: o.OutputState,
	}
}

func (o VirtualMachineClonePtrOutput) Elem() VirtualMachineCloneOutput {
	return o.ApplyT(func(v *VirtualMachineClone) VirtualMachineClone {
		if v != nil {
			return *v
		}
		var ret VirtualMachineClone
		return ret
	}).(VirtualMachineCloneOutput)
}

// The identifier for the datastore to create the
// cloud-init disk in (defaults to `local-lvm`).
func (o VirtualMachineClonePtrOutput) DatastoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineClone) *string {
		if v == nil {
			return nil
		}
		return v.DatastoreId
	}).(pulumi.StringPtrOutput)
}

func (o VirtualMachineClonePtrOutput) Full() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachineClone) *bool {
		if v == nil {
			return nil
		}
		return v.Full
	}).(pulumi.BoolPtrOutput)
}

// The name of the node to assign the virtual machine
// to.
func (o VirtualMachineClonePtrOutput) NodeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineClone) *string {
		if v == nil {
			return nil
		}
		return v.NodeName
	}).(pulumi.StringPtrOutput)
}

// Number of retries in Proxmox for clone vm.
// Sometimes Proxmox errors with timeout when creating multiple clones at
// once.
func (o VirtualMachineClonePtrOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineClone) *int {
		if v == nil {
			return nil
		}
		return v.Retries
	}).(pulumi.IntPtrOutput)
}

// The VM identifier.
func (o VirtualMachineClonePtrOutput) VmId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineClone) *int {
		if v == nil {
			return nil
		}
		return &v.VmId
	}).(pulumi.IntPtrOutput)
}

type VirtualMachineCpu struct {
	// The CPU architecture (defaults to `x8664`).
	Architecture *string `pulumi:"architecture"`
	// The number of CPU cores (defaults to `1`).
	Cores *int `pulumi:"cores"`
	// The CPU flags.
	// - `+aes`/`-aes` - Activate AES instruction set for HW acceleration.
	// - `+amd-no-ssb`/`-amd-no-ssb` - Notifies guest OS that host is not
	//   vulnerable for Spectre on AMD CPUs.
	// - `+amd-ssbd`/`-amd-ssbd` - Improves Spectre mitigation performance with
	//   AMD CPUs, best used with "virt-ssbd".
	// - `+hv-evmcs`/`-hv-evmcs` - Improve performance for nested
	//   virtualization (only supported on Intel CPUs).
	// - `+hv-tlbflush`/`-hv-tlbflush` - Improve performance in overcommitted
	//   Windows guests (may lead to guest BSOD on old CPUs).
	// - `+ibpb`/`-ibpb` - Allows improved Spectre mitigation on AMD CPUs.
	// - `+md-clear`/`-md-clear` - Required to let the guest OS know if MDS is
	//   mitigated correctly.
	// - `+pcid`/`-pcid` - Meltdown fix cost reduction on Westmere, Sandy- and
	//   Ivy Bridge Intel CPUs.
	// - `+pdpe1gb`/`-pdpe1gb` - Allows guest OS to use 1 GB size pages, if
	//   host HW supports it.
	// - `+spec-ctrl`/`-spec-ctrl` - Allows improved Spectre mitigation with
	//   Intel CPUs.
	// - `+ssbd`/`-ssbd` - Protection for "Speculative Store Bypass" for Intel
	//   models.
	// - `+virt-ssbd`/`-virt-ssbd` - Basis for "Speculative Store Bypass"
	//   protection for AMD models.
	Flags []string `pulumi:"flags"`
	// The number of hotplugged vCPUs (defaults
	// to `0`).
	Hotplugged *int `pulumi:"hotplugged"`
	// Enable/disable NUMA. (default to `false`)
	Numa *bool `pulumi:"numa"`
	// The number of CPU sockets (defaults to `1`).
	Sockets *int `pulumi:"sockets"`
	// The VGA type (defaults to `std`).
	Type *string `pulumi:"type"`
	// The CPU units (defaults to `1024`).
	Units *int `pulumi:"units"`
}

// VirtualMachineCpuInput is an input type that accepts VirtualMachineCpuArgs and VirtualMachineCpuOutput values.
// You can construct a concrete instance of `VirtualMachineCpuInput` via:
//
//	VirtualMachineCpuArgs{...}
type VirtualMachineCpuInput interface {
	pulumi.Input

	ToVirtualMachineCpuOutput() VirtualMachineCpuOutput
	ToVirtualMachineCpuOutputWithContext(context.Context) VirtualMachineCpuOutput
}

type VirtualMachineCpuArgs struct {
	// The CPU architecture (defaults to `x8664`).
	Architecture pulumi.StringPtrInput `pulumi:"architecture"`
	// The number of CPU cores (defaults to `1`).
	Cores pulumi.IntPtrInput `pulumi:"cores"`
	// The CPU flags.
	// - `+aes`/`-aes` - Activate AES instruction set for HW acceleration.
	// - `+amd-no-ssb`/`-amd-no-ssb` - Notifies guest OS that host is not
	//   vulnerable for Spectre on AMD CPUs.
	// - `+amd-ssbd`/`-amd-ssbd` - Improves Spectre mitigation performance with
	//   AMD CPUs, best used with "virt-ssbd".
	// - `+hv-evmcs`/`-hv-evmcs` - Improve performance for nested
	//   virtualization (only supported on Intel CPUs).
	// - `+hv-tlbflush`/`-hv-tlbflush` - Improve performance in overcommitted
	//   Windows guests (may lead to guest BSOD on old CPUs).
	// - `+ibpb`/`-ibpb` - Allows improved Spectre mitigation on AMD CPUs.
	// - `+md-clear`/`-md-clear` - Required to let the guest OS know if MDS is
	//   mitigated correctly.
	// - `+pcid`/`-pcid` - Meltdown fix cost reduction on Westmere, Sandy- and
	//   Ivy Bridge Intel CPUs.
	// - `+pdpe1gb`/`-pdpe1gb` - Allows guest OS to use 1 GB size pages, if
	//   host HW supports it.
	// - `+spec-ctrl`/`-spec-ctrl` - Allows improved Spectre mitigation with
	//   Intel CPUs.
	// - `+ssbd`/`-ssbd` - Protection for "Speculative Store Bypass" for Intel
	//   models.
	// - `+virt-ssbd`/`-virt-ssbd` - Basis for "Speculative Store Bypass"
	//   protection for AMD models.
	Flags pulumi.StringArrayInput `pulumi:"flags"`
	// The number of hotplugged vCPUs (defaults
	// to `0`).
	Hotplugged pulumi.IntPtrInput `pulumi:"hotplugged"`
	// Enable/disable NUMA. (default to `false`)
	Numa pulumi.BoolPtrInput `pulumi:"numa"`
	// The number of CPU sockets (defaults to `1`).
	Sockets pulumi.IntPtrInput `pulumi:"sockets"`
	// The VGA type (defaults to `std`).
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The CPU units (defaults to `1024`).
	Units pulumi.IntPtrInput `pulumi:"units"`
}

func (VirtualMachineCpuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineCpu)(nil)).Elem()
}

func (i VirtualMachineCpuArgs) ToVirtualMachineCpuOutput() VirtualMachineCpuOutput {
	return i.ToVirtualMachineCpuOutputWithContext(context.Background())
}

func (i VirtualMachineCpuArgs) ToVirtualMachineCpuOutputWithContext(ctx context.Context) VirtualMachineCpuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineCpuOutput)
}

func (i VirtualMachineCpuArgs) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineCpu] {
	return pulumix.Output[VirtualMachineCpu]{
		OutputState: i.ToVirtualMachineCpuOutputWithContext(ctx).OutputState,
	}
}

func (i VirtualMachineCpuArgs) ToVirtualMachineCpuPtrOutput() VirtualMachineCpuPtrOutput {
	return i.ToVirtualMachineCpuPtrOutputWithContext(context.Background())
}

func (i VirtualMachineCpuArgs) ToVirtualMachineCpuPtrOutputWithContext(ctx context.Context) VirtualMachineCpuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineCpuOutput).ToVirtualMachineCpuPtrOutputWithContext(ctx)
}

// VirtualMachineCpuPtrInput is an input type that accepts VirtualMachineCpuArgs, VirtualMachineCpuPtr and VirtualMachineCpuPtrOutput values.
// You can construct a concrete instance of `VirtualMachineCpuPtrInput` via:
//
//	        VirtualMachineCpuArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineCpuPtrInput interface {
	pulumi.Input

	ToVirtualMachineCpuPtrOutput() VirtualMachineCpuPtrOutput
	ToVirtualMachineCpuPtrOutputWithContext(context.Context) VirtualMachineCpuPtrOutput
}

type virtualMachineCpuPtrType VirtualMachineCpuArgs

func VirtualMachineCpuPtr(v *VirtualMachineCpuArgs) VirtualMachineCpuPtrInput {
	return (*virtualMachineCpuPtrType)(v)
}

func (*virtualMachineCpuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineCpu)(nil)).Elem()
}

func (i *virtualMachineCpuPtrType) ToVirtualMachineCpuPtrOutput() VirtualMachineCpuPtrOutput {
	return i.ToVirtualMachineCpuPtrOutputWithContext(context.Background())
}

func (i *virtualMachineCpuPtrType) ToVirtualMachineCpuPtrOutputWithContext(ctx context.Context) VirtualMachineCpuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineCpuPtrOutput)
}

func (i *virtualMachineCpuPtrType) ToOutput(ctx context.Context) pulumix.Output[*VirtualMachineCpu] {
	return pulumix.Output[*VirtualMachineCpu]{
		OutputState: i.ToVirtualMachineCpuPtrOutputWithContext(ctx).OutputState,
	}
}

type VirtualMachineCpuOutput struct{ *pulumi.OutputState }

func (VirtualMachineCpuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineCpu)(nil)).Elem()
}

func (o VirtualMachineCpuOutput) ToVirtualMachineCpuOutput() VirtualMachineCpuOutput {
	return o
}

func (o VirtualMachineCpuOutput) ToVirtualMachineCpuOutputWithContext(ctx context.Context) VirtualMachineCpuOutput {
	return o
}

func (o VirtualMachineCpuOutput) ToVirtualMachineCpuPtrOutput() VirtualMachineCpuPtrOutput {
	return o.ToVirtualMachineCpuPtrOutputWithContext(context.Background())
}

func (o VirtualMachineCpuOutput) ToVirtualMachineCpuPtrOutputWithContext(ctx context.Context) VirtualMachineCpuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineCpu) *VirtualMachineCpu {
		return &v
	}).(VirtualMachineCpuPtrOutput)
}

func (o VirtualMachineCpuOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineCpu] {
	return pulumix.Output[VirtualMachineCpu]{
		OutputState: o.OutputState,
	}
}

// The CPU architecture (defaults to `x8664`).
func (o VirtualMachineCpuOutput) Architecture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineCpu) *string { return v.Architecture }).(pulumi.StringPtrOutput)
}

// The number of CPU cores (defaults to `1`).
func (o VirtualMachineCpuOutput) Cores() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineCpu) *int { return v.Cores }).(pulumi.IntPtrOutput)
}

// The CPU flags.
//   - `+aes`/`-aes` - Activate AES instruction set for HW acceleration.
//   - `+amd-no-ssb`/`-amd-no-ssb` - Notifies guest OS that host is not
//     vulnerable for Spectre on AMD CPUs.
//   - `+amd-ssbd`/`-amd-ssbd` - Improves Spectre mitigation performance with
//     AMD CPUs, best used with "virt-ssbd".
//   - `+hv-evmcs`/`-hv-evmcs` - Improve performance for nested
//     virtualization (only supported on Intel CPUs).
//   - `+hv-tlbflush`/`-hv-tlbflush` - Improve performance in overcommitted
//     Windows guests (may lead to guest BSOD on old CPUs).
//   - `+ibpb`/`-ibpb` - Allows improved Spectre mitigation on AMD CPUs.
//   - `+md-clear`/`-md-clear` - Required to let the guest OS know if MDS is
//     mitigated correctly.
//   - `+pcid`/`-pcid` - Meltdown fix cost reduction on Westmere, Sandy- and
//     Ivy Bridge Intel CPUs.
//   - `+pdpe1gb`/`-pdpe1gb` - Allows guest OS to use 1 GB size pages, if
//     host HW supports it.
//   - `+spec-ctrl`/`-spec-ctrl` - Allows improved Spectre mitigation with
//     Intel CPUs.
//   - `+ssbd`/`-ssbd` - Protection for "Speculative Store Bypass" for Intel
//     models.
//   - `+virt-ssbd`/`-virt-ssbd` - Basis for "Speculative Store Bypass"
//     protection for AMD models.
func (o VirtualMachineCpuOutput) Flags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualMachineCpu) []string { return v.Flags }).(pulumi.StringArrayOutput)
}

// The number of hotplugged vCPUs (defaults
// to `0`).
func (o VirtualMachineCpuOutput) Hotplugged() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineCpu) *int { return v.Hotplugged }).(pulumi.IntPtrOutput)
}

// Enable/disable NUMA. (default to `false`)
func (o VirtualMachineCpuOutput) Numa() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineCpu) *bool { return v.Numa }).(pulumi.BoolPtrOutput)
}

// The number of CPU sockets (defaults to `1`).
func (o VirtualMachineCpuOutput) Sockets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineCpu) *int { return v.Sockets }).(pulumi.IntPtrOutput)
}

// The VGA type (defaults to `std`).
func (o VirtualMachineCpuOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineCpu) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The CPU units (defaults to `1024`).
func (o VirtualMachineCpuOutput) Units() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineCpu) *int { return v.Units }).(pulumi.IntPtrOutput)
}

type VirtualMachineCpuPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineCpuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineCpu)(nil)).Elem()
}

func (o VirtualMachineCpuPtrOutput) ToVirtualMachineCpuPtrOutput() VirtualMachineCpuPtrOutput {
	return o
}

func (o VirtualMachineCpuPtrOutput) ToVirtualMachineCpuPtrOutputWithContext(ctx context.Context) VirtualMachineCpuPtrOutput {
	return o
}

func (o VirtualMachineCpuPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*VirtualMachineCpu] {
	return pulumix.Output[*VirtualMachineCpu]{
		OutputState: o.OutputState,
	}
}

func (o VirtualMachineCpuPtrOutput) Elem() VirtualMachineCpuOutput {
	return o.ApplyT(func(v *VirtualMachineCpu) VirtualMachineCpu {
		if v != nil {
			return *v
		}
		var ret VirtualMachineCpu
		return ret
	}).(VirtualMachineCpuOutput)
}

// The CPU architecture (defaults to `x8664`).
func (o VirtualMachineCpuPtrOutput) Architecture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineCpu) *string {
		if v == nil {
			return nil
		}
		return v.Architecture
	}).(pulumi.StringPtrOutput)
}

// The number of CPU cores (defaults to `1`).
func (o VirtualMachineCpuPtrOutput) Cores() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineCpu) *int {
		if v == nil {
			return nil
		}
		return v.Cores
	}).(pulumi.IntPtrOutput)
}

// The CPU flags.
//   - `+aes`/`-aes` - Activate AES instruction set for HW acceleration.
//   - `+amd-no-ssb`/`-amd-no-ssb` - Notifies guest OS that host is not
//     vulnerable for Spectre on AMD CPUs.
//   - `+amd-ssbd`/`-amd-ssbd` - Improves Spectre mitigation performance with
//     AMD CPUs, best used with "virt-ssbd".
//   - `+hv-evmcs`/`-hv-evmcs` - Improve performance for nested
//     virtualization (only supported on Intel CPUs).
//   - `+hv-tlbflush`/`-hv-tlbflush` - Improve performance in overcommitted
//     Windows guests (may lead to guest BSOD on old CPUs).
//   - `+ibpb`/`-ibpb` - Allows improved Spectre mitigation on AMD CPUs.
//   - `+md-clear`/`-md-clear` - Required to let the guest OS know if MDS is
//     mitigated correctly.
//   - `+pcid`/`-pcid` - Meltdown fix cost reduction on Westmere, Sandy- and
//     Ivy Bridge Intel CPUs.
//   - `+pdpe1gb`/`-pdpe1gb` - Allows guest OS to use 1 GB size pages, if
//     host HW supports it.
//   - `+spec-ctrl`/`-spec-ctrl` - Allows improved Spectre mitigation with
//     Intel CPUs.
//   - `+ssbd`/`-ssbd` - Protection for "Speculative Store Bypass" for Intel
//     models.
//   - `+virt-ssbd`/`-virt-ssbd` - Basis for "Speculative Store Bypass"
//     protection for AMD models.
func (o VirtualMachineCpuPtrOutput) Flags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualMachineCpu) []string {
		if v == nil {
			return nil
		}
		return v.Flags
	}).(pulumi.StringArrayOutput)
}

// The number of hotplugged vCPUs (defaults
// to `0`).
func (o VirtualMachineCpuPtrOutput) Hotplugged() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineCpu) *int {
		if v == nil {
			return nil
		}
		return v.Hotplugged
	}).(pulumi.IntPtrOutput)
}

// Enable/disable NUMA. (default to `false`)
func (o VirtualMachineCpuPtrOutput) Numa() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachineCpu) *bool {
		if v == nil {
			return nil
		}
		return v.Numa
	}).(pulumi.BoolPtrOutput)
}

// The number of CPU sockets (defaults to `1`).
func (o VirtualMachineCpuPtrOutput) Sockets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineCpu) *int {
		if v == nil {
			return nil
		}
		return v.Sockets
	}).(pulumi.IntPtrOutput)
}

// The VGA type (defaults to `std`).
func (o VirtualMachineCpuPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineCpu) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The CPU units (defaults to `1024`).
func (o VirtualMachineCpuPtrOutput) Units() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineCpu) *int {
		if v == nil {
			return nil
		}
		return v.Units
	}).(pulumi.IntPtrOutput)
}

type VirtualMachineDisk struct {
	// The cache type (defaults to `none`).
	Cache *string `pulumi:"cache"`
	// The identifier for the datastore to create the
	// cloud-init disk in (defaults to `local-lvm`).
	DatastoreId *string `pulumi:"datastoreId"`
	// Whether to pass discard/trim requests to the
	// underlying storage. Supported values are `on`/`ignore` (defaults
	// to `ignore`).
	Discard *string `pulumi:"discard"`
	// The file format.
	FileFormat *string `pulumi:"fileFormat"`
	// The file ID for a disk image (experimental -
	// might cause high CPU utilization during import, especially with large
	// disk images).
	FileId *string `pulumi:"fileId"`
	// The hardware interface to connect the cloud-init
	// image to. Must be one of `ide0..3`, `sata0..5`, `scsi0..30`. Will be
	// detected if the setting is missing but a cloud-init image is present,
	// otherwise defaults to `ide2`.
	Interface string `pulumi:"interface"`
	// Whether to use iothreads for this disk (defaults
	// to `false`).
	Iothread *bool `pulumi:"iothread"`
	// The in-datastore path to the disk image.
	// ***Experimental.***Use to attach another VM's disks,
	// or (as root only) host's filesystem paths (`datastoreId` empty string).
	// See "*Example: Attached disks*".
	PathInDatastore *string `pulumi:"pathInDatastore"`
	// The disk size in gigabytes (defaults to `8`).
	Size *int `pulumi:"size"`
	// The speed limits.
	Speed *VirtualMachineDiskSpeed `pulumi:"speed"`
	// Whether to use an SSD emulation option for this disk (
	// defaults to `false`). Note that SSD emulation is not supported on VirtIO
	// Block drives.
	Ssd *bool `pulumi:"ssd"`
}

// VirtualMachineDiskInput is an input type that accepts VirtualMachineDiskArgs and VirtualMachineDiskOutput values.
// You can construct a concrete instance of `VirtualMachineDiskInput` via:
//
//	VirtualMachineDiskArgs{...}
type VirtualMachineDiskInput interface {
	pulumi.Input

	ToVirtualMachineDiskOutput() VirtualMachineDiskOutput
	ToVirtualMachineDiskOutputWithContext(context.Context) VirtualMachineDiskOutput
}

type VirtualMachineDiskArgs struct {
	// The cache type (defaults to `none`).
	Cache pulumi.StringPtrInput `pulumi:"cache"`
	// The identifier for the datastore to create the
	// cloud-init disk in (defaults to `local-lvm`).
	DatastoreId pulumi.StringPtrInput `pulumi:"datastoreId"`
	// Whether to pass discard/trim requests to the
	// underlying storage. Supported values are `on`/`ignore` (defaults
	// to `ignore`).
	Discard pulumi.StringPtrInput `pulumi:"discard"`
	// The file format.
	FileFormat pulumi.StringPtrInput `pulumi:"fileFormat"`
	// The file ID for a disk image (experimental -
	// might cause high CPU utilization during import, especially with large
	// disk images).
	FileId pulumi.StringPtrInput `pulumi:"fileId"`
	// The hardware interface to connect the cloud-init
	// image to. Must be one of `ide0..3`, `sata0..5`, `scsi0..30`. Will be
	// detected if the setting is missing but a cloud-init image is present,
	// otherwise defaults to `ide2`.
	Interface pulumi.StringInput `pulumi:"interface"`
	// Whether to use iothreads for this disk (defaults
	// to `false`).
	Iothread pulumi.BoolPtrInput `pulumi:"iothread"`
	// The in-datastore path to the disk image.
	// ***Experimental.***Use to attach another VM's disks,
	// or (as root only) host's filesystem paths (`datastoreId` empty string).
	// See "*Example: Attached disks*".
	PathInDatastore pulumi.StringPtrInput `pulumi:"pathInDatastore"`
	// The disk size in gigabytes (defaults to `8`).
	Size pulumi.IntPtrInput `pulumi:"size"`
	// The speed limits.
	Speed VirtualMachineDiskSpeedPtrInput `pulumi:"speed"`
	// Whether to use an SSD emulation option for this disk (
	// defaults to `false`). Note that SSD emulation is not supported on VirtIO
	// Block drives.
	Ssd pulumi.BoolPtrInput `pulumi:"ssd"`
}

func (VirtualMachineDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineDisk)(nil)).Elem()
}

func (i VirtualMachineDiskArgs) ToVirtualMachineDiskOutput() VirtualMachineDiskOutput {
	return i.ToVirtualMachineDiskOutputWithContext(context.Background())
}

func (i VirtualMachineDiskArgs) ToVirtualMachineDiskOutputWithContext(ctx context.Context) VirtualMachineDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineDiskOutput)
}

func (i VirtualMachineDiskArgs) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineDisk] {
	return pulumix.Output[VirtualMachineDisk]{
		OutputState: i.ToVirtualMachineDiskOutputWithContext(ctx).OutputState,
	}
}

// VirtualMachineDiskArrayInput is an input type that accepts VirtualMachineDiskArray and VirtualMachineDiskArrayOutput values.
// You can construct a concrete instance of `VirtualMachineDiskArrayInput` via:
//
//	VirtualMachineDiskArray{ VirtualMachineDiskArgs{...} }
type VirtualMachineDiskArrayInput interface {
	pulumi.Input

	ToVirtualMachineDiskArrayOutput() VirtualMachineDiskArrayOutput
	ToVirtualMachineDiskArrayOutputWithContext(context.Context) VirtualMachineDiskArrayOutput
}

type VirtualMachineDiskArray []VirtualMachineDiskInput

func (VirtualMachineDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineDisk)(nil)).Elem()
}

func (i VirtualMachineDiskArray) ToVirtualMachineDiskArrayOutput() VirtualMachineDiskArrayOutput {
	return i.ToVirtualMachineDiskArrayOutputWithContext(context.Background())
}

func (i VirtualMachineDiskArray) ToVirtualMachineDiskArrayOutputWithContext(ctx context.Context) VirtualMachineDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineDiskArrayOutput)
}

func (i VirtualMachineDiskArray) ToOutput(ctx context.Context) pulumix.Output[[]VirtualMachineDisk] {
	return pulumix.Output[[]VirtualMachineDisk]{
		OutputState: i.ToVirtualMachineDiskArrayOutputWithContext(ctx).OutputState,
	}
}

type VirtualMachineDiskOutput struct{ *pulumi.OutputState }

func (VirtualMachineDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineDisk)(nil)).Elem()
}

func (o VirtualMachineDiskOutput) ToVirtualMachineDiskOutput() VirtualMachineDiskOutput {
	return o
}

func (o VirtualMachineDiskOutput) ToVirtualMachineDiskOutputWithContext(ctx context.Context) VirtualMachineDiskOutput {
	return o
}

func (o VirtualMachineDiskOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineDisk] {
	return pulumix.Output[VirtualMachineDisk]{
		OutputState: o.OutputState,
	}
}

// The cache type (defaults to `none`).
func (o VirtualMachineDiskOutput) Cache() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *string { return v.Cache }).(pulumi.StringPtrOutput)
}

// The identifier for the datastore to create the
// cloud-init disk in (defaults to `local-lvm`).
func (o VirtualMachineDiskOutput) DatastoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *string { return v.DatastoreId }).(pulumi.StringPtrOutput)
}

// Whether to pass discard/trim requests to the
// underlying storage. Supported values are `on`/`ignore` (defaults
// to `ignore`).
func (o VirtualMachineDiskOutput) Discard() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *string { return v.Discard }).(pulumi.StringPtrOutput)
}

// The file format.
func (o VirtualMachineDiskOutput) FileFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *string { return v.FileFormat }).(pulumi.StringPtrOutput)
}

// The file ID for a disk image (experimental -
// might cause high CPU utilization during import, especially with large
// disk images).
func (o VirtualMachineDiskOutput) FileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *string { return v.FileId }).(pulumi.StringPtrOutput)
}

// The hardware interface to connect the cloud-init
// image to. Must be one of `ide0..3`, `sata0..5`, `scsi0..30`. Will be
// detected if the setting is missing but a cloud-init image is present,
// otherwise defaults to `ide2`.
func (o VirtualMachineDiskOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineDisk) string { return v.Interface }).(pulumi.StringOutput)
}

// Whether to use iothreads for this disk (defaults
// to `false`).
func (o VirtualMachineDiskOutput) Iothread() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *bool { return v.Iothread }).(pulumi.BoolPtrOutput)
}

// The in-datastore path to the disk image.
// ***Experimental.***Use to attach another VM's disks,
// or (as root only) host's filesystem paths (`datastoreId` empty string).
// See "*Example: Attached disks*".
func (o VirtualMachineDiskOutput) PathInDatastore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *string { return v.PathInDatastore }).(pulumi.StringPtrOutput)
}

// The disk size in gigabytes (defaults to `8`).
func (o VirtualMachineDiskOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *int { return v.Size }).(pulumi.IntPtrOutput)
}

// The speed limits.
func (o VirtualMachineDiskOutput) Speed() VirtualMachineDiskSpeedPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *VirtualMachineDiskSpeed { return v.Speed }).(VirtualMachineDiskSpeedPtrOutput)
}

// Whether to use an SSD emulation option for this disk (
// defaults to `false`). Note that SSD emulation is not supported on VirtIO
// Block drives.
func (o VirtualMachineDiskOutput) Ssd() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *bool { return v.Ssd }).(pulumi.BoolPtrOutput)
}

type VirtualMachineDiskArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineDisk)(nil)).Elem()
}

func (o VirtualMachineDiskArrayOutput) ToVirtualMachineDiskArrayOutput() VirtualMachineDiskArrayOutput {
	return o
}

func (o VirtualMachineDiskArrayOutput) ToVirtualMachineDiskArrayOutputWithContext(ctx context.Context) VirtualMachineDiskArrayOutput {
	return o
}

func (o VirtualMachineDiskArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]VirtualMachineDisk] {
	return pulumix.Output[[]VirtualMachineDisk]{
		OutputState: o.OutputState,
	}
}

func (o VirtualMachineDiskArrayOutput) Index(i pulumi.IntInput) VirtualMachineDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineDisk {
		return vs[0].([]VirtualMachineDisk)[vs[1].(int)]
	}).(VirtualMachineDiskOutput)
}

type VirtualMachineDiskSpeed struct {
	// The maximum read speed in megabytes per second.
	Read *int `pulumi:"read"`
	// The maximum burstable read speed in
	// megabytes per second.
	ReadBurstable *int `pulumi:"readBurstable"`
	// The maximum write speed in megabytes per second.
	Write *int `pulumi:"write"`
	// The maximum burstable write speed in
	// megabytes per second.
	WriteBurstable *int `pulumi:"writeBurstable"`
}

// VirtualMachineDiskSpeedInput is an input type that accepts VirtualMachineDiskSpeedArgs and VirtualMachineDiskSpeedOutput values.
// You can construct a concrete instance of `VirtualMachineDiskSpeedInput` via:
//
//	VirtualMachineDiskSpeedArgs{...}
type VirtualMachineDiskSpeedInput interface {
	pulumi.Input

	ToVirtualMachineDiskSpeedOutput() VirtualMachineDiskSpeedOutput
	ToVirtualMachineDiskSpeedOutputWithContext(context.Context) VirtualMachineDiskSpeedOutput
}

type VirtualMachineDiskSpeedArgs struct {
	// The maximum read speed in megabytes per second.
	Read pulumi.IntPtrInput `pulumi:"read"`
	// The maximum burstable read speed in
	// megabytes per second.
	ReadBurstable pulumi.IntPtrInput `pulumi:"readBurstable"`
	// The maximum write speed in megabytes per second.
	Write pulumi.IntPtrInput `pulumi:"write"`
	// The maximum burstable write speed in
	// megabytes per second.
	WriteBurstable pulumi.IntPtrInput `pulumi:"writeBurstable"`
}

func (VirtualMachineDiskSpeedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineDiskSpeed)(nil)).Elem()
}

func (i VirtualMachineDiskSpeedArgs) ToVirtualMachineDiskSpeedOutput() VirtualMachineDiskSpeedOutput {
	return i.ToVirtualMachineDiskSpeedOutputWithContext(context.Background())
}

func (i VirtualMachineDiskSpeedArgs) ToVirtualMachineDiskSpeedOutputWithContext(ctx context.Context) VirtualMachineDiskSpeedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineDiskSpeedOutput)
}

func (i VirtualMachineDiskSpeedArgs) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineDiskSpeed] {
	return pulumix.Output[VirtualMachineDiskSpeed]{
		OutputState: i.ToVirtualMachineDiskSpeedOutputWithContext(ctx).OutputState,
	}
}

func (i VirtualMachineDiskSpeedArgs) ToVirtualMachineDiskSpeedPtrOutput() VirtualMachineDiskSpeedPtrOutput {
	return i.ToVirtualMachineDiskSpeedPtrOutputWithContext(context.Background())
}

func (i VirtualMachineDiskSpeedArgs) ToVirtualMachineDiskSpeedPtrOutputWithContext(ctx context.Context) VirtualMachineDiskSpeedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineDiskSpeedOutput).ToVirtualMachineDiskSpeedPtrOutputWithContext(ctx)
}

// VirtualMachineDiskSpeedPtrInput is an input type that accepts VirtualMachineDiskSpeedArgs, VirtualMachineDiskSpeedPtr and VirtualMachineDiskSpeedPtrOutput values.
// You can construct a concrete instance of `VirtualMachineDiskSpeedPtrInput` via:
//
//	        VirtualMachineDiskSpeedArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineDiskSpeedPtrInput interface {
	pulumi.Input

	ToVirtualMachineDiskSpeedPtrOutput() VirtualMachineDiskSpeedPtrOutput
	ToVirtualMachineDiskSpeedPtrOutputWithContext(context.Context) VirtualMachineDiskSpeedPtrOutput
}

type virtualMachineDiskSpeedPtrType VirtualMachineDiskSpeedArgs

func VirtualMachineDiskSpeedPtr(v *VirtualMachineDiskSpeedArgs) VirtualMachineDiskSpeedPtrInput {
	return (*virtualMachineDiskSpeedPtrType)(v)
}

func (*virtualMachineDiskSpeedPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineDiskSpeed)(nil)).Elem()
}

func (i *virtualMachineDiskSpeedPtrType) ToVirtualMachineDiskSpeedPtrOutput() VirtualMachineDiskSpeedPtrOutput {
	return i.ToVirtualMachineDiskSpeedPtrOutputWithContext(context.Background())
}

func (i *virtualMachineDiskSpeedPtrType) ToVirtualMachineDiskSpeedPtrOutputWithContext(ctx context.Context) VirtualMachineDiskSpeedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineDiskSpeedPtrOutput)
}

func (i *virtualMachineDiskSpeedPtrType) ToOutput(ctx context.Context) pulumix.Output[*VirtualMachineDiskSpeed] {
	return pulumix.Output[*VirtualMachineDiskSpeed]{
		OutputState: i.ToVirtualMachineDiskSpeedPtrOutputWithContext(ctx).OutputState,
	}
}

type VirtualMachineDiskSpeedOutput struct{ *pulumi.OutputState }

func (VirtualMachineDiskSpeedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineDiskSpeed)(nil)).Elem()
}

func (o VirtualMachineDiskSpeedOutput) ToVirtualMachineDiskSpeedOutput() VirtualMachineDiskSpeedOutput {
	return o
}

func (o VirtualMachineDiskSpeedOutput) ToVirtualMachineDiskSpeedOutputWithContext(ctx context.Context) VirtualMachineDiskSpeedOutput {
	return o
}

func (o VirtualMachineDiskSpeedOutput) ToVirtualMachineDiskSpeedPtrOutput() VirtualMachineDiskSpeedPtrOutput {
	return o.ToVirtualMachineDiskSpeedPtrOutputWithContext(context.Background())
}

func (o VirtualMachineDiskSpeedOutput) ToVirtualMachineDiskSpeedPtrOutputWithContext(ctx context.Context) VirtualMachineDiskSpeedPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineDiskSpeed) *VirtualMachineDiskSpeed {
		return &v
	}).(VirtualMachineDiskSpeedPtrOutput)
}

func (o VirtualMachineDiskSpeedOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineDiskSpeed] {
	return pulumix.Output[VirtualMachineDiskSpeed]{
		OutputState: o.OutputState,
	}
}

// The maximum read speed in megabytes per second.
func (o VirtualMachineDiskSpeedOutput) Read() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineDiskSpeed) *int { return v.Read }).(pulumi.IntPtrOutput)
}

// The maximum burstable read speed in
// megabytes per second.
func (o VirtualMachineDiskSpeedOutput) ReadBurstable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineDiskSpeed) *int { return v.ReadBurstable }).(pulumi.IntPtrOutput)
}

// The maximum write speed in megabytes per second.
func (o VirtualMachineDiskSpeedOutput) Write() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineDiskSpeed) *int { return v.Write }).(pulumi.IntPtrOutput)
}

// The maximum burstable write speed in
// megabytes per second.
func (o VirtualMachineDiskSpeedOutput) WriteBurstable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineDiskSpeed) *int { return v.WriteBurstable }).(pulumi.IntPtrOutput)
}

type VirtualMachineDiskSpeedPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineDiskSpeedPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineDiskSpeed)(nil)).Elem()
}

func (o VirtualMachineDiskSpeedPtrOutput) ToVirtualMachineDiskSpeedPtrOutput() VirtualMachineDiskSpeedPtrOutput {
	return o
}

func (o VirtualMachineDiskSpeedPtrOutput) ToVirtualMachineDiskSpeedPtrOutputWithContext(ctx context.Context) VirtualMachineDiskSpeedPtrOutput {
	return o
}

func (o VirtualMachineDiskSpeedPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*VirtualMachineDiskSpeed] {
	return pulumix.Output[*VirtualMachineDiskSpeed]{
		OutputState: o.OutputState,
	}
}

func (o VirtualMachineDiskSpeedPtrOutput) Elem() VirtualMachineDiskSpeedOutput {
	return o.ApplyT(func(v *VirtualMachineDiskSpeed) VirtualMachineDiskSpeed {
		if v != nil {
			return *v
		}
		var ret VirtualMachineDiskSpeed
		return ret
	}).(VirtualMachineDiskSpeedOutput)
}

// The maximum read speed in megabytes per second.
func (o VirtualMachineDiskSpeedPtrOutput) Read() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineDiskSpeed) *int {
		if v == nil {
			return nil
		}
		return v.Read
	}).(pulumi.IntPtrOutput)
}

// The maximum burstable read speed in
// megabytes per second.
func (o VirtualMachineDiskSpeedPtrOutput) ReadBurstable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineDiskSpeed) *int {
		if v == nil {
			return nil
		}
		return v.ReadBurstable
	}).(pulumi.IntPtrOutput)
}

// The maximum write speed in megabytes per second.
func (o VirtualMachineDiskSpeedPtrOutput) Write() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineDiskSpeed) *int {
		if v == nil {
			return nil
		}
		return v.Write
	}).(pulumi.IntPtrOutput)
}

// The maximum burstable write speed in
// megabytes per second.
func (o VirtualMachineDiskSpeedPtrOutput) WriteBurstable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineDiskSpeed) *int {
		if v == nil {
			return nil
		}
		return v.WriteBurstable
	}).(pulumi.IntPtrOutput)
}

type VirtualMachineEfiDisk struct {
	// The identifier for the datastore to create the
	// cloud-init disk in (defaults to `local-lvm`).
	DatastoreId *string `pulumi:"datastoreId"`
	// The file format.
	FileFormat *string `pulumi:"fileFormat"`
	// Use am EFI vars template with
	// distribution-specific and Microsoft Standard keys enrolled, if used with
	// EFI type=`4m`. Ignored for VMs with cpu.architecture=`aarch64` (defaults
	// to `false`).
	PreEnrolledKeys *bool `pulumi:"preEnrolledKeys"`
	// The VGA type (defaults to `std`).
	Type *string `pulumi:"type"`
}

// VirtualMachineEfiDiskInput is an input type that accepts VirtualMachineEfiDiskArgs and VirtualMachineEfiDiskOutput values.
// You can construct a concrete instance of `VirtualMachineEfiDiskInput` via:
//
//	VirtualMachineEfiDiskArgs{...}
type VirtualMachineEfiDiskInput interface {
	pulumi.Input

	ToVirtualMachineEfiDiskOutput() VirtualMachineEfiDiskOutput
	ToVirtualMachineEfiDiskOutputWithContext(context.Context) VirtualMachineEfiDiskOutput
}

type VirtualMachineEfiDiskArgs struct {
	// The identifier for the datastore to create the
	// cloud-init disk in (defaults to `local-lvm`).
	DatastoreId pulumi.StringPtrInput `pulumi:"datastoreId"`
	// The file format.
	FileFormat pulumi.StringPtrInput `pulumi:"fileFormat"`
	// Use am EFI vars template with
	// distribution-specific and Microsoft Standard keys enrolled, if used with
	// EFI type=`4m`. Ignored for VMs with cpu.architecture=`aarch64` (defaults
	// to `false`).
	PreEnrolledKeys pulumi.BoolPtrInput `pulumi:"preEnrolledKeys"`
	// The VGA type (defaults to `std`).
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (VirtualMachineEfiDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineEfiDisk)(nil)).Elem()
}

func (i VirtualMachineEfiDiskArgs) ToVirtualMachineEfiDiskOutput() VirtualMachineEfiDiskOutput {
	return i.ToVirtualMachineEfiDiskOutputWithContext(context.Background())
}

func (i VirtualMachineEfiDiskArgs) ToVirtualMachineEfiDiskOutputWithContext(ctx context.Context) VirtualMachineEfiDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineEfiDiskOutput)
}

func (i VirtualMachineEfiDiskArgs) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineEfiDisk] {
	return pulumix.Output[VirtualMachineEfiDisk]{
		OutputState: i.ToVirtualMachineEfiDiskOutputWithContext(ctx).OutputState,
	}
}

func (i VirtualMachineEfiDiskArgs) ToVirtualMachineEfiDiskPtrOutput() VirtualMachineEfiDiskPtrOutput {
	return i.ToVirtualMachineEfiDiskPtrOutputWithContext(context.Background())
}

func (i VirtualMachineEfiDiskArgs) ToVirtualMachineEfiDiskPtrOutputWithContext(ctx context.Context) VirtualMachineEfiDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineEfiDiskOutput).ToVirtualMachineEfiDiskPtrOutputWithContext(ctx)
}

// VirtualMachineEfiDiskPtrInput is an input type that accepts VirtualMachineEfiDiskArgs, VirtualMachineEfiDiskPtr and VirtualMachineEfiDiskPtrOutput values.
// You can construct a concrete instance of `VirtualMachineEfiDiskPtrInput` via:
//
//	        VirtualMachineEfiDiskArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineEfiDiskPtrInput interface {
	pulumi.Input

	ToVirtualMachineEfiDiskPtrOutput() VirtualMachineEfiDiskPtrOutput
	ToVirtualMachineEfiDiskPtrOutputWithContext(context.Context) VirtualMachineEfiDiskPtrOutput
}

type virtualMachineEfiDiskPtrType VirtualMachineEfiDiskArgs

func VirtualMachineEfiDiskPtr(v *VirtualMachineEfiDiskArgs) VirtualMachineEfiDiskPtrInput {
	return (*virtualMachineEfiDiskPtrType)(v)
}

func (*virtualMachineEfiDiskPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineEfiDisk)(nil)).Elem()
}

func (i *virtualMachineEfiDiskPtrType) ToVirtualMachineEfiDiskPtrOutput() VirtualMachineEfiDiskPtrOutput {
	return i.ToVirtualMachineEfiDiskPtrOutputWithContext(context.Background())
}

func (i *virtualMachineEfiDiskPtrType) ToVirtualMachineEfiDiskPtrOutputWithContext(ctx context.Context) VirtualMachineEfiDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineEfiDiskPtrOutput)
}

func (i *virtualMachineEfiDiskPtrType) ToOutput(ctx context.Context) pulumix.Output[*VirtualMachineEfiDisk] {
	return pulumix.Output[*VirtualMachineEfiDisk]{
		OutputState: i.ToVirtualMachineEfiDiskPtrOutputWithContext(ctx).OutputState,
	}
}

type VirtualMachineEfiDiskOutput struct{ *pulumi.OutputState }

func (VirtualMachineEfiDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineEfiDisk)(nil)).Elem()
}

func (o VirtualMachineEfiDiskOutput) ToVirtualMachineEfiDiskOutput() VirtualMachineEfiDiskOutput {
	return o
}

func (o VirtualMachineEfiDiskOutput) ToVirtualMachineEfiDiskOutputWithContext(ctx context.Context) VirtualMachineEfiDiskOutput {
	return o
}

func (o VirtualMachineEfiDiskOutput) ToVirtualMachineEfiDiskPtrOutput() VirtualMachineEfiDiskPtrOutput {
	return o.ToVirtualMachineEfiDiskPtrOutputWithContext(context.Background())
}

func (o VirtualMachineEfiDiskOutput) ToVirtualMachineEfiDiskPtrOutputWithContext(ctx context.Context) VirtualMachineEfiDiskPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineEfiDisk) *VirtualMachineEfiDisk {
		return &v
	}).(VirtualMachineEfiDiskPtrOutput)
}

func (o VirtualMachineEfiDiskOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineEfiDisk] {
	return pulumix.Output[VirtualMachineEfiDisk]{
		OutputState: o.OutputState,
	}
}

// The identifier for the datastore to create the
// cloud-init disk in (defaults to `local-lvm`).
func (o VirtualMachineEfiDiskOutput) DatastoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineEfiDisk) *string { return v.DatastoreId }).(pulumi.StringPtrOutput)
}

// The file format.
func (o VirtualMachineEfiDiskOutput) FileFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineEfiDisk) *string { return v.FileFormat }).(pulumi.StringPtrOutput)
}

// Use am EFI vars template with
// distribution-specific and Microsoft Standard keys enrolled, if used with
// EFI type=`4m`. Ignored for VMs with cpu.architecture=`aarch64` (defaults
// to `false`).
func (o VirtualMachineEfiDiskOutput) PreEnrolledKeys() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineEfiDisk) *bool { return v.PreEnrolledKeys }).(pulumi.BoolPtrOutput)
}

// The VGA type (defaults to `std`).
func (o VirtualMachineEfiDiskOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineEfiDisk) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type VirtualMachineEfiDiskPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineEfiDiskPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineEfiDisk)(nil)).Elem()
}

func (o VirtualMachineEfiDiskPtrOutput) ToVirtualMachineEfiDiskPtrOutput() VirtualMachineEfiDiskPtrOutput {
	return o
}

func (o VirtualMachineEfiDiskPtrOutput) ToVirtualMachineEfiDiskPtrOutputWithContext(ctx context.Context) VirtualMachineEfiDiskPtrOutput {
	return o
}

func (o VirtualMachineEfiDiskPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*VirtualMachineEfiDisk] {
	return pulumix.Output[*VirtualMachineEfiDisk]{
		OutputState: o.OutputState,
	}
}

func (o VirtualMachineEfiDiskPtrOutput) Elem() VirtualMachineEfiDiskOutput {
	return o.ApplyT(func(v *VirtualMachineEfiDisk) VirtualMachineEfiDisk {
		if v != nil {
			return *v
		}
		var ret VirtualMachineEfiDisk
		return ret
	}).(VirtualMachineEfiDiskOutput)
}

// The identifier for the datastore to create the
// cloud-init disk in (defaults to `local-lvm`).
func (o VirtualMachineEfiDiskPtrOutput) DatastoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineEfiDisk) *string {
		if v == nil {
			return nil
		}
		return v.DatastoreId
	}).(pulumi.StringPtrOutput)
}

// The file format.
func (o VirtualMachineEfiDiskPtrOutput) FileFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineEfiDisk) *string {
		if v == nil {
			return nil
		}
		return v.FileFormat
	}).(pulumi.StringPtrOutput)
}

// Use am EFI vars template with
// distribution-specific and Microsoft Standard keys enrolled, if used with
// EFI type=`4m`. Ignored for VMs with cpu.architecture=`aarch64` (defaults
// to `false`).
func (o VirtualMachineEfiDiskPtrOutput) PreEnrolledKeys() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachineEfiDisk) *bool {
		if v == nil {
			return nil
		}
		return v.PreEnrolledKeys
	}).(pulumi.BoolPtrOutput)
}

// The VGA type (defaults to `std`).
func (o VirtualMachineEfiDiskPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineEfiDisk) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type VirtualMachineHostpci struct {
	// The device (defaults to `socket`).
	// - `/dev/*` - A host serial device.
	Device string `pulumi:"device"`
	// The PCI device ID. Use either this or `mapping`.
	Id *string `pulumi:"id"`
	// The resource mapping name of the device, for
	// example gpu. Use either this or `id`.
	Mapping *string `pulumi:"mapping"`
	// The mediated device ID to use.
	Mdev *string `pulumi:"mdev"`
	// Tells Proxmox to use a PCIe or PCI port. Some
	// guests/device combination require PCIe rather than PCI. PCIe is only
	// available for q35 machine types.
	Pcie *bool `pulumi:"pcie"`
	// A path to a ROM file for the device to use. This
	// is a relative path under `/usr/share/kvm/`.
	RomFile *string `pulumi:"romFile"`
	// Makes the firmware ROM visible for the VM (defaults
	// to `true`).
	Rombar *bool `pulumi:"rombar"`
	// Marks the PCI(e) device as the primary GPU of the VM.
	// With this enabled the `vga` configuration argument will be ignored.
	Xvga *bool `pulumi:"xvga"`
}

// VirtualMachineHostpciInput is an input type that accepts VirtualMachineHostpciArgs and VirtualMachineHostpciOutput values.
// You can construct a concrete instance of `VirtualMachineHostpciInput` via:
//
//	VirtualMachineHostpciArgs{...}
type VirtualMachineHostpciInput interface {
	pulumi.Input

	ToVirtualMachineHostpciOutput() VirtualMachineHostpciOutput
	ToVirtualMachineHostpciOutputWithContext(context.Context) VirtualMachineHostpciOutput
}

type VirtualMachineHostpciArgs struct {
	// The device (defaults to `socket`).
	// - `/dev/*` - A host serial device.
	Device pulumi.StringInput `pulumi:"device"`
	// The PCI device ID. Use either this or `mapping`.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The resource mapping name of the device, for
	// example gpu. Use either this or `id`.
	Mapping pulumi.StringPtrInput `pulumi:"mapping"`
	// The mediated device ID to use.
	Mdev pulumi.StringPtrInput `pulumi:"mdev"`
	// Tells Proxmox to use a PCIe or PCI port. Some
	// guests/device combination require PCIe rather than PCI. PCIe is only
	// available for q35 machine types.
	Pcie pulumi.BoolPtrInput `pulumi:"pcie"`
	// A path to a ROM file for the device to use. This
	// is a relative path under `/usr/share/kvm/`.
	RomFile pulumi.StringPtrInput `pulumi:"romFile"`
	// Makes the firmware ROM visible for the VM (defaults
	// to `true`).
	Rombar pulumi.BoolPtrInput `pulumi:"rombar"`
	// Marks the PCI(e) device as the primary GPU of the VM.
	// With this enabled the `vga` configuration argument will be ignored.
	Xvga pulumi.BoolPtrInput `pulumi:"xvga"`
}

func (VirtualMachineHostpciArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineHostpci)(nil)).Elem()
}

func (i VirtualMachineHostpciArgs) ToVirtualMachineHostpciOutput() VirtualMachineHostpciOutput {
	return i.ToVirtualMachineHostpciOutputWithContext(context.Background())
}

func (i VirtualMachineHostpciArgs) ToVirtualMachineHostpciOutputWithContext(ctx context.Context) VirtualMachineHostpciOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineHostpciOutput)
}

func (i VirtualMachineHostpciArgs) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineHostpci] {
	return pulumix.Output[VirtualMachineHostpci]{
		OutputState: i.ToVirtualMachineHostpciOutputWithContext(ctx).OutputState,
	}
}

// VirtualMachineHostpciArrayInput is an input type that accepts VirtualMachineHostpciArray and VirtualMachineHostpciArrayOutput values.
// You can construct a concrete instance of `VirtualMachineHostpciArrayInput` via:
//
//	VirtualMachineHostpciArray{ VirtualMachineHostpciArgs{...} }
type VirtualMachineHostpciArrayInput interface {
	pulumi.Input

	ToVirtualMachineHostpciArrayOutput() VirtualMachineHostpciArrayOutput
	ToVirtualMachineHostpciArrayOutputWithContext(context.Context) VirtualMachineHostpciArrayOutput
}

type VirtualMachineHostpciArray []VirtualMachineHostpciInput

func (VirtualMachineHostpciArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineHostpci)(nil)).Elem()
}

func (i VirtualMachineHostpciArray) ToVirtualMachineHostpciArrayOutput() VirtualMachineHostpciArrayOutput {
	return i.ToVirtualMachineHostpciArrayOutputWithContext(context.Background())
}

func (i VirtualMachineHostpciArray) ToVirtualMachineHostpciArrayOutputWithContext(ctx context.Context) VirtualMachineHostpciArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineHostpciArrayOutput)
}

func (i VirtualMachineHostpciArray) ToOutput(ctx context.Context) pulumix.Output[[]VirtualMachineHostpci] {
	return pulumix.Output[[]VirtualMachineHostpci]{
		OutputState: i.ToVirtualMachineHostpciArrayOutputWithContext(ctx).OutputState,
	}
}

type VirtualMachineHostpciOutput struct{ *pulumi.OutputState }

func (VirtualMachineHostpciOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineHostpci)(nil)).Elem()
}

func (o VirtualMachineHostpciOutput) ToVirtualMachineHostpciOutput() VirtualMachineHostpciOutput {
	return o
}

func (o VirtualMachineHostpciOutput) ToVirtualMachineHostpciOutputWithContext(ctx context.Context) VirtualMachineHostpciOutput {
	return o
}

func (o VirtualMachineHostpciOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineHostpci] {
	return pulumix.Output[VirtualMachineHostpci]{
		OutputState: o.OutputState,
	}
}

// The device (defaults to `socket`).
// - `/dev/*` - A host serial device.
func (o VirtualMachineHostpciOutput) Device() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineHostpci) string { return v.Device }).(pulumi.StringOutput)
}

// The PCI device ID. Use either this or `mapping`.
func (o VirtualMachineHostpciOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineHostpci) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The resource mapping name of the device, for
// example gpu. Use either this or `id`.
func (o VirtualMachineHostpciOutput) Mapping() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineHostpci) *string { return v.Mapping }).(pulumi.StringPtrOutput)
}

// The mediated device ID to use.
func (o VirtualMachineHostpciOutput) Mdev() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineHostpci) *string { return v.Mdev }).(pulumi.StringPtrOutput)
}

// Tells Proxmox to use a PCIe or PCI port. Some
// guests/device combination require PCIe rather than PCI. PCIe is only
// available for q35 machine types.
func (o VirtualMachineHostpciOutput) Pcie() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineHostpci) *bool { return v.Pcie }).(pulumi.BoolPtrOutput)
}

// A path to a ROM file for the device to use. This
// is a relative path under `/usr/share/kvm/`.
func (o VirtualMachineHostpciOutput) RomFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineHostpci) *string { return v.RomFile }).(pulumi.StringPtrOutput)
}

// Makes the firmware ROM visible for the VM (defaults
// to `true`).
func (o VirtualMachineHostpciOutput) Rombar() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineHostpci) *bool { return v.Rombar }).(pulumi.BoolPtrOutput)
}

// Marks the PCI(e) device as the primary GPU of the VM.
// With this enabled the `vga` configuration argument will be ignored.
func (o VirtualMachineHostpciOutput) Xvga() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineHostpci) *bool { return v.Xvga }).(pulumi.BoolPtrOutput)
}

type VirtualMachineHostpciArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineHostpciArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineHostpci)(nil)).Elem()
}

func (o VirtualMachineHostpciArrayOutput) ToVirtualMachineHostpciArrayOutput() VirtualMachineHostpciArrayOutput {
	return o
}

func (o VirtualMachineHostpciArrayOutput) ToVirtualMachineHostpciArrayOutputWithContext(ctx context.Context) VirtualMachineHostpciArrayOutput {
	return o
}

func (o VirtualMachineHostpciArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]VirtualMachineHostpci] {
	return pulumix.Output[[]VirtualMachineHostpci]{
		OutputState: o.OutputState,
	}
}

func (o VirtualMachineHostpciArrayOutput) Index(i pulumi.IntInput) VirtualMachineHostpciOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineHostpci {
		return vs[0].([]VirtualMachineHostpci)[vs[1].(int)]
	}).(VirtualMachineHostpciOutput)
}

type VirtualMachineInitialization struct {
	// The identifier for the datastore to create the
	// cloud-init disk in (defaults to `local-lvm`).
	DatastoreId *string `pulumi:"datastoreId"`
	// The DNS configuration.
	Dns *VirtualMachineInitializationDns `pulumi:"dns"`
	// The hardware interface to connect the cloud-init
	// image to. Must be one of `ide0..3`, `sata0..5`, `scsi0..30`. Will be
	// detected if the setting is missing but a cloud-init image is present,
	// otherwise defaults to `ide2`.
	Interface *string `pulumi:"interface"`
	// The IP configuration (one block per network
	// device).
	IpConfigs []VirtualMachineInitializationIpConfig `pulumi:"ipConfigs"`
	// The identifier for a file containing
	// all meta data passed to the VM via cloud-init.
	MetaDataFileId *string `pulumi:"metaDataFileId"`
	// The identifier for a file containing
	// network configuration data passed to the VM via cloud-init (conflicts
	// with `ipConfig`).
	NetworkDataFileId *string `pulumi:"networkDataFileId"`
	// The VGA type (defaults to `std`).
	Type *string `pulumi:"type"`
	// The user account configuration (conflicts
	// with `userDataFileId`).
	UserAccount *VirtualMachineInitializationUserAccount `pulumi:"userAccount"`
	// The identifier for a file containing
	// custom user data (conflicts with `userAccount`).
	UserDataFileId *string `pulumi:"userDataFileId"`
	// The identifier for a file containing
	// all vendor data passed to the VM via cloud-init.
	VendorDataFileId *string `pulumi:"vendorDataFileId"`
}

// VirtualMachineInitializationInput is an input type that accepts VirtualMachineInitializationArgs and VirtualMachineInitializationOutput values.
// You can construct a concrete instance of `VirtualMachineInitializationInput` via:
//
//	VirtualMachineInitializationArgs{...}
type VirtualMachineInitializationInput interface {
	pulumi.Input

	ToVirtualMachineInitializationOutput() VirtualMachineInitializationOutput
	ToVirtualMachineInitializationOutputWithContext(context.Context) VirtualMachineInitializationOutput
}

type VirtualMachineInitializationArgs struct {
	// The identifier for the datastore to create the
	// cloud-init disk in (defaults to `local-lvm`).
	DatastoreId pulumi.StringPtrInput `pulumi:"datastoreId"`
	// The DNS configuration.
	Dns VirtualMachineInitializationDnsPtrInput `pulumi:"dns"`
	// The hardware interface to connect the cloud-init
	// image to. Must be one of `ide0..3`, `sata0..5`, `scsi0..30`. Will be
	// detected if the setting is missing but a cloud-init image is present,
	// otherwise defaults to `ide2`.
	Interface pulumi.StringPtrInput `pulumi:"interface"`
	// The IP configuration (one block per network
	// device).
	IpConfigs VirtualMachineInitializationIpConfigArrayInput `pulumi:"ipConfigs"`
	// The identifier for a file containing
	// all meta data passed to the VM via cloud-init.
	MetaDataFileId pulumi.StringPtrInput `pulumi:"metaDataFileId"`
	// The identifier for a file containing
	// network configuration data passed to the VM via cloud-init (conflicts
	// with `ipConfig`).
	NetworkDataFileId pulumi.StringPtrInput `pulumi:"networkDataFileId"`
	// The VGA type (defaults to `std`).
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The user account configuration (conflicts
	// with `userDataFileId`).
	UserAccount VirtualMachineInitializationUserAccountPtrInput `pulumi:"userAccount"`
	// The identifier for a file containing
	// custom user data (conflicts with `userAccount`).
	UserDataFileId pulumi.StringPtrInput `pulumi:"userDataFileId"`
	// The identifier for a file containing
	// all vendor data passed to the VM via cloud-init.
	VendorDataFileId pulumi.StringPtrInput `pulumi:"vendorDataFileId"`
}

func (VirtualMachineInitializationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineInitialization)(nil)).Elem()
}

func (i VirtualMachineInitializationArgs) ToVirtualMachineInitializationOutput() VirtualMachineInitializationOutput {
	return i.ToVirtualMachineInitializationOutputWithContext(context.Background())
}

func (i VirtualMachineInitializationArgs) ToVirtualMachineInitializationOutputWithContext(ctx context.Context) VirtualMachineInitializationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineInitializationOutput)
}

func (i VirtualMachineInitializationArgs) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineInitialization] {
	return pulumix.Output[VirtualMachineInitialization]{
		OutputState: i.ToVirtualMachineInitializationOutputWithContext(ctx).OutputState,
	}
}

func (i VirtualMachineInitializationArgs) ToVirtualMachineInitializationPtrOutput() VirtualMachineInitializationPtrOutput {
	return i.ToVirtualMachineInitializationPtrOutputWithContext(context.Background())
}

func (i VirtualMachineInitializationArgs) ToVirtualMachineInitializationPtrOutputWithContext(ctx context.Context) VirtualMachineInitializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineInitializationOutput).ToVirtualMachineInitializationPtrOutputWithContext(ctx)
}

// VirtualMachineInitializationPtrInput is an input type that accepts VirtualMachineInitializationArgs, VirtualMachineInitializationPtr and VirtualMachineInitializationPtrOutput values.
// You can construct a concrete instance of `VirtualMachineInitializationPtrInput` via:
//
//	        VirtualMachineInitializationArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineInitializationPtrInput interface {
	pulumi.Input

	ToVirtualMachineInitializationPtrOutput() VirtualMachineInitializationPtrOutput
	ToVirtualMachineInitializationPtrOutputWithContext(context.Context) VirtualMachineInitializationPtrOutput
}

type virtualMachineInitializationPtrType VirtualMachineInitializationArgs

func VirtualMachineInitializationPtr(v *VirtualMachineInitializationArgs) VirtualMachineInitializationPtrInput {
	return (*virtualMachineInitializationPtrType)(v)
}

func (*virtualMachineInitializationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineInitialization)(nil)).Elem()
}

func (i *virtualMachineInitializationPtrType) ToVirtualMachineInitializationPtrOutput() VirtualMachineInitializationPtrOutput {
	return i.ToVirtualMachineInitializationPtrOutputWithContext(context.Background())
}

func (i *virtualMachineInitializationPtrType) ToVirtualMachineInitializationPtrOutputWithContext(ctx context.Context) VirtualMachineInitializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineInitializationPtrOutput)
}

func (i *virtualMachineInitializationPtrType) ToOutput(ctx context.Context) pulumix.Output[*VirtualMachineInitialization] {
	return pulumix.Output[*VirtualMachineInitialization]{
		OutputState: i.ToVirtualMachineInitializationPtrOutputWithContext(ctx).OutputState,
	}
}

type VirtualMachineInitializationOutput struct{ *pulumi.OutputState }

func (VirtualMachineInitializationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineInitialization)(nil)).Elem()
}

func (o VirtualMachineInitializationOutput) ToVirtualMachineInitializationOutput() VirtualMachineInitializationOutput {
	return o
}

func (o VirtualMachineInitializationOutput) ToVirtualMachineInitializationOutputWithContext(ctx context.Context) VirtualMachineInitializationOutput {
	return o
}

func (o VirtualMachineInitializationOutput) ToVirtualMachineInitializationPtrOutput() VirtualMachineInitializationPtrOutput {
	return o.ToVirtualMachineInitializationPtrOutputWithContext(context.Background())
}

func (o VirtualMachineInitializationOutput) ToVirtualMachineInitializationPtrOutputWithContext(ctx context.Context) VirtualMachineInitializationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineInitialization) *VirtualMachineInitialization {
		return &v
	}).(VirtualMachineInitializationPtrOutput)
}

func (o VirtualMachineInitializationOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineInitialization] {
	return pulumix.Output[VirtualMachineInitialization]{
		OutputState: o.OutputState,
	}
}

// The identifier for the datastore to create the
// cloud-init disk in (defaults to `local-lvm`).
func (o VirtualMachineInitializationOutput) DatastoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineInitialization) *string { return v.DatastoreId }).(pulumi.StringPtrOutput)
}

// The DNS configuration.
func (o VirtualMachineInitializationOutput) Dns() VirtualMachineInitializationDnsPtrOutput {
	return o.ApplyT(func(v VirtualMachineInitialization) *VirtualMachineInitializationDns { return v.Dns }).(VirtualMachineInitializationDnsPtrOutput)
}

// The hardware interface to connect the cloud-init
// image to. Must be one of `ide0..3`, `sata0..5`, `scsi0..30`. Will be
// detected if the setting is missing but a cloud-init image is present,
// otherwise defaults to `ide2`.
func (o VirtualMachineInitializationOutput) Interface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineInitialization) *string { return v.Interface }).(pulumi.StringPtrOutput)
}

// The IP configuration (one block per network
// device).
func (o VirtualMachineInitializationOutput) IpConfigs() VirtualMachineInitializationIpConfigArrayOutput {
	return o.ApplyT(func(v VirtualMachineInitialization) []VirtualMachineInitializationIpConfig { return v.IpConfigs }).(VirtualMachineInitializationIpConfigArrayOutput)
}

// The identifier for a file containing
// all meta data passed to the VM via cloud-init.
func (o VirtualMachineInitializationOutput) MetaDataFileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineInitialization) *string { return v.MetaDataFileId }).(pulumi.StringPtrOutput)
}

// The identifier for a file containing
// network configuration data passed to the VM via cloud-init (conflicts
// with `ipConfig`).
func (o VirtualMachineInitializationOutput) NetworkDataFileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineInitialization) *string { return v.NetworkDataFileId }).(pulumi.StringPtrOutput)
}

// The VGA type (defaults to `std`).
func (o VirtualMachineInitializationOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineInitialization) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The user account configuration (conflicts
// with `userDataFileId`).
func (o VirtualMachineInitializationOutput) UserAccount() VirtualMachineInitializationUserAccountPtrOutput {
	return o.ApplyT(func(v VirtualMachineInitialization) *VirtualMachineInitializationUserAccount { return v.UserAccount }).(VirtualMachineInitializationUserAccountPtrOutput)
}

// The identifier for a file containing
// custom user data (conflicts with `userAccount`).
func (o VirtualMachineInitializationOutput) UserDataFileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineInitialization) *string { return v.UserDataFileId }).(pulumi.StringPtrOutput)
}

// The identifier for a file containing
// all vendor data passed to the VM via cloud-init.
func (o VirtualMachineInitializationOutput) VendorDataFileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineInitialization) *string { return v.VendorDataFileId }).(pulumi.StringPtrOutput)
}

type VirtualMachineInitializationPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineInitializationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineInitialization)(nil)).Elem()
}

func (o VirtualMachineInitializationPtrOutput) ToVirtualMachineInitializationPtrOutput() VirtualMachineInitializationPtrOutput {
	return o
}

func (o VirtualMachineInitializationPtrOutput) ToVirtualMachineInitializationPtrOutputWithContext(ctx context.Context) VirtualMachineInitializationPtrOutput {
	return o
}

func (o VirtualMachineInitializationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*VirtualMachineInitialization] {
	return pulumix.Output[*VirtualMachineInitialization]{
		OutputState: o.OutputState,
	}
}

func (o VirtualMachineInitializationPtrOutput) Elem() VirtualMachineInitializationOutput {
	return o.ApplyT(func(v *VirtualMachineInitialization) VirtualMachineInitialization {
		if v != nil {
			return *v
		}
		var ret VirtualMachineInitialization
		return ret
	}).(VirtualMachineInitializationOutput)
}

// The identifier for the datastore to create the
// cloud-init disk in (defaults to `local-lvm`).
func (o VirtualMachineInitializationPtrOutput) DatastoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInitialization) *string {
		if v == nil {
			return nil
		}
		return v.DatastoreId
	}).(pulumi.StringPtrOutput)
}

// The DNS configuration.
func (o VirtualMachineInitializationPtrOutput) Dns() VirtualMachineInitializationDnsPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInitialization) *VirtualMachineInitializationDns {
		if v == nil {
			return nil
		}
		return v.Dns
	}).(VirtualMachineInitializationDnsPtrOutput)
}

// The hardware interface to connect the cloud-init
// image to. Must be one of `ide0..3`, `sata0..5`, `scsi0..30`. Will be
// detected if the setting is missing but a cloud-init image is present,
// otherwise defaults to `ide2`.
func (o VirtualMachineInitializationPtrOutput) Interface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInitialization) *string {
		if v == nil {
			return nil
		}
		return v.Interface
	}).(pulumi.StringPtrOutput)
}

// The IP configuration (one block per network
// device).
func (o VirtualMachineInitializationPtrOutput) IpConfigs() VirtualMachineInitializationIpConfigArrayOutput {
	return o.ApplyT(func(v *VirtualMachineInitialization) []VirtualMachineInitializationIpConfig {
		if v == nil {
			return nil
		}
		return v.IpConfigs
	}).(VirtualMachineInitializationIpConfigArrayOutput)
}

// The identifier for a file containing
// all meta data passed to the VM via cloud-init.
func (o VirtualMachineInitializationPtrOutput) MetaDataFileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInitialization) *string {
		if v == nil {
			return nil
		}
		return v.MetaDataFileId
	}).(pulumi.StringPtrOutput)
}

// The identifier for a file containing
// network configuration data passed to the VM via cloud-init (conflicts
// with `ipConfig`).
func (o VirtualMachineInitializationPtrOutput) NetworkDataFileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInitialization) *string {
		if v == nil {
			return nil
		}
		return v.NetworkDataFileId
	}).(pulumi.StringPtrOutput)
}

// The VGA type (defaults to `std`).
func (o VirtualMachineInitializationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInitialization) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The user account configuration (conflicts
// with `userDataFileId`).
func (o VirtualMachineInitializationPtrOutput) UserAccount() VirtualMachineInitializationUserAccountPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInitialization) *VirtualMachineInitializationUserAccount {
		if v == nil {
			return nil
		}
		return v.UserAccount
	}).(VirtualMachineInitializationUserAccountPtrOutput)
}

// The identifier for a file containing
// custom user data (conflicts with `userAccount`).
func (o VirtualMachineInitializationPtrOutput) UserDataFileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInitialization) *string {
		if v == nil {
			return nil
		}
		return v.UserDataFileId
	}).(pulumi.StringPtrOutput)
}

// The identifier for a file containing
// all vendor data passed to the VM via cloud-init.
func (o VirtualMachineInitializationPtrOutput) VendorDataFileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInitialization) *string {
		if v == nil {
			return nil
		}
		return v.VendorDataFileId
	}).(pulumi.StringPtrOutput)
}

type VirtualMachineInitializationDns struct {
	// The DNS search domain.
	Domain *string `pulumi:"domain"`
	// The DNS server.
	Server *string `pulumi:"server"`
}

// VirtualMachineInitializationDnsInput is an input type that accepts VirtualMachineInitializationDnsArgs and VirtualMachineInitializationDnsOutput values.
// You can construct a concrete instance of `VirtualMachineInitializationDnsInput` via:
//
//	VirtualMachineInitializationDnsArgs{...}
type VirtualMachineInitializationDnsInput interface {
	pulumi.Input

	ToVirtualMachineInitializationDnsOutput() VirtualMachineInitializationDnsOutput
	ToVirtualMachineInitializationDnsOutputWithContext(context.Context) VirtualMachineInitializationDnsOutput
}

type VirtualMachineInitializationDnsArgs struct {
	// The DNS search domain.
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// The DNS server.
	Server pulumi.StringPtrInput `pulumi:"server"`
}

func (VirtualMachineInitializationDnsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineInitializationDns)(nil)).Elem()
}

func (i VirtualMachineInitializationDnsArgs) ToVirtualMachineInitializationDnsOutput() VirtualMachineInitializationDnsOutput {
	return i.ToVirtualMachineInitializationDnsOutputWithContext(context.Background())
}

func (i VirtualMachineInitializationDnsArgs) ToVirtualMachineInitializationDnsOutputWithContext(ctx context.Context) VirtualMachineInitializationDnsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineInitializationDnsOutput)
}

func (i VirtualMachineInitializationDnsArgs) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineInitializationDns] {
	return pulumix.Output[VirtualMachineInitializationDns]{
		OutputState: i.ToVirtualMachineInitializationDnsOutputWithContext(ctx).OutputState,
	}
}

func (i VirtualMachineInitializationDnsArgs) ToVirtualMachineInitializationDnsPtrOutput() VirtualMachineInitializationDnsPtrOutput {
	return i.ToVirtualMachineInitializationDnsPtrOutputWithContext(context.Background())
}

func (i VirtualMachineInitializationDnsArgs) ToVirtualMachineInitializationDnsPtrOutputWithContext(ctx context.Context) VirtualMachineInitializationDnsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineInitializationDnsOutput).ToVirtualMachineInitializationDnsPtrOutputWithContext(ctx)
}

// VirtualMachineInitializationDnsPtrInput is an input type that accepts VirtualMachineInitializationDnsArgs, VirtualMachineInitializationDnsPtr and VirtualMachineInitializationDnsPtrOutput values.
// You can construct a concrete instance of `VirtualMachineInitializationDnsPtrInput` via:
//
//	        VirtualMachineInitializationDnsArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineInitializationDnsPtrInput interface {
	pulumi.Input

	ToVirtualMachineInitializationDnsPtrOutput() VirtualMachineInitializationDnsPtrOutput
	ToVirtualMachineInitializationDnsPtrOutputWithContext(context.Context) VirtualMachineInitializationDnsPtrOutput
}

type virtualMachineInitializationDnsPtrType VirtualMachineInitializationDnsArgs

func VirtualMachineInitializationDnsPtr(v *VirtualMachineInitializationDnsArgs) VirtualMachineInitializationDnsPtrInput {
	return (*virtualMachineInitializationDnsPtrType)(v)
}

func (*virtualMachineInitializationDnsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineInitializationDns)(nil)).Elem()
}

func (i *virtualMachineInitializationDnsPtrType) ToVirtualMachineInitializationDnsPtrOutput() VirtualMachineInitializationDnsPtrOutput {
	return i.ToVirtualMachineInitializationDnsPtrOutputWithContext(context.Background())
}

func (i *virtualMachineInitializationDnsPtrType) ToVirtualMachineInitializationDnsPtrOutputWithContext(ctx context.Context) VirtualMachineInitializationDnsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineInitializationDnsPtrOutput)
}

func (i *virtualMachineInitializationDnsPtrType) ToOutput(ctx context.Context) pulumix.Output[*VirtualMachineInitializationDns] {
	return pulumix.Output[*VirtualMachineInitializationDns]{
		OutputState: i.ToVirtualMachineInitializationDnsPtrOutputWithContext(ctx).OutputState,
	}
}

type VirtualMachineInitializationDnsOutput struct{ *pulumi.OutputState }

func (VirtualMachineInitializationDnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineInitializationDns)(nil)).Elem()
}

func (o VirtualMachineInitializationDnsOutput) ToVirtualMachineInitializationDnsOutput() VirtualMachineInitializationDnsOutput {
	return o
}

func (o VirtualMachineInitializationDnsOutput) ToVirtualMachineInitializationDnsOutputWithContext(ctx context.Context) VirtualMachineInitializationDnsOutput {
	return o
}

func (o VirtualMachineInitializationDnsOutput) ToVirtualMachineInitializationDnsPtrOutput() VirtualMachineInitializationDnsPtrOutput {
	return o.ToVirtualMachineInitializationDnsPtrOutputWithContext(context.Background())
}

func (o VirtualMachineInitializationDnsOutput) ToVirtualMachineInitializationDnsPtrOutputWithContext(ctx context.Context) VirtualMachineInitializationDnsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineInitializationDns) *VirtualMachineInitializationDns {
		return &v
	}).(VirtualMachineInitializationDnsPtrOutput)
}

func (o VirtualMachineInitializationDnsOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineInitializationDns] {
	return pulumix.Output[VirtualMachineInitializationDns]{
		OutputState: o.OutputState,
	}
}

// The DNS search domain.
func (o VirtualMachineInitializationDnsOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineInitializationDns) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// The DNS server.
func (o VirtualMachineInitializationDnsOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineInitializationDns) *string { return v.Server }).(pulumi.StringPtrOutput)
}

type VirtualMachineInitializationDnsPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineInitializationDnsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineInitializationDns)(nil)).Elem()
}

func (o VirtualMachineInitializationDnsPtrOutput) ToVirtualMachineInitializationDnsPtrOutput() VirtualMachineInitializationDnsPtrOutput {
	return o
}

func (o VirtualMachineInitializationDnsPtrOutput) ToVirtualMachineInitializationDnsPtrOutputWithContext(ctx context.Context) VirtualMachineInitializationDnsPtrOutput {
	return o
}

func (o VirtualMachineInitializationDnsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*VirtualMachineInitializationDns] {
	return pulumix.Output[*VirtualMachineInitializationDns]{
		OutputState: o.OutputState,
	}
}

func (o VirtualMachineInitializationDnsPtrOutput) Elem() VirtualMachineInitializationDnsOutput {
	return o.ApplyT(func(v *VirtualMachineInitializationDns) VirtualMachineInitializationDns {
		if v != nil {
			return *v
		}
		var ret VirtualMachineInitializationDns
		return ret
	}).(VirtualMachineInitializationDnsOutput)
}

// The DNS search domain.
func (o VirtualMachineInitializationDnsPtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInitializationDns) *string {
		if v == nil {
			return nil
		}
		return v.Domain
	}).(pulumi.StringPtrOutput)
}

// The DNS server.
func (o VirtualMachineInitializationDnsPtrOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInitializationDns) *string {
		if v == nil {
			return nil
		}
		return v.Server
	}).(pulumi.StringPtrOutput)
}

type VirtualMachineInitializationIpConfig struct {
	// The IPv4 configuration.
	Ipv4 *VirtualMachineInitializationIpConfigIpv4 `pulumi:"ipv4"`
	// The IPv4 configuration.
	Ipv6 *VirtualMachineInitializationIpConfigIpv6 `pulumi:"ipv6"`
}

// VirtualMachineInitializationIpConfigInput is an input type that accepts VirtualMachineInitializationIpConfigArgs and VirtualMachineInitializationIpConfigOutput values.
// You can construct a concrete instance of `VirtualMachineInitializationIpConfigInput` via:
//
//	VirtualMachineInitializationIpConfigArgs{...}
type VirtualMachineInitializationIpConfigInput interface {
	pulumi.Input

	ToVirtualMachineInitializationIpConfigOutput() VirtualMachineInitializationIpConfigOutput
	ToVirtualMachineInitializationIpConfigOutputWithContext(context.Context) VirtualMachineInitializationIpConfigOutput
}

type VirtualMachineInitializationIpConfigArgs struct {
	// The IPv4 configuration.
	Ipv4 VirtualMachineInitializationIpConfigIpv4PtrInput `pulumi:"ipv4"`
	// The IPv4 configuration.
	Ipv6 VirtualMachineInitializationIpConfigIpv6PtrInput `pulumi:"ipv6"`
}

func (VirtualMachineInitializationIpConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineInitializationIpConfig)(nil)).Elem()
}

func (i VirtualMachineInitializationIpConfigArgs) ToVirtualMachineInitializationIpConfigOutput() VirtualMachineInitializationIpConfigOutput {
	return i.ToVirtualMachineInitializationIpConfigOutputWithContext(context.Background())
}

func (i VirtualMachineInitializationIpConfigArgs) ToVirtualMachineInitializationIpConfigOutputWithContext(ctx context.Context) VirtualMachineInitializationIpConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineInitializationIpConfigOutput)
}

func (i VirtualMachineInitializationIpConfigArgs) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineInitializationIpConfig] {
	return pulumix.Output[VirtualMachineInitializationIpConfig]{
		OutputState: i.ToVirtualMachineInitializationIpConfigOutputWithContext(ctx).OutputState,
	}
}

// VirtualMachineInitializationIpConfigArrayInput is an input type that accepts VirtualMachineInitializationIpConfigArray and VirtualMachineInitializationIpConfigArrayOutput values.
// You can construct a concrete instance of `VirtualMachineInitializationIpConfigArrayInput` via:
//
//	VirtualMachineInitializationIpConfigArray{ VirtualMachineInitializationIpConfigArgs{...} }
type VirtualMachineInitializationIpConfigArrayInput interface {
	pulumi.Input

	ToVirtualMachineInitializationIpConfigArrayOutput() VirtualMachineInitializationIpConfigArrayOutput
	ToVirtualMachineInitializationIpConfigArrayOutputWithContext(context.Context) VirtualMachineInitializationIpConfigArrayOutput
}

type VirtualMachineInitializationIpConfigArray []VirtualMachineInitializationIpConfigInput

func (VirtualMachineInitializationIpConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineInitializationIpConfig)(nil)).Elem()
}

func (i VirtualMachineInitializationIpConfigArray) ToVirtualMachineInitializationIpConfigArrayOutput() VirtualMachineInitializationIpConfigArrayOutput {
	return i.ToVirtualMachineInitializationIpConfigArrayOutputWithContext(context.Background())
}

func (i VirtualMachineInitializationIpConfigArray) ToVirtualMachineInitializationIpConfigArrayOutputWithContext(ctx context.Context) VirtualMachineInitializationIpConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineInitializationIpConfigArrayOutput)
}

func (i VirtualMachineInitializationIpConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]VirtualMachineInitializationIpConfig] {
	return pulumix.Output[[]VirtualMachineInitializationIpConfig]{
		OutputState: i.ToVirtualMachineInitializationIpConfigArrayOutputWithContext(ctx).OutputState,
	}
}

type VirtualMachineInitializationIpConfigOutput struct{ *pulumi.OutputState }

func (VirtualMachineInitializationIpConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineInitializationIpConfig)(nil)).Elem()
}

func (o VirtualMachineInitializationIpConfigOutput) ToVirtualMachineInitializationIpConfigOutput() VirtualMachineInitializationIpConfigOutput {
	return o
}

func (o VirtualMachineInitializationIpConfigOutput) ToVirtualMachineInitializationIpConfigOutputWithContext(ctx context.Context) VirtualMachineInitializationIpConfigOutput {
	return o
}

func (o VirtualMachineInitializationIpConfigOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineInitializationIpConfig] {
	return pulumix.Output[VirtualMachineInitializationIpConfig]{
		OutputState: o.OutputState,
	}
}

// The IPv4 configuration.
func (o VirtualMachineInitializationIpConfigOutput) Ipv4() VirtualMachineInitializationIpConfigIpv4PtrOutput {
	return o.ApplyT(func(v VirtualMachineInitializationIpConfig) *VirtualMachineInitializationIpConfigIpv4 { return v.Ipv4 }).(VirtualMachineInitializationIpConfigIpv4PtrOutput)
}

// The IPv4 configuration.
func (o VirtualMachineInitializationIpConfigOutput) Ipv6() VirtualMachineInitializationIpConfigIpv6PtrOutput {
	return o.ApplyT(func(v VirtualMachineInitializationIpConfig) *VirtualMachineInitializationIpConfigIpv6 { return v.Ipv6 }).(VirtualMachineInitializationIpConfigIpv6PtrOutput)
}

type VirtualMachineInitializationIpConfigArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineInitializationIpConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineInitializationIpConfig)(nil)).Elem()
}

func (o VirtualMachineInitializationIpConfigArrayOutput) ToVirtualMachineInitializationIpConfigArrayOutput() VirtualMachineInitializationIpConfigArrayOutput {
	return o
}

func (o VirtualMachineInitializationIpConfigArrayOutput) ToVirtualMachineInitializationIpConfigArrayOutputWithContext(ctx context.Context) VirtualMachineInitializationIpConfigArrayOutput {
	return o
}

func (o VirtualMachineInitializationIpConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]VirtualMachineInitializationIpConfig] {
	return pulumix.Output[[]VirtualMachineInitializationIpConfig]{
		OutputState: o.OutputState,
	}
}

func (o VirtualMachineInitializationIpConfigArrayOutput) Index(i pulumi.IntInput) VirtualMachineInitializationIpConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineInitializationIpConfig {
		return vs[0].([]VirtualMachineInitializationIpConfig)[vs[1].(int)]
	}).(VirtualMachineInitializationIpConfigOutput)
}

type VirtualMachineInitializationIpConfigIpv4 struct {
	// The IPv6 address (use `dhcp` for
	// autodiscovery).
	Address *string `pulumi:"address"`
	// The IPv6 gateway (must be omitted
	// when `dhcp` is used as the address).
	Gateway *string `pulumi:"gateway"`
}

// VirtualMachineInitializationIpConfigIpv4Input is an input type that accepts VirtualMachineInitializationIpConfigIpv4Args and VirtualMachineInitializationIpConfigIpv4Output values.
// You can construct a concrete instance of `VirtualMachineInitializationIpConfigIpv4Input` via:
//
//	VirtualMachineInitializationIpConfigIpv4Args{...}
type VirtualMachineInitializationIpConfigIpv4Input interface {
	pulumi.Input

	ToVirtualMachineInitializationIpConfigIpv4Output() VirtualMachineInitializationIpConfigIpv4Output
	ToVirtualMachineInitializationIpConfigIpv4OutputWithContext(context.Context) VirtualMachineInitializationIpConfigIpv4Output
}

type VirtualMachineInitializationIpConfigIpv4Args struct {
	// The IPv6 address (use `dhcp` for
	// autodiscovery).
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The IPv6 gateway (must be omitted
	// when `dhcp` is used as the address).
	Gateway pulumi.StringPtrInput `pulumi:"gateway"`
}

func (VirtualMachineInitializationIpConfigIpv4Args) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineInitializationIpConfigIpv4)(nil)).Elem()
}

func (i VirtualMachineInitializationIpConfigIpv4Args) ToVirtualMachineInitializationIpConfigIpv4Output() VirtualMachineInitializationIpConfigIpv4Output {
	return i.ToVirtualMachineInitializationIpConfigIpv4OutputWithContext(context.Background())
}

func (i VirtualMachineInitializationIpConfigIpv4Args) ToVirtualMachineInitializationIpConfigIpv4OutputWithContext(ctx context.Context) VirtualMachineInitializationIpConfigIpv4Output {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineInitializationIpConfigIpv4Output)
}

func (i VirtualMachineInitializationIpConfigIpv4Args) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineInitializationIpConfigIpv4] {
	return pulumix.Output[VirtualMachineInitializationIpConfigIpv4]{
		OutputState: i.ToVirtualMachineInitializationIpConfigIpv4OutputWithContext(ctx).OutputState,
	}
}

func (i VirtualMachineInitializationIpConfigIpv4Args) ToVirtualMachineInitializationIpConfigIpv4PtrOutput() VirtualMachineInitializationIpConfigIpv4PtrOutput {
	return i.ToVirtualMachineInitializationIpConfigIpv4PtrOutputWithContext(context.Background())
}

func (i VirtualMachineInitializationIpConfigIpv4Args) ToVirtualMachineInitializationIpConfigIpv4PtrOutputWithContext(ctx context.Context) VirtualMachineInitializationIpConfigIpv4PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineInitializationIpConfigIpv4Output).ToVirtualMachineInitializationIpConfigIpv4PtrOutputWithContext(ctx)
}

// VirtualMachineInitializationIpConfigIpv4PtrInput is an input type that accepts VirtualMachineInitializationIpConfigIpv4Args, VirtualMachineInitializationIpConfigIpv4Ptr and VirtualMachineInitializationIpConfigIpv4PtrOutput values.
// You can construct a concrete instance of `VirtualMachineInitializationIpConfigIpv4PtrInput` via:
//
//	        VirtualMachineInitializationIpConfigIpv4Args{...}
//
//	or:
//
//	        nil
type VirtualMachineInitializationIpConfigIpv4PtrInput interface {
	pulumi.Input

	ToVirtualMachineInitializationIpConfigIpv4PtrOutput() VirtualMachineInitializationIpConfigIpv4PtrOutput
	ToVirtualMachineInitializationIpConfigIpv4PtrOutputWithContext(context.Context) VirtualMachineInitializationIpConfigIpv4PtrOutput
}

type virtualMachineInitializationIpConfigIpv4PtrType VirtualMachineInitializationIpConfigIpv4Args

func VirtualMachineInitializationIpConfigIpv4Ptr(v *VirtualMachineInitializationIpConfigIpv4Args) VirtualMachineInitializationIpConfigIpv4PtrInput {
	return (*virtualMachineInitializationIpConfigIpv4PtrType)(v)
}

func (*virtualMachineInitializationIpConfigIpv4PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineInitializationIpConfigIpv4)(nil)).Elem()
}

func (i *virtualMachineInitializationIpConfigIpv4PtrType) ToVirtualMachineInitializationIpConfigIpv4PtrOutput() VirtualMachineInitializationIpConfigIpv4PtrOutput {
	return i.ToVirtualMachineInitializationIpConfigIpv4PtrOutputWithContext(context.Background())
}

func (i *virtualMachineInitializationIpConfigIpv4PtrType) ToVirtualMachineInitializationIpConfigIpv4PtrOutputWithContext(ctx context.Context) VirtualMachineInitializationIpConfigIpv4PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineInitializationIpConfigIpv4PtrOutput)
}

func (i *virtualMachineInitializationIpConfigIpv4PtrType) ToOutput(ctx context.Context) pulumix.Output[*VirtualMachineInitializationIpConfigIpv4] {
	return pulumix.Output[*VirtualMachineInitializationIpConfigIpv4]{
		OutputState: i.ToVirtualMachineInitializationIpConfigIpv4PtrOutputWithContext(ctx).OutputState,
	}
}

type VirtualMachineInitializationIpConfigIpv4Output struct{ *pulumi.OutputState }

func (VirtualMachineInitializationIpConfigIpv4Output) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineInitializationIpConfigIpv4)(nil)).Elem()
}

func (o VirtualMachineInitializationIpConfigIpv4Output) ToVirtualMachineInitializationIpConfigIpv4Output() VirtualMachineInitializationIpConfigIpv4Output {
	return o
}

func (o VirtualMachineInitializationIpConfigIpv4Output) ToVirtualMachineInitializationIpConfigIpv4OutputWithContext(ctx context.Context) VirtualMachineInitializationIpConfigIpv4Output {
	return o
}

func (o VirtualMachineInitializationIpConfigIpv4Output) ToVirtualMachineInitializationIpConfigIpv4PtrOutput() VirtualMachineInitializationIpConfigIpv4PtrOutput {
	return o.ToVirtualMachineInitializationIpConfigIpv4PtrOutputWithContext(context.Background())
}

func (o VirtualMachineInitializationIpConfigIpv4Output) ToVirtualMachineInitializationIpConfigIpv4PtrOutputWithContext(ctx context.Context) VirtualMachineInitializationIpConfigIpv4PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineInitializationIpConfigIpv4) *VirtualMachineInitializationIpConfigIpv4 {
		return &v
	}).(VirtualMachineInitializationIpConfigIpv4PtrOutput)
}

func (o VirtualMachineInitializationIpConfigIpv4Output) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineInitializationIpConfigIpv4] {
	return pulumix.Output[VirtualMachineInitializationIpConfigIpv4]{
		OutputState: o.OutputState,
	}
}

// The IPv6 address (use `dhcp` for
// autodiscovery).
func (o VirtualMachineInitializationIpConfigIpv4Output) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineInitializationIpConfigIpv4) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The IPv6 gateway (must be omitted
// when `dhcp` is used as the address).
func (o VirtualMachineInitializationIpConfigIpv4Output) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineInitializationIpConfigIpv4) *string { return v.Gateway }).(pulumi.StringPtrOutput)
}

type VirtualMachineInitializationIpConfigIpv4PtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineInitializationIpConfigIpv4PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineInitializationIpConfigIpv4)(nil)).Elem()
}

func (o VirtualMachineInitializationIpConfigIpv4PtrOutput) ToVirtualMachineInitializationIpConfigIpv4PtrOutput() VirtualMachineInitializationIpConfigIpv4PtrOutput {
	return o
}

func (o VirtualMachineInitializationIpConfigIpv4PtrOutput) ToVirtualMachineInitializationIpConfigIpv4PtrOutputWithContext(ctx context.Context) VirtualMachineInitializationIpConfigIpv4PtrOutput {
	return o
}

func (o VirtualMachineInitializationIpConfigIpv4PtrOutput) ToOutput(ctx context.Context) pulumix.Output[*VirtualMachineInitializationIpConfigIpv4] {
	return pulumix.Output[*VirtualMachineInitializationIpConfigIpv4]{
		OutputState: o.OutputState,
	}
}

func (o VirtualMachineInitializationIpConfigIpv4PtrOutput) Elem() VirtualMachineInitializationIpConfigIpv4Output {
	return o.ApplyT(func(v *VirtualMachineInitializationIpConfigIpv4) VirtualMachineInitializationIpConfigIpv4 {
		if v != nil {
			return *v
		}
		var ret VirtualMachineInitializationIpConfigIpv4
		return ret
	}).(VirtualMachineInitializationIpConfigIpv4Output)
}

// The IPv6 address (use `dhcp` for
// autodiscovery).
func (o VirtualMachineInitializationIpConfigIpv4PtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInitializationIpConfigIpv4) *string {
		if v == nil {
			return nil
		}
		return v.Address
	}).(pulumi.StringPtrOutput)
}

// The IPv6 gateway (must be omitted
// when `dhcp` is used as the address).
func (o VirtualMachineInitializationIpConfigIpv4PtrOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInitializationIpConfigIpv4) *string {
		if v == nil {
			return nil
		}
		return v.Gateway
	}).(pulumi.StringPtrOutput)
}

type VirtualMachineInitializationIpConfigIpv6 struct {
	// The IPv6 address (use `dhcp` for
	// autodiscovery).
	Address *string `pulumi:"address"`
	// The IPv6 gateway (must be omitted
	// when `dhcp` is used as the address).
	Gateway *string `pulumi:"gateway"`
}

// VirtualMachineInitializationIpConfigIpv6Input is an input type that accepts VirtualMachineInitializationIpConfigIpv6Args and VirtualMachineInitializationIpConfigIpv6Output values.
// You can construct a concrete instance of `VirtualMachineInitializationIpConfigIpv6Input` via:
//
//	VirtualMachineInitializationIpConfigIpv6Args{...}
type VirtualMachineInitializationIpConfigIpv6Input interface {
	pulumi.Input

	ToVirtualMachineInitializationIpConfigIpv6Output() VirtualMachineInitializationIpConfigIpv6Output
	ToVirtualMachineInitializationIpConfigIpv6OutputWithContext(context.Context) VirtualMachineInitializationIpConfigIpv6Output
}

type VirtualMachineInitializationIpConfigIpv6Args struct {
	// The IPv6 address (use `dhcp` for
	// autodiscovery).
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The IPv6 gateway (must be omitted
	// when `dhcp` is used as the address).
	Gateway pulumi.StringPtrInput `pulumi:"gateway"`
}

func (VirtualMachineInitializationIpConfigIpv6Args) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineInitializationIpConfigIpv6)(nil)).Elem()
}

func (i VirtualMachineInitializationIpConfigIpv6Args) ToVirtualMachineInitializationIpConfigIpv6Output() VirtualMachineInitializationIpConfigIpv6Output {
	return i.ToVirtualMachineInitializationIpConfigIpv6OutputWithContext(context.Background())
}

func (i VirtualMachineInitializationIpConfigIpv6Args) ToVirtualMachineInitializationIpConfigIpv6OutputWithContext(ctx context.Context) VirtualMachineInitializationIpConfigIpv6Output {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineInitializationIpConfigIpv6Output)
}

func (i VirtualMachineInitializationIpConfigIpv6Args) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineInitializationIpConfigIpv6] {
	return pulumix.Output[VirtualMachineInitializationIpConfigIpv6]{
		OutputState: i.ToVirtualMachineInitializationIpConfigIpv6OutputWithContext(ctx).OutputState,
	}
}

func (i VirtualMachineInitializationIpConfigIpv6Args) ToVirtualMachineInitializationIpConfigIpv6PtrOutput() VirtualMachineInitializationIpConfigIpv6PtrOutput {
	return i.ToVirtualMachineInitializationIpConfigIpv6PtrOutputWithContext(context.Background())
}

func (i VirtualMachineInitializationIpConfigIpv6Args) ToVirtualMachineInitializationIpConfigIpv6PtrOutputWithContext(ctx context.Context) VirtualMachineInitializationIpConfigIpv6PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineInitializationIpConfigIpv6Output).ToVirtualMachineInitializationIpConfigIpv6PtrOutputWithContext(ctx)
}

// VirtualMachineInitializationIpConfigIpv6PtrInput is an input type that accepts VirtualMachineInitializationIpConfigIpv6Args, VirtualMachineInitializationIpConfigIpv6Ptr and VirtualMachineInitializationIpConfigIpv6PtrOutput values.
// You can construct a concrete instance of `VirtualMachineInitializationIpConfigIpv6PtrInput` via:
//
//	        VirtualMachineInitializationIpConfigIpv6Args{...}
//
//	or:
//
//	        nil
type VirtualMachineInitializationIpConfigIpv6PtrInput interface {
	pulumi.Input

	ToVirtualMachineInitializationIpConfigIpv6PtrOutput() VirtualMachineInitializationIpConfigIpv6PtrOutput
	ToVirtualMachineInitializationIpConfigIpv6PtrOutputWithContext(context.Context) VirtualMachineInitializationIpConfigIpv6PtrOutput
}

type virtualMachineInitializationIpConfigIpv6PtrType VirtualMachineInitializationIpConfigIpv6Args

func VirtualMachineInitializationIpConfigIpv6Ptr(v *VirtualMachineInitializationIpConfigIpv6Args) VirtualMachineInitializationIpConfigIpv6PtrInput {
	return (*virtualMachineInitializationIpConfigIpv6PtrType)(v)
}

func (*virtualMachineInitializationIpConfigIpv6PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineInitializationIpConfigIpv6)(nil)).Elem()
}

func (i *virtualMachineInitializationIpConfigIpv6PtrType) ToVirtualMachineInitializationIpConfigIpv6PtrOutput() VirtualMachineInitializationIpConfigIpv6PtrOutput {
	return i.ToVirtualMachineInitializationIpConfigIpv6PtrOutputWithContext(context.Background())
}

func (i *virtualMachineInitializationIpConfigIpv6PtrType) ToVirtualMachineInitializationIpConfigIpv6PtrOutputWithContext(ctx context.Context) VirtualMachineInitializationIpConfigIpv6PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineInitializationIpConfigIpv6PtrOutput)
}

func (i *virtualMachineInitializationIpConfigIpv6PtrType) ToOutput(ctx context.Context) pulumix.Output[*VirtualMachineInitializationIpConfigIpv6] {
	return pulumix.Output[*VirtualMachineInitializationIpConfigIpv6]{
		OutputState: i.ToVirtualMachineInitializationIpConfigIpv6PtrOutputWithContext(ctx).OutputState,
	}
}

type VirtualMachineInitializationIpConfigIpv6Output struct{ *pulumi.OutputState }

func (VirtualMachineInitializationIpConfigIpv6Output) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineInitializationIpConfigIpv6)(nil)).Elem()
}

func (o VirtualMachineInitializationIpConfigIpv6Output) ToVirtualMachineInitializationIpConfigIpv6Output() VirtualMachineInitializationIpConfigIpv6Output {
	return o
}

func (o VirtualMachineInitializationIpConfigIpv6Output) ToVirtualMachineInitializationIpConfigIpv6OutputWithContext(ctx context.Context) VirtualMachineInitializationIpConfigIpv6Output {
	return o
}

func (o VirtualMachineInitializationIpConfigIpv6Output) ToVirtualMachineInitializationIpConfigIpv6PtrOutput() VirtualMachineInitializationIpConfigIpv6PtrOutput {
	return o.ToVirtualMachineInitializationIpConfigIpv6PtrOutputWithContext(context.Background())
}

func (o VirtualMachineInitializationIpConfigIpv6Output) ToVirtualMachineInitializationIpConfigIpv6PtrOutputWithContext(ctx context.Context) VirtualMachineInitializationIpConfigIpv6PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineInitializationIpConfigIpv6) *VirtualMachineInitializationIpConfigIpv6 {
		return &v
	}).(VirtualMachineInitializationIpConfigIpv6PtrOutput)
}

func (o VirtualMachineInitializationIpConfigIpv6Output) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineInitializationIpConfigIpv6] {
	return pulumix.Output[VirtualMachineInitializationIpConfigIpv6]{
		OutputState: o.OutputState,
	}
}

// The IPv6 address (use `dhcp` for
// autodiscovery).
func (o VirtualMachineInitializationIpConfigIpv6Output) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineInitializationIpConfigIpv6) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The IPv6 gateway (must be omitted
// when `dhcp` is used as the address).
func (o VirtualMachineInitializationIpConfigIpv6Output) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineInitializationIpConfigIpv6) *string { return v.Gateway }).(pulumi.StringPtrOutput)
}

type VirtualMachineInitializationIpConfigIpv6PtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineInitializationIpConfigIpv6PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineInitializationIpConfigIpv6)(nil)).Elem()
}

func (o VirtualMachineInitializationIpConfigIpv6PtrOutput) ToVirtualMachineInitializationIpConfigIpv6PtrOutput() VirtualMachineInitializationIpConfigIpv6PtrOutput {
	return o
}

func (o VirtualMachineInitializationIpConfigIpv6PtrOutput) ToVirtualMachineInitializationIpConfigIpv6PtrOutputWithContext(ctx context.Context) VirtualMachineInitializationIpConfigIpv6PtrOutput {
	return o
}

func (o VirtualMachineInitializationIpConfigIpv6PtrOutput) ToOutput(ctx context.Context) pulumix.Output[*VirtualMachineInitializationIpConfigIpv6] {
	return pulumix.Output[*VirtualMachineInitializationIpConfigIpv6]{
		OutputState: o.OutputState,
	}
}

func (o VirtualMachineInitializationIpConfigIpv6PtrOutput) Elem() VirtualMachineInitializationIpConfigIpv6Output {
	return o.ApplyT(func(v *VirtualMachineInitializationIpConfigIpv6) VirtualMachineInitializationIpConfigIpv6 {
		if v != nil {
			return *v
		}
		var ret VirtualMachineInitializationIpConfigIpv6
		return ret
	}).(VirtualMachineInitializationIpConfigIpv6Output)
}

// The IPv6 address (use `dhcp` for
// autodiscovery).
func (o VirtualMachineInitializationIpConfigIpv6PtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInitializationIpConfigIpv6) *string {
		if v == nil {
			return nil
		}
		return v.Address
	}).(pulumi.StringPtrOutput)
}

// The IPv6 gateway (must be omitted
// when `dhcp` is used as the address).
func (o VirtualMachineInitializationIpConfigIpv6PtrOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInitializationIpConfigIpv6) *string {
		if v == nil {
			return nil
		}
		return v.Gateway
	}).(pulumi.StringPtrOutput)
}

type VirtualMachineInitializationUserAccount struct {
	// The SSH keys.
	Keys []string `pulumi:"keys"`
	// The SSH password.
	Password *string `pulumi:"password"`
	// The SSH username.
	Username *string `pulumi:"username"`
}

// VirtualMachineInitializationUserAccountInput is an input type that accepts VirtualMachineInitializationUserAccountArgs and VirtualMachineInitializationUserAccountOutput values.
// You can construct a concrete instance of `VirtualMachineInitializationUserAccountInput` via:
//
//	VirtualMachineInitializationUserAccountArgs{...}
type VirtualMachineInitializationUserAccountInput interface {
	pulumi.Input

	ToVirtualMachineInitializationUserAccountOutput() VirtualMachineInitializationUserAccountOutput
	ToVirtualMachineInitializationUserAccountOutputWithContext(context.Context) VirtualMachineInitializationUserAccountOutput
}

type VirtualMachineInitializationUserAccountArgs struct {
	// The SSH keys.
	Keys pulumi.StringArrayInput `pulumi:"keys"`
	// The SSH password.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The SSH username.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (VirtualMachineInitializationUserAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineInitializationUserAccount)(nil)).Elem()
}

func (i VirtualMachineInitializationUserAccountArgs) ToVirtualMachineInitializationUserAccountOutput() VirtualMachineInitializationUserAccountOutput {
	return i.ToVirtualMachineInitializationUserAccountOutputWithContext(context.Background())
}

func (i VirtualMachineInitializationUserAccountArgs) ToVirtualMachineInitializationUserAccountOutputWithContext(ctx context.Context) VirtualMachineInitializationUserAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineInitializationUserAccountOutput)
}

func (i VirtualMachineInitializationUserAccountArgs) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineInitializationUserAccount] {
	return pulumix.Output[VirtualMachineInitializationUserAccount]{
		OutputState: i.ToVirtualMachineInitializationUserAccountOutputWithContext(ctx).OutputState,
	}
}

func (i VirtualMachineInitializationUserAccountArgs) ToVirtualMachineInitializationUserAccountPtrOutput() VirtualMachineInitializationUserAccountPtrOutput {
	return i.ToVirtualMachineInitializationUserAccountPtrOutputWithContext(context.Background())
}

func (i VirtualMachineInitializationUserAccountArgs) ToVirtualMachineInitializationUserAccountPtrOutputWithContext(ctx context.Context) VirtualMachineInitializationUserAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineInitializationUserAccountOutput).ToVirtualMachineInitializationUserAccountPtrOutputWithContext(ctx)
}

// VirtualMachineInitializationUserAccountPtrInput is an input type that accepts VirtualMachineInitializationUserAccountArgs, VirtualMachineInitializationUserAccountPtr and VirtualMachineInitializationUserAccountPtrOutput values.
// You can construct a concrete instance of `VirtualMachineInitializationUserAccountPtrInput` via:
//
//	        VirtualMachineInitializationUserAccountArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineInitializationUserAccountPtrInput interface {
	pulumi.Input

	ToVirtualMachineInitializationUserAccountPtrOutput() VirtualMachineInitializationUserAccountPtrOutput
	ToVirtualMachineInitializationUserAccountPtrOutputWithContext(context.Context) VirtualMachineInitializationUserAccountPtrOutput
}

type virtualMachineInitializationUserAccountPtrType VirtualMachineInitializationUserAccountArgs

func VirtualMachineInitializationUserAccountPtr(v *VirtualMachineInitializationUserAccountArgs) VirtualMachineInitializationUserAccountPtrInput {
	return (*virtualMachineInitializationUserAccountPtrType)(v)
}

func (*virtualMachineInitializationUserAccountPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineInitializationUserAccount)(nil)).Elem()
}

func (i *virtualMachineInitializationUserAccountPtrType) ToVirtualMachineInitializationUserAccountPtrOutput() VirtualMachineInitializationUserAccountPtrOutput {
	return i.ToVirtualMachineInitializationUserAccountPtrOutputWithContext(context.Background())
}

func (i *virtualMachineInitializationUserAccountPtrType) ToVirtualMachineInitializationUserAccountPtrOutputWithContext(ctx context.Context) VirtualMachineInitializationUserAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineInitializationUserAccountPtrOutput)
}

func (i *virtualMachineInitializationUserAccountPtrType) ToOutput(ctx context.Context) pulumix.Output[*VirtualMachineInitializationUserAccount] {
	return pulumix.Output[*VirtualMachineInitializationUserAccount]{
		OutputState: i.ToVirtualMachineInitializationUserAccountPtrOutputWithContext(ctx).OutputState,
	}
}

type VirtualMachineInitializationUserAccountOutput struct{ *pulumi.OutputState }

func (VirtualMachineInitializationUserAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineInitializationUserAccount)(nil)).Elem()
}

func (o VirtualMachineInitializationUserAccountOutput) ToVirtualMachineInitializationUserAccountOutput() VirtualMachineInitializationUserAccountOutput {
	return o
}

func (o VirtualMachineInitializationUserAccountOutput) ToVirtualMachineInitializationUserAccountOutputWithContext(ctx context.Context) VirtualMachineInitializationUserAccountOutput {
	return o
}

func (o VirtualMachineInitializationUserAccountOutput) ToVirtualMachineInitializationUserAccountPtrOutput() VirtualMachineInitializationUserAccountPtrOutput {
	return o.ToVirtualMachineInitializationUserAccountPtrOutputWithContext(context.Background())
}

func (o VirtualMachineInitializationUserAccountOutput) ToVirtualMachineInitializationUserAccountPtrOutputWithContext(ctx context.Context) VirtualMachineInitializationUserAccountPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineInitializationUserAccount) *VirtualMachineInitializationUserAccount {
		return &v
	}).(VirtualMachineInitializationUserAccountPtrOutput)
}

func (o VirtualMachineInitializationUserAccountOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineInitializationUserAccount] {
	return pulumix.Output[VirtualMachineInitializationUserAccount]{
		OutputState: o.OutputState,
	}
}

// The SSH keys.
func (o VirtualMachineInitializationUserAccountOutput) Keys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualMachineInitializationUserAccount) []string { return v.Keys }).(pulumi.StringArrayOutput)
}

// The SSH password.
func (o VirtualMachineInitializationUserAccountOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineInitializationUserAccount) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The SSH username.
func (o VirtualMachineInitializationUserAccountOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineInitializationUserAccount) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type VirtualMachineInitializationUserAccountPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineInitializationUserAccountPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineInitializationUserAccount)(nil)).Elem()
}

func (o VirtualMachineInitializationUserAccountPtrOutput) ToVirtualMachineInitializationUserAccountPtrOutput() VirtualMachineInitializationUserAccountPtrOutput {
	return o
}

func (o VirtualMachineInitializationUserAccountPtrOutput) ToVirtualMachineInitializationUserAccountPtrOutputWithContext(ctx context.Context) VirtualMachineInitializationUserAccountPtrOutput {
	return o
}

func (o VirtualMachineInitializationUserAccountPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*VirtualMachineInitializationUserAccount] {
	return pulumix.Output[*VirtualMachineInitializationUserAccount]{
		OutputState: o.OutputState,
	}
}

func (o VirtualMachineInitializationUserAccountPtrOutput) Elem() VirtualMachineInitializationUserAccountOutput {
	return o.ApplyT(func(v *VirtualMachineInitializationUserAccount) VirtualMachineInitializationUserAccount {
		if v != nil {
			return *v
		}
		var ret VirtualMachineInitializationUserAccount
		return ret
	}).(VirtualMachineInitializationUserAccountOutput)
}

// The SSH keys.
func (o VirtualMachineInitializationUserAccountPtrOutput) Keys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualMachineInitializationUserAccount) []string {
		if v == nil {
			return nil
		}
		return v.Keys
	}).(pulumi.StringArrayOutput)
}

// The SSH password.
func (o VirtualMachineInitializationUserAccountPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInitializationUserAccount) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The SSH username.
func (o VirtualMachineInitializationUserAccountPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInitializationUserAccount) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type VirtualMachineMemory struct {
	// The dedicated memory in megabytes (defaults
	// to `512`).
	Dedicated *int `pulumi:"dedicated"`
	// The floating memory in megabytes (defaults
	// to `0`).
	Floating *int `pulumi:"floating"`
	// The shared memory in megabytes (defaults to `0`).
	Shared *int `pulumi:"shared"`
}

// VirtualMachineMemoryInput is an input type that accepts VirtualMachineMemoryArgs and VirtualMachineMemoryOutput values.
// You can construct a concrete instance of `VirtualMachineMemoryInput` via:
//
//	VirtualMachineMemoryArgs{...}
type VirtualMachineMemoryInput interface {
	pulumi.Input

	ToVirtualMachineMemoryOutput() VirtualMachineMemoryOutput
	ToVirtualMachineMemoryOutputWithContext(context.Context) VirtualMachineMemoryOutput
}

type VirtualMachineMemoryArgs struct {
	// The dedicated memory in megabytes (defaults
	// to `512`).
	Dedicated pulumi.IntPtrInput `pulumi:"dedicated"`
	// The floating memory in megabytes (defaults
	// to `0`).
	Floating pulumi.IntPtrInput `pulumi:"floating"`
	// The shared memory in megabytes (defaults to `0`).
	Shared pulumi.IntPtrInput `pulumi:"shared"`
}

func (VirtualMachineMemoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineMemory)(nil)).Elem()
}

func (i VirtualMachineMemoryArgs) ToVirtualMachineMemoryOutput() VirtualMachineMemoryOutput {
	return i.ToVirtualMachineMemoryOutputWithContext(context.Background())
}

func (i VirtualMachineMemoryArgs) ToVirtualMachineMemoryOutputWithContext(ctx context.Context) VirtualMachineMemoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineMemoryOutput)
}

func (i VirtualMachineMemoryArgs) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineMemory] {
	return pulumix.Output[VirtualMachineMemory]{
		OutputState: i.ToVirtualMachineMemoryOutputWithContext(ctx).OutputState,
	}
}

func (i VirtualMachineMemoryArgs) ToVirtualMachineMemoryPtrOutput() VirtualMachineMemoryPtrOutput {
	return i.ToVirtualMachineMemoryPtrOutputWithContext(context.Background())
}

func (i VirtualMachineMemoryArgs) ToVirtualMachineMemoryPtrOutputWithContext(ctx context.Context) VirtualMachineMemoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineMemoryOutput).ToVirtualMachineMemoryPtrOutputWithContext(ctx)
}

// VirtualMachineMemoryPtrInput is an input type that accepts VirtualMachineMemoryArgs, VirtualMachineMemoryPtr and VirtualMachineMemoryPtrOutput values.
// You can construct a concrete instance of `VirtualMachineMemoryPtrInput` via:
//
//	        VirtualMachineMemoryArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineMemoryPtrInput interface {
	pulumi.Input

	ToVirtualMachineMemoryPtrOutput() VirtualMachineMemoryPtrOutput
	ToVirtualMachineMemoryPtrOutputWithContext(context.Context) VirtualMachineMemoryPtrOutput
}

type virtualMachineMemoryPtrType VirtualMachineMemoryArgs

func VirtualMachineMemoryPtr(v *VirtualMachineMemoryArgs) VirtualMachineMemoryPtrInput {
	return (*virtualMachineMemoryPtrType)(v)
}

func (*virtualMachineMemoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineMemory)(nil)).Elem()
}

func (i *virtualMachineMemoryPtrType) ToVirtualMachineMemoryPtrOutput() VirtualMachineMemoryPtrOutput {
	return i.ToVirtualMachineMemoryPtrOutputWithContext(context.Background())
}

func (i *virtualMachineMemoryPtrType) ToVirtualMachineMemoryPtrOutputWithContext(ctx context.Context) VirtualMachineMemoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineMemoryPtrOutput)
}

func (i *virtualMachineMemoryPtrType) ToOutput(ctx context.Context) pulumix.Output[*VirtualMachineMemory] {
	return pulumix.Output[*VirtualMachineMemory]{
		OutputState: i.ToVirtualMachineMemoryPtrOutputWithContext(ctx).OutputState,
	}
}

type VirtualMachineMemoryOutput struct{ *pulumi.OutputState }

func (VirtualMachineMemoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineMemory)(nil)).Elem()
}

func (o VirtualMachineMemoryOutput) ToVirtualMachineMemoryOutput() VirtualMachineMemoryOutput {
	return o
}

func (o VirtualMachineMemoryOutput) ToVirtualMachineMemoryOutputWithContext(ctx context.Context) VirtualMachineMemoryOutput {
	return o
}

func (o VirtualMachineMemoryOutput) ToVirtualMachineMemoryPtrOutput() VirtualMachineMemoryPtrOutput {
	return o.ToVirtualMachineMemoryPtrOutputWithContext(context.Background())
}

func (o VirtualMachineMemoryOutput) ToVirtualMachineMemoryPtrOutputWithContext(ctx context.Context) VirtualMachineMemoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineMemory) *VirtualMachineMemory {
		return &v
	}).(VirtualMachineMemoryPtrOutput)
}

func (o VirtualMachineMemoryOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineMemory] {
	return pulumix.Output[VirtualMachineMemory]{
		OutputState: o.OutputState,
	}
}

// The dedicated memory in megabytes (defaults
// to `512`).
func (o VirtualMachineMemoryOutput) Dedicated() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineMemory) *int { return v.Dedicated }).(pulumi.IntPtrOutput)
}

// The floating memory in megabytes (defaults
// to `0`).
func (o VirtualMachineMemoryOutput) Floating() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineMemory) *int { return v.Floating }).(pulumi.IntPtrOutput)
}

// The shared memory in megabytes (defaults to `0`).
func (o VirtualMachineMemoryOutput) Shared() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineMemory) *int { return v.Shared }).(pulumi.IntPtrOutput)
}

type VirtualMachineMemoryPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineMemoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineMemory)(nil)).Elem()
}

func (o VirtualMachineMemoryPtrOutput) ToVirtualMachineMemoryPtrOutput() VirtualMachineMemoryPtrOutput {
	return o
}

func (o VirtualMachineMemoryPtrOutput) ToVirtualMachineMemoryPtrOutputWithContext(ctx context.Context) VirtualMachineMemoryPtrOutput {
	return o
}

func (o VirtualMachineMemoryPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*VirtualMachineMemory] {
	return pulumix.Output[*VirtualMachineMemory]{
		OutputState: o.OutputState,
	}
}

func (o VirtualMachineMemoryPtrOutput) Elem() VirtualMachineMemoryOutput {
	return o.ApplyT(func(v *VirtualMachineMemory) VirtualMachineMemory {
		if v != nil {
			return *v
		}
		var ret VirtualMachineMemory
		return ret
	}).(VirtualMachineMemoryOutput)
}

// The dedicated memory in megabytes (defaults
// to `512`).
func (o VirtualMachineMemoryPtrOutput) Dedicated() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineMemory) *int {
		if v == nil {
			return nil
		}
		return v.Dedicated
	}).(pulumi.IntPtrOutput)
}

// The floating memory in megabytes (defaults
// to `0`).
func (o VirtualMachineMemoryPtrOutput) Floating() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineMemory) *int {
		if v == nil {
			return nil
		}
		return v.Floating
	}).(pulumi.IntPtrOutput)
}

// The shared memory in megabytes (defaults to `0`).
func (o VirtualMachineMemoryPtrOutput) Shared() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineMemory) *int {
		if v == nil {
			return nil
		}
		return v.Shared
	}).(pulumi.IntPtrOutput)
}

type VirtualMachineNetworkDevice struct {
	// The name of the network bridge (defaults
	// to `vmbr0`).
	Bridge *string `pulumi:"bridge"`
	// Whether to enable the VGA device (defaults
	// to `true`).
	Enabled *bool `pulumi:"enabled"`
	// Whether this interface's firewall rules should be
	// used (defaults to `false`).
	Firewall *bool `pulumi:"firewall"`
	// The MAC address.
	MacAddress *string `pulumi:"macAddress"`
	// The network device model (defaults to `virtio`).
	Model *string `pulumi:"model"`
	// Force MTU, for VirtIO only. Set to 1 to use the bridge
	// MTU. Cannot be larger than the bridge MTU.
	Mtu *int `pulumi:"mtu"`
	// The number of queues for VirtIO (1..64).
	Queues *int `pulumi:"queues"`
	// The rate limit in megabytes per second.
	RateLimit *float64 `pulumi:"rateLimit"`
	// The VLAN identifier.
	VlanId *int `pulumi:"vlanId"`
}

// VirtualMachineNetworkDeviceInput is an input type that accepts VirtualMachineNetworkDeviceArgs and VirtualMachineNetworkDeviceOutput values.
// You can construct a concrete instance of `VirtualMachineNetworkDeviceInput` via:
//
//	VirtualMachineNetworkDeviceArgs{...}
type VirtualMachineNetworkDeviceInput interface {
	pulumi.Input

	ToVirtualMachineNetworkDeviceOutput() VirtualMachineNetworkDeviceOutput
	ToVirtualMachineNetworkDeviceOutputWithContext(context.Context) VirtualMachineNetworkDeviceOutput
}

type VirtualMachineNetworkDeviceArgs struct {
	// The name of the network bridge (defaults
	// to `vmbr0`).
	Bridge pulumi.StringPtrInput `pulumi:"bridge"`
	// Whether to enable the VGA device (defaults
	// to `true`).
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Whether this interface's firewall rules should be
	// used (defaults to `false`).
	Firewall pulumi.BoolPtrInput `pulumi:"firewall"`
	// The MAC address.
	MacAddress pulumi.StringPtrInput `pulumi:"macAddress"`
	// The network device model (defaults to `virtio`).
	Model pulumi.StringPtrInput `pulumi:"model"`
	// Force MTU, for VirtIO only. Set to 1 to use the bridge
	// MTU. Cannot be larger than the bridge MTU.
	Mtu pulumi.IntPtrInput `pulumi:"mtu"`
	// The number of queues for VirtIO (1..64).
	Queues pulumi.IntPtrInput `pulumi:"queues"`
	// The rate limit in megabytes per second.
	RateLimit pulumi.Float64PtrInput `pulumi:"rateLimit"`
	// The VLAN identifier.
	VlanId pulumi.IntPtrInput `pulumi:"vlanId"`
}

func (VirtualMachineNetworkDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineNetworkDevice)(nil)).Elem()
}

func (i VirtualMachineNetworkDeviceArgs) ToVirtualMachineNetworkDeviceOutput() VirtualMachineNetworkDeviceOutput {
	return i.ToVirtualMachineNetworkDeviceOutputWithContext(context.Background())
}

func (i VirtualMachineNetworkDeviceArgs) ToVirtualMachineNetworkDeviceOutputWithContext(ctx context.Context) VirtualMachineNetworkDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineNetworkDeviceOutput)
}

func (i VirtualMachineNetworkDeviceArgs) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineNetworkDevice] {
	return pulumix.Output[VirtualMachineNetworkDevice]{
		OutputState: i.ToVirtualMachineNetworkDeviceOutputWithContext(ctx).OutputState,
	}
}

// VirtualMachineNetworkDeviceArrayInput is an input type that accepts VirtualMachineNetworkDeviceArray and VirtualMachineNetworkDeviceArrayOutput values.
// You can construct a concrete instance of `VirtualMachineNetworkDeviceArrayInput` via:
//
//	VirtualMachineNetworkDeviceArray{ VirtualMachineNetworkDeviceArgs{...} }
type VirtualMachineNetworkDeviceArrayInput interface {
	pulumi.Input

	ToVirtualMachineNetworkDeviceArrayOutput() VirtualMachineNetworkDeviceArrayOutput
	ToVirtualMachineNetworkDeviceArrayOutputWithContext(context.Context) VirtualMachineNetworkDeviceArrayOutput
}

type VirtualMachineNetworkDeviceArray []VirtualMachineNetworkDeviceInput

func (VirtualMachineNetworkDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineNetworkDevice)(nil)).Elem()
}

func (i VirtualMachineNetworkDeviceArray) ToVirtualMachineNetworkDeviceArrayOutput() VirtualMachineNetworkDeviceArrayOutput {
	return i.ToVirtualMachineNetworkDeviceArrayOutputWithContext(context.Background())
}

func (i VirtualMachineNetworkDeviceArray) ToVirtualMachineNetworkDeviceArrayOutputWithContext(ctx context.Context) VirtualMachineNetworkDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineNetworkDeviceArrayOutput)
}

func (i VirtualMachineNetworkDeviceArray) ToOutput(ctx context.Context) pulumix.Output[[]VirtualMachineNetworkDevice] {
	return pulumix.Output[[]VirtualMachineNetworkDevice]{
		OutputState: i.ToVirtualMachineNetworkDeviceArrayOutputWithContext(ctx).OutputState,
	}
}

type VirtualMachineNetworkDeviceOutput struct{ *pulumi.OutputState }

func (VirtualMachineNetworkDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineNetworkDevice)(nil)).Elem()
}

func (o VirtualMachineNetworkDeviceOutput) ToVirtualMachineNetworkDeviceOutput() VirtualMachineNetworkDeviceOutput {
	return o
}

func (o VirtualMachineNetworkDeviceOutput) ToVirtualMachineNetworkDeviceOutputWithContext(ctx context.Context) VirtualMachineNetworkDeviceOutput {
	return o
}

func (o VirtualMachineNetworkDeviceOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineNetworkDevice] {
	return pulumix.Output[VirtualMachineNetworkDevice]{
		OutputState: o.OutputState,
	}
}

// The name of the network bridge (defaults
// to `vmbr0`).
func (o VirtualMachineNetworkDeviceOutput) Bridge() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkDevice) *string { return v.Bridge }).(pulumi.StringPtrOutput)
}

// Whether to enable the VGA device (defaults
// to `true`).
func (o VirtualMachineNetworkDeviceOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkDevice) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Whether this interface's firewall rules should be
// used (defaults to `false`).
func (o VirtualMachineNetworkDeviceOutput) Firewall() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkDevice) *bool { return v.Firewall }).(pulumi.BoolPtrOutput)
}

// The MAC address.
func (o VirtualMachineNetworkDeviceOutput) MacAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkDevice) *string { return v.MacAddress }).(pulumi.StringPtrOutput)
}

// The network device model (defaults to `virtio`).
func (o VirtualMachineNetworkDeviceOutput) Model() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkDevice) *string { return v.Model }).(pulumi.StringPtrOutput)
}

// Force MTU, for VirtIO only. Set to 1 to use the bridge
// MTU. Cannot be larger than the bridge MTU.
func (o VirtualMachineNetworkDeviceOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkDevice) *int { return v.Mtu }).(pulumi.IntPtrOutput)
}

// The number of queues for VirtIO (1..64).
func (o VirtualMachineNetworkDeviceOutput) Queues() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkDevice) *int { return v.Queues }).(pulumi.IntPtrOutput)
}

// The rate limit in megabytes per second.
func (o VirtualMachineNetworkDeviceOutput) RateLimit() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkDevice) *float64 { return v.RateLimit }).(pulumi.Float64PtrOutput)
}

// The VLAN identifier.
func (o VirtualMachineNetworkDeviceOutput) VlanId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkDevice) *int { return v.VlanId }).(pulumi.IntPtrOutput)
}

type VirtualMachineNetworkDeviceArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineNetworkDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineNetworkDevice)(nil)).Elem()
}

func (o VirtualMachineNetworkDeviceArrayOutput) ToVirtualMachineNetworkDeviceArrayOutput() VirtualMachineNetworkDeviceArrayOutput {
	return o
}

func (o VirtualMachineNetworkDeviceArrayOutput) ToVirtualMachineNetworkDeviceArrayOutputWithContext(ctx context.Context) VirtualMachineNetworkDeviceArrayOutput {
	return o
}

func (o VirtualMachineNetworkDeviceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]VirtualMachineNetworkDevice] {
	return pulumix.Output[[]VirtualMachineNetworkDevice]{
		OutputState: o.OutputState,
	}
}

func (o VirtualMachineNetworkDeviceArrayOutput) Index(i pulumi.IntInput) VirtualMachineNetworkDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineNetworkDevice {
		return vs[0].([]VirtualMachineNetworkDevice)[vs[1].(int)]
	}).(VirtualMachineNetworkDeviceOutput)
}

type VirtualMachineOperatingSystem struct {
	// The VGA type (defaults to `std`).
	Type *string `pulumi:"type"`
}

// VirtualMachineOperatingSystemInput is an input type that accepts VirtualMachineOperatingSystemArgs and VirtualMachineOperatingSystemOutput values.
// You can construct a concrete instance of `VirtualMachineOperatingSystemInput` via:
//
//	VirtualMachineOperatingSystemArgs{...}
type VirtualMachineOperatingSystemInput interface {
	pulumi.Input

	ToVirtualMachineOperatingSystemOutput() VirtualMachineOperatingSystemOutput
	ToVirtualMachineOperatingSystemOutputWithContext(context.Context) VirtualMachineOperatingSystemOutput
}

type VirtualMachineOperatingSystemArgs struct {
	// The VGA type (defaults to `std`).
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (VirtualMachineOperatingSystemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineOperatingSystem)(nil)).Elem()
}

func (i VirtualMachineOperatingSystemArgs) ToVirtualMachineOperatingSystemOutput() VirtualMachineOperatingSystemOutput {
	return i.ToVirtualMachineOperatingSystemOutputWithContext(context.Background())
}

func (i VirtualMachineOperatingSystemArgs) ToVirtualMachineOperatingSystemOutputWithContext(ctx context.Context) VirtualMachineOperatingSystemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineOperatingSystemOutput)
}

func (i VirtualMachineOperatingSystemArgs) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineOperatingSystem] {
	return pulumix.Output[VirtualMachineOperatingSystem]{
		OutputState: i.ToVirtualMachineOperatingSystemOutputWithContext(ctx).OutputState,
	}
}

func (i VirtualMachineOperatingSystemArgs) ToVirtualMachineOperatingSystemPtrOutput() VirtualMachineOperatingSystemPtrOutput {
	return i.ToVirtualMachineOperatingSystemPtrOutputWithContext(context.Background())
}

func (i VirtualMachineOperatingSystemArgs) ToVirtualMachineOperatingSystemPtrOutputWithContext(ctx context.Context) VirtualMachineOperatingSystemPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineOperatingSystemOutput).ToVirtualMachineOperatingSystemPtrOutputWithContext(ctx)
}

// VirtualMachineOperatingSystemPtrInput is an input type that accepts VirtualMachineOperatingSystemArgs, VirtualMachineOperatingSystemPtr and VirtualMachineOperatingSystemPtrOutput values.
// You can construct a concrete instance of `VirtualMachineOperatingSystemPtrInput` via:
//
//	        VirtualMachineOperatingSystemArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineOperatingSystemPtrInput interface {
	pulumi.Input

	ToVirtualMachineOperatingSystemPtrOutput() VirtualMachineOperatingSystemPtrOutput
	ToVirtualMachineOperatingSystemPtrOutputWithContext(context.Context) VirtualMachineOperatingSystemPtrOutput
}

type virtualMachineOperatingSystemPtrType VirtualMachineOperatingSystemArgs

func VirtualMachineOperatingSystemPtr(v *VirtualMachineOperatingSystemArgs) VirtualMachineOperatingSystemPtrInput {
	return (*virtualMachineOperatingSystemPtrType)(v)
}

func (*virtualMachineOperatingSystemPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineOperatingSystem)(nil)).Elem()
}

func (i *virtualMachineOperatingSystemPtrType) ToVirtualMachineOperatingSystemPtrOutput() VirtualMachineOperatingSystemPtrOutput {
	return i.ToVirtualMachineOperatingSystemPtrOutputWithContext(context.Background())
}

func (i *virtualMachineOperatingSystemPtrType) ToVirtualMachineOperatingSystemPtrOutputWithContext(ctx context.Context) VirtualMachineOperatingSystemPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineOperatingSystemPtrOutput)
}

func (i *virtualMachineOperatingSystemPtrType) ToOutput(ctx context.Context) pulumix.Output[*VirtualMachineOperatingSystem] {
	return pulumix.Output[*VirtualMachineOperatingSystem]{
		OutputState: i.ToVirtualMachineOperatingSystemPtrOutputWithContext(ctx).OutputState,
	}
}

type VirtualMachineOperatingSystemOutput struct{ *pulumi.OutputState }

func (VirtualMachineOperatingSystemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineOperatingSystem)(nil)).Elem()
}

func (o VirtualMachineOperatingSystemOutput) ToVirtualMachineOperatingSystemOutput() VirtualMachineOperatingSystemOutput {
	return o
}

func (o VirtualMachineOperatingSystemOutput) ToVirtualMachineOperatingSystemOutputWithContext(ctx context.Context) VirtualMachineOperatingSystemOutput {
	return o
}

func (o VirtualMachineOperatingSystemOutput) ToVirtualMachineOperatingSystemPtrOutput() VirtualMachineOperatingSystemPtrOutput {
	return o.ToVirtualMachineOperatingSystemPtrOutputWithContext(context.Background())
}

func (o VirtualMachineOperatingSystemOutput) ToVirtualMachineOperatingSystemPtrOutputWithContext(ctx context.Context) VirtualMachineOperatingSystemPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineOperatingSystem) *VirtualMachineOperatingSystem {
		return &v
	}).(VirtualMachineOperatingSystemPtrOutput)
}

func (o VirtualMachineOperatingSystemOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineOperatingSystem] {
	return pulumix.Output[VirtualMachineOperatingSystem]{
		OutputState: o.OutputState,
	}
}

// The VGA type (defaults to `std`).
func (o VirtualMachineOperatingSystemOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineOperatingSystem) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type VirtualMachineOperatingSystemPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineOperatingSystemPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineOperatingSystem)(nil)).Elem()
}

func (o VirtualMachineOperatingSystemPtrOutput) ToVirtualMachineOperatingSystemPtrOutput() VirtualMachineOperatingSystemPtrOutput {
	return o
}

func (o VirtualMachineOperatingSystemPtrOutput) ToVirtualMachineOperatingSystemPtrOutputWithContext(ctx context.Context) VirtualMachineOperatingSystemPtrOutput {
	return o
}

func (o VirtualMachineOperatingSystemPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*VirtualMachineOperatingSystem] {
	return pulumix.Output[*VirtualMachineOperatingSystem]{
		OutputState: o.OutputState,
	}
}

func (o VirtualMachineOperatingSystemPtrOutput) Elem() VirtualMachineOperatingSystemOutput {
	return o.ApplyT(func(v *VirtualMachineOperatingSystem) VirtualMachineOperatingSystem {
		if v != nil {
			return *v
		}
		var ret VirtualMachineOperatingSystem
		return ret
	}).(VirtualMachineOperatingSystemOutput)
}

// The VGA type (defaults to `std`).
func (o VirtualMachineOperatingSystemPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineOperatingSystem) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type VirtualMachineSerialDevice struct {
	// The device (defaults to `socket`).
	// - `/dev/*` - A host serial device.
	Device *string `pulumi:"device"`
}

// VirtualMachineSerialDeviceInput is an input type that accepts VirtualMachineSerialDeviceArgs and VirtualMachineSerialDeviceOutput values.
// You can construct a concrete instance of `VirtualMachineSerialDeviceInput` via:
//
//	VirtualMachineSerialDeviceArgs{...}
type VirtualMachineSerialDeviceInput interface {
	pulumi.Input

	ToVirtualMachineSerialDeviceOutput() VirtualMachineSerialDeviceOutput
	ToVirtualMachineSerialDeviceOutputWithContext(context.Context) VirtualMachineSerialDeviceOutput
}

type VirtualMachineSerialDeviceArgs struct {
	// The device (defaults to `socket`).
	// - `/dev/*` - A host serial device.
	Device pulumi.StringPtrInput `pulumi:"device"`
}

func (VirtualMachineSerialDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineSerialDevice)(nil)).Elem()
}

func (i VirtualMachineSerialDeviceArgs) ToVirtualMachineSerialDeviceOutput() VirtualMachineSerialDeviceOutput {
	return i.ToVirtualMachineSerialDeviceOutputWithContext(context.Background())
}

func (i VirtualMachineSerialDeviceArgs) ToVirtualMachineSerialDeviceOutputWithContext(ctx context.Context) VirtualMachineSerialDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineSerialDeviceOutput)
}

func (i VirtualMachineSerialDeviceArgs) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineSerialDevice] {
	return pulumix.Output[VirtualMachineSerialDevice]{
		OutputState: i.ToVirtualMachineSerialDeviceOutputWithContext(ctx).OutputState,
	}
}

// VirtualMachineSerialDeviceArrayInput is an input type that accepts VirtualMachineSerialDeviceArray and VirtualMachineSerialDeviceArrayOutput values.
// You can construct a concrete instance of `VirtualMachineSerialDeviceArrayInput` via:
//
//	VirtualMachineSerialDeviceArray{ VirtualMachineSerialDeviceArgs{...} }
type VirtualMachineSerialDeviceArrayInput interface {
	pulumi.Input

	ToVirtualMachineSerialDeviceArrayOutput() VirtualMachineSerialDeviceArrayOutput
	ToVirtualMachineSerialDeviceArrayOutputWithContext(context.Context) VirtualMachineSerialDeviceArrayOutput
}

type VirtualMachineSerialDeviceArray []VirtualMachineSerialDeviceInput

func (VirtualMachineSerialDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineSerialDevice)(nil)).Elem()
}

func (i VirtualMachineSerialDeviceArray) ToVirtualMachineSerialDeviceArrayOutput() VirtualMachineSerialDeviceArrayOutput {
	return i.ToVirtualMachineSerialDeviceArrayOutputWithContext(context.Background())
}

func (i VirtualMachineSerialDeviceArray) ToVirtualMachineSerialDeviceArrayOutputWithContext(ctx context.Context) VirtualMachineSerialDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineSerialDeviceArrayOutput)
}

func (i VirtualMachineSerialDeviceArray) ToOutput(ctx context.Context) pulumix.Output[[]VirtualMachineSerialDevice] {
	return pulumix.Output[[]VirtualMachineSerialDevice]{
		OutputState: i.ToVirtualMachineSerialDeviceArrayOutputWithContext(ctx).OutputState,
	}
}

type VirtualMachineSerialDeviceOutput struct{ *pulumi.OutputState }

func (VirtualMachineSerialDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineSerialDevice)(nil)).Elem()
}

func (o VirtualMachineSerialDeviceOutput) ToVirtualMachineSerialDeviceOutput() VirtualMachineSerialDeviceOutput {
	return o
}

func (o VirtualMachineSerialDeviceOutput) ToVirtualMachineSerialDeviceOutputWithContext(ctx context.Context) VirtualMachineSerialDeviceOutput {
	return o
}

func (o VirtualMachineSerialDeviceOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineSerialDevice] {
	return pulumix.Output[VirtualMachineSerialDevice]{
		OutputState: o.OutputState,
	}
}

// The device (defaults to `socket`).
// - `/dev/*` - A host serial device.
func (o VirtualMachineSerialDeviceOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineSerialDevice) *string { return v.Device }).(pulumi.StringPtrOutput)
}

type VirtualMachineSerialDeviceArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineSerialDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineSerialDevice)(nil)).Elem()
}

func (o VirtualMachineSerialDeviceArrayOutput) ToVirtualMachineSerialDeviceArrayOutput() VirtualMachineSerialDeviceArrayOutput {
	return o
}

func (o VirtualMachineSerialDeviceArrayOutput) ToVirtualMachineSerialDeviceArrayOutputWithContext(ctx context.Context) VirtualMachineSerialDeviceArrayOutput {
	return o
}

func (o VirtualMachineSerialDeviceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]VirtualMachineSerialDevice] {
	return pulumix.Output[[]VirtualMachineSerialDevice]{
		OutputState: o.OutputState,
	}
}

func (o VirtualMachineSerialDeviceArrayOutput) Index(i pulumi.IntInput) VirtualMachineSerialDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineSerialDevice {
		return vs[0].([]VirtualMachineSerialDevice)[vs[1].(int)]
	}).(VirtualMachineSerialDeviceOutput)
}

type VirtualMachineSmbios struct {
	// The family string.
	Family *string `pulumi:"family"`
	// The manufacturer.
	Manufacturer *string `pulumi:"manufacturer"`
	// The product ID.
	Product *string `pulumi:"product"`
	// The serial number.
	Serial *string `pulumi:"serial"`
	// The SKU number.
	Sku *string `pulumi:"sku"`
	// The UUID (defaults to randomly generated UUID).
	Uuid *string `pulumi:"uuid"`
	// The version.
	Version *string `pulumi:"version"`
}

// VirtualMachineSmbiosInput is an input type that accepts VirtualMachineSmbiosArgs and VirtualMachineSmbiosOutput values.
// You can construct a concrete instance of `VirtualMachineSmbiosInput` via:
//
//	VirtualMachineSmbiosArgs{...}
type VirtualMachineSmbiosInput interface {
	pulumi.Input

	ToVirtualMachineSmbiosOutput() VirtualMachineSmbiosOutput
	ToVirtualMachineSmbiosOutputWithContext(context.Context) VirtualMachineSmbiosOutput
}

type VirtualMachineSmbiosArgs struct {
	// The family string.
	Family pulumi.StringPtrInput `pulumi:"family"`
	// The manufacturer.
	Manufacturer pulumi.StringPtrInput `pulumi:"manufacturer"`
	// The product ID.
	Product pulumi.StringPtrInput `pulumi:"product"`
	// The serial number.
	Serial pulumi.StringPtrInput `pulumi:"serial"`
	// The SKU number.
	Sku pulumi.StringPtrInput `pulumi:"sku"`
	// The UUID (defaults to randomly generated UUID).
	Uuid pulumi.StringPtrInput `pulumi:"uuid"`
	// The version.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (VirtualMachineSmbiosArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineSmbios)(nil)).Elem()
}

func (i VirtualMachineSmbiosArgs) ToVirtualMachineSmbiosOutput() VirtualMachineSmbiosOutput {
	return i.ToVirtualMachineSmbiosOutputWithContext(context.Background())
}

func (i VirtualMachineSmbiosArgs) ToVirtualMachineSmbiosOutputWithContext(ctx context.Context) VirtualMachineSmbiosOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineSmbiosOutput)
}

func (i VirtualMachineSmbiosArgs) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineSmbios] {
	return pulumix.Output[VirtualMachineSmbios]{
		OutputState: i.ToVirtualMachineSmbiosOutputWithContext(ctx).OutputState,
	}
}

func (i VirtualMachineSmbiosArgs) ToVirtualMachineSmbiosPtrOutput() VirtualMachineSmbiosPtrOutput {
	return i.ToVirtualMachineSmbiosPtrOutputWithContext(context.Background())
}

func (i VirtualMachineSmbiosArgs) ToVirtualMachineSmbiosPtrOutputWithContext(ctx context.Context) VirtualMachineSmbiosPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineSmbiosOutput).ToVirtualMachineSmbiosPtrOutputWithContext(ctx)
}

// VirtualMachineSmbiosPtrInput is an input type that accepts VirtualMachineSmbiosArgs, VirtualMachineSmbiosPtr and VirtualMachineSmbiosPtrOutput values.
// You can construct a concrete instance of `VirtualMachineSmbiosPtrInput` via:
//
//	        VirtualMachineSmbiosArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineSmbiosPtrInput interface {
	pulumi.Input

	ToVirtualMachineSmbiosPtrOutput() VirtualMachineSmbiosPtrOutput
	ToVirtualMachineSmbiosPtrOutputWithContext(context.Context) VirtualMachineSmbiosPtrOutput
}

type virtualMachineSmbiosPtrType VirtualMachineSmbiosArgs

func VirtualMachineSmbiosPtr(v *VirtualMachineSmbiosArgs) VirtualMachineSmbiosPtrInput {
	return (*virtualMachineSmbiosPtrType)(v)
}

func (*virtualMachineSmbiosPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineSmbios)(nil)).Elem()
}

func (i *virtualMachineSmbiosPtrType) ToVirtualMachineSmbiosPtrOutput() VirtualMachineSmbiosPtrOutput {
	return i.ToVirtualMachineSmbiosPtrOutputWithContext(context.Background())
}

func (i *virtualMachineSmbiosPtrType) ToVirtualMachineSmbiosPtrOutputWithContext(ctx context.Context) VirtualMachineSmbiosPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineSmbiosPtrOutput)
}

func (i *virtualMachineSmbiosPtrType) ToOutput(ctx context.Context) pulumix.Output[*VirtualMachineSmbios] {
	return pulumix.Output[*VirtualMachineSmbios]{
		OutputState: i.ToVirtualMachineSmbiosPtrOutputWithContext(ctx).OutputState,
	}
}

type VirtualMachineSmbiosOutput struct{ *pulumi.OutputState }

func (VirtualMachineSmbiosOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineSmbios)(nil)).Elem()
}

func (o VirtualMachineSmbiosOutput) ToVirtualMachineSmbiosOutput() VirtualMachineSmbiosOutput {
	return o
}

func (o VirtualMachineSmbiosOutput) ToVirtualMachineSmbiosOutputWithContext(ctx context.Context) VirtualMachineSmbiosOutput {
	return o
}

func (o VirtualMachineSmbiosOutput) ToVirtualMachineSmbiosPtrOutput() VirtualMachineSmbiosPtrOutput {
	return o.ToVirtualMachineSmbiosPtrOutputWithContext(context.Background())
}

func (o VirtualMachineSmbiosOutput) ToVirtualMachineSmbiosPtrOutputWithContext(ctx context.Context) VirtualMachineSmbiosPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineSmbios) *VirtualMachineSmbios {
		return &v
	}).(VirtualMachineSmbiosPtrOutput)
}

func (o VirtualMachineSmbiosOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineSmbios] {
	return pulumix.Output[VirtualMachineSmbios]{
		OutputState: o.OutputState,
	}
}

// The family string.
func (o VirtualMachineSmbiosOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineSmbios) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The manufacturer.
func (o VirtualMachineSmbiosOutput) Manufacturer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineSmbios) *string { return v.Manufacturer }).(pulumi.StringPtrOutput)
}

// The product ID.
func (o VirtualMachineSmbiosOutput) Product() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineSmbios) *string { return v.Product }).(pulumi.StringPtrOutput)
}

// The serial number.
func (o VirtualMachineSmbiosOutput) Serial() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineSmbios) *string { return v.Serial }).(pulumi.StringPtrOutput)
}

// The SKU number.
func (o VirtualMachineSmbiosOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineSmbios) *string { return v.Sku }).(pulumi.StringPtrOutput)
}

// The UUID (defaults to randomly generated UUID).
func (o VirtualMachineSmbiosOutput) Uuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineSmbios) *string { return v.Uuid }).(pulumi.StringPtrOutput)
}

// The version.
func (o VirtualMachineSmbiosOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineSmbios) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type VirtualMachineSmbiosPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineSmbiosPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineSmbios)(nil)).Elem()
}

func (o VirtualMachineSmbiosPtrOutput) ToVirtualMachineSmbiosPtrOutput() VirtualMachineSmbiosPtrOutput {
	return o
}

func (o VirtualMachineSmbiosPtrOutput) ToVirtualMachineSmbiosPtrOutputWithContext(ctx context.Context) VirtualMachineSmbiosPtrOutput {
	return o
}

func (o VirtualMachineSmbiosPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*VirtualMachineSmbios] {
	return pulumix.Output[*VirtualMachineSmbios]{
		OutputState: o.OutputState,
	}
}

func (o VirtualMachineSmbiosPtrOutput) Elem() VirtualMachineSmbiosOutput {
	return o.ApplyT(func(v *VirtualMachineSmbios) VirtualMachineSmbios {
		if v != nil {
			return *v
		}
		var ret VirtualMachineSmbios
		return ret
	}).(VirtualMachineSmbiosOutput)
}

// The family string.
func (o VirtualMachineSmbiosPtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineSmbios) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The manufacturer.
func (o VirtualMachineSmbiosPtrOutput) Manufacturer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineSmbios) *string {
		if v == nil {
			return nil
		}
		return v.Manufacturer
	}).(pulumi.StringPtrOutput)
}

// The product ID.
func (o VirtualMachineSmbiosPtrOutput) Product() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineSmbios) *string {
		if v == nil {
			return nil
		}
		return v.Product
	}).(pulumi.StringPtrOutput)
}

// The serial number.
func (o VirtualMachineSmbiosPtrOutput) Serial() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineSmbios) *string {
		if v == nil {
			return nil
		}
		return v.Serial
	}).(pulumi.StringPtrOutput)
}

// The SKU number.
func (o VirtualMachineSmbiosPtrOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineSmbios) *string {
		if v == nil {
			return nil
		}
		return v.Sku
	}).(pulumi.StringPtrOutput)
}

// The UUID (defaults to randomly generated UUID).
func (o VirtualMachineSmbiosPtrOutput) Uuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineSmbios) *string {
		if v == nil {
			return nil
		}
		return v.Uuid
	}).(pulumi.StringPtrOutput)
}

// The version.
func (o VirtualMachineSmbiosPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineSmbios) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type VirtualMachineStartup struct {
	DownDelay *int `pulumi:"downDelay"`
	// A non-negative number defining the general startup
	// order.
	Order   *int `pulumi:"order"`
	UpDelay *int `pulumi:"upDelay"`
}

// VirtualMachineStartupInput is an input type that accepts VirtualMachineStartupArgs and VirtualMachineStartupOutput values.
// You can construct a concrete instance of `VirtualMachineStartupInput` via:
//
//	VirtualMachineStartupArgs{...}
type VirtualMachineStartupInput interface {
	pulumi.Input

	ToVirtualMachineStartupOutput() VirtualMachineStartupOutput
	ToVirtualMachineStartupOutputWithContext(context.Context) VirtualMachineStartupOutput
}

type VirtualMachineStartupArgs struct {
	DownDelay pulumi.IntPtrInput `pulumi:"downDelay"`
	// A non-negative number defining the general startup
	// order.
	Order   pulumi.IntPtrInput `pulumi:"order"`
	UpDelay pulumi.IntPtrInput `pulumi:"upDelay"`
}

func (VirtualMachineStartupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineStartup)(nil)).Elem()
}

func (i VirtualMachineStartupArgs) ToVirtualMachineStartupOutput() VirtualMachineStartupOutput {
	return i.ToVirtualMachineStartupOutputWithContext(context.Background())
}

func (i VirtualMachineStartupArgs) ToVirtualMachineStartupOutputWithContext(ctx context.Context) VirtualMachineStartupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineStartupOutput)
}

func (i VirtualMachineStartupArgs) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineStartup] {
	return pulumix.Output[VirtualMachineStartup]{
		OutputState: i.ToVirtualMachineStartupOutputWithContext(ctx).OutputState,
	}
}

func (i VirtualMachineStartupArgs) ToVirtualMachineStartupPtrOutput() VirtualMachineStartupPtrOutput {
	return i.ToVirtualMachineStartupPtrOutputWithContext(context.Background())
}

func (i VirtualMachineStartupArgs) ToVirtualMachineStartupPtrOutputWithContext(ctx context.Context) VirtualMachineStartupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineStartupOutput).ToVirtualMachineStartupPtrOutputWithContext(ctx)
}

// VirtualMachineStartupPtrInput is an input type that accepts VirtualMachineStartupArgs, VirtualMachineStartupPtr and VirtualMachineStartupPtrOutput values.
// You can construct a concrete instance of `VirtualMachineStartupPtrInput` via:
//
//	        VirtualMachineStartupArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineStartupPtrInput interface {
	pulumi.Input

	ToVirtualMachineStartupPtrOutput() VirtualMachineStartupPtrOutput
	ToVirtualMachineStartupPtrOutputWithContext(context.Context) VirtualMachineStartupPtrOutput
}

type virtualMachineStartupPtrType VirtualMachineStartupArgs

func VirtualMachineStartupPtr(v *VirtualMachineStartupArgs) VirtualMachineStartupPtrInput {
	return (*virtualMachineStartupPtrType)(v)
}

func (*virtualMachineStartupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineStartup)(nil)).Elem()
}

func (i *virtualMachineStartupPtrType) ToVirtualMachineStartupPtrOutput() VirtualMachineStartupPtrOutput {
	return i.ToVirtualMachineStartupPtrOutputWithContext(context.Background())
}

func (i *virtualMachineStartupPtrType) ToVirtualMachineStartupPtrOutputWithContext(ctx context.Context) VirtualMachineStartupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineStartupPtrOutput)
}

func (i *virtualMachineStartupPtrType) ToOutput(ctx context.Context) pulumix.Output[*VirtualMachineStartup] {
	return pulumix.Output[*VirtualMachineStartup]{
		OutputState: i.ToVirtualMachineStartupPtrOutputWithContext(ctx).OutputState,
	}
}

type VirtualMachineStartupOutput struct{ *pulumi.OutputState }

func (VirtualMachineStartupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineStartup)(nil)).Elem()
}

func (o VirtualMachineStartupOutput) ToVirtualMachineStartupOutput() VirtualMachineStartupOutput {
	return o
}

func (o VirtualMachineStartupOutput) ToVirtualMachineStartupOutputWithContext(ctx context.Context) VirtualMachineStartupOutput {
	return o
}

func (o VirtualMachineStartupOutput) ToVirtualMachineStartupPtrOutput() VirtualMachineStartupPtrOutput {
	return o.ToVirtualMachineStartupPtrOutputWithContext(context.Background())
}

func (o VirtualMachineStartupOutput) ToVirtualMachineStartupPtrOutputWithContext(ctx context.Context) VirtualMachineStartupPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineStartup) *VirtualMachineStartup {
		return &v
	}).(VirtualMachineStartupPtrOutput)
}

func (o VirtualMachineStartupOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineStartup] {
	return pulumix.Output[VirtualMachineStartup]{
		OutputState: o.OutputState,
	}
}

func (o VirtualMachineStartupOutput) DownDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineStartup) *int { return v.DownDelay }).(pulumi.IntPtrOutput)
}

// A non-negative number defining the general startup
// order.
func (o VirtualMachineStartupOutput) Order() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineStartup) *int { return v.Order }).(pulumi.IntPtrOutput)
}

func (o VirtualMachineStartupOutput) UpDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineStartup) *int { return v.UpDelay }).(pulumi.IntPtrOutput)
}

type VirtualMachineStartupPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineStartupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineStartup)(nil)).Elem()
}

func (o VirtualMachineStartupPtrOutput) ToVirtualMachineStartupPtrOutput() VirtualMachineStartupPtrOutput {
	return o
}

func (o VirtualMachineStartupPtrOutput) ToVirtualMachineStartupPtrOutputWithContext(ctx context.Context) VirtualMachineStartupPtrOutput {
	return o
}

func (o VirtualMachineStartupPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*VirtualMachineStartup] {
	return pulumix.Output[*VirtualMachineStartup]{
		OutputState: o.OutputState,
	}
}

func (o VirtualMachineStartupPtrOutput) Elem() VirtualMachineStartupOutput {
	return o.ApplyT(func(v *VirtualMachineStartup) VirtualMachineStartup {
		if v != nil {
			return *v
		}
		var ret VirtualMachineStartup
		return ret
	}).(VirtualMachineStartupOutput)
}

func (o VirtualMachineStartupPtrOutput) DownDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineStartup) *int {
		if v == nil {
			return nil
		}
		return v.DownDelay
	}).(pulumi.IntPtrOutput)
}

// A non-negative number defining the general startup
// order.
func (o VirtualMachineStartupPtrOutput) Order() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineStartup) *int {
		if v == nil {
			return nil
		}
		return v.Order
	}).(pulumi.IntPtrOutput)
}

func (o VirtualMachineStartupPtrOutput) UpDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineStartup) *int {
		if v == nil {
			return nil
		}
		return v.UpDelay
	}).(pulumi.IntPtrOutput)
}

type VirtualMachineVga struct {
	// Whether to enable the VGA device (defaults
	// to `true`).
	Enabled *bool `pulumi:"enabled"`
	// The VGA memory in megabytes (defaults to `16`).
	Memory *int `pulumi:"memory"`
	// The VGA type (defaults to `std`).
	Type *string `pulumi:"type"`
}

// VirtualMachineVgaInput is an input type that accepts VirtualMachineVgaArgs and VirtualMachineVgaOutput values.
// You can construct a concrete instance of `VirtualMachineVgaInput` via:
//
//	VirtualMachineVgaArgs{...}
type VirtualMachineVgaInput interface {
	pulumi.Input

	ToVirtualMachineVgaOutput() VirtualMachineVgaOutput
	ToVirtualMachineVgaOutputWithContext(context.Context) VirtualMachineVgaOutput
}

type VirtualMachineVgaArgs struct {
	// Whether to enable the VGA device (defaults
	// to `true`).
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The VGA memory in megabytes (defaults to `16`).
	Memory pulumi.IntPtrInput `pulumi:"memory"`
	// The VGA type (defaults to `std`).
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (VirtualMachineVgaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineVga)(nil)).Elem()
}

func (i VirtualMachineVgaArgs) ToVirtualMachineVgaOutput() VirtualMachineVgaOutput {
	return i.ToVirtualMachineVgaOutputWithContext(context.Background())
}

func (i VirtualMachineVgaArgs) ToVirtualMachineVgaOutputWithContext(ctx context.Context) VirtualMachineVgaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineVgaOutput)
}

func (i VirtualMachineVgaArgs) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineVga] {
	return pulumix.Output[VirtualMachineVga]{
		OutputState: i.ToVirtualMachineVgaOutputWithContext(ctx).OutputState,
	}
}

func (i VirtualMachineVgaArgs) ToVirtualMachineVgaPtrOutput() VirtualMachineVgaPtrOutput {
	return i.ToVirtualMachineVgaPtrOutputWithContext(context.Background())
}

func (i VirtualMachineVgaArgs) ToVirtualMachineVgaPtrOutputWithContext(ctx context.Context) VirtualMachineVgaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineVgaOutput).ToVirtualMachineVgaPtrOutputWithContext(ctx)
}

// VirtualMachineVgaPtrInput is an input type that accepts VirtualMachineVgaArgs, VirtualMachineVgaPtr and VirtualMachineVgaPtrOutput values.
// You can construct a concrete instance of `VirtualMachineVgaPtrInput` via:
//
//	        VirtualMachineVgaArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineVgaPtrInput interface {
	pulumi.Input

	ToVirtualMachineVgaPtrOutput() VirtualMachineVgaPtrOutput
	ToVirtualMachineVgaPtrOutputWithContext(context.Context) VirtualMachineVgaPtrOutput
}

type virtualMachineVgaPtrType VirtualMachineVgaArgs

func VirtualMachineVgaPtr(v *VirtualMachineVgaArgs) VirtualMachineVgaPtrInput {
	return (*virtualMachineVgaPtrType)(v)
}

func (*virtualMachineVgaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineVga)(nil)).Elem()
}

func (i *virtualMachineVgaPtrType) ToVirtualMachineVgaPtrOutput() VirtualMachineVgaPtrOutput {
	return i.ToVirtualMachineVgaPtrOutputWithContext(context.Background())
}

func (i *virtualMachineVgaPtrType) ToVirtualMachineVgaPtrOutputWithContext(ctx context.Context) VirtualMachineVgaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineVgaPtrOutput)
}

func (i *virtualMachineVgaPtrType) ToOutput(ctx context.Context) pulumix.Output[*VirtualMachineVga] {
	return pulumix.Output[*VirtualMachineVga]{
		OutputState: i.ToVirtualMachineVgaPtrOutputWithContext(ctx).OutputState,
	}
}

type VirtualMachineVgaOutput struct{ *pulumi.OutputState }

func (VirtualMachineVgaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineVga)(nil)).Elem()
}

func (o VirtualMachineVgaOutput) ToVirtualMachineVgaOutput() VirtualMachineVgaOutput {
	return o
}

func (o VirtualMachineVgaOutput) ToVirtualMachineVgaOutputWithContext(ctx context.Context) VirtualMachineVgaOutput {
	return o
}

func (o VirtualMachineVgaOutput) ToVirtualMachineVgaPtrOutput() VirtualMachineVgaPtrOutput {
	return o.ToVirtualMachineVgaPtrOutputWithContext(context.Background())
}

func (o VirtualMachineVgaOutput) ToVirtualMachineVgaPtrOutputWithContext(ctx context.Context) VirtualMachineVgaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineVga) *VirtualMachineVga {
		return &v
	}).(VirtualMachineVgaPtrOutput)
}

func (o VirtualMachineVgaOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineVga] {
	return pulumix.Output[VirtualMachineVga]{
		OutputState: o.OutputState,
	}
}

// Whether to enable the VGA device (defaults
// to `true`).
func (o VirtualMachineVgaOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineVga) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The VGA memory in megabytes (defaults to `16`).
func (o VirtualMachineVgaOutput) Memory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineVga) *int { return v.Memory }).(pulumi.IntPtrOutput)
}

// The VGA type (defaults to `std`).
func (o VirtualMachineVgaOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineVga) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type VirtualMachineVgaPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineVgaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineVga)(nil)).Elem()
}

func (o VirtualMachineVgaPtrOutput) ToVirtualMachineVgaPtrOutput() VirtualMachineVgaPtrOutput {
	return o
}

func (o VirtualMachineVgaPtrOutput) ToVirtualMachineVgaPtrOutputWithContext(ctx context.Context) VirtualMachineVgaPtrOutput {
	return o
}

func (o VirtualMachineVgaPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*VirtualMachineVga] {
	return pulumix.Output[*VirtualMachineVga]{
		OutputState: o.OutputState,
	}
}

func (o VirtualMachineVgaPtrOutput) Elem() VirtualMachineVgaOutput {
	return o.ApplyT(func(v *VirtualMachineVga) VirtualMachineVga {
		if v != nil {
			return *v
		}
		var ret VirtualMachineVga
		return ret
	}).(VirtualMachineVgaOutput)
}

// Whether to enable the VGA device (defaults
// to `true`).
func (o VirtualMachineVgaPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachineVga) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The VGA memory in megabytes (defaults to `16`).
func (o VirtualMachineVgaPtrOutput) Memory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineVga) *int {
		if v == nil {
			return nil
		}
		return v.Memory
	}).(pulumi.IntPtrOutput)
}

// The VGA type (defaults to `std`).
func (o VirtualMachineVgaPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineVga) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type GetVirtualMachinesVm struct {
	// The virtual machine name.
	Name string `pulumi:"name"`
	// The node name.
	NodeName string `pulumi:"nodeName"`
	// A list of tags to filter the VMs. The VM must have all
	// the tags to be included in the result.
	Tags []string `pulumi:"tags"`
	// The VM identifier.
	VmId int `pulumi:"vmId"`
}

// GetVirtualMachinesVmInput is an input type that accepts GetVirtualMachinesVmArgs and GetVirtualMachinesVmOutput values.
// You can construct a concrete instance of `GetVirtualMachinesVmInput` via:
//
//	GetVirtualMachinesVmArgs{...}
type GetVirtualMachinesVmInput interface {
	pulumi.Input

	ToGetVirtualMachinesVmOutput() GetVirtualMachinesVmOutput
	ToGetVirtualMachinesVmOutputWithContext(context.Context) GetVirtualMachinesVmOutput
}

type GetVirtualMachinesVmArgs struct {
	// The virtual machine name.
	Name pulumi.StringInput `pulumi:"name"`
	// The node name.
	NodeName pulumi.StringInput `pulumi:"nodeName"`
	// A list of tags to filter the VMs. The VM must have all
	// the tags to be included in the result.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// The VM identifier.
	VmId pulumi.IntInput `pulumi:"vmId"`
}

func (GetVirtualMachinesVmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualMachinesVm)(nil)).Elem()
}

func (i GetVirtualMachinesVmArgs) ToGetVirtualMachinesVmOutput() GetVirtualMachinesVmOutput {
	return i.ToGetVirtualMachinesVmOutputWithContext(context.Background())
}

func (i GetVirtualMachinesVmArgs) ToGetVirtualMachinesVmOutputWithContext(ctx context.Context) GetVirtualMachinesVmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualMachinesVmOutput)
}

func (i GetVirtualMachinesVmArgs) ToOutput(ctx context.Context) pulumix.Output[GetVirtualMachinesVm] {
	return pulumix.Output[GetVirtualMachinesVm]{
		OutputState: i.ToGetVirtualMachinesVmOutputWithContext(ctx).OutputState,
	}
}

// GetVirtualMachinesVmArrayInput is an input type that accepts GetVirtualMachinesVmArray and GetVirtualMachinesVmArrayOutput values.
// You can construct a concrete instance of `GetVirtualMachinesVmArrayInput` via:
//
//	GetVirtualMachinesVmArray{ GetVirtualMachinesVmArgs{...} }
type GetVirtualMachinesVmArrayInput interface {
	pulumi.Input

	ToGetVirtualMachinesVmArrayOutput() GetVirtualMachinesVmArrayOutput
	ToGetVirtualMachinesVmArrayOutputWithContext(context.Context) GetVirtualMachinesVmArrayOutput
}

type GetVirtualMachinesVmArray []GetVirtualMachinesVmInput

func (GetVirtualMachinesVmArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVirtualMachinesVm)(nil)).Elem()
}

func (i GetVirtualMachinesVmArray) ToGetVirtualMachinesVmArrayOutput() GetVirtualMachinesVmArrayOutput {
	return i.ToGetVirtualMachinesVmArrayOutputWithContext(context.Background())
}

func (i GetVirtualMachinesVmArray) ToGetVirtualMachinesVmArrayOutputWithContext(ctx context.Context) GetVirtualMachinesVmArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualMachinesVmArrayOutput)
}

func (i GetVirtualMachinesVmArray) ToOutput(ctx context.Context) pulumix.Output[[]GetVirtualMachinesVm] {
	return pulumix.Output[[]GetVirtualMachinesVm]{
		OutputState: i.ToGetVirtualMachinesVmArrayOutputWithContext(ctx).OutputState,
	}
}

type GetVirtualMachinesVmOutput struct{ *pulumi.OutputState }

func (GetVirtualMachinesVmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualMachinesVm)(nil)).Elem()
}

func (o GetVirtualMachinesVmOutput) ToGetVirtualMachinesVmOutput() GetVirtualMachinesVmOutput {
	return o
}

func (o GetVirtualMachinesVmOutput) ToGetVirtualMachinesVmOutputWithContext(ctx context.Context) GetVirtualMachinesVmOutput {
	return o
}

func (o GetVirtualMachinesVmOutput) ToOutput(ctx context.Context) pulumix.Output[GetVirtualMachinesVm] {
	return pulumix.Output[GetVirtualMachinesVm]{
		OutputState: o.OutputState,
	}
}

// The virtual machine name.
func (o GetVirtualMachinesVmOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetVirtualMachinesVm) string { return v.Name }).(pulumi.StringOutput)
}

// The node name.
func (o GetVirtualMachinesVmOutput) NodeName() pulumi.StringOutput {
	return o.ApplyT(func(v GetVirtualMachinesVm) string { return v.NodeName }).(pulumi.StringOutput)
}

// A list of tags to filter the VMs. The VM must have all
// the tags to be included in the result.
func (o GetVirtualMachinesVmOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetVirtualMachinesVm) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// The VM identifier.
func (o GetVirtualMachinesVmOutput) VmId() pulumi.IntOutput {
	return o.ApplyT(func(v GetVirtualMachinesVm) int { return v.VmId }).(pulumi.IntOutput)
}

type GetVirtualMachinesVmArrayOutput struct{ *pulumi.OutputState }

func (GetVirtualMachinesVmArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVirtualMachinesVm)(nil)).Elem()
}

func (o GetVirtualMachinesVmArrayOutput) ToGetVirtualMachinesVmArrayOutput() GetVirtualMachinesVmArrayOutput {
	return o
}

func (o GetVirtualMachinesVmArrayOutput) ToGetVirtualMachinesVmArrayOutputWithContext(ctx context.Context) GetVirtualMachinesVmArrayOutput {
	return o
}

func (o GetVirtualMachinesVmArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetVirtualMachinesVm] {
	return pulumix.Output[[]GetVirtualMachinesVm]{
		OutputState: o.OutputState,
	}
}

func (o GetVirtualMachinesVmArrayOutput) Index(i pulumi.IntInput) GetVirtualMachinesVmOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVirtualMachinesVm {
		return vs[0].([]GetVirtualMachinesVm)[vs[1].(int)]
	}).(GetVirtualMachinesVmOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineAgentInput)(nil)).Elem(), VirtualMachineAgentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineAgentPtrInput)(nil)).Elem(), VirtualMachineAgentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineAudioDeviceInput)(nil)).Elem(), VirtualMachineAudioDeviceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineAudioDevicePtrInput)(nil)).Elem(), VirtualMachineAudioDeviceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineCdromInput)(nil)).Elem(), VirtualMachineCdromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineCdromPtrInput)(nil)).Elem(), VirtualMachineCdromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineCloneInput)(nil)).Elem(), VirtualMachineCloneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineClonePtrInput)(nil)).Elem(), VirtualMachineCloneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineCpuInput)(nil)).Elem(), VirtualMachineCpuArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineCpuPtrInput)(nil)).Elem(), VirtualMachineCpuArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineDiskInput)(nil)).Elem(), VirtualMachineDiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineDiskArrayInput)(nil)).Elem(), VirtualMachineDiskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineDiskSpeedInput)(nil)).Elem(), VirtualMachineDiskSpeedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineDiskSpeedPtrInput)(nil)).Elem(), VirtualMachineDiskSpeedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineEfiDiskInput)(nil)).Elem(), VirtualMachineEfiDiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineEfiDiskPtrInput)(nil)).Elem(), VirtualMachineEfiDiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineHostpciInput)(nil)).Elem(), VirtualMachineHostpciArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineHostpciArrayInput)(nil)).Elem(), VirtualMachineHostpciArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineInitializationInput)(nil)).Elem(), VirtualMachineInitializationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineInitializationPtrInput)(nil)).Elem(), VirtualMachineInitializationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineInitializationDnsInput)(nil)).Elem(), VirtualMachineInitializationDnsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineInitializationDnsPtrInput)(nil)).Elem(), VirtualMachineInitializationDnsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineInitializationIpConfigInput)(nil)).Elem(), VirtualMachineInitializationIpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineInitializationIpConfigArrayInput)(nil)).Elem(), VirtualMachineInitializationIpConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineInitializationIpConfigIpv4Input)(nil)).Elem(), VirtualMachineInitializationIpConfigIpv4Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineInitializationIpConfigIpv4PtrInput)(nil)).Elem(), VirtualMachineInitializationIpConfigIpv4Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineInitializationIpConfigIpv6Input)(nil)).Elem(), VirtualMachineInitializationIpConfigIpv6Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineInitializationIpConfigIpv6PtrInput)(nil)).Elem(), VirtualMachineInitializationIpConfigIpv6Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineInitializationUserAccountInput)(nil)).Elem(), VirtualMachineInitializationUserAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineInitializationUserAccountPtrInput)(nil)).Elem(), VirtualMachineInitializationUserAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineMemoryInput)(nil)).Elem(), VirtualMachineMemoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineMemoryPtrInput)(nil)).Elem(), VirtualMachineMemoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineNetworkDeviceInput)(nil)).Elem(), VirtualMachineNetworkDeviceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineNetworkDeviceArrayInput)(nil)).Elem(), VirtualMachineNetworkDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineOperatingSystemInput)(nil)).Elem(), VirtualMachineOperatingSystemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineOperatingSystemPtrInput)(nil)).Elem(), VirtualMachineOperatingSystemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineSerialDeviceInput)(nil)).Elem(), VirtualMachineSerialDeviceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineSerialDeviceArrayInput)(nil)).Elem(), VirtualMachineSerialDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineSmbiosInput)(nil)).Elem(), VirtualMachineSmbiosArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineSmbiosPtrInput)(nil)).Elem(), VirtualMachineSmbiosArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineStartupInput)(nil)).Elem(), VirtualMachineStartupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineStartupPtrInput)(nil)).Elem(), VirtualMachineStartupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineVgaInput)(nil)).Elem(), VirtualMachineVgaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineVgaPtrInput)(nil)).Elem(), VirtualMachineVgaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVirtualMachinesVmInput)(nil)).Elem(), GetVirtualMachinesVmArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVirtualMachinesVmArrayInput)(nil)).Elem(), GetVirtualMachinesVmArray{})
	pulumi.RegisterOutputType(VirtualMachineAgentOutput{})
	pulumi.RegisterOutputType(VirtualMachineAgentPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineAudioDeviceOutput{})
	pulumi.RegisterOutputType(VirtualMachineAudioDevicePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineCdromOutput{})
	pulumi.RegisterOutputType(VirtualMachineCdromPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineCloneOutput{})
	pulumi.RegisterOutputType(VirtualMachineClonePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineCpuOutput{})
	pulumi.RegisterOutputType(VirtualMachineCpuPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineDiskOutput{})
	pulumi.RegisterOutputType(VirtualMachineDiskArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineDiskSpeedOutput{})
	pulumi.RegisterOutputType(VirtualMachineDiskSpeedPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineEfiDiskOutput{})
	pulumi.RegisterOutputType(VirtualMachineEfiDiskPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineHostpciOutput{})
	pulumi.RegisterOutputType(VirtualMachineHostpciArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineInitializationOutput{})
	pulumi.RegisterOutputType(VirtualMachineInitializationPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineInitializationDnsOutput{})
	pulumi.RegisterOutputType(VirtualMachineInitializationDnsPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineInitializationIpConfigOutput{})
	pulumi.RegisterOutputType(VirtualMachineInitializationIpConfigArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineInitializationIpConfigIpv4Output{})
	pulumi.RegisterOutputType(VirtualMachineInitializationIpConfigIpv4PtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineInitializationIpConfigIpv6Output{})
	pulumi.RegisterOutputType(VirtualMachineInitializationIpConfigIpv6PtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineInitializationUserAccountOutput{})
	pulumi.RegisterOutputType(VirtualMachineInitializationUserAccountPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineMemoryOutput{})
	pulumi.RegisterOutputType(VirtualMachineMemoryPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineNetworkDeviceOutput{})
	pulumi.RegisterOutputType(VirtualMachineNetworkDeviceArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineOperatingSystemOutput{})
	pulumi.RegisterOutputType(VirtualMachineOperatingSystemPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineSerialDeviceOutput{})
	pulumi.RegisterOutputType(VirtualMachineSerialDeviceArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineSmbiosOutput{})
	pulumi.RegisterOutputType(VirtualMachineSmbiosPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineStartupOutput{})
	pulumi.RegisterOutputType(VirtualMachineStartupPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineVgaOutput{})
	pulumi.RegisterOutputType(VirtualMachineVgaPtrOutput{})
	pulumi.RegisterOutputType(GetVirtualMachinesVmOutput{})
	pulumi.RegisterOutputType(GetVirtualMachinesVmArrayOutput{})
}

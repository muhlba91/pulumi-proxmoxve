// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vm

import (
	"context"
	"reflect"

	"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type VirtualMachine2Cdrom struct {
	// The file ID of the CD-ROM, or `cdrom|none`. Defaults to `none` to leave the CD-ROM empty. Use `cdrom` to connect to the physical drive.
	FileId *string `pulumi:"fileId"`
}

// VirtualMachine2CdromInput is an input type that accepts VirtualMachine2CdromArgs and VirtualMachine2CdromOutput values.
// You can construct a concrete instance of `VirtualMachine2CdromInput` via:
//
//	VirtualMachine2CdromArgs{...}
type VirtualMachine2CdromInput interface {
	pulumi.Input

	ToVirtualMachine2CdromOutput() VirtualMachine2CdromOutput
	ToVirtualMachine2CdromOutputWithContext(context.Context) VirtualMachine2CdromOutput
}

type VirtualMachine2CdromArgs struct {
	// The file ID of the CD-ROM, or `cdrom|none`. Defaults to `none` to leave the CD-ROM empty. Use `cdrom` to connect to the physical drive.
	FileId pulumi.StringPtrInput `pulumi:"fileId"`
}

func (VirtualMachine2CdromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachine2Cdrom)(nil)).Elem()
}

func (i VirtualMachine2CdromArgs) ToVirtualMachine2CdromOutput() VirtualMachine2CdromOutput {
	return i.ToVirtualMachine2CdromOutputWithContext(context.Background())
}

func (i VirtualMachine2CdromArgs) ToVirtualMachine2CdromOutputWithContext(ctx context.Context) VirtualMachine2CdromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachine2CdromOutput)
}

// VirtualMachine2CdromMapInput is an input type that accepts VirtualMachine2CdromMap and VirtualMachine2CdromMapOutput values.
// You can construct a concrete instance of `VirtualMachine2CdromMapInput` via:
//
//	VirtualMachine2CdromMap{ "key": VirtualMachine2CdromArgs{...} }
type VirtualMachine2CdromMapInput interface {
	pulumi.Input

	ToVirtualMachine2CdromMapOutput() VirtualMachine2CdromMapOutput
	ToVirtualMachine2CdromMapOutputWithContext(context.Context) VirtualMachine2CdromMapOutput
}

type VirtualMachine2CdromMap map[string]VirtualMachine2CdromInput

func (VirtualMachine2CdromMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]VirtualMachine2Cdrom)(nil)).Elem()
}

func (i VirtualMachine2CdromMap) ToVirtualMachine2CdromMapOutput() VirtualMachine2CdromMapOutput {
	return i.ToVirtualMachine2CdromMapOutputWithContext(context.Background())
}

func (i VirtualMachine2CdromMap) ToVirtualMachine2CdromMapOutputWithContext(ctx context.Context) VirtualMachine2CdromMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachine2CdromMapOutput)
}

type VirtualMachine2CdromOutput struct{ *pulumi.OutputState }

func (VirtualMachine2CdromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachine2Cdrom)(nil)).Elem()
}

func (o VirtualMachine2CdromOutput) ToVirtualMachine2CdromOutput() VirtualMachine2CdromOutput {
	return o
}

func (o VirtualMachine2CdromOutput) ToVirtualMachine2CdromOutputWithContext(ctx context.Context) VirtualMachine2CdromOutput {
	return o
}

// The file ID of the CD-ROM, or `cdrom|none`. Defaults to `none` to leave the CD-ROM empty. Use `cdrom` to connect to the physical drive.
func (o VirtualMachine2CdromOutput) FileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachine2Cdrom) *string { return v.FileId }).(pulumi.StringPtrOutput)
}

type VirtualMachine2CdromMapOutput struct{ *pulumi.OutputState }

func (VirtualMachine2CdromMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]VirtualMachine2Cdrom)(nil)).Elem()
}

func (o VirtualMachine2CdromMapOutput) ToVirtualMachine2CdromMapOutput() VirtualMachine2CdromMapOutput {
	return o
}

func (o VirtualMachine2CdromMapOutput) ToVirtualMachine2CdromMapOutputWithContext(ctx context.Context) VirtualMachine2CdromMapOutput {
	return o
}

func (o VirtualMachine2CdromMapOutput) MapIndex(k pulumi.StringInput) VirtualMachine2CdromOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) VirtualMachine2Cdrom {
		return vs[0].(map[string]VirtualMachine2Cdrom)[vs[1].(string)]
	}).(VirtualMachine2CdromOutput)
}

type VirtualMachine2Clone struct {
	// The ID of the VM to clone.
	Id int `pulumi:"id"`
	// The number of retries to perform when cloning the VM (default: 3).
	Retries *int `pulumi:"retries"`
}

// VirtualMachine2CloneInput is an input type that accepts VirtualMachine2CloneArgs and VirtualMachine2CloneOutput values.
// You can construct a concrete instance of `VirtualMachine2CloneInput` via:
//
//	VirtualMachine2CloneArgs{...}
type VirtualMachine2CloneInput interface {
	pulumi.Input

	ToVirtualMachine2CloneOutput() VirtualMachine2CloneOutput
	ToVirtualMachine2CloneOutputWithContext(context.Context) VirtualMachine2CloneOutput
}

type VirtualMachine2CloneArgs struct {
	// The ID of the VM to clone.
	Id pulumi.IntInput `pulumi:"id"`
	// The number of retries to perform when cloning the VM (default: 3).
	Retries pulumi.IntPtrInput `pulumi:"retries"`
}

func (VirtualMachine2CloneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachine2Clone)(nil)).Elem()
}

func (i VirtualMachine2CloneArgs) ToVirtualMachine2CloneOutput() VirtualMachine2CloneOutput {
	return i.ToVirtualMachine2CloneOutputWithContext(context.Background())
}

func (i VirtualMachine2CloneArgs) ToVirtualMachine2CloneOutputWithContext(ctx context.Context) VirtualMachine2CloneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachine2CloneOutput)
}

func (i VirtualMachine2CloneArgs) ToVirtualMachine2ClonePtrOutput() VirtualMachine2ClonePtrOutput {
	return i.ToVirtualMachine2ClonePtrOutputWithContext(context.Background())
}

func (i VirtualMachine2CloneArgs) ToVirtualMachine2ClonePtrOutputWithContext(ctx context.Context) VirtualMachine2ClonePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachine2CloneOutput).ToVirtualMachine2ClonePtrOutputWithContext(ctx)
}

// VirtualMachine2ClonePtrInput is an input type that accepts VirtualMachine2CloneArgs, VirtualMachine2ClonePtr and VirtualMachine2ClonePtrOutput values.
// You can construct a concrete instance of `VirtualMachine2ClonePtrInput` via:
//
//	        VirtualMachine2CloneArgs{...}
//
//	or:
//
//	        nil
type VirtualMachine2ClonePtrInput interface {
	pulumi.Input

	ToVirtualMachine2ClonePtrOutput() VirtualMachine2ClonePtrOutput
	ToVirtualMachine2ClonePtrOutputWithContext(context.Context) VirtualMachine2ClonePtrOutput
}

type virtualMachine2ClonePtrType VirtualMachine2CloneArgs

func VirtualMachine2ClonePtr(v *VirtualMachine2CloneArgs) VirtualMachine2ClonePtrInput {
	return (*virtualMachine2ClonePtrType)(v)
}

func (*virtualMachine2ClonePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachine2Clone)(nil)).Elem()
}

func (i *virtualMachine2ClonePtrType) ToVirtualMachine2ClonePtrOutput() VirtualMachine2ClonePtrOutput {
	return i.ToVirtualMachine2ClonePtrOutputWithContext(context.Background())
}

func (i *virtualMachine2ClonePtrType) ToVirtualMachine2ClonePtrOutputWithContext(ctx context.Context) VirtualMachine2ClonePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachine2ClonePtrOutput)
}

type VirtualMachine2CloneOutput struct{ *pulumi.OutputState }

func (VirtualMachine2CloneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachine2Clone)(nil)).Elem()
}

func (o VirtualMachine2CloneOutput) ToVirtualMachine2CloneOutput() VirtualMachine2CloneOutput {
	return o
}

func (o VirtualMachine2CloneOutput) ToVirtualMachine2CloneOutputWithContext(ctx context.Context) VirtualMachine2CloneOutput {
	return o
}

func (o VirtualMachine2CloneOutput) ToVirtualMachine2ClonePtrOutput() VirtualMachine2ClonePtrOutput {
	return o.ToVirtualMachine2ClonePtrOutputWithContext(context.Background())
}

func (o VirtualMachine2CloneOutput) ToVirtualMachine2ClonePtrOutputWithContext(ctx context.Context) VirtualMachine2ClonePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachine2Clone) *VirtualMachine2Clone {
		return &v
	}).(VirtualMachine2ClonePtrOutput)
}

// The ID of the VM to clone.
func (o VirtualMachine2CloneOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v VirtualMachine2Clone) int { return v.Id }).(pulumi.IntOutput)
}

// The number of retries to perform when cloning the VM (default: 3).
func (o VirtualMachine2CloneOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachine2Clone) *int { return v.Retries }).(pulumi.IntPtrOutput)
}

type VirtualMachine2ClonePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachine2ClonePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachine2Clone)(nil)).Elem()
}

func (o VirtualMachine2ClonePtrOutput) ToVirtualMachine2ClonePtrOutput() VirtualMachine2ClonePtrOutput {
	return o
}

func (o VirtualMachine2ClonePtrOutput) ToVirtualMachine2ClonePtrOutputWithContext(ctx context.Context) VirtualMachine2ClonePtrOutput {
	return o
}

func (o VirtualMachine2ClonePtrOutput) Elem() VirtualMachine2CloneOutput {
	return o.ApplyT(func(v *VirtualMachine2Clone) VirtualMachine2Clone {
		if v != nil {
			return *v
		}
		var ret VirtualMachine2Clone
		return ret
	}).(VirtualMachine2CloneOutput)
}

// The ID of the VM to clone.
func (o VirtualMachine2ClonePtrOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine2Clone) *int {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.IntPtrOutput)
}

// The number of retries to perform when cloning the VM (default: 3).
func (o VirtualMachine2ClonePtrOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine2Clone) *int {
		if v == nil {
			return nil
		}
		return v.Retries
	}).(pulumi.IntPtrOutput)
}

type VirtualMachine2Cpu struct {
	// The CPU cores that are used to run the VMâ€™s vCPU. The value is a list of CPU IDs, separated by commas. The CPU IDs are zero-based.  For example, `0,1,2,3` (which also can be shortened to `0-3`) means that the VMâ€™s vCPUs are run on the first four CPU cores. Setting `affinity` is only allowed for `root@pam` authenticated user.
	Affinity *string `pulumi:"affinity"`
	// The CPU architecture `<aarch64 | x86_64>` (defaults to the host). Setting `affinity` is only allowed for `root@pam` authenticated user.
	Architecture *string `pulumi:"architecture"`
	// The number of CPU cores per socket (defaults to `1`).
	Cores *int `pulumi:"cores"`
	// Set of additional CPU flags. Use `+FLAG` to enable, `-FLAG` to disable a flag. Custom CPU models can specify any flag supported by QEMU/KVM, VM-specific flags must be from the following set for security reasons: `pcid`, `spec-ctrl`, `ibpb`, `ssbd`, `virt-ssbd`, `amd-ssbd`, `amd-no-ssb`, `pdpe1gb`, `md-clear`, `hv-tlbflush`, `hv-evmcs`, `aes`.
	Flags []string `pulumi:"flags"`
	// The number of hotplugged vCPUs (defaults to `0`).
	Hotplugged *int `pulumi:"hotplugged"`
	// Limit of CPU usage (defaults to `0` which means no limit).
	Limit *int `pulumi:"limit"`
	// Enable NUMA (defaults to `false`).
	Numa *bool `pulumi:"numa"`
	// The number of CPU sockets (defaults to `1`).
	Sockets *int `pulumi:"sockets"`
	// Emulated CPU type, it's recommended to use `x86-64-v2-AES` or higher (defaults to `kvm64`). See https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm*virtual*machines_settings for more information.
	Type *string `pulumi:"type"`
	// CPU weight for a VM. Argument is used in the kernel fair scheduler. The larger the number is, the more CPU time this VM gets. Number is relative to weights of all the other running VMs.
	Units *int `pulumi:"units"`
}

// VirtualMachine2CpuInput is an input type that accepts VirtualMachine2CpuArgs and VirtualMachine2CpuOutput values.
// You can construct a concrete instance of `VirtualMachine2CpuInput` via:
//
//	VirtualMachine2CpuArgs{...}
type VirtualMachine2CpuInput interface {
	pulumi.Input

	ToVirtualMachine2CpuOutput() VirtualMachine2CpuOutput
	ToVirtualMachine2CpuOutputWithContext(context.Context) VirtualMachine2CpuOutput
}

type VirtualMachine2CpuArgs struct {
	// The CPU cores that are used to run the VMâ€™s vCPU. The value is a list of CPU IDs, separated by commas. The CPU IDs are zero-based.  For example, `0,1,2,3` (which also can be shortened to `0-3`) means that the VMâ€™s vCPUs are run on the first four CPU cores. Setting `affinity` is only allowed for `root@pam` authenticated user.
	Affinity pulumi.StringPtrInput `pulumi:"affinity"`
	// The CPU architecture `<aarch64 | x86_64>` (defaults to the host). Setting `affinity` is only allowed for `root@pam` authenticated user.
	Architecture pulumi.StringPtrInput `pulumi:"architecture"`
	// The number of CPU cores per socket (defaults to `1`).
	Cores pulumi.IntPtrInput `pulumi:"cores"`
	// Set of additional CPU flags. Use `+FLAG` to enable, `-FLAG` to disable a flag. Custom CPU models can specify any flag supported by QEMU/KVM, VM-specific flags must be from the following set for security reasons: `pcid`, `spec-ctrl`, `ibpb`, `ssbd`, `virt-ssbd`, `amd-ssbd`, `amd-no-ssb`, `pdpe1gb`, `md-clear`, `hv-tlbflush`, `hv-evmcs`, `aes`.
	Flags pulumi.StringArrayInput `pulumi:"flags"`
	// The number of hotplugged vCPUs (defaults to `0`).
	Hotplugged pulumi.IntPtrInput `pulumi:"hotplugged"`
	// Limit of CPU usage (defaults to `0` which means no limit).
	Limit pulumi.IntPtrInput `pulumi:"limit"`
	// Enable NUMA (defaults to `false`).
	Numa pulumi.BoolPtrInput `pulumi:"numa"`
	// The number of CPU sockets (defaults to `1`).
	Sockets pulumi.IntPtrInput `pulumi:"sockets"`
	// Emulated CPU type, it's recommended to use `x86-64-v2-AES` or higher (defaults to `kvm64`). See https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm*virtual*machines_settings for more information.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// CPU weight for a VM. Argument is used in the kernel fair scheduler. The larger the number is, the more CPU time this VM gets. Number is relative to weights of all the other running VMs.
	Units pulumi.IntPtrInput `pulumi:"units"`
}

func (VirtualMachine2CpuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachine2Cpu)(nil)).Elem()
}

func (i VirtualMachine2CpuArgs) ToVirtualMachine2CpuOutput() VirtualMachine2CpuOutput {
	return i.ToVirtualMachine2CpuOutputWithContext(context.Background())
}

func (i VirtualMachine2CpuArgs) ToVirtualMachine2CpuOutputWithContext(ctx context.Context) VirtualMachine2CpuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachine2CpuOutput)
}

func (i VirtualMachine2CpuArgs) ToVirtualMachine2CpuPtrOutput() VirtualMachine2CpuPtrOutput {
	return i.ToVirtualMachine2CpuPtrOutputWithContext(context.Background())
}

func (i VirtualMachine2CpuArgs) ToVirtualMachine2CpuPtrOutputWithContext(ctx context.Context) VirtualMachine2CpuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachine2CpuOutput).ToVirtualMachine2CpuPtrOutputWithContext(ctx)
}

// VirtualMachine2CpuPtrInput is an input type that accepts VirtualMachine2CpuArgs, VirtualMachine2CpuPtr and VirtualMachine2CpuPtrOutput values.
// You can construct a concrete instance of `VirtualMachine2CpuPtrInput` via:
//
//	        VirtualMachine2CpuArgs{...}
//
//	or:
//
//	        nil
type VirtualMachine2CpuPtrInput interface {
	pulumi.Input

	ToVirtualMachine2CpuPtrOutput() VirtualMachine2CpuPtrOutput
	ToVirtualMachine2CpuPtrOutputWithContext(context.Context) VirtualMachine2CpuPtrOutput
}

type virtualMachine2CpuPtrType VirtualMachine2CpuArgs

func VirtualMachine2CpuPtr(v *VirtualMachine2CpuArgs) VirtualMachine2CpuPtrInput {
	return (*virtualMachine2CpuPtrType)(v)
}

func (*virtualMachine2CpuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachine2Cpu)(nil)).Elem()
}

func (i *virtualMachine2CpuPtrType) ToVirtualMachine2CpuPtrOutput() VirtualMachine2CpuPtrOutput {
	return i.ToVirtualMachine2CpuPtrOutputWithContext(context.Background())
}

func (i *virtualMachine2CpuPtrType) ToVirtualMachine2CpuPtrOutputWithContext(ctx context.Context) VirtualMachine2CpuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachine2CpuPtrOutput)
}

type VirtualMachine2CpuOutput struct{ *pulumi.OutputState }

func (VirtualMachine2CpuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachine2Cpu)(nil)).Elem()
}

func (o VirtualMachine2CpuOutput) ToVirtualMachine2CpuOutput() VirtualMachine2CpuOutput {
	return o
}

func (o VirtualMachine2CpuOutput) ToVirtualMachine2CpuOutputWithContext(ctx context.Context) VirtualMachine2CpuOutput {
	return o
}

func (o VirtualMachine2CpuOutput) ToVirtualMachine2CpuPtrOutput() VirtualMachine2CpuPtrOutput {
	return o.ToVirtualMachine2CpuPtrOutputWithContext(context.Background())
}

func (o VirtualMachine2CpuOutput) ToVirtualMachine2CpuPtrOutputWithContext(ctx context.Context) VirtualMachine2CpuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachine2Cpu) *VirtualMachine2Cpu {
		return &v
	}).(VirtualMachine2CpuPtrOutput)
}

// The CPU cores that are used to run the VMâ€™s vCPU. The value is a list of CPU IDs, separated by commas. The CPU IDs are zero-based.  For example, `0,1,2,3` (which also can be shortened to `0-3`) means that the VMâ€™s vCPUs are run on the first four CPU cores. Setting `affinity` is only allowed for `root@pam` authenticated user.
func (o VirtualMachine2CpuOutput) Affinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachine2Cpu) *string { return v.Affinity }).(pulumi.StringPtrOutput)
}

// The CPU architecture `<aarch64 | x86_64>` (defaults to the host). Setting `affinity` is only allowed for `root@pam` authenticated user.
func (o VirtualMachine2CpuOutput) Architecture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachine2Cpu) *string { return v.Architecture }).(pulumi.StringPtrOutput)
}

// The number of CPU cores per socket (defaults to `1`).
func (o VirtualMachine2CpuOutput) Cores() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachine2Cpu) *int { return v.Cores }).(pulumi.IntPtrOutput)
}

// Set of additional CPU flags. Use `+FLAG` to enable, `-FLAG` to disable a flag. Custom CPU models can specify any flag supported by QEMU/KVM, VM-specific flags must be from the following set for security reasons: `pcid`, `spec-ctrl`, `ibpb`, `ssbd`, `virt-ssbd`, `amd-ssbd`, `amd-no-ssb`, `pdpe1gb`, `md-clear`, `hv-tlbflush`, `hv-evmcs`, `aes`.
func (o VirtualMachine2CpuOutput) Flags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualMachine2Cpu) []string { return v.Flags }).(pulumi.StringArrayOutput)
}

// The number of hotplugged vCPUs (defaults to `0`).
func (o VirtualMachine2CpuOutput) Hotplugged() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachine2Cpu) *int { return v.Hotplugged }).(pulumi.IntPtrOutput)
}

// Limit of CPU usage (defaults to `0` which means no limit).
func (o VirtualMachine2CpuOutput) Limit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachine2Cpu) *int { return v.Limit }).(pulumi.IntPtrOutput)
}

// Enable NUMA (defaults to `false`).
func (o VirtualMachine2CpuOutput) Numa() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachine2Cpu) *bool { return v.Numa }).(pulumi.BoolPtrOutput)
}

// The number of CPU sockets (defaults to `1`).
func (o VirtualMachine2CpuOutput) Sockets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachine2Cpu) *int { return v.Sockets }).(pulumi.IntPtrOutput)
}

// Emulated CPU type, it's recommended to use `x86-64-v2-AES` or higher (defaults to `kvm64`). See https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm*virtual*machines_settings for more information.
func (o VirtualMachine2CpuOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachine2Cpu) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// CPU weight for a VM. Argument is used in the kernel fair scheduler. The larger the number is, the more CPU time this VM gets. Number is relative to weights of all the other running VMs.
func (o VirtualMachine2CpuOutput) Units() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachine2Cpu) *int { return v.Units }).(pulumi.IntPtrOutput)
}

type VirtualMachine2CpuPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachine2CpuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachine2Cpu)(nil)).Elem()
}

func (o VirtualMachine2CpuPtrOutput) ToVirtualMachine2CpuPtrOutput() VirtualMachine2CpuPtrOutput {
	return o
}

func (o VirtualMachine2CpuPtrOutput) ToVirtualMachine2CpuPtrOutputWithContext(ctx context.Context) VirtualMachine2CpuPtrOutput {
	return o
}

func (o VirtualMachine2CpuPtrOutput) Elem() VirtualMachine2CpuOutput {
	return o.ApplyT(func(v *VirtualMachine2Cpu) VirtualMachine2Cpu {
		if v != nil {
			return *v
		}
		var ret VirtualMachine2Cpu
		return ret
	}).(VirtualMachine2CpuOutput)
}

// The CPU cores that are used to run the VMâ€™s vCPU. The value is a list of CPU IDs, separated by commas. The CPU IDs are zero-based.  For example, `0,1,2,3` (which also can be shortened to `0-3`) means that the VMâ€™s vCPUs are run on the first four CPU cores. Setting `affinity` is only allowed for `root@pam` authenticated user.
func (o VirtualMachine2CpuPtrOutput) Affinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine2Cpu) *string {
		if v == nil {
			return nil
		}
		return v.Affinity
	}).(pulumi.StringPtrOutput)
}

// The CPU architecture `<aarch64 | x86_64>` (defaults to the host). Setting `affinity` is only allowed for `root@pam` authenticated user.
func (o VirtualMachine2CpuPtrOutput) Architecture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine2Cpu) *string {
		if v == nil {
			return nil
		}
		return v.Architecture
	}).(pulumi.StringPtrOutput)
}

// The number of CPU cores per socket (defaults to `1`).
func (o VirtualMachine2CpuPtrOutput) Cores() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine2Cpu) *int {
		if v == nil {
			return nil
		}
		return v.Cores
	}).(pulumi.IntPtrOutput)
}

// Set of additional CPU flags. Use `+FLAG` to enable, `-FLAG` to disable a flag. Custom CPU models can specify any flag supported by QEMU/KVM, VM-specific flags must be from the following set for security reasons: `pcid`, `spec-ctrl`, `ibpb`, `ssbd`, `virt-ssbd`, `amd-ssbd`, `amd-no-ssb`, `pdpe1gb`, `md-clear`, `hv-tlbflush`, `hv-evmcs`, `aes`.
func (o VirtualMachine2CpuPtrOutput) Flags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualMachine2Cpu) []string {
		if v == nil {
			return nil
		}
		return v.Flags
	}).(pulumi.StringArrayOutput)
}

// The number of hotplugged vCPUs (defaults to `0`).
func (o VirtualMachine2CpuPtrOutput) Hotplugged() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine2Cpu) *int {
		if v == nil {
			return nil
		}
		return v.Hotplugged
	}).(pulumi.IntPtrOutput)
}

// Limit of CPU usage (defaults to `0` which means no limit).
func (o VirtualMachine2CpuPtrOutput) Limit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine2Cpu) *int {
		if v == nil {
			return nil
		}
		return v.Limit
	}).(pulumi.IntPtrOutput)
}

// Enable NUMA (defaults to `false`).
func (o VirtualMachine2CpuPtrOutput) Numa() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine2Cpu) *bool {
		if v == nil {
			return nil
		}
		return v.Numa
	}).(pulumi.BoolPtrOutput)
}

// The number of CPU sockets (defaults to `1`).
func (o VirtualMachine2CpuPtrOutput) Sockets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine2Cpu) *int {
		if v == nil {
			return nil
		}
		return v.Sockets
	}).(pulumi.IntPtrOutput)
}

// Emulated CPU type, it's recommended to use `x86-64-v2-AES` or higher (defaults to `kvm64`). See https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm*virtual*machines_settings for more information.
func (o VirtualMachine2CpuPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine2Cpu) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// CPU weight for a VM. Argument is used in the kernel fair scheduler. The larger the number is, the more CPU time this VM gets. Number is relative to weights of all the other running VMs.
func (o VirtualMachine2CpuPtrOutput) Units() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine2Cpu) *int {
		if v == nil {
			return nil
		}
		return v.Units
	}).(pulumi.IntPtrOutput)
}

type VirtualMachine2Timeouts struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create *string `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete *string `pulumi:"delete"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
	Read *string `pulumi:"read"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Update *string `pulumi:"update"`
}

// VirtualMachine2TimeoutsInput is an input type that accepts VirtualMachine2TimeoutsArgs and VirtualMachine2TimeoutsOutput values.
// You can construct a concrete instance of `VirtualMachine2TimeoutsInput` via:
//
//	VirtualMachine2TimeoutsArgs{...}
type VirtualMachine2TimeoutsInput interface {
	pulumi.Input

	ToVirtualMachine2TimeoutsOutput() VirtualMachine2TimeoutsOutput
	ToVirtualMachine2TimeoutsOutputWithContext(context.Context) VirtualMachine2TimeoutsOutput
}

type VirtualMachine2TimeoutsArgs struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create pulumi.StringPtrInput `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete pulumi.StringPtrInput `pulumi:"delete"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
	Read pulumi.StringPtrInput `pulumi:"read"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Update pulumi.StringPtrInput `pulumi:"update"`
}

func (VirtualMachine2TimeoutsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachine2Timeouts)(nil)).Elem()
}

func (i VirtualMachine2TimeoutsArgs) ToVirtualMachine2TimeoutsOutput() VirtualMachine2TimeoutsOutput {
	return i.ToVirtualMachine2TimeoutsOutputWithContext(context.Background())
}

func (i VirtualMachine2TimeoutsArgs) ToVirtualMachine2TimeoutsOutputWithContext(ctx context.Context) VirtualMachine2TimeoutsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachine2TimeoutsOutput)
}

func (i VirtualMachine2TimeoutsArgs) ToVirtualMachine2TimeoutsPtrOutput() VirtualMachine2TimeoutsPtrOutput {
	return i.ToVirtualMachine2TimeoutsPtrOutputWithContext(context.Background())
}

func (i VirtualMachine2TimeoutsArgs) ToVirtualMachine2TimeoutsPtrOutputWithContext(ctx context.Context) VirtualMachine2TimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachine2TimeoutsOutput).ToVirtualMachine2TimeoutsPtrOutputWithContext(ctx)
}

// VirtualMachine2TimeoutsPtrInput is an input type that accepts VirtualMachine2TimeoutsArgs, VirtualMachine2TimeoutsPtr and VirtualMachine2TimeoutsPtrOutput values.
// You can construct a concrete instance of `VirtualMachine2TimeoutsPtrInput` via:
//
//	        VirtualMachine2TimeoutsArgs{...}
//
//	or:
//
//	        nil
type VirtualMachine2TimeoutsPtrInput interface {
	pulumi.Input

	ToVirtualMachine2TimeoutsPtrOutput() VirtualMachine2TimeoutsPtrOutput
	ToVirtualMachine2TimeoutsPtrOutputWithContext(context.Context) VirtualMachine2TimeoutsPtrOutput
}

type virtualMachine2TimeoutsPtrType VirtualMachine2TimeoutsArgs

func VirtualMachine2TimeoutsPtr(v *VirtualMachine2TimeoutsArgs) VirtualMachine2TimeoutsPtrInput {
	return (*virtualMachine2TimeoutsPtrType)(v)
}

func (*virtualMachine2TimeoutsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachine2Timeouts)(nil)).Elem()
}

func (i *virtualMachine2TimeoutsPtrType) ToVirtualMachine2TimeoutsPtrOutput() VirtualMachine2TimeoutsPtrOutput {
	return i.ToVirtualMachine2TimeoutsPtrOutputWithContext(context.Background())
}

func (i *virtualMachine2TimeoutsPtrType) ToVirtualMachine2TimeoutsPtrOutputWithContext(ctx context.Context) VirtualMachine2TimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachine2TimeoutsPtrOutput)
}

type VirtualMachine2TimeoutsOutput struct{ *pulumi.OutputState }

func (VirtualMachine2TimeoutsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachine2Timeouts)(nil)).Elem()
}

func (o VirtualMachine2TimeoutsOutput) ToVirtualMachine2TimeoutsOutput() VirtualMachine2TimeoutsOutput {
	return o
}

func (o VirtualMachine2TimeoutsOutput) ToVirtualMachine2TimeoutsOutputWithContext(ctx context.Context) VirtualMachine2TimeoutsOutput {
	return o
}

func (o VirtualMachine2TimeoutsOutput) ToVirtualMachine2TimeoutsPtrOutput() VirtualMachine2TimeoutsPtrOutput {
	return o.ToVirtualMachine2TimeoutsPtrOutputWithContext(context.Background())
}

func (o VirtualMachine2TimeoutsOutput) ToVirtualMachine2TimeoutsPtrOutputWithContext(ctx context.Context) VirtualMachine2TimeoutsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachine2Timeouts) *VirtualMachine2Timeouts {
		return &v
	}).(VirtualMachine2TimeoutsPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o VirtualMachine2TimeoutsOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachine2Timeouts) *string { return v.Create }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o VirtualMachine2TimeoutsOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachine2Timeouts) *string { return v.Delete }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
func (o VirtualMachine2TimeoutsOutput) Read() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachine2Timeouts) *string { return v.Read }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o VirtualMachine2TimeoutsOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachine2Timeouts) *string { return v.Update }).(pulumi.StringPtrOutput)
}

type VirtualMachine2TimeoutsPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachine2TimeoutsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachine2Timeouts)(nil)).Elem()
}

func (o VirtualMachine2TimeoutsPtrOutput) ToVirtualMachine2TimeoutsPtrOutput() VirtualMachine2TimeoutsPtrOutput {
	return o
}

func (o VirtualMachine2TimeoutsPtrOutput) ToVirtualMachine2TimeoutsPtrOutputWithContext(ctx context.Context) VirtualMachine2TimeoutsPtrOutput {
	return o
}

func (o VirtualMachine2TimeoutsPtrOutput) Elem() VirtualMachine2TimeoutsOutput {
	return o.ApplyT(func(v *VirtualMachine2Timeouts) VirtualMachine2Timeouts {
		if v != nil {
			return *v
		}
		var ret VirtualMachine2Timeouts
		return ret
	}).(VirtualMachine2TimeoutsOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o VirtualMachine2TimeoutsPtrOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine2Timeouts) *string {
		if v == nil {
			return nil
		}
		return v.Create
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o VirtualMachine2TimeoutsPtrOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine2Timeouts) *string {
		if v == nil {
			return nil
		}
		return v.Delete
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
func (o VirtualMachine2TimeoutsPtrOutput) Read() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine2Timeouts) *string {
		if v == nil {
			return nil
		}
		return v.Read
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o VirtualMachine2TimeoutsPtrOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine2Timeouts) *string {
		if v == nil {
			return nil
		}
		return v.Update
	}).(pulumi.StringPtrOutput)
}

type VirtualMachine2Vga struct {
	// Enable a specific clipboard. If not set, depending on the display type the SPICE one will be added. Currently only `vnc` is available. Migration with VNC clipboard is not supported by Proxmox.
	Clipboard *string `pulumi:"clipboard"`
	// The VGA memory in megabytes (4-512 MB). Has no effect with serial display.
	Memory *int `pulumi:"memory"`
	// The VGA type (defaults to `std`).
	Type *string `pulumi:"type"`
}

// VirtualMachine2VgaInput is an input type that accepts VirtualMachine2VgaArgs and VirtualMachine2VgaOutput values.
// You can construct a concrete instance of `VirtualMachine2VgaInput` via:
//
//	VirtualMachine2VgaArgs{...}
type VirtualMachine2VgaInput interface {
	pulumi.Input

	ToVirtualMachine2VgaOutput() VirtualMachine2VgaOutput
	ToVirtualMachine2VgaOutputWithContext(context.Context) VirtualMachine2VgaOutput
}

type VirtualMachine2VgaArgs struct {
	// Enable a specific clipboard. If not set, depending on the display type the SPICE one will be added. Currently only `vnc` is available. Migration with VNC clipboard is not supported by Proxmox.
	Clipboard pulumi.StringPtrInput `pulumi:"clipboard"`
	// The VGA memory in megabytes (4-512 MB). Has no effect with serial display.
	Memory pulumi.IntPtrInput `pulumi:"memory"`
	// The VGA type (defaults to `std`).
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (VirtualMachine2VgaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachine2Vga)(nil)).Elem()
}

func (i VirtualMachine2VgaArgs) ToVirtualMachine2VgaOutput() VirtualMachine2VgaOutput {
	return i.ToVirtualMachine2VgaOutputWithContext(context.Background())
}

func (i VirtualMachine2VgaArgs) ToVirtualMachine2VgaOutputWithContext(ctx context.Context) VirtualMachine2VgaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachine2VgaOutput)
}

func (i VirtualMachine2VgaArgs) ToVirtualMachine2VgaPtrOutput() VirtualMachine2VgaPtrOutput {
	return i.ToVirtualMachine2VgaPtrOutputWithContext(context.Background())
}

func (i VirtualMachine2VgaArgs) ToVirtualMachine2VgaPtrOutputWithContext(ctx context.Context) VirtualMachine2VgaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachine2VgaOutput).ToVirtualMachine2VgaPtrOutputWithContext(ctx)
}

// VirtualMachine2VgaPtrInput is an input type that accepts VirtualMachine2VgaArgs, VirtualMachine2VgaPtr and VirtualMachine2VgaPtrOutput values.
// You can construct a concrete instance of `VirtualMachine2VgaPtrInput` via:
//
//	        VirtualMachine2VgaArgs{...}
//
//	or:
//
//	        nil
type VirtualMachine2VgaPtrInput interface {
	pulumi.Input

	ToVirtualMachine2VgaPtrOutput() VirtualMachine2VgaPtrOutput
	ToVirtualMachine2VgaPtrOutputWithContext(context.Context) VirtualMachine2VgaPtrOutput
}

type virtualMachine2VgaPtrType VirtualMachine2VgaArgs

func VirtualMachine2VgaPtr(v *VirtualMachine2VgaArgs) VirtualMachine2VgaPtrInput {
	return (*virtualMachine2VgaPtrType)(v)
}

func (*virtualMachine2VgaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachine2Vga)(nil)).Elem()
}

func (i *virtualMachine2VgaPtrType) ToVirtualMachine2VgaPtrOutput() VirtualMachine2VgaPtrOutput {
	return i.ToVirtualMachine2VgaPtrOutputWithContext(context.Background())
}

func (i *virtualMachine2VgaPtrType) ToVirtualMachine2VgaPtrOutputWithContext(ctx context.Context) VirtualMachine2VgaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachine2VgaPtrOutput)
}

type VirtualMachine2VgaOutput struct{ *pulumi.OutputState }

func (VirtualMachine2VgaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachine2Vga)(nil)).Elem()
}

func (o VirtualMachine2VgaOutput) ToVirtualMachine2VgaOutput() VirtualMachine2VgaOutput {
	return o
}

func (o VirtualMachine2VgaOutput) ToVirtualMachine2VgaOutputWithContext(ctx context.Context) VirtualMachine2VgaOutput {
	return o
}

func (o VirtualMachine2VgaOutput) ToVirtualMachine2VgaPtrOutput() VirtualMachine2VgaPtrOutput {
	return o.ToVirtualMachine2VgaPtrOutputWithContext(context.Background())
}

func (o VirtualMachine2VgaOutput) ToVirtualMachine2VgaPtrOutputWithContext(ctx context.Context) VirtualMachine2VgaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachine2Vga) *VirtualMachine2Vga {
		return &v
	}).(VirtualMachine2VgaPtrOutput)
}

// Enable a specific clipboard. If not set, depending on the display type the SPICE one will be added. Currently only `vnc` is available. Migration with VNC clipboard is not supported by Proxmox.
func (o VirtualMachine2VgaOutput) Clipboard() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachine2Vga) *string { return v.Clipboard }).(pulumi.StringPtrOutput)
}

// The VGA memory in megabytes (4-512 MB). Has no effect with serial display.
func (o VirtualMachine2VgaOutput) Memory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachine2Vga) *int { return v.Memory }).(pulumi.IntPtrOutput)
}

// The VGA type (defaults to `std`).
func (o VirtualMachine2VgaOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachine2Vga) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type VirtualMachine2VgaPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachine2VgaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachine2Vga)(nil)).Elem()
}

func (o VirtualMachine2VgaPtrOutput) ToVirtualMachine2VgaPtrOutput() VirtualMachine2VgaPtrOutput {
	return o
}

func (o VirtualMachine2VgaPtrOutput) ToVirtualMachine2VgaPtrOutputWithContext(ctx context.Context) VirtualMachine2VgaPtrOutput {
	return o
}

func (o VirtualMachine2VgaPtrOutput) Elem() VirtualMachine2VgaOutput {
	return o.ApplyT(func(v *VirtualMachine2Vga) VirtualMachine2Vga {
		if v != nil {
			return *v
		}
		var ret VirtualMachine2Vga
		return ret
	}).(VirtualMachine2VgaOutput)
}

// Enable a specific clipboard. If not set, depending on the display type the SPICE one will be added. Currently only `vnc` is available. Migration with VNC clipboard is not supported by Proxmox.
func (o VirtualMachine2VgaPtrOutput) Clipboard() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine2Vga) *string {
		if v == nil {
			return nil
		}
		return v.Clipboard
	}).(pulumi.StringPtrOutput)
}

// The VGA memory in megabytes (4-512 MB). Has no effect with serial display.
func (o VirtualMachine2VgaPtrOutput) Memory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachine2Vga) *int {
		if v == nil {
			return nil
		}
		return v.Memory
	}).(pulumi.IntPtrOutput)
}

// The VGA type (defaults to `std`).
func (o VirtualMachine2VgaPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine2Vga) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type VirtualMachineAgent struct {
	// Whether to enable the QEMU agent (defaults
	// to `false`).
	Enabled *bool `pulumi:"enabled"`
	// The maximum amount of time to wait for data from
	// the QEMU agent to become available ( defaults to `15m`).
	Timeout *string `pulumi:"timeout"`
	// Whether to enable the FSTRIM feature in the QEMU agent
	// (defaults to `false`).
	Trim *bool `pulumi:"trim"`
	// The QEMU agent interface type (defaults to `virtio`).
	Type *string `pulumi:"type"`
}

// VirtualMachineAgentInput is an input type that accepts VirtualMachineAgentArgs and VirtualMachineAgentOutput values.
// You can construct a concrete instance of `VirtualMachineAgentInput` via:
//
//	VirtualMachineAgentArgs{...}
type VirtualMachineAgentInput interface {
	pulumi.Input

	ToVirtualMachineAgentOutput() VirtualMachineAgentOutput
	ToVirtualMachineAgentOutputWithContext(context.Context) VirtualMachineAgentOutput
}

type VirtualMachineAgentArgs struct {
	// Whether to enable the QEMU agent (defaults
	// to `false`).
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The maximum amount of time to wait for data from
	// the QEMU agent to become available ( defaults to `15m`).
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
	// Whether to enable the FSTRIM feature in the QEMU agent
	// (defaults to `false`).
	Trim pulumi.BoolPtrInput `pulumi:"trim"`
	// The QEMU agent interface type (defaults to `virtio`).
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (VirtualMachineAgentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineAgent)(nil)).Elem()
}

func (i VirtualMachineAgentArgs) ToVirtualMachineAgentOutput() VirtualMachineAgentOutput {
	return i.ToVirtualMachineAgentOutputWithContext(context.Background())
}

func (i VirtualMachineAgentArgs) ToVirtualMachineAgentOutputWithContext(ctx context.Context) VirtualMachineAgentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineAgentOutput)
}

func (i VirtualMachineAgentArgs) ToVirtualMachineAgentPtrOutput() VirtualMachineAgentPtrOutput {
	return i.ToVirtualMachineAgentPtrOutputWithContext(context.Background())
}

func (i VirtualMachineAgentArgs) ToVirtualMachineAgentPtrOutputWithContext(ctx context.Context) VirtualMachineAgentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineAgentOutput).ToVirtualMachineAgentPtrOutputWithContext(ctx)
}

// VirtualMachineAgentPtrInput is an input type that accepts VirtualMachineAgentArgs, VirtualMachineAgentPtr and VirtualMachineAgentPtrOutput values.
// You can construct a concrete instance of `VirtualMachineAgentPtrInput` via:
//
//	        VirtualMachineAgentArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineAgentPtrInput interface {
	pulumi.Input

	ToVirtualMachineAgentPtrOutput() VirtualMachineAgentPtrOutput
	ToVirtualMachineAgentPtrOutputWithContext(context.Context) VirtualMachineAgentPtrOutput
}

type virtualMachineAgentPtrType VirtualMachineAgentArgs

func VirtualMachineAgentPtr(v *VirtualMachineAgentArgs) VirtualMachineAgentPtrInput {
	return (*virtualMachineAgentPtrType)(v)
}

func (*virtualMachineAgentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineAgent)(nil)).Elem()
}

func (i *virtualMachineAgentPtrType) ToVirtualMachineAgentPtrOutput() VirtualMachineAgentPtrOutput {
	return i.ToVirtualMachineAgentPtrOutputWithContext(context.Background())
}

func (i *virtualMachineAgentPtrType) ToVirtualMachineAgentPtrOutputWithContext(ctx context.Context) VirtualMachineAgentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineAgentPtrOutput)
}

type VirtualMachineAgentOutput struct{ *pulumi.OutputState }

func (VirtualMachineAgentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineAgent)(nil)).Elem()
}

func (o VirtualMachineAgentOutput) ToVirtualMachineAgentOutput() VirtualMachineAgentOutput {
	return o
}

func (o VirtualMachineAgentOutput) ToVirtualMachineAgentOutputWithContext(ctx context.Context) VirtualMachineAgentOutput {
	return o
}

func (o VirtualMachineAgentOutput) ToVirtualMachineAgentPtrOutput() VirtualMachineAgentPtrOutput {
	return o.ToVirtualMachineAgentPtrOutputWithContext(context.Background())
}

func (o VirtualMachineAgentOutput) ToVirtualMachineAgentPtrOutputWithContext(ctx context.Context) VirtualMachineAgentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineAgent) *VirtualMachineAgent {
		return &v
	}).(VirtualMachineAgentPtrOutput)
}

// Whether to enable the QEMU agent (defaults
// to `false`).
func (o VirtualMachineAgentOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineAgent) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The maximum amount of time to wait for data from
// the QEMU agent to become available ( defaults to `15m`).
func (o VirtualMachineAgentOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineAgent) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// Whether to enable the FSTRIM feature in the QEMU agent
// (defaults to `false`).
func (o VirtualMachineAgentOutput) Trim() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineAgent) *bool { return v.Trim }).(pulumi.BoolPtrOutput)
}

// The QEMU agent interface type (defaults to `virtio`).
func (o VirtualMachineAgentOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineAgent) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type VirtualMachineAgentPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineAgentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineAgent)(nil)).Elem()
}

func (o VirtualMachineAgentPtrOutput) ToVirtualMachineAgentPtrOutput() VirtualMachineAgentPtrOutput {
	return o
}

func (o VirtualMachineAgentPtrOutput) ToVirtualMachineAgentPtrOutputWithContext(ctx context.Context) VirtualMachineAgentPtrOutput {
	return o
}

func (o VirtualMachineAgentPtrOutput) Elem() VirtualMachineAgentOutput {
	return o.ApplyT(func(v *VirtualMachineAgent) VirtualMachineAgent {
		if v != nil {
			return *v
		}
		var ret VirtualMachineAgent
		return ret
	}).(VirtualMachineAgentOutput)
}

// Whether to enable the QEMU agent (defaults
// to `false`).
func (o VirtualMachineAgentPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachineAgent) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The maximum amount of time to wait for data from
// the QEMU agent to become available ( defaults to `15m`).
func (o VirtualMachineAgentPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineAgent) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Whether to enable the FSTRIM feature in the QEMU agent
// (defaults to `false`).
func (o VirtualMachineAgentPtrOutput) Trim() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachineAgent) *bool {
		if v == nil {
			return nil
		}
		return v.Trim
	}).(pulumi.BoolPtrOutput)
}

// The QEMU agent interface type (defaults to `virtio`).
func (o VirtualMachineAgentPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineAgent) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type VirtualMachineAudioDevice struct {
	// The device (defaults to `intel-hda`).
	// - `AC97` - Intel 82801AA AC97 Audio.
	// - `ich9-intel-hda` - Intel HD Audio Controller (ich9).
	// - `intel-hda` - Intel HD Audio.
	Device *string `pulumi:"device"`
	// The driver (defaults to `spice`).
	Driver *string `pulumi:"driver"`
	// Whether to enable the audio device (defaults
	// to `true`).
	Enabled *bool `pulumi:"enabled"`
}

// VirtualMachineAudioDeviceInput is an input type that accepts VirtualMachineAudioDeviceArgs and VirtualMachineAudioDeviceOutput values.
// You can construct a concrete instance of `VirtualMachineAudioDeviceInput` via:
//
//	VirtualMachineAudioDeviceArgs{...}
type VirtualMachineAudioDeviceInput interface {
	pulumi.Input

	ToVirtualMachineAudioDeviceOutput() VirtualMachineAudioDeviceOutput
	ToVirtualMachineAudioDeviceOutputWithContext(context.Context) VirtualMachineAudioDeviceOutput
}

type VirtualMachineAudioDeviceArgs struct {
	// The device (defaults to `intel-hda`).
	// - `AC97` - Intel 82801AA AC97 Audio.
	// - `ich9-intel-hda` - Intel HD Audio Controller (ich9).
	// - `intel-hda` - Intel HD Audio.
	Device pulumi.StringPtrInput `pulumi:"device"`
	// The driver (defaults to `spice`).
	Driver pulumi.StringPtrInput `pulumi:"driver"`
	// Whether to enable the audio device (defaults
	// to `true`).
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (VirtualMachineAudioDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineAudioDevice)(nil)).Elem()
}

func (i VirtualMachineAudioDeviceArgs) ToVirtualMachineAudioDeviceOutput() VirtualMachineAudioDeviceOutput {
	return i.ToVirtualMachineAudioDeviceOutputWithContext(context.Background())
}

func (i VirtualMachineAudioDeviceArgs) ToVirtualMachineAudioDeviceOutputWithContext(ctx context.Context) VirtualMachineAudioDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineAudioDeviceOutput)
}

func (i VirtualMachineAudioDeviceArgs) ToVirtualMachineAudioDevicePtrOutput() VirtualMachineAudioDevicePtrOutput {
	return i.ToVirtualMachineAudioDevicePtrOutputWithContext(context.Background())
}

func (i VirtualMachineAudioDeviceArgs) ToVirtualMachineAudioDevicePtrOutputWithContext(ctx context.Context) VirtualMachineAudioDevicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineAudioDeviceOutput).ToVirtualMachineAudioDevicePtrOutputWithContext(ctx)
}

// VirtualMachineAudioDevicePtrInput is an input type that accepts VirtualMachineAudioDeviceArgs, VirtualMachineAudioDevicePtr and VirtualMachineAudioDevicePtrOutput values.
// You can construct a concrete instance of `VirtualMachineAudioDevicePtrInput` via:
//
//	        VirtualMachineAudioDeviceArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineAudioDevicePtrInput interface {
	pulumi.Input

	ToVirtualMachineAudioDevicePtrOutput() VirtualMachineAudioDevicePtrOutput
	ToVirtualMachineAudioDevicePtrOutputWithContext(context.Context) VirtualMachineAudioDevicePtrOutput
}

type virtualMachineAudioDevicePtrType VirtualMachineAudioDeviceArgs

func VirtualMachineAudioDevicePtr(v *VirtualMachineAudioDeviceArgs) VirtualMachineAudioDevicePtrInput {
	return (*virtualMachineAudioDevicePtrType)(v)
}

func (*virtualMachineAudioDevicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineAudioDevice)(nil)).Elem()
}

func (i *virtualMachineAudioDevicePtrType) ToVirtualMachineAudioDevicePtrOutput() VirtualMachineAudioDevicePtrOutput {
	return i.ToVirtualMachineAudioDevicePtrOutputWithContext(context.Background())
}

func (i *virtualMachineAudioDevicePtrType) ToVirtualMachineAudioDevicePtrOutputWithContext(ctx context.Context) VirtualMachineAudioDevicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineAudioDevicePtrOutput)
}

type VirtualMachineAudioDeviceOutput struct{ *pulumi.OutputState }

func (VirtualMachineAudioDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineAudioDevice)(nil)).Elem()
}

func (o VirtualMachineAudioDeviceOutput) ToVirtualMachineAudioDeviceOutput() VirtualMachineAudioDeviceOutput {
	return o
}

func (o VirtualMachineAudioDeviceOutput) ToVirtualMachineAudioDeviceOutputWithContext(ctx context.Context) VirtualMachineAudioDeviceOutput {
	return o
}

func (o VirtualMachineAudioDeviceOutput) ToVirtualMachineAudioDevicePtrOutput() VirtualMachineAudioDevicePtrOutput {
	return o.ToVirtualMachineAudioDevicePtrOutputWithContext(context.Background())
}

func (o VirtualMachineAudioDeviceOutput) ToVirtualMachineAudioDevicePtrOutputWithContext(ctx context.Context) VirtualMachineAudioDevicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineAudioDevice) *VirtualMachineAudioDevice {
		return &v
	}).(VirtualMachineAudioDevicePtrOutput)
}

// The device (defaults to `intel-hda`).
// - `AC97` - Intel 82801AA AC97 Audio.
// - `ich9-intel-hda` - Intel HD Audio Controller (ich9).
// - `intel-hda` - Intel HD Audio.
func (o VirtualMachineAudioDeviceOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineAudioDevice) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// The driver (defaults to `spice`).
func (o VirtualMachineAudioDeviceOutput) Driver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineAudioDevice) *string { return v.Driver }).(pulumi.StringPtrOutput)
}

// Whether to enable the audio device (defaults
// to `true`).
func (o VirtualMachineAudioDeviceOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineAudioDevice) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type VirtualMachineAudioDevicePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineAudioDevicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineAudioDevice)(nil)).Elem()
}

func (o VirtualMachineAudioDevicePtrOutput) ToVirtualMachineAudioDevicePtrOutput() VirtualMachineAudioDevicePtrOutput {
	return o
}

func (o VirtualMachineAudioDevicePtrOutput) ToVirtualMachineAudioDevicePtrOutputWithContext(ctx context.Context) VirtualMachineAudioDevicePtrOutput {
	return o
}

func (o VirtualMachineAudioDevicePtrOutput) Elem() VirtualMachineAudioDeviceOutput {
	return o.ApplyT(func(v *VirtualMachineAudioDevice) VirtualMachineAudioDevice {
		if v != nil {
			return *v
		}
		var ret VirtualMachineAudioDevice
		return ret
	}).(VirtualMachineAudioDeviceOutput)
}

// The device (defaults to `intel-hda`).
// - `AC97` - Intel 82801AA AC97 Audio.
// - `ich9-intel-hda` - Intel HD Audio Controller (ich9).
// - `intel-hda` - Intel HD Audio.
func (o VirtualMachineAudioDevicePtrOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineAudioDevice) *string {
		if v == nil {
			return nil
		}
		return v.Device
	}).(pulumi.StringPtrOutput)
}

// The driver (defaults to `spice`).
func (o VirtualMachineAudioDevicePtrOutput) Driver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineAudioDevice) *string {
		if v == nil {
			return nil
		}
		return v.Driver
	}).(pulumi.StringPtrOutput)
}

// Whether to enable the audio device (defaults
// to `true`).
func (o VirtualMachineAudioDevicePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachineAudioDevice) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type VirtualMachineCdrom struct {
	// Whether to enable the CDROM drive (defaults
	// to `false`).
	Enabled *bool `pulumi:"enabled"`
	// A file ID for an ISO file (defaults to `cdrom` as
	// in the physical drive). Use `none` to leave the CDROM drive empty.
	FileId *string `pulumi:"fileId"`
	// A hardware interface to connect CDROM drive to,
	// must be `ideN` (defaults to `ide3`). Note that `q35` machine type only
	// supports `ide0` and `ide2`.
	Interface *string `pulumi:"interface"`
}

// VirtualMachineCdromInput is an input type that accepts VirtualMachineCdromArgs and VirtualMachineCdromOutput values.
// You can construct a concrete instance of `VirtualMachineCdromInput` via:
//
//	VirtualMachineCdromArgs{...}
type VirtualMachineCdromInput interface {
	pulumi.Input

	ToVirtualMachineCdromOutput() VirtualMachineCdromOutput
	ToVirtualMachineCdromOutputWithContext(context.Context) VirtualMachineCdromOutput
}

type VirtualMachineCdromArgs struct {
	// Whether to enable the CDROM drive (defaults
	// to `false`).
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// A file ID for an ISO file (defaults to `cdrom` as
	// in the physical drive). Use `none` to leave the CDROM drive empty.
	FileId pulumi.StringPtrInput `pulumi:"fileId"`
	// A hardware interface to connect CDROM drive to,
	// must be `ideN` (defaults to `ide3`). Note that `q35` machine type only
	// supports `ide0` and `ide2`.
	Interface pulumi.StringPtrInput `pulumi:"interface"`
}

func (VirtualMachineCdromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineCdrom)(nil)).Elem()
}

func (i VirtualMachineCdromArgs) ToVirtualMachineCdromOutput() VirtualMachineCdromOutput {
	return i.ToVirtualMachineCdromOutputWithContext(context.Background())
}

func (i VirtualMachineCdromArgs) ToVirtualMachineCdromOutputWithContext(ctx context.Context) VirtualMachineCdromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineCdromOutput)
}

func (i VirtualMachineCdromArgs) ToVirtualMachineCdromPtrOutput() VirtualMachineCdromPtrOutput {
	return i.ToVirtualMachineCdromPtrOutputWithContext(context.Background())
}

func (i VirtualMachineCdromArgs) ToVirtualMachineCdromPtrOutputWithContext(ctx context.Context) VirtualMachineCdromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineCdromOutput).ToVirtualMachineCdromPtrOutputWithContext(ctx)
}

// VirtualMachineCdromPtrInput is an input type that accepts VirtualMachineCdromArgs, VirtualMachineCdromPtr and VirtualMachineCdromPtrOutput values.
// You can construct a concrete instance of `VirtualMachineCdromPtrInput` via:
//
//	        VirtualMachineCdromArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineCdromPtrInput interface {
	pulumi.Input

	ToVirtualMachineCdromPtrOutput() VirtualMachineCdromPtrOutput
	ToVirtualMachineCdromPtrOutputWithContext(context.Context) VirtualMachineCdromPtrOutput
}

type virtualMachineCdromPtrType VirtualMachineCdromArgs

func VirtualMachineCdromPtr(v *VirtualMachineCdromArgs) VirtualMachineCdromPtrInput {
	return (*virtualMachineCdromPtrType)(v)
}

func (*virtualMachineCdromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineCdrom)(nil)).Elem()
}

func (i *virtualMachineCdromPtrType) ToVirtualMachineCdromPtrOutput() VirtualMachineCdromPtrOutput {
	return i.ToVirtualMachineCdromPtrOutputWithContext(context.Background())
}

func (i *virtualMachineCdromPtrType) ToVirtualMachineCdromPtrOutputWithContext(ctx context.Context) VirtualMachineCdromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineCdromPtrOutput)
}

type VirtualMachineCdromOutput struct{ *pulumi.OutputState }

func (VirtualMachineCdromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineCdrom)(nil)).Elem()
}

func (o VirtualMachineCdromOutput) ToVirtualMachineCdromOutput() VirtualMachineCdromOutput {
	return o
}

func (o VirtualMachineCdromOutput) ToVirtualMachineCdromOutputWithContext(ctx context.Context) VirtualMachineCdromOutput {
	return o
}

func (o VirtualMachineCdromOutput) ToVirtualMachineCdromPtrOutput() VirtualMachineCdromPtrOutput {
	return o.ToVirtualMachineCdromPtrOutputWithContext(context.Background())
}

func (o VirtualMachineCdromOutput) ToVirtualMachineCdromPtrOutputWithContext(ctx context.Context) VirtualMachineCdromPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineCdrom) *VirtualMachineCdrom {
		return &v
	}).(VirtualMachineCdromPtrOutput)
}

// Whether to enable the CDROM drive (defaults
// to `false`).
func (o VirtualMachineCdromOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineCdrom) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// A file ID for an ISO file (defaults to `cdrom` as
// in the physical drive). Use `none` to leave the CDROM drive empty.
func (o VirtualMachineCdromOutput) FileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineCdrom) *string { return v.FileId }).(pulumi.StringPtrOutput)
}

// A hardware interface to connect CDROM drive to,
// must be `ideN` (defaults to `ide3`). Note that `q35` machine type only
// supports `ide0` and `ide2`.
func (o VirtualMachineCdromOutput) Interface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineCdrom) *string { return v.Interface }).(pulumi.StringPtrOutput)
}

type VirtualMachineCdromPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineCdromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineCdrom)(nil)).Elem()
}

func (o VirtualMachineCdromPtrOutput) ToVirtualMachineCdromPtrOutput() VirtualMachineCdromPtrOutput {
	return o
}

func (o VirtualMachineCdromPtrOutput) ToVirtualMachineCdromPtrOutputWithContext(ctx context.Context) VirtualMachineCdromPtrOutput {
	return o
}

func (o VirtualMachineCdromPtrOutput) Elem() VirtualMachineCdromOutput {
	return o.ApplyT(func(v *VirtualMachineCdrom) VirtualMachineCdrom {
		if v != nil {
			return *v
		}
		var ret VirtualMachineCdrom
		return ret
	}).(VirtualMachineCdromOutput)
}

// Whether to enable the CDROM drive (defaults
// to `false`).
func (o VirtualMachineCdromPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachineCdrom) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// A file ID for an ISO file (defaults to `cdrom` as
// in the physical drive). Use `none` to leave the CDROM drive empty.
func (o VirtualMachineCdromPtrOutput) FileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineCdrom) *string {
		if v == nil {
			return nil
		}
		return v.FileId
	}).(pulumi.StringPtrOutput)
}

// A hardware interface to connect CDROM drive to,
// must be `ideN` (defaults to `ide3`). Note that `q35` machine type only
// supports `ide0` and `ide2`.
func (o VirtualMachineCdromPtrOutput) Interface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineCdrom) *string {
		if v == nil {
			return nil
		}
		return v.Interface
	}).(pulumi.StringPtrOutput)
}

type VirtualMachineClone struct {
	// The identifier for the target datastore.
	DatastoreId *string `pulumi:"datastoreId"`
	// Full or linked clone (defaults to `true`).
	Full *bool `pulumi:"full"`
	// The name of the source node (leave blank, if
	// equal to the `nodeName` argument).
	NodeName *string `pulumi:"nodeName"`
	// Number of retries in Proxmox for clone vm.
	// Sometimes Proxmox errors with timeout when creating multiple clones at
	// once.
	Retries *int `pulumi:"retries"`
	// The identifier for the source VM.
	VmId int `pulumi:"vmId"`
}

// VirtualMachineCloneInput is an input type that accepts VirtualMachineCloneArgs and VirtualMachineCloneOutput values.
// You can construct a concrete instance of `VirtualMachineCloneInput` via:
//
//	VirtualMachineCloneArgs{...}
type VirtualMachineCloneInput interface {
	pulumi.Input

	ToVirtualMachineCloneOutput() VirtualMachineCloneOutput
	ToVirtualMachineCloneOutputWithContext(context.Context) VirtualMachineCloneOutput
}

type VirtualMachineCloneArgs struct {
	// The identifier for the target datastore.
	DatastoreId pulumi.StringPtrInput `pulumi:"datastoreId"`
	// Full or linked clone (defaults to `true`).
	Full pulumi.BoolPtrInput `pulumi:"full"`
	// The name of the source node (leave blank, if
	// equal to the `nodeName` argument).
	NodeName pulumi.StringPtrInput `pulumi:"nodeName"`
	// Number of retries in Proxmox for clone vm.
	// Sometimes Proxmox errors with timeout when creating multiple clones at
	// once.
	Retries pulumi.IntPtrInput `pulumi:"retries"`
	// The identifier for the source VM.
	VmId pulumi.IntInput `pulumi:"vmId"`
}

func (VirtualMachineCloneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineClone)(nil)).Elem()
}

func (i VirtualMachineCloneArgs) ToVirtualMachineCloneOutput() VirtualMachineCloneOutput {
	return i.ToVirtualMachineCloneOutputWithContext(context.Background())
}

func (i VirtualMachineCloneArgs) ToVirtualMachineCloneOutputWithContext(ctx context.Context) VirtualMachineCloneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineCloneOutput)
}

func (i VirtualMachineCloneArgs) ToVirtualMachineClonePtrOutput() VirtualMachineClonePtrOutput {
	return i.ToVirtualMachineClonePtrOutputWithContext(context.Background())
}

func (i VirtualMachineCloneArgs) ToVirtualMachineClonePtrOutputWithContext(ctx context.Context) VirtualMachineClonePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineCloneOutput).ToVirtualMachineClonePtrOutputWithContext(ctx)
}

// VirtualMachineClonePtrInput is an input type that accepts VirtualMachineCloneArgs, VirtualMachineClonePtr and VirtualMachineClonePtrOutput values.
// You can construct a concrete instance of `VirtualMachineClonePtrInput` via:
//
//	        VirtualMachineCloneArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineClonePtrInput interface {
	pulumi.Input

	ToVirtualMachineClonePtrOutput() VirtualMachineClonePtrOutput
	ToVirtualMachineClonePtrOutputWithContext(context.Context) VirtualMachineClonePtrOutput
}

type virtualMachineClonePtrType VirtualMachineCloneArgs

func VirtualMachineClonePtr(v *VirtualMachineCloneArgs) VirtualMachineClonePtrInput {
	return (*virtualMachineClonePtrType)(v)
}

func (*virtualMachineClonePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineClone)(nil)).Elem()
}

func (i *virtualMachineClonePtrType) ToVirtualMachineClonePtrOutput() VirtualMachineClonePtrOutput {
	return i.ToVirtualMachineClonePtrOutputWithContext(context.Background())
}

func (i *virtualMachineClonePtrType) ToVirtualMachineClonePtrOutputWithContext(ctx context.Context) VirtualMachineClonePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineClonePtrOutput)
}

type VirtualMachineCloneOutput struct{ *pulumi.OutputState }

func (VirtualMachineCloneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineClone)(nil)).Elem()
}

func (o VirtualMachineCloneOutput) ToVirtualMachineCloneOutput() VirtualMachineCloneOutput {
	return o
}

func (o VirtualMachineCloneOutput) ToVirtualMachineCloneOutputWithContext(ctx context.Context) VirtualMachineCloneOutput {
	return o
}

func (o VirtualMachineCloneOutput) ToVirtualMachineClonePtrOutput() VirtualMachineClonePtrOutput {
	return o.ToVirtualMachineClonePtrOutputWithContext(context.Background())
}

func (o VirtualMachineCloneOutput) ToVirtualMachineClonePtrOutputWithContext(ctx context.Context) VirtualMachineClonePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineClone) *VirtualMachineClone {
		return &v
	}).(VirtualMachineClonePtrOutput)
}

// The identifier for the target datastore.
func (o VirtualMachineCloneOutput) DatastoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineClone) *string { return v.DatastoreId }).(pulumi.StringPtrOutput)
}

// Full or linked clone (defaults to `true`).
func (o VirtualMachineCloneOutput) Full() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineClone) *bool { return v.Full }).(pulumi.BoolPtrOutput)
}

// The name of the source node (leave blank, if
// equal to the `nodeName` argument).
func (o VirtualMachineCloneOutput) NodeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineClone) *string { return v.NodeName }).(pulumi.StringPtrOutput)
}

// Number of retries in Proxmox for clone vm.
// Sometimes Proxmox errors with timeout when creating multiple clones at
// once.
func (o VirtualMachineCloneOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineClone) *int { return v.Retries }).(pulumi.IntPtrOutput)
}

// The identifier for the source VM.
func (o VirtualMachineCloneOutput) VmId() pulumi.IntOutput {
	return o.ApplyT(func(v VirtualMachineClone) int { return v.VmId }).(pulumi.IntOutput)
}

type VirtualMachineClonePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineClonePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineClone)(nil)).Elem()
}

func (o VirtualMachineClonePtrOutput) ToVirtualMachineClonePtrOutput() VirtualMachineClonePtrOutput {
	return o
}

func (o VirtualMachineClonePtrOutput) ToVirtualMachineClonePtrOutputWithContext(ctx context.Context) VirtualMachineClonePtrOutput {
	return o
}

func (o VirtualMachineClonePtrOutput) Elem() VirtualMachineCloneOutput {
	return o.ApplyT(func(v *VirtualMachineClone) VirtualMachineClone {
		if v != nil {
			return *v
		}
		var ret VirtualMachineClone
		return ret
	}).(VirtualMachineCloneOutput)
}

// The identifier for the target datastore.
func (o VirtualMachineClonePtrOutput) DatastoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineClone) *string {
		if v == nil {
			return nil
		}
		return v.DatastoreId
	}).(pulumi.StringPtrOutput)
}

// Full or linked clone (defaults to `true`).
func (o VirtualMachineClonePtrOutput) Full() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachineClone) *bool {
		if v == nil {
			return nil
		}
		return v.Full
	}).(pulumi.BoolPtrOutput)
}

// The name of the source node (leave blank, if
// equal to the `nodeName` argument).
func (o VirtualMachineClonePtrOutput) NodeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineClone) *string {
		if v == nil {
			return nil
		}
		return v.NodeName
	}).(pulumi.StringPtrOutput)
}

// Number of retries in Proxmox for clone vm.
// Sometimes Proxmox errors with timeout when creating multiple clones at
// once.
func (o VirtualMachineClonePtrOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineClone) *int {
		if v == nil {
			return nil
		}
		return v.Retries
	}).(pulumi.IntPtrOutput)
}

// The identifier for the source VM.
func (o VirtualMachineClonePtrOutput) VmId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineClone) *int {
		if v == nil {
			return nil
		}
		return &v.VmId
	}).(pulumi.IntPtrOutput)
}

type VirtualMachineCpu struct {
	// The CPU cores that are used to run the VMâ€™s vCPU. The
	// value is a list of CPU IDs, separated by commas. The CPU IDs are zero-based.
	// For example, `0,1,2,3` (which also can be shortened to `0-3`) means that the VMâ€™s vCPUs are run on the first four
	// CPU cores. Setting `affinity` is only allowed for `root@pam` authenticated user.
	Affinity *string `pulumi:"affinity"`
	// The CPU architecture (defaults to `x8664`).
	Architecture *string `pulumi:"architecture"`
	// The number of CPU cores (defaults to `1`).
	Cores *int `pulumi:"cores"`
	// The CPU flags.
	// - `+aes`/`-aes` - Activate AES instruction set for HW acceleration.
	// - `+amd-no-ssb`/`-amd-no-ssb` - Notifies guest OS that host is not
	//   vulnerable for Spectre on AMD CPUs.
	// - `+amd-ssbd`/`-amd-ssbd` - Improves Spectre mitigation performance with
	//   AMD CPUs, best used with "virt-ssbd".
	// - `+hv-evmcs`/`-hv-evmcs` - Improve performance for nested
	//   virtualization (only supported on Intel CPUs).
	// - `+hv-tlbflush`/`-hv-tlbflush` - Improve performance in overcommitted
	//   Windows guests (may lead to guest BSOD on old CPUs).
	// - `+ibpb`/`-ibpb` - Allows improved Spectre mitigation on AMD CPUs.
	// - `+md-clear`/`-md-clear` - Required to let the guest OS know if MDS is
	//   mitigated correctly.
	// - `+pcid`/`-pcid` - Meltdown fix cost reduction on Westmere, Sandy- and
	//   Ivy Bridge Intel CPUs.
	// - `+pdpe1gb`/`-pdpe1gb` - Allows guest OS to use 1 GB size pages, if
	//   host HW supports it.
	// - `+spec-ctrl`/`-spec-ctrl` - Allows improved Spectre mitigation with
	//   Intel CPUs.
	// - `+ssbd`/`-ssbd` - Protection for "Speculative Store Bypass" for Intel
	//   models.
	// - `+virt-ssbd`/`-virt-ssbd` - Basis for "Speculative Store Bypass"
	//   protection for AMD models.
	Flags []string `pulumi:"flags"`
	// The number of hotplugged vCPUs (defaults
	// to `0`).
	Hotplugged *int `pulumi:"hotplugged"`
	// Limit of CPU usage, `0...128`. (defaults to `0` -- no limit).
	Limit *int `pulumi:"limit"`
	// Enable/disable NUMA. (default to `false`)
	Numa *bool `pulumi:"numa"`
	// The number of CPU sockets (defaults to `1`).
	Sockets *int `pulumi:"sockets"`
	// The emulated CPU type, it's recommended to
	// use `x86-64-v2-AES` (defaults to `qemu64`).
	Type *string `pulumi:"type"`
	// The CPU units (defaults to `1024`).
	Units *int `pulumi:"units"`
}

// VirtualMachineCpuInput is an input type that accepts VirtualMachineCpuArgs and VirtualMachineCpuOutput values.
// You can construct a concrete instance of `VirtualMachineCpuInput` via:
//
//	VirtualMachineCpuArgs{...}
type VirtualMachineCpuInput interface {
	pulumi.Input

	ToVirtualMachineCpuOutput() VirtualMachineCpuOutput
	ToVirtualMachineCpuOutputWithContext(context.Context) VirtualMachineCpuOutput
}

type VirtualMachineCpuArgs struct {
	// The CPU cores that are used to run the VMâ€™s vCPU. The
	// value is a list of CPU IDs, separated by commas. The CPU IDs are zero-based.
	// For example, `0,1,2,3` (which also can be shortened to `0-3`) means that the VMâ€™s vCPUs are run on the first four
	// CPU cores. Setting `affinity` is only allowed for `root@pam` authenticated user.
	Affinity pulumi.StringPtrInput `pulumi:"affinity"`
	// The CPU architecture (defaults to `x8664`).
	Architecture pulumi.StringPtrInput `pulumi:"architecture"`
	// The number of CPU cores (defaults to `1`).
	Cores pulumi.IntPtrInput `pulumi:"cores"`
	// The CPU flags.
	// - `+aes`/`-aes` - Activate AES instruction set for HW acceleration.
	// - `+amd-no-ssb`/`-amd-no-ssb` - Notifies guest OS that host is not
	//   vulnerable for Spectre on AMD CPUs.
	// - `+amd-ssbd`/`-amd-ssbd` - Improves Spectre mitigation performance with
	//   AMD CPUs, best used with "virt-ssbd".
	// - `+hv-evmcs`/`-hv-evmcs` - Improve performance for nested
	//   virtualization (only supported on Intel CPUs).
	// - `+hv-tlbflush`/`-hv-tlbflush` - Improve performance in overcommitted
	//   Windows guests (may lead to guest BSOD on old CPUs).
	// - `+ibpb`/`-ibpb` - Allows improved Spectre mitigation on AMD CPUs.
	// - `+md-clear`/`-md-clear` - Required to let the guest OS know if MDS is
	//   mitigated correctly.
	// - `+pcid`/`-pcid` - Meltdown fix cost reduction on Westmere, Sandy- and
	//   Ivy Bridge Intel CPUs.
	// - `+pdpe1gb`/`-pdpe1gb` - Allows guest OS to use 1 GB size pages, if
	//   host HW supports it.
	// - `+spec-ctrl`/`-spec-ctrl` - Allows improved Spectre mitigation with
	//   Intel CPUs.
	// - `+ssbd`/`-ssbd` - Protection for "Speculative Store Bypass" for Intel
	//   models.
	// - `+virt-ssbd`/`-virt-ssbd` - Basis for "Speculative Store Bypass"
	//   protection for AMD models.
	Flags pulumi.StringArrayInput `pulumi:"flags"`
	// The number of hotplugged vCPUs (defaults
	// to `0`).
	Hotplugged pulumi.IntPtrInput `pulumi:"hotplugged"`
	// Limit of CPU usage, `0...128`. (defaults to `0` -- no limit).
	Limit pulumi.IntPtrInput `pulumi:"limit"`
	// Enable/disable NUMA. (default to `false`)
	Numa pulumi.BoolPtrInput `pulumi:"numa"`
	// The number of CPU sockets (defaults to `1`).
	Sockets pulumi.IntPtrInput `pulumi:"sockets"`
	// The emulated CPU type, it's recommended to
	// use `x86-64-v2-AES` (defaults to `qemu64`).
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The CPU units (defaults to `1024`).
	Units pulumi.IntPtrInput `pulumi:"units"`
}

func (VirtualMachineCpuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineCpu)(nil)).Elem()
}

func (i VirtualMachineCpuArgs) ToVirtualMachineCpuOutput() VirtualMachineCpuOutput {
	return i.ToVirtualMachineCpuOutputWithContext(context.Background())
}

func (i VirtualMachineCpuArgs) ToVirtualMachineCpuOutputWithContext(ctx context.Context) VirtualMachineCpuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineCpuOutput)
}

func (i VirtualMachineCpuArgs) ToVirtualMachineCpuPtrOutput() VirtualMachineCpuPtrOutput {
	return i.ToVirtualMachineCpuPtrOutputWithContext(context.Background())
}

func (i VirtualMachineCpuArgs) ToVirtualMachineCpuPtrOutputWithContext(ctx context.Context) VirtualMachineCpuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineCpuOutput).ToVirtualMachineCpuPtrOutputWithContext(ctx)
}

// VirtualMachineCpuPtrInput is an input type that accepts VirtualMachineCpuArgs, VirtualMachineCpuPtr and VirtualMachineCpuPtrOutput values.
// You can construct a concrete instance of `VirtualMachineCpuPtrInput` via:
//
//	        VirtualMachineCpuArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineCpuPtrInput interface {
	pulumi.Input

	ToVirtualMachineCpuPtrOutput() VirtualMachineCpuPtrOutput
	ToVirtualMachineCpuPtrOutputWithContext(context.Context) VirtualMachineCpuPtrOutput
}

type virtualMachineCpuPtrType VirtualMachineCpuArgs

func VirtualMachineCpuPtr(v *VirtualMachineCpuArgs) VirtualMachineCpuPtrInput {
	return (*virtualMachineCpuPtrType)(v)
}

func (*virtualMachineCpuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineCpu)(nil)).Elem()
}

func (i *virtualMachineCpuPtrType) ToVirtualMachineCpuPtrOutput() VirtualMachineCpuPtrOutput {
	return i.ToVirtualMachineCpuPtrOutputWithContext(context.Background())
}

func (i *virtualMachineCpuPtrType) ToVirtualMachineCpuPtrOutputWithContext(ctx context.Context) VirtualMachineCpuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineCpuPtrOutput)
}

type VirtualMachineCpuOutput struct{ *pulumi.OutputState }

func (VirtualMachineCpuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineCpu)(nil)).Elem()
}

func (o VirtualMachineCpuOutput) ToVirtualMachineCpuOutput() VirtualMachineCpuOutput {
	return o
}

func (o VirtualMachineCpuOutput) ToVirtualMachineCpuOutputWithContext(ctx context.Context) VirtualMachineCpuOutput {
	return o
}

func (o VirtualMachineCpuOutput) ToVirtualMachineCpuPtrOutput() VirtualMachineCpuPtrOutput {
	return o.ToVirtualMachineCpuPtrOutputWithContext(context.Background())
}

func (o VirtualMachineCpuOutput) ToVirtualMachineCpuPtrOutputWithContext(ctx context.Context) VirtualMachineCpuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineCpu) *VirtualMachineCpu {
		return &v
	}).(VirtualMachineCpuPtrOutput)
}

// The CPU cores that are used to run the VMâ€™s vCPU. The
// value is a list of CPU IDs, separated by commas. The CPU IDs are zero-based.
// For example, `0,1,2,3` (which also can be shortened to `0-3`) means that the VMâ€™s vCPUs are run on the first four
// CPU cores. Setting `affinity` is only allowed for `root@pam` authenticated user.
func (o VirtualMachineCpuOutput) Affinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineCpu) *string { return v.Affinity }).(pulumi.StringPtrOutput)
}

// The CPU architecture (defaults to `x8664`).
func (o VirtualMachineCpuOutput) Architecture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineCpu) *string { return v.Architecture }).(pulumi.StringPtrOutput)
}

// The number of CPU cores (defaults to `1`).
func (o VirtualMachineCpuOutput) Cores() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineCpu) *int { return v.Cores }).(pulumi.IntPtrOutput)
}

// The CPU flags.
//   - `+aes`/`-aes` - Activate AES instruction set for HW acceleration.
//   - `+amd-no-ssb`/`-amd-no-ssb` - Notifies guest OS that host is not
//     vulnerable for Spectre on AMD CPUs.
//   - `+amd-ssbd`/`-amd-ssbd` - Improves Spectre mitigation performance with
//     AMD CPUs, best used with "virt-ssbd".
//   - `+hv-evmcs`/`-hv-evmcs` - Improve performance for nested
//     virtualization (only supported on Intel CPUs).
//   - `+hv-tlbflush`/`-hv-tlbflush` - Improve performance in overcommitted
//     Windows guests (may lead to guest BSOD on old CPUs).
//   - `+ibpb`/`-ibpb` - Allows improved Spectre mitigation on AMD CPUs.
//   - `+md-clear`/`-md-clear` - Required to let the guest OS know if MDS is
//     mitigated correctly.
//   - `+pcid`/`-pcid` - Meltdown fix cost reduction on Westmere, Sandy- and
//     Ivy Bridge Intel CPUs.
//   - `+pdpe1gb`/`-pdpe1gb` - Allows guest OS to use 1 GB size pages, if
//     host HW supports it.
//   - `+spec-ctrl`/`-spec-ctrl` - Allows improved Spectre mitigation with
//     Intel CPUs.
//   - `+ssbd`/`-ssbd` - Protection for "Speculative Store Bypass" for Intel
//     models.
//   - `+virt-ssbd`/`-virt-ssbd` - Basis for "Speculative Store Bypass"
//     protection for AMD models.
func (o VirtualMachineCpuOutput) Flags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualMachineCpu) []string { return v.Flags }).(pulumi.StringArrayOutput)
}

// The number of hotplugged vCPUs (defaults
// to `0`).
func (o VirtualMachineCpuOutput) Hotplugged() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineCpu) *int { return v.Hotplugged }).(pulumi.IntPtrOutput)
}

// Limit of CPU usage, `0...128`. (defaults to `0` -- no limit).
func (o VirtualMachineCpuOutput) Limit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineCpu) *int { return v.Limit }).(pulumi.IntPtrOutput)
}

// Enable/disable NUMA. (default to `false`)
func (o VirtualMachineCpuOutput) Numa() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineCpu) *bool { return v.Numa }).(pulumi.BoolPtrOutput)
}

// The number of CPU sockets (defaults to `1`).
func (o VirtualMachineCpuOutput) Sockets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineCpu) *int { return v.Sockets }).(pulumi.IntPtrOutput)
}

// The emulated CPU type, it's recommended to
// use `x86-64-v2-AES` (defaults to `qemu64`).
func (o VirtualMachineCpuOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineCpu) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The CPU units (defaults to `1024`).
func (o VirtualMachineCpuOutput) Units() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineCpu) *int { return v.Units }).(pulumi.IntPtrOutput)
}

type VirtualMachineCpuPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineCpuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineCpu)(nil)).Elem()
}

func (o VirtualMachineCpuPtrOutput) ToVirtualMachineCpuPtrOutput() VirtualMachineCpuPtrOutput {
	return o
}

func (o VirtualMachineCpuPtrOutput) ToVirtualMachineCpuPtrOutputWithContext(ctx context.Context) VirtualMachineCpuPtrOutput {
	return o
}

func (o VirtualMachineCpuPtrOutput) Elem() VirtualMachineCpuOutput {
	return o.ApplyT(func(v *VirtualMachineCpu) VirtualMachineCpu {
		if v != nil {
			return *v
		}
		var ret VirtualMachineCpu
		return ret
	}).(VirtualMachineCpuOutput)
}

// The CPU cores that are used to run the VMâ€™s vCPU. The
// value is a list of CPU IDs, separated by commas. The CPU IDs are zero-based.
// For example, `0,1,2,3` (which also can be shortened to `0-3`) means that the VMâ€™s vCPUs are run on the first four
// CPU cores. Setting `affinity` is only allowed for `root@pam` authenticated user.
func (o VirtualMachineCpuPtrOutput) Affinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineCpu) *string {
		if v == nil {
			return nil
		}
		return v.Affinity
	}).(pulumi.StringPtrOutput)
}

// The CPU architecture (defaults to `x8664`).
func (o VirtualMachineCpuPtrOutput) Architecture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineCpu) *string {
		if v == nil {
			return nil
		}
		return v.Architecture
	}).(pulumi.StringPtrOutput)
}

// The number of CPU cores (defaults to `1`).
func (o VirtualMachineCpuPtrOutput) Cores() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineCpu) *int {
		if v == nil {
			return nil
		}
		return v.Cores
	}).(pulumi.IntPtrOutput)
}

// The CPU flags.
//   - `+aes`/`-aes` - Activate AES instruction set for HW acceleration.
//   - `+amd-no-ssb`/`-amd-no-ssb` - Notifies guest OS that host is not
//     vulnerable for Spectre on AMD CPUs.
//   - `+amd-ssbd`/`-amd-ssbd` - Improves Spectre mitigation performance with
//     AMD CPUs, best used with "virt-ssbd".
//   - `+hv-evmcs`/`-hv-evmcs` - Improve performance for nested
//     virtualization (only supported on Intel CPUs).
//   - `+hv-tlbflush`/`-hv-tlbflush` - Improve performance in overcommitted
//     Windows guests (may lead to guest BSOD on old CPUs).
//   - `+ibpb`/`-ibpb` - Allows improved Spectre mitigation on AMD CPUs.
//   - `+md-clear`/`-md-clear` - Required to let the guest OS know if MDS is
//     mitigated correctly.
//   - `+pcid`/`-pcid` - Meltdown fix cost reduction on Westmere, Sandy- and
//     Ivy Bridge Intel CPUs.
//   - `+pdpe1gb`/`-pdpe1gb` - Allows guest OS to use 1 GB size pages, if
//     host HW supports it.
//   - `+spec-ctrl`/`-spec-ctrl` - Allows improved Spectre mitigation with
//     Intel CPUs.
//   - `+ssbd`/`-ssbd` - Protection for "Speculative Store Bypass" for Intel
//     models.
//   - `+virt-ssbd`/`-virt-ssbd` - Basis for "Speculative Store Bypass"
//     protection for AMD models.
func (o VirtualMachineCpuPtrOutput) Flags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualMachineCpu) []string {
		if v == nil {
			return nil
		}
		return v.Flags
	}).(pulumi.StringArrayOutput)
}

// The number of hotplugged vCPUs (defaults
// to `0`).
func (o VirtualMachineCpuPtrOutput) Hotplugged() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineCpu) *int {
		if v == nil {
			return nil
		}
		return v.Hotplugged
	}).(pulumi.IntPtrOutput)
}

// Limit of CPU usage, `0...128`. (defaults to `0` -- no limit).
func (o VirtualMachineCpuPtrOutput) Limit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineCpu) *int {
		if v == nil {
			return nil
		}
		return v.Limit
	}).(pulumi.IntPtrOutput)
}

// Enable/disable NUMA. (default to `false`)
func (o VirtualMachineCpuPtrOutput) Numa() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachineCpu) *bool {
		if v == nil {
			return nil
		}
		return v.Numa
	}).(pulumi.BoolPtrOutput)
}

// The number of CPU sockets (defaults to `1`).
func (o VirtualMachineCpuPtrOutput) Sockets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineCpu) *int {
		if v == nil {
			return nil
		}
		return v.Sockets
	}).(pulumi.IntPtrOutput)
}

// The emulated CPU type, it's recommended to
// use `x86-64-v2-AES` (defaults to `qemu64`).
func (o VirtualMachineCpuPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineCpu) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The CPU units (defaults to `1024`).
func (o VirtualMachineCpuPtrOutput) Units() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineCpu) *int {
		if v == nil {
			return nil
		}
		return v.Units
	}).(pulumi.IntPtrOutput)
}

type VirtualMachineDisk struct {
	// The disk AIO mode (defaults to `ioUring`).
	Aio *string `pulumi:"aio"`
	// Whether the drive should be included when making backups (defaults to `true`).
	Backup *bool `pulumi:"backup"`
	// The cache type (defaults to `none`).
	Cache *string `pulumi:"cache"`
	// The identifier for the datastore to create
	// the disk in (defaults to `local-lvm`).
	DatastoreId *string `pulumi:"datastoreId"`
	// Whether to pass discard/trim requests to the
	// underlying storage. Supported values are `on`/`ignore` (defaults
	// to `ignore`).
	Discard *string `pulumi:"discard"`
	// The file format (defaults to `qcow2`).
	FileFormat *string `pulumi:"fileFormat"`
	// The file ID for a disk image. The ID format is
	// `<datastore_id>:<content_type>/<file_name>`, for example `local:iso/centos8.img`. Can be also taken from
	// `Download.File` resource.
	FileId *string `pulumi:"fileId"`
	// The disk interface for Proxmox, currently `scsi`,
	// `sata` and `virtio` interfaces are supported. Append the disk index at
	// the end, for example, `virtio0` for the first virtio disk, `virtio1` for
	// the second, etc.
	Interface string `pulumi:"interface"`
	// Whether to use iothreads for this disk (defaults
	// to `false`).
	Iothread *bool `pulumi:"iothread"`
	// The in-datastore path to the disk image.
	// ***Experimental.***Use to attach another VM's disks,
	// or (as root only) host's filesystem paths (`datastoreId` empty string).
	// See "*Example: Attached disks*".
	PathInDatastore *string `pulumi:"pathInDatastore"`
	// Whether the drive should be considered for replication jobs (defaults to `true`).
	Replicate *bool `pulumi:"replicate"`
	// The serial number of the disk, up to 20 bytes long.
	Serial *string `pulumi:"serial"`
	// The disk size in gigabytes (defaults to `8`).
	Size *int `pulumi:"size"`
	// The speed limits.
	Speed *VirtualMachineDiskSpeed `pulumi:"speed"`
	// Whether to use an SSD emulation option for this disk (
	// defaults to `false`). Note that SSD emulation is not supported on VirtIO
	// Block drives.
	Ssd *bool `pulumi:"ssd"`
}

// VirtualMachineDiskInput is an input type that accepts VirtualMachineDiskArgs and VirtualMachineDiskOutput values.
// You can construct a concrete instance of `VirtualMachineDiskInput` via:
//
//	VirtualMachineDiskArgs{...}
type VirtualMachineDiskInput interface {
	pulumi.Input

	ToVirtualMachineDiskOutput() VirtualMachineDiskOutput
	ToVirtualMachineDiskOutputWithContext(context.Context) VirtualMachineDiskOutput
}

type VirtualMachineDiskArgs struct {
	// The disk AIO mode (defaults to `ioUring`).
	Aio pulumi.StringPtrInput `pulumi:"aio"`
	// Whether the drive should be included when making backups (defaults to `true`).
	Backup pulumi.BoolPtrInput `pulumi:"backup"`
	// The cache type (defaults to `none`).
	Cache pulumi.StringPtrInput `pulumi:"cache"`
	// The identifier for the datastore to create
	// the disk in (defaults to `local-lvm`).
	DatastoreId pulumi.StringPtrInput `pulumi:"datastoreId"`
	// Whether to pass discard/trim requests to the
	// underlying storage. Supported values are `on`/`ignore` (defaults
	// to `ignore`).
	Discard pulumi.StringPtrInput `pulumi:"discard"`
	// The file format (defaults to `qcow2`).
	FileFormat pulumi.StringPtrInput `pulumi:"fileFormat"`
	// The file ID for a disk image. The ID format is
	// `<datastore_id>:<content_type>/<file_name>`, for example `local:iso/centos8.img`. Can be also taken from
	// `Download.File` resource.
	FileId pulumi.StringPtrInput `pulumi:"fileId"`
	// The disk interface for Proxmox, currently `scsi`,
	// `sata` and `virtio` interfaces are supported. Append the disk index at
	// the end, for example, `virtio0` for the first virtio disk, `virtio1` for
	// the second, etc.
	Interface pulumi.StringInput `pulumi:"interface"`
	// Whether to use iothreads for this disk (defaults
	// to `false`).
	Iothread pulumi.BoolPtrInput `pulumi:"iothread"`
	// The in-datastore path to the disk image.
	// ***Experimental.***Use to attach another VM's disks,
	// or (as root only) host's filesystem paths (`datastoreId` empty string).
	// See "*Example: Attached disks*".
	PathInDatastore pulumi.StringPtrInput `pulumi:"pathInDatastore"`
	// Whether the drive should be considered for replication jobs (defaults to `true`).
	Replicate pulumi.BoolPtrInput `pulumi:"replicate"`
	// The serial number of the disk, up to 20 bytes long.
	Serial pulumi.StringPtrInput `pulumi:"serial"`
	// The disk size in gigabytes (defaults to `8`).
	Size pulumi.IntPtrInput `pulumi:"size"`
	// The speed limits.
	Speed VirtualMachineDiskSpeedPtrInput `pulumi:"speed"`
	// Whether to use an SSD emulation option for this disk (
	// defaults to `false`). Note that SSD emulation is not supported on VirtIO
	// Block drives.
	Ssd pulumi.BoolPtrInput `pulumi:"ssd"`
}

func (VirtualMachineDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineDisk)(nil)).Elem()
}

func (i VirtualMachineDiskArgs) ToVirtualMachineDiskOutput() VirtualMachineDiskOutput {
	return i.ToVirtualMachineDiskOutputWithContext(context.Background())
}

func (i VirtualMachineDiskArgs) ToVirtualMachineDiskOutputWithContext(ctx context.Context) VirtualMachineDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineDiskOutput)
}

// VirtualMachineDiskArrayInput is an input type that accepts VirtualMachineDiskArray and VirtualMachineDiskArrayOutput values.
// You can construct a concrete instance of `VirtualMachineDiskArrayInput` via:
//
//	VirtualMachineDiskArray{ VirtualMachineDiskArgs{...} }
type VirtualMachineDiskArrayInput interface {
	pulumi.Input

	ToVirtualMachineDiskArrayOutput() VirtualMachineDiskArrayOutput
	ToVirtualMachineDiskArrayOutputWithContext(context.Context) VirtualMachineDiskArrayOutput
}

type VirtualMachineDiskArray []VirtualMachineDiskInput

func (VirtualMachineDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineDisk)(nil)).Elem()
}

func (i VirtualMachineDiskArray) ToVirtualMachineDiskArrayOutput() VirtualMachineDiskArrayOutput {
	return i.ToVirtualMachineDiskArrayOutputWithContext(context.Background())
}

func (i VirtualMachineDiskArray) ToVirtualMachineDiskArrayOutputWithContext(ctx context.Context) VirtualMachineDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineDiskArrayOutput)
}

type VirtualMachineDiskOutput struct{ *pulumi.OutputState }

func (VirtualMachineDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineDisk)(nil)).Elem()
}

func (o VirtualMachineDiskOutput) ToVirtualMachineDiskOutput() VirtualMachineDiskOutput {
	return o
}

func (o VirtualMachineDiskOutput) ToVirtualMachineDiskOutputWithContext(ctx context.Context) VirtualMachineDiskOutput {
	return o
}

// The disk AIO mode (defaults to `ioUring`).
func (o VirtualMachineDiskOutput) Aio() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *string { return v.Aio }).(pulumi.StringPtrOutput)
}

// Whether the drive should be included when making backups (defaults to `true`).
func (o VirtualMachineDiskOutput) Backup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *bool { return v.Backup }).(pulumi.BoolPtrOutput)
}

// The cache type (defaults to `none`).
func (o VirtualMachineDiskOutput) Cache() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *string { return v.Cache }).(pulumi.StringPtrOutput)
}

// The identifier for the datastore to create
// the disk in (defaults to `local-lvm`).
func (o VirtualMachineDiskOutput) DatastoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *string { return v.DatastoreId }).(pulumi.StringPtrOutput)
}

// Whether to pass discard/trim requests to the
// underlying storage. Supported values are `on`/`ignore` (defaults
// to `ignore`).
func (o VirtualMachineDiskOutput) Discard() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *string { return v.Discard }).(pulumi.StringPtrOutput)
}

// The file format (defaults to `qcow2`).
func (o VirtualMachineDiskOutput) FileFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *string { return v.FileFormat }).(pulumi.StringPtrOutput)
}

// The file ID for a disk image. The ID format is
// `<datastore_id>:<content_type>/<file_name>`, for example `local:iso/centos8.img`. Can be also taken from
// `Download.File` resource.
func (o VirtualMachineDiskOutput) FileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *string { return v.FileId }).(pulumi.StringPtrOutput)
}

// The disk interface for Proxmox, currently `scsi`,
// `sata` and `virtio` interfaces are supported. Append the disk index at
// the end, for example, `virtio0` for the first virtio disk, `virtio1` for
// the second, etc.
func (o VirtualMachineDiskOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineDisk) string { return v.Interface }).(pulumi.StringOutput)
}

// Whether to use iothreads for this disk (defaults
// to `false`).
func (o VirtualMachineDiskOutput) Iothread() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *bool { return v.Iothread }).(pulumi.BoolPtrOutput)
}

// The in-datastore path to the disk image.
// ***Experimental.***Use to attach another VM's disks,
// or (as root only) host's filesystem paths (`datastoreId` empty string).
// See "*Example: Attached disks*".
func (o VirtualMachineDiskOutput) PathInDatastore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *string { return v.PathInDatastore }).(pulumi.StringPtrOutput)
}

// Whether the drive should be considered for replication jobs (defaults to `true`).
func (o VirtualMachineDiskOutput) Replicate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *bool { return v.Replicate }).(pulumi.BoolPtrOutput)
}

// The serial number of the disk, up to 20 bytes long.
func (o VirtualMachineDiskOutput) Serial() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *string { return v.Serial }).(pulumi.StringPtrOutput)
}

// The disk size in gigabytes (defaults to `8`).
func (o VirtualMachineDiskOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *int { return v.Size }).(pulumi.IntPtrOutput)
}

// The speed limits.
func (o VirtualMachineDiskOutput) Speed() VirtualMachineDiskSpeedPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *VirtualMachineDiskSpeed { return v.Speed }).(VirtualMachineDiskSpeedPtrOutput)
}

// Whether to use an SSD emulation option for this disk (
// defaults to `false`). Note that SSD emulation is not supported on VirtIO
// Block drives.
func (o VirtualMachineDiskOutput) Ssd() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineDisk) *bool { return v.Ssd }).(pulumi.BoolPtrOutput)
}

type VirtualMachineDiskArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineDisk)(nil)).Elem()
}

func (o VirtualMachineDiskArrayOutput) ToVirtualMachineDiskArrayOutput() VirtualMachineDiskArrayOutput {
	return o
}

func (o VirtualMachineDiskArrayOutput) ToVirtualMachineDiskArrayOutputWithContext(ctx context.Context) VirtualMachineDiskArrayOutput {
	return o
}

func (o VirtualMachineDiskArrayOutput) Index(i pulumi.IntInput) VirtualMachineDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineDisk {
		return vs[0].([]VirtualMachineDisk)[vs[1].(int)]
	}).(VirtualMachineDiskOutput)
}

type VirtualMachineDiskSpeed struct {
	// The maximum read I/O in operations per second.
	IopsRead *int `pulumi:"iopsRead"`
	// The maximum unthrottled read I/O pool in operations per second.
	IopsReadBurstable *int `pulumi:"iopsReadBurstable"`
	// The maximum write I/O in operations per second.
	IopsWrite *int `pulumi:"iopsWrite"`
	// The maximum unthrottled write I/O pool in operations per second.
	IopsWriteBurstable *int `pulumi:"iopsWriteBurstable"`
	// The maximum read speed in megabytes per second.
	Read *int `pulumi:"read"`
	// The maximum burstable read speed in
	// megabytes per second.
	ReadBurstable *int `pulumi:"readBurstable"`
	// The maximum write speed in megabytes per second.
	Write *int `pulumi:"write"`
	// The maximum burstable write speed in
	// megabytes per second.
	WriteBurstable *int `pulumi:"writeBurstable"`
}

// VirtualMachineDiskSpeedInput is an input type that accepts VirtualMachineDiskSpeedArgs and VirtualMachineDiskSpeedOutput values.
// You can construct a concrete instance of `VirtualMachineDiskSpeedInput` via:
//
//	VirtualMachineDiskSpeedArgs{...}
type VirtualMachineDiskSpeedInput interface {
	pulumi.Input

	ToVirtualMachineDiskSpeedOutput() VirtualMachineDiskSpeedOutput
	ToVirtualMachineDiskSpeedOutputWithContext(context.Context) VirtualMachineDiskSpeedOutput
}

type VirtualMachineDiskSpeedArgs struct {
	// The maximum read I/O in operations per second.
	IopsRead pulumi.IntPtrInput `pulumi:"iopsRead"`
	// The maximum unthrottled read I/O pool in operations per second.
	IopsReadBurstable pulumi.IntPtrInput `pulumi:"iopsReadBurstable"`
	// The maximum write I/O in operations per second.
	IopsWrite pulumi.IntPtrInput `pulumi:"iopsWrite"`
	// The maximum unthrottled write I/O pool in operations per second.
	IopsWriteBurstable pulumi.IntPtrInput `pulumi:"iopsWriteBurstable"`
	// The maximum read speed in megabytes per second.
	Read pulumi.IntPtrInput `pulumi:"read"`
	// The maximum burstable read speed in
	// megabytes per second.
	ReadBurstable pulumi.IntPtrInput `pulumi:"readBurstable"`
	// The maximum write speed in megabytes per second.
	Write pulumi.IntPtrInput `pulumi:"write"`
	// The maximum burstable write speed in
	// megabytes per second.
	WriteBurstable pulumi.IntPtrInput `pulumi:"writeBurstable"`
}

func (VirtualMachineDiskSpeedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineDiskSpeed)(nil)).Elem()
}

func (i VirtualMachineDiskSpeedArgs) ToVirtualMachineDiskSpeedOutput() VirtualMachineDiskSpeedOutput {
	return i.ToVirtualMachineDiskSpeedOutputWithContext(context.Background())
}

func (i VirtualMachineDiskSpeedArgs) ToVirtualMachineDiskSpeedOutputWithContext(ctx context.Context) VirtualMachineDiskSpeedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineDiskSpeedOutput)
}

func (i VirtualMachineDiskSpeedArgs) ToVirtualMachineDiskSpeedPtrOutput() VirtualMachineDiskSpeedPtrOutput {
	return i.ToVirtualMachineDiskSpeedPtrOutputWithContext(context.Background())
}

func (i VirtualMachineDiskSpeedArgs) ToVirtualMachineDiskSpeedPtrOutputWithContext(ctx context.Context) VirtualMachineDiskSpeedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineDiskSpeedOutput).ToVirtualMachineDiskSpeedPtrOutputWithContext(ctx)
}

// VirtualMachineDiskSpeedPtrInput is an input type that accepts VirtualMachineDiskSpeedArgs, VirtualMachineDiskSpeedPtr and VirtualMachineDiskSpeedPtrOutput values.
// You can construct a concrete instance of `VirtualMachineDiskSpeedPtrInput` via:
//
//	        VirtualMachineDiskSpeedArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineDiskSpeedPtrInput interface {
	pulumi.Input

	ToVirtualMachineDiskSpeedPtrOutput() VirtualMachineDiskSpeedPtrOutput
	ToVirtualMachineDiskSpeedPtrOutputWithContext(context.Context) VirtualMachineDiskSpeedPtrOutput
}

type virtualMachineDiskSpeedPtrType VirtualMachineDiskSpeedArgs

func VirtualMachineDiskSpeedPtr(v *VirtualMachineDiskSpeedArgs) VirtualMachineDiskSpeedPtrInput {
	return (*virtualMachineDiskSpeedPtrType)(v)
}

func (*virtualMachineDiskSpeedPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineDiskSpeed)(nil)).Elem()
}

func (i *virtualMachineDiskSpeedPtrType) ToVirtualMachineDiskSpeedPtrOutput() VirtualMachineDiskSpeedPtrOutput {
	return i.ToVirtualMachineDiskSpeedPtrOutputWithContext(context.Background())
}

func (i *virtualMachineDiskSpeedPtrType) ToVirtualMachineDiskSpeedPtrOutputWithContext(ctx context.Context) VirtualMachineDiskSpeedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineDiskSpeedPtrOutput)
}

type VirtualMachineDiskSpeedOutput struct{ *pulumi.OutputState }

func (VirtualMachineDiskSpeedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineDiskSpeed)(nil)).Elem()
}

func (o VirtualMachineDiskSpeedOutput) ToVirtualMachineDiskSpeedOutput() VirtualMachineDiskSpeedOutput {
	return o
}

func (o VirtualMachineDiskSpeedOutput) ToVirtualMachineDiskSpeedOutputWithContext(ctx context.Context) VirtualMachineDiskSpeedOutput {
	return o
}

func (o VirtualMachineDiskSpeedOutput) ToVirtualMachineDiskSpeedPtrOutput() VirtualMachineDiskSpeedPtrOutput {
	return o.ToVirtualMachineDiskSpeedPtrOutputWithContext(context.Background())
}

func (o VirtualMachineDiskSpeedOutput) ToVirtualMachineDiskSpeedPtrOutputWithContext(ctx context.Context) VirtualMachineDiskSpeedPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineDiskSpeed) *VirtualMachineDiskSpeed {
		return &v
	}).(VirtualMachineDiskSpeedPtrOutput)
}

// The maximum read I/O in operations per second.
func (o VirtualMachineDiskSpeedOutput) IopsRead() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineDiskSpeed) *int { return v.IopsRead }).(pulumi.IntPtrOutput)
}

// The maximum unthrottled read I/O pool in operations per second.
func (o VirtualMachineDiskSpeedOutput) IopsReadBurstable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineDiskSpeed) *int { return v.IopsReadBurstable }).(pulumi.IntPtrOutput)
}

// The maximum write I/O in operations per second.
func (o VirtualMachineDiskSpeedOutput) IopsWrite() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineDiskSpeed) *int { return v.IopsWrite }).(pulumi.IntPtrOutput)
}

// The maximum unthrottled write I/O pool in operations per second.
func (o VirtualMachineDiskSpeedOutput) IopsWriteBurstable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineDiskSpeed) *int { return v.IopsWriteBurstable }).(pulumi.IntPtrOutput)
}

// The maximum read speed in megabytes per second.
func (o VirtualMachineDiskSpeedOutput) Read() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineDiskSpeed) *int { return v.Read }).(pulumi.IntPtrOutput)
}

// The maximum burstable read speed in
// megabytes per second.
func (o VirtualMachineDiskSpeedOutput) ReadBurstable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineDiskSpeed) *int { return v.ReadBurstable }).(pulumi.IntPtrOutput)
}

// The maximum write speed in megabytes per second.
func (o VirtualMachineDiskSpeedOutput) Write() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineDiskSpeed) *int { return v.Write }).(pulumi.IntPtrOutput)
}

// The maximum burstable write speed in
// megabytes per second.
func (o VirtualMachineDiskSpeedOutput) WriteBurstable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineDiskSpeed) *int { return v.WriteBurstable }).(pulumi.IntPtrOutput)
}

type VirtualMachineDiskSpeedPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineDiskSpeedPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineDiskSpeed)(nil)).Elem()
}

func (o VirtualMachineDiskSpeedPtrOutput) ToVirtualMachineDiskSpeedPtrOutput() VirtualMachineDiskSpeedPtrOutput {
	return o
}

func (o VirtualMachineDiskSpeedPtrOutput) ToVirtualMachineDiskSpeedPtrOutputWithContext(ctx context.Context) VirtualMachineDiskSpeedPtrOutput {
	return o
}

func (o VirtualMachineDiskSpeedPtrOutput) Elem() VirtualMachineDiskSpeedOutput {
	return o.ApplyT(func(v *VirtualMachineDiskSpeed) VirtualMachineDiskSpeed {
		if v != nil {
			return *v
		}
		var ret VirtualMachineDiskSpeed
		return ret
	}).(VirtualMachineDiskSpeedOutput)
}

// The maximum read I/O in operations per second.
func (o VirtualMachineDiskSpeedPtrOutput) IopsRead() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineDiskSpeed) *int {
		if v == nil {
			return nil
		}
		return v.IopsRead
	}).(pulumi.IntPtrOutput)
}

// The maximum unthrottled read I/O pool in operations per second.
func (o VirtualMachineDiskSpeedPtrOutput) IopsReadBurstable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineDiskSpeed) *int {
		if v == nil {
			return nil
		}
		return v.IopsReadBurstable
	}).(pulumi.IntPtrOutput)
}

// The maximum write I/O in operations per second.
func (o VirtualMachineDiskSpeedPtrOutput) IopsWrite() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineDiskSpeed) *int {
		if v == nil {
			return nil
		}
		return v.IopsWrite
	}).(pulumi.IntPtrOutput)
}

// The maximum unthrottled write I/O pool in operations per second.
func (o VirtualMachineDiskSpeedPtrOutput) IopsWriteBurstable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineDiskSpeed) *int {
		if v == nil {
			return nil
		}
		return v.IopsWriteBurstable
	}).(pulumi.IntPtrOutput)
}

// The maximum read speed in megabytes per second.
func (o VirtualMachineDiskSpeedPtrOutput) Read() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineDiskSpeed) *int {
		if v == nil {
			return nil
		}
		return v.Read
	}).(pulumi.IntPtrOutput)
}

// The maximum burstable read speed in
// megabytes per second.
func (o VirtualMachineDiskSpeedPtrOutput) ReadBurstable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineDiskSpeed) *int {
		if v == nil {
			return nil
		}
		return v.ReadBurstable
	}).(pulumi.IntPtrOutput)
}

// The maximum write speed in megabytes per second.
func (o VirtualMachineDiskSpeedPtrOutput) Write() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineDiskSpeed) *int {
		if v == nil {
			return nil
		}
		return v.Write
	}).(pulumi.IntPtrOutput)
}

// The maximum burstable write speed in
// megabytes per second.
func (o VirtualMachineDiskSpeedPtrOutput) WriteBurstable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineDiskSpeed) *int {
		if v == nil {
			return nil
		}
		return v.WriteBurstable
	}).(pulumi.IntPtrOutput)
}

type VirtualMachineEfiDisk struct {
	// The identifier for the datastore to create
	// the disk in (defaults to `local-lvm`).
	DatastoreId *string `pulumi:"datastoreId"`
	// The file format (defaults to `raw`).
	FileFormat *string `pulumi:"fileFormat"`
	// Use am EFI vars template with
	// distribution-specific and Microsoft Standard keys enrolled, if used with
	// EFI type=`4m`. Ignored for VMs with cpu.architecture=`aarch64` (defaults
	// to `false`).
	PreEnrolledKeys *bool `pulumi:"preEnrolledKeys"`
	// Size and type of the OVMF EFI disk. `4m` is newer and
	// recommended, and required for Secure Boot. For backwards compatibility
	// use `2m`. Ignored for VMs with cpu.architecture=`aarch64` (defaults
	// to `2m`).
	Type *string `pulumi:"type"`
}

// VirtualMachineEfiDiskInput is an input type that accepts VirtualMachineEfiDiskArgs and VirtualMachineEfiDiskOutput values.
// You can construct a concrete instance of `VirtualMachineEfiDiskInput` via:
//
//	VirtualMachineEfiDiskArgs{...}
type VirtualMachineEfiDiskInput interface {
	pulumi.Input

	ToVirtualMachineEfiDiskOutput() VirtualMachineEfiDiskOutput
	ToVirtualMachineEfiDiskOutputWithContext(context.Context) VirtualMachineEfiDiskOutput
}

type VirtualMachineEfiDiskArgs struct {
	// The identifier for the datastore to create
	// the disk in (defaults to `local-lvm`).
	DatastoreId pulumi.StringPtrInput `pulumi:"datastoreId"`
	// The file format (defaults to `raw`).
	FileFormat pulumi.StringPtrInput `pulumi:"fileFormat"`
	// Use am EFI vars template with
	// distribution-specific and Microsoft Standard keys enrolled, if used with
	// EFI type=`4m`. Ignored for VMs with cpu.architecture=`aarch64` (defaults
	// to `false`).
	PreEnrolledKeys pulumi.BoolPtrInput `pulumi:"preEnrolledKeys"`
	// Size and type of the OVMF EFI disk. `4m` is newer and
	// recommended, and required for Secure Boot. For backwards compatibility
	// use `2m`. Ignored for VMs with cpu.architecture=`aarch64` (defaults
	// to `2m`).
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (VirtualMachineEfiDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineEfiDisk)(nil)).Elem()
}

func (i VirtualMachineEfiDiskArgs) ToVirtualMachineEfiDiskOutput() VirtualMachineEfiDiskOutput {
	return i.ToVirtualMachineEfiDiskOutputWithContext(context.Background())
}

func (i VirtualMachineEfiDiskArgs) ToVirtualMachineEfiDiskOutputWithContext(ctx context.Context) VirtualMachineEfiDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineEfiDiskOutput)
}

func (i VirtualMachineEfiDiskArgs) ToVirtualMachineEfiDiskPtrOutput() VirtualMachineEfiDiskPtrOutput {
	return i.ToVirtualMachineEfiDiskPtrOutputWithContext(context.Background())
}

func (i VirtualMachineEfiDiskArgs) ToVirtualMachineEfiDiskPtrOutputWithContext(ctx context.Context) VirtualMachineEfiDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineEfiDiskOutput).ToVirtualMachineEfiDiskPtrOutputWithContext(ctx)
}

// VirtualMachineEfiDiskPtrInput is an input type that accepts VirtualMachineEfiDiskArgs, VirtualMachineEfiDiskPtr and VirtualMachineEfiDiskPtrOutput values.
// You can construct a concrete instance of `VirtualMachineEfiDiskPtrInput` via:
//
//	        VirtualMachineEfiDiskArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineEfiDiskPtrInput interface {
	pulumi.Input

	ToVirtualMachineEfiDiskPtrOutput() VirtualMachineEfiDiskPtrOutput
	ToVirtualMachineEfiDiskPtrOutputWithContext(context.Context) VirtualMachineEfiDiskPtrOutput
}

type virtualMachineEfiDiskPtrType VirtualMachineEfiDiskArgs

func VirtualMachineEfiDiskPtr(v *VirtualMachineEfiDiskArgs) VirtualMachineEfiDiskPtrInput {
	return (*virtualMachineEfiDiskPtrType)(v)
}

func (*virtualMachineEfiDiskPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineEfiDisk)(nil)).Elem()
}

func (i *virtualMachineEfiDiskPtrType) ToVirtualMachineEfiDiskPtrOutput() VirtualMachineEfiDiskPtrOutput {
	return i.ToVirtualMachineEfiDiskPtrOutputWithContext(context.Background())
}

func (i *virtualMachineEfiDiskPtrType) ToVirtualMachineEfiDiskPtrOutputWithContext(ctx context.Context) VirtualMachineEfiDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineEfiDiskPtrOutput)
}

type VirtualMachineEfiDiskOutput struct{ *pulumi.OutputState }

func (VirtualMachineEfiDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineEfiDisk)(nil)).Elem()
}

func (o VirtualMachineEfiDiskOutput) ToVirtualMachineEfiDiskOutput() VirtualMachineEfiDiskOutput {
	return o
}

func (o VirtualMachineEfiDiskOutput) ToVirtualMachineEfiDiskOutputWithContext(ctx context.Context) VirtualMachineEfiDiskOutput {
	return o
}

func (o VirtualMachineEfiDiskOutput) ToVirtualMachineEfiDiskPtrOutput() VirtualMachineEfiDiskPtrOutput {
	return o.ToVirtualMachineEfiDiskPtrOutputWithContext(context.Background())
}

func (o VirtualMachineEfiDiskOutput) ToVirtualMachineEfiDiskPtrOutputWithContext(ctx context.Context) VirtualMachineEfiDiskPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineEfiDisk) *VirtualMachineEfiDisk {
		return &v
	}).(VirtualMachineEfiDiskPtrOutput)
}

// The identifier for the datastore to create
// the disk in (defaults to `local-lvm`).
func (o VirtualMachineEfiDiskOutput) DatastoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineEfiDisk) *string { return v.DatastoreId }).(pulumi.StringPtrOutput)
}

// The file format (defaults to `raw`).
func (o VirtualMachineEfiDiskOutput) FileFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineEfiDisk) *string { return v.FileFormat }).(pulumi.StringPtrOutput)
}

// Use am EFI vars template with
// distribution-specific and Microsoft Standard keys enrolled, if used with
// EFI type=`4m`. Ignored for VMs with cpu.architecture=`aarch64` (defaults
// to `false`).
func (o VirtualMachineEfiDiskOutput) PreEnrolledKeys() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineEfiDisk) *bool { return v.PreEnrolledKeys }).(pulumi.BoolPtrOutput)
}

// Size and type of the OVMF EFI disk. `4m` is newer and
// recommended, and required for Secure Boot. For backwards compatibility
// use `2m`. Ignored for VMs with cpu.architecture=`aarch64` (defaults
// to `2m`).
func (o VirtualMachineEfiDiskOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineEfiDisk) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type VirtualMachineEfiDiskPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineEfiDiskPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineEfiDisk)(nil)).Elem()
}

func (o VirtualMachineEfiDiskPtrOutput) ToVirtualMachineEfiDiskPtrOutput() VirtualMachineEfiDiskPtrOutput {
	return o
}

func (o VirtualMachineEfiDiskPtrOutput) ToVirtualMachineEfiDiskPtrOutputWithContext(ctx context.Context) VirtualMachineEfiDiskPtrOutput {
	return o
}

func (o VirtualMachineEfiDiskPtrOutput) Elem() VirtualMachineEfiDiskOutput {
	return o.ApplyT(func(v *VirtualMachineEfiDisk) VirtualMachineEfiDisk {
		if v != nil {
			return *v
		}
		var ret VirtualMachineEfiDisk
		return ret
	}).(VirtualMachineEfiDiskOutput)
}

// The identifier for the datastore to create
// the disk in (defaults to `local-lvm`).
func (o VirtualMachineEfiDiskPtrOutput) DatastoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineEfiDisk) *string {
		if v == nil {
			return nil
		}
		return v.DatastoreId
	}).(pulumi.StringPtrOutput)
}

// The file format (defaults to `raw`).
func (o VirtualMachineEfiDiskPtrOutput) FileFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineEfiDisk) *string {
		if v == nil {
			return nil
		}
		return v.FileFormat
	}).(pulumi.StringPtrOutput)
}

// Use am EFI vars template with
// distribution-specific and Microsoft Standard keys enrolled, if used with
// EFI type=`4m`. Ignored for VMs with cpu.architecture=`aarch64` (defaults
// to `false`).
func (o VirtualMachineEfiDiskPtrOutput) PreEnrolledKeys() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachineEfiDisk) *bool {
		if v == nil {
			return nil
		}
		return v.PreEnrolledKeys
	}).(pulumi.BoolPtrOutput)
}

// Size and type of the OVMF EFI disk. `4m` is newer and
// recommended, and required for Secure Boot. For backwards compatibility
// use `2m`. Ignored for VMs with cpu.architecture=`aarch64` (defaults
// to `2m`).
func (o VirtualMachineEfiDiskPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineEfiDisk) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type VirtualMachineHostpci struct {
	// The PCI device name for Proxmox, in form
	// of `hostpciX` where `X` is a sequential number from 0 to 15.
	Device string `pulumi:"device"`
	// The PCI device ID. This parameter is not compatible
	// with `apiToken` and requires the root `username` and `password`
	// configured in the proxmox provider. Use either this or `mapping`.
	Id *string `pulumi:"id"`
	// The resource mapping name of the device, for
	// example gpu. Use either this or `id`.
	Mapping *string `pulumi:"mapping"`
	// The mediated device ID to use.
	Mdev *string `pulumi:"mdev"`
	// Tells Proxmox to use a PCIe or PCI port. Some
	// guests/device combination require PCIe rather than PCI. PCIe is only
	// available for q35 machine types.
	Pcie *bool `pulumi:"pcie"`
	// A path to a ROM file for the device to use. This
	// is a relative path under `/usr/share/kvm/`.
	RomFile *string `pulumi:"romFile"`
	// Makes the firmware ROM visible for the VM (defaults
	// to `true`).
	Rombar *bool `pulumi:"rombar"`
	// Marks the PCI(e) device as the primary GPU of the VM.
	// With this enabled the `vga` configuration argument will be ignored.
	Xvga *bool `pulumi:"xvga"`
}

// VirtualMachineHostpciInput is an input type that accepts VirtualMachineHostpciArgs and VirtualMachineHostpciOutput values.
// You can construct a concrete instance of `VirtualMachineHostpciInput` via:
//
//	VirtualMachineHostpciArgs{...}
type VirtualMachineHostpciInput interface {
	pulumi.Input

	ToVirtualMachineHostpciOutput() VirtualMachineHostpciOutput
	ToVirtualMachineHostpciOutputWithContext(context.Context) VirtualMachineHostpciOutput
}

type VirtualMachineHostpciArgs struct {
	// The PCI device name for Proxmox, in form
	// of `hostpciX` where `X` is a sequential number from 0 to 15.
	Device pulumi.StringInput `pulumi:"device"`
	// The PCI device ID. This parameter is not compatible
	// with `apiToken` and requires the root `username` and `password`
	// configured in the proxmox provider. Use either this or `mapping`.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The resource mapping name of the device, for
	// example gpu. Use either this or `id`.
	Mapping pulumi.StringPtrInput `pulumi:"mapping"`
	// The mediated device ID to use.
	Mdev pulumi.StringPtrInput `pulumi:"mdev"`
	// Tells Proxmox to use a PCIe or PCI port. Some
	// guests/device combination require PCIe rather than PCI. PCIe is only
	// available for q35 machine types.
	Pcie pulumi.BoolPtrInput `pulumi:"pcie"`
	// A path to a ROM file for the device to use. This
	// is a relative path under `/usr/share/kvm/`.
	RomFile pulumi.StringPtrInput `pulumi:"romFile"`
	// Makes the firmware ROM visible for the VM (defaults
	// to `true`).
	Rombar pulumi.BoolPtrInput `pulumi:"rombar"`
	// Marks the PCI(e) device as the primary GPU of the VM.
	// With this enabled the `vga` configuration argument will be ignored.
	Xvga pulumi.BoolPtrInput `pulumi:"xvga"`
}

func (VirtualMachineHostpciArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineHostpci)(nil)).Elem()
}

func (i VirtualMachineHostpciArgs) ToVirtualMachineHostpciOutput() VirtualMachineHostpciOutput {
	return i.ToVirtualMachineHostpciOutputWithContext(context.Background())
}

func (i VirtualMachineHostpciArgs) ToVirtualMachineHostpciOutputWithContext(ctx context.Context) VirtualMachineHostpciOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineHostpciOutput)
}

// VirtualMachineHostpciArrayInput is an input type that accepts VirtualMachineHostpciArray and VirtualMachineHostpciArrayOutput values.
// You can construct a concrete instance of `VirtualMachineHostpciArrayInput` via:
//
//	VirtualMachineHostpciArray{ VirtualMachineHostpciArgs{...} }
type VirtualMachineHostpciArrayInput interface {
	pulumi.Input

	ToVirtualMachineHostpciArrayOutput() VirtualMachineHostpciArrayOutput
	ToVirtualMachineHostpciArrayOutputWithContext(context.Context) VirtualMachineHostpciArrayOutput
}

type VirtualMachineHostpciArray []VirtualMachineHostpciInput

func (VirtualMachineHostpciArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineHostpci)(nil)).Elem()
}

func (i VirtualMachineHostpciArray) ToVirtualMachineHostpciArrayOutput() VirtualMachineHostpciArrayOutput {
	return i.ToVirtualMachineHostpciArrayOutputWithContext(context.Background())
}

func (i VirtualMachineHostpciArray) ToVirtualMachineHostpciArrayOutputWithContext(ctx context.Context) VirtualMachineHostpciArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineHostpciArrayOutput)
}

type VirtualMachineHostpciOutput struct{ *pulumi.OutputState }

func (VirtualMachineHostpciOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineHostpci)(nil)).Elem()
}

func (o VirtualMachineHostpciOutput) ToVirtualMachineHostpciOutput() VirtualMachineHostpciOutput {
	return o
}

func (o VirtualMachineHostpciOutput) ToVirtualMachineHostpciOutputWithContext(ctx context.Context) VirtualMachineHostpciOutput {
	return o
}

// The PCI device name for Proxmox, in form
// of `hostpciX` where `X` is a sequential number from 0 to 15.
func (o VirtualMachineHostpciOutput) Device() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineHostpci) string { return v.Device }).(pulumi.StringOutput)
}

// The PCI device ID. This parameter is not compatible
// with `apiToken` and requires the root `username` and `password`
// configured in the proxmox provider. Use either this or `mapping`.
func (o VirtualMachineHostpciOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineHostpci) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The resource mapping name of the device, for
// example gpu. Use either this or `id`.
func (o VirtualMachineHostpciOutput) Mapping() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineHostpci) *string { return v.Mapping }).(pulumi.StringPtrOutput)
}

// The mediated device ID to use.
func (o VirtualMachineHostpciOutput) Mdev() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineHostpci) *string { return v.Mdev }).(pulumi.StringPtrOutput)
}

// Tells Proxmox to use a PCIe or PCI port. Some
// guests/device combination require PCIe rather than PCI. PCIe is only
// available for q35 machine types.
func (o VirtualMachineHostpciOutput) Pcie() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineHostpci) *bool { return v.Pcie }).(pulumi.BoolPtrOutput)
}

// A path to a ROM file for the device to use. This
// is a relative path under `/usr/share/kvm/`.
func (o VirtualMachineHostpciOutput) RomFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineHostpci) *string { return v.RomFile }).(pulumi.StringPtrOutput)
}

// Makes the firmware ROM visible for the VM (defaults
// to `true`).
func (o VirtualMachineHostpciOutput) Rombar() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineHostpci) *bool { return v.Rombar }).(pulumi.BoolPtrOutput)
}

// Marks the PCI(e) device as the primary GPU of the VM.
// With this enabled the `vga` configuration argument will be ignored.
func (o VirtualMachineHostpciOutput) Xvga() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineHostpci) *bool { return v.Xvga }).(pulumi.BoolPtrOutput)
}

type VirtualMachineHostpciArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineHostpciArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineHostpci)(nil)).Elem()
}

func (o VirtualMachineHostpciArrayOutput) ToVirtualMachineHostpciArrayOutput() VirtualMachineHostpciArrayOutput {
	return o
}

func (o VirtualMachineHostpciArrayOutput) ToVirtualMachineHostpciArrayOutputWithContext(ctx context.Context) VirtualMachineHostpciArrayOutput {
	return o
}

func (o VirtualMachineHostpciArrayOutput) Index(i pulumi.IntInput) VirtualMachineHostpciOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineHostpci {
		return vs[0].([]VirtualMachineHostpci)[vs[1].(int)]
	}).(VirtualMachineHostpciOutput)
}

type VirtualMachineInitialization struct {
	// The identifier for the datastore to create the
	// cloud-init disk in (defaults to `local-lvm`).
	DatastoreId *string `pulumi:"datastoreId"`
	// The DNS configuration.
	Dns *VirtualMachineInitializationDns `pulumi:"dns"`
	// The hardware interface to connect the cloud-init
	// image to. Must be one of `ide0..3`, `sata0..5`, `scsi0..30`. Will be
	// detected if the setting is missing but a cloud-init image is present,
	// otherwise defaults to `ide2`.
	Interface *string `pulumi:"interface"`
	// The IP configuration (one block per network
	// device).
	IpConfigs []VirtualMachineInitializationIpConfig `pulumi:"ipConfigs"`
	// The identifier for a file containing
	// all meta data passed to the VM via cloud-init.
	MetaDataFileId *string `pulumi:"metaDataFileId"`
	// The identifier for a file containing
	// network configuration data passed to the VM via cloud-init (conflicts
	// with `ipConfig`).
	NetworkDataFileId *string `pulumi:"networkDataFileId"`
	// The cloud-init configuration format
	Type *string `pulumi:"type"`
	// Whether to do an automatic package upgrade after the first boot
	//
	// Deprecated: The `upgrade` attribute is deprecated and will be removed in a future release.
	Upgrade *bool `pulumi:"upgrade"`
	// The user account configuration (conflicts
	// with `userDataFileId`).
	UserAccount *VirtualMachineInitializationUserAccount `pulumi:"userAccount"`
	// The identifier for a file containing
	// custom user data (conflicts with `userAccount`).
	UserDataFileId *string `pulumi:"userDataFileId"`
	// The identifier for a file containing
	// all vendor data passed to the VM via cloud-init.
	VendorDataFileId *string `pulumi:"vendorDataFileId"`
}

// VirtualMachineInitializationInput is an input type that accepts VirtualMachineInitializationArgs and VirtualMachineInitializationOutput values.
// You can construct a concrete instance of `VirtualMachineInitializationInput` via:
//
//	VirtualMachineInitializationArgs{...}
type VirtualMachineInitializationInput interface {
	pulumi.Input

	ToVirtualMachineInitializationOutput() VirtualMachineInitializationOutput
	ToVirtualMachineInitializationOutputWithContext(context.Context) VirtualMachineInitializationOutput
}

type VirtualMachineInitializationArgs struct {
	// The identifier for the datastore to create the
	// cloud-init disk in (defaults to `local-lvm`).
	DatastoreId pulumi.StringPtrInput `pulumi:"datastoreId"`
	// The DNS configuration.
	Dns VirtualMachineInitializationDnsPtrInput `pulumi:"dns"`
	// The hardware interface to connect the cloud-init
	// image to. Must be one of `ide0..3`, `sata0..5`, `scsi0..30`. Will be
	// detected if the setting is missing but a cloud-init image is present,
	// otherwise defaults to `ide2`.
	Interface pulumi.StringPtrInput `pulumi:"interface"`
	// The IP configuration (one block per network
	// device).
	IpConfigs VirtualMachineInitializationIpConfigArrayInput `pulumi:"ipConfigs"`
	// The identifier for a file containing
	// all meta data passed to the VM via cloud-init.
	MetaDataFileId pulumi.StringPtrInput `pulumi:"metaDataFileId"`
	// The identifier for a file containing
	// network configuration data passed to the VM via cloud-init (conflicts
	// with `ipConfig`).
	NetworkDataFileId pulumi.StringPtrInput `pulumi:"networkDataFileId"`
	// The cloud-init configuration format
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Whether to do an automatic package upgrade after the first boot
	//
	// Deprecated: The `upgrade` attribute is deprecated and will be removed in a future release.
	Upgrade pulumi.BoolPtrInput `pulumi:"upgrade"`
	// The user account configuration (conflicts
	// with `userDataFileId`).
	UserAccount VirtualMachineInitializationUserAccountPtrInput `pulumi:"userAccount"`
	// The identifier for a file containing
	// custom user data (conflicts with `userAccount`).
	UserDataFileId pulumi.StringPtrInput `pulumi:"userDataFileId"`
	// The identifier for a file containing
	// all vendor data passed to the VM via cloud-init.
	VendorDataFileId pulumi.StringPtrInput `pulumi:"vendorDataFileId"`
}

func (VirtualMachineInitializationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineInitialization)(nil)).Elem()
}

func (i VirtualMachineInitializationArgs) ToVirtualMachineInitializationOutput() VirtualMachineInitializationOutput {
	return i.ToVirtualMachineInitializationOutputWithContext(context.Background())
}

func (i VirtualMachineInitializationArgs) ToVirtualMachineInitializationOutputWithContext(ctx context.Context) VirtualMachineInitializationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineInitializationOutput)
}

func (i VirtualMachineInitializationArgs) ToVirtualMachineInitializationPtrOutput() VirtualMachineInitializationPtrOutput {
	return i.ToVirtualMachineInitializationPtrOutputWithContext(context.Background())
}

func (i VirtualMachineInitializationArgs) ToVirtualMachineInitializationPtrOutputWithContext(ctx context.Context) VirtualMachineInitializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineInitializationOutput).ToVirtualMachineInitializationPtrOutputWithContext(ctx)
}

// VirtualMachineInitializationPtrInput is an input type that accepts VirtualMachineInitializationArgs, VirtualMachineInitializationPtr and VirtualMachineInitializationPtrOutput values.
// You can construct a concrete instance of `VirtualMachineInitializationPtrInput` via:
//
//	        VirtualMachineInitializationArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineInitializationPtrInput interface {
	pulumi.Input

	ToVirtualMachineInitializationPtrOutput() VirtualMachineInitializationPtrOutput
	ToVirtualMachineInitializationPtrOutputWithContext(context.Context) VirtualMachineInitializationPtrOutput
}

type virtualMachineInitializationPtrType VirtualMachineInitializationArgs

func VirtualMachineInitializationPtr(v *VirtualMachineInitializationArgs) VirtualMachineInitializationPtrInput {
	return (*virtualMachineInitializationPtrType)(v)
}

func (*virtualMachineInitializationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineInitialization)(nil)).Elem()
}

func (i *virtualMachineInitializationPtrType) ToVirtualMachineInitializationPtrOutput() VirtualMachineInitializationPtrOutput {
	return i.ToVirtualMachineInitializationPtrOutputWithContext(context.Background())
}

func (i *virtualMachineInitializationPtrType) ToVirtualMachineInitializationPtrOutputWithContext(ctx context.Context) VirtualMachineInitializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineInitializationPtrOutput)
}

type VirtualMachineInitializationOutput struct{ *pulumi.OutputState }

func (VirtualMachineInitializationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineInitialization)(nil)).Elem()
}

func (o VirtualMachineInitializationOutput) ToVirtualMachineInitializationOutput() VirtualMachineInitializationOutput {
	return o
}

func (o VirtualMachineInitializationOutput) ToVirtualMachineInitializationOutputWithContext(ctx context.Context) VirtualMachineInitializationOutput {
	return o
}

func (o VirtualMachineInitializationOutput) ToVirtualMachineInitializationPtrOutput() VirtualMachineInitializationPtrOutput {
	return o.ToVirtualMachineInitializationPtrOutputWithContext(context.Background())
}

func (o VirtualMachineInitializationOutput) ToVirtualMachineInitializationPtrOutputWithContext(ctx context.Context) VirtualMachineInitializationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineInitialization) *VirtualMachineInitialization {
		return &v
	}).(VirtualMachineInitializationPtrOutput)
}

// The identifier for the datastore to create the
// cloud-init disk in (defaults to `local-lvm`).
func (o VirtualMachineInitializationOutput) DatastoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineInitialization) *string { return v.DatastoreId }).(pulumi.StringPtrOutput)
}

// The DNS configuration.
func (o VirtualMachineInitializationOutput) Dns() VirtualMachineInitializationDnsPtrOutput {
	return o.ApplyT(func(v VirtualMachineInitialization) *VirtualMachineInitializationDns { return v.Dns }).(VirtualMachineInitializationDnsPtrOutput)
}

// The hardware interface to connect the cloud-init
// image to. Must be one of `ide0..3`, `sata0..5`, `scsi0..30`. Will be
// detected if the setting is missing but a cloud-init image is present,
// otherwise defaults to `ide2`.
func (o VirtualMachineInitializationOutput) Interface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineInitialization) *string { return v.Interface }).(pulumi.StringPtrOutput)
}

// The IP configuration (one block per network
// device).
func (o VirtualMachineInitializationOutput) IpConfigs() VirtualMachineInitializationIpConfigArrayOutput {
	return o.ApplyT(func(v VirtualMachineInitialization) []VirtualMachineInitializationIpConfig { return v.IpConfigs }).(VirtualMachineInitializationIpConfigArrayOutput)
}

// The identifier for a file containing
// all meta data passed to the VM via cloud-init.
func (o VirtualMachineInitializationOutput) MetaDataFileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineInitialization) *string { return v.MetaDataFileId }).(pulumi.StringPtrOutput)
}

// The identifier for a file containing
// network configuration data passed to the VM via cloud-init (conflicts
// with `ipConfig`).
func (o VirtualMachineInitializationOutput) NetworkDataFileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineInitialization) *string { return v.NetworkDataFileId }).(pulumi.StringPtrOutput)
}

// The cloud-init configuration format
func (o VirtualMachineInitializationOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineInitialization) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Whether to do an automatic package upgrade after the first boot
//
// Deprecated: The `upgrade` attribute is deprecated and will be removed in a future release.
func (o VirtualMachineInitializationOutput) Upgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineInitialization) *bool { return v.Upgrade }).(pulumi.BoolPtrOutput)
}

// The user account configuration (conflicts
// with `userDataFileId`).
func (o VirtualMachineInitializationOutput) UserAccount() VirtualMachineInitializationUserAccountPtrOutput {
	return o.ApplyT(func(v VirtualMachineInitialization) *VirtualMachineInitializationUserAccount { return v.UserAccount }).(VirtualMachineInitializationUserAccountPtrOutput)
}

// The identifier for a file containing
// custom user data (conflicts with `userAccount`).
func (o VirtualMachineInitializationOutput) UserDataFileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineInitialization) *string { return v.UserDataFileId }).(pulumi.StringPtrOutput)
}

// The identifier for a file containing
// all vendor data passed to the VM via cloud-init.
func (o VirtualMachineInitializationOutput) VendorDataFileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineInitialization) *string { return v.VendorDataFileId }).(pulumi.StringPtrOutput)
}

type VirtualMachineInitializationPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineInitializationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineInitialization)(nil)).Elem()
}

func (o VirtualMachineInitializationPtrOutput) ToVirtualMachineInitializationPtrOutput() VirtualMachineInitializationPtrOutput {
	return o
}

func (o VirtualMachineInitializationPtrOutput) ToVirtualMachineInitializationPtrOutputWithContext(ctx context.Context) VirtualMachineInitializationPtrOutput {
	return o
}

func (o VirtualMachineInitializationPtrOutput) Elem() VirtualMachineInitializationOutput {
	return o.ApplyT(func(v *VirtualMachineInitialization) VirtualMachineInitialization {
		if v != nil {
			return *v
		}
		var ret VirtualMachineInitialization
		return ret
	}).(VirtualMachineInitializationOutput)
}

// The identifier for the datastore to create the
// cloud-init disk in (defaults to `local-lvm`).
func (o VirtualMachineInitializationPtrOutput) DatastoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInitialization) *string {
		if v == nil {
			return nil
		}
		return v.DatastoreId
	}).(pulumi.StringPtrOutput)
}

// The DNS configuration.
func (o VirtualMachineInitializationPtrOutput) Dns() VirtualMachineInitializationDnsPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInitialization) *VirtualMachineInitializationDns {
		if v == nil {
			return nil
		}
		return v.Dns
	}).(VirtualMachineInitializationDnsPtrOutput)
}

// The hardware interface to connect the cloud-init
// image to. Must be one of `ide0..3`, `sata0..5`, `scsi0..30`. Will be
// detected if the setting is missing but a cloud-init image is present,
// otherwise defaults to `ide2`.
func (o VirtualMachineInitializationPtrOutput) Interface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInitialization) *string {
		if v == nil {
			return nil
		}
		return v.Interface
	}).(pulumi.StringPtrOutput)
}

// The IP configuration (one block per network
// device).
func (o VirtualMachineInitializationPtrOutput) IpConfigs() VirtualMachineInitializationIpConfigArrayOutput {
	return o.ApplyT(func(v *VirtualMachineInitialization) []VirtualMachineInitializationIpConfig {
		if v == nil {
			return nil
		}
		return v.IpConfigs
	}).(VirtualMachineInitializationIpConfigArrayOutput)
}

// The identifier for a file containing
// all meta data passed to the VM via cloud-init.
func (o VirtualMachineInitializationPtrOutput) MetaDataFileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInitialization) *string {
		if v == nil {
			return nil
		}
		return v.MetaDataFileId
	}).(pulumi.StringPtrOutput)
}

// The identifier for a file containing
// network configuration data passed to the VM via cloud-init (conflicts
// with `ipConfig`).
func (o VirtualMachineInitializationPtrOutput) NetworkDataFileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInitialization) *string {
		if v == nil {
			return nil
		}
		return v.NetworkDataFileId
	}).(pulumi.StringPtrOutput)
}

// The cloud-init configuration format
func (o VirtualMachineInitializationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInitialization) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Whether to do an automatic package upgrade after the first boot
//
// Deprecated: The `upgrade` attribute is deprecated and will be removed in a future release.
func (o VirtualMachineInitializationPtrOutput) Upgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInitialization) *bool {
		if v == nil {
			return nil
		}
		return v.Upgrade
	}).(pulumi.BoolPtrOutput)
}

// The user account configuration (conflicts
// with `userDataFileId`).
func (o VirtualMachineInitializationPtrOutput) UserAccount() VirtualMachineInitializationUserAccountPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInitialization) *VirtualMachineInitializationUserAccount {
		if v == nil {
			return nil
		}
		return v.UserAccount
	}).(VirtualMachineInitializationUserAccountPtrOutput)
}

// The identifier for a file containing
// custom user data (conflicts with `userAccount`).
func (o VirtualMachineInitializationPtrOutput) UserDataFileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInitialization) *string {
		if v == nil {
			return nil
		}
		return v.UserDataFileId
	}).(pulumi.StringPtrOutput)
}

// The identifier for a file containing
// all vendor data passed to the VM via cloud-init.
func (o VirtualMachineInitializationPtrOutput) VendorDataFileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInitialization) *string {
		if v == nil {
			return nil
		}
		return v.VendorDataFileId
	}).(pulumi.StringPtrOutput)
}

type VirtualMachineInitializationDns struct {
	// The DNS search domain.
	Domain *string `pulumi:"domain"`
	// The DNS server. The `server` attribute is
	// deprecated and will be removed in a future release. Please use the
	// `servers` attribute instead.
	//
	// Deprecated: The `server` attribute is deprecated and will be removed in a future release. Please use the `servers` attribute instead.
	Server *string `pulumi:"server"`
	// The list of DNS servers.
	Servers []string `pulumi:"servers"`
}

// VirtualMachineInitializationDnsInput is an input type that accepts VirtualMachineInitializationDnsArgs and VirtualMachineInitializationDnsOutput values.
// You can construct a concrete instance of `VirtualMachineInitializationDnsInput` via:
//
//	VirtualMachineInitializationDnsArgs{...}
type VirtualMachineInitializationDnsInput interface {
	pulumi.Input

	ToVirtualMachineInitializationDnsOutput() VirtualMachineInitializationDnsOutput
	ToVirtualMachineInitializationDnsOutputWithContext(context.Context) VirtualMachineInitializationDnsOutput
}

type VirtualMachineInitializationDnsArgs struct {
	// The DNS search domain.
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// The DNS server. The `server` attribute is
	// deprecated and will be removed in a future release. Please use the
	// `servers` attribute instead.
	//
	// Deprecated: The `server` attribute is deprecated and will be removed in a future release. Please use the `servers` attribute instead.
	Server pulumi.StringPtrInput `pulumi:"server"`
	// The list of DNS servers.
	Servers pulumi.StringArrayInput `pulumi:"servers"`
}

func (VirtualMachineInitializationDnsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineInitializationDns)(nil)).Elem()
}

func (i VirtualMachineInitializationDnsArgs) ToVirtualMachineInitializationDnsOutput() VirtualMachineInitializationDnsOutput {
	return i.ToVirtualMachineInitializationDnsOutputWithContext(context.Background())
}

func (i VirtualMachineInitializationDnsArgs) ToVirtualMachineInitializationDnsOutputWithContext(ctx context.Context) VirtualMachineInitializationDnsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineInitializationDnsOutput)
}

func (i VirtualMachineInitializationDnsArgs) ToVirtualMachineInitializationDnsPtrOutput() VirtualMachineInitializationDnsPtrOutput {
	return i.ToVirtualMachineInitializationDnsPtrOutputWithContext(context.Background())
}

func (i VirtualMachineInitializationDnsArgs) ToVirtualMachineInitializationDnsPtrOutputWithContext(ctx context.Context) VirtualMachineInitializationDnsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineInitializationDnsOutput).ToVirtualMachineInitializationDnsPtrOutputWithContext(ctx)
}

// VirtualMachineInitializationDnsPtrInput is an input type that accepts VirtualMachineInitializationDnsArgs, VirtualMachineInitializationDnsPtr and VirtualMachineInitializationDnsPtrOutput values.
// You can construct a concrete instance of `VirtualMachineInitializationDnsPtrInput` via:
//
//	        VirtualMachineInitializationDnsArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineInitializationDnsPtrInput interface {
	pulumi.Input

	ToVirtualMachineInitializationDnsPtrOutput() VirtualMachineInitializationDnsPtrOutput
	ToVirtualMachineInitializationDnsPtrOutputWithContext(context.Context) VirtualMachineInitializationDnsPtrOutput
}

type virtualMachineInitializationDnsPtrType VirtualMachineInitializationDnsArgs

func VirtualMachineInitializationDnsPtr(v *VirtualMachineInitializationDnsArgs) VirtualMachineInitializationDnsPtrInput {
	return (*virtualMachineInitializationDnsPtrType)(v)
}

func (*virtualMachineInitializationDnsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineInitializationDns)(nil)).Elem()
}

func (i *virtualMachineInitializationDnsPtrType) ToVirtualMachineInitializationDnsPtrOutput() VirtualMachineInitializationDnsPtrOutput {
	return i.ToVirtualMachineInitializationDnsPtrOutputWithContext(context.Background())
}

func (i *virtualMachineInitializationDnsPtrType) ToVirtualMachineInitializationDnsPtrOutputWithContext(ctx context.Context) VirtualMachineInitializationDnsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineInitializationDnsPtrOutput)
}

type VirtualMachineInitializationDnsOutput struct{ *pulumi.OutputState }

func (VirtualMachineInitializationDnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineInitializationDns)(nil)).Elem()
}

func (o VirtualMachineInitializationDnsOutput) ToVirtualMachineInitializationDnsOutput() VirtualMachineInitializationDnsOutput {
	return o
}

func (o VirtualMachineInitializationDnsOutput) ToVirtualMachineInitializationDnsOutputWithContext(ctx context.Context) VirtualMachineInitializationDnsOutput {
	return o
}

func (o VirtualMachineInitializationDnsOutput) ToVirtualMachineInitializationDnsPtrOutput() VirtualMachineInitializationDnsPtrOutput {
	return o.ToVirtualMachineInitializationDnsPtrOutputWithContext(context.Background())
}

func (o VirtualMachineInitializationDnsOutput) ToVirtualMachineInitializationDnsPtrOutputWithContext(ctx context.Context) VirtualMachineInitializationDnsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineInitializationDns) *VirtualMachineInitializationDns {
		return &v
	}).(VirtualMachineInitializationDnsPtrOutput)
}

// The DNS search domain.
func (o VirtualMachineInitializationDnsOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineInitializationDns) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// The DNS server. The `server` attribute is
// deprecated and will be removed in a future release. Please use the
// `servers` attribute instead.
//
// Deprecated: The `server` attribute is deprecated and will be removed in a future release. Please use the `servers` attribute instead.
func (o VirtualMachineInitializationDnsOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineInitializationDns) *string { return v.Server }).(pulumi.StringPtrOutput)
}

// The list of DNS servers.
func (o VirtualMachineInitializationDnsOutput) Servers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualMachineInitializationDns) []string { return v.Servers }).(pulumi.StringArrayOutput)
}

type VirtualMachineInitializationDnsPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineInitializationDnsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineInitializationDns)(nil)).Elem()
}

func (o VirtualMachineInitializationDnsPtrOutput) ToVirtualMachineInitializationDnsPtrOutput() VirtualMachineInitializationDnsPtrOutput {
	return o
}

func (o VirtualMachineInitializationDnsPtrOutput) ToVirtualMachineInitializationDnsPtrOutputWithContext(ctx context.Context) VirtualMachineInitializationDnsPtrOutput {
	return o
}

func (o VirtualMachineInitializationDnsPtrOutput) Elem() VirtualMachineInitializationDnsOutput {
	return o.ApplyT(func(v *VirtualMachineInitializationDns) VirtualMachineInitializationDns {
		if v != nil {
			return *v
		}
		var ret VirtualMachineInitializationDns
		return ret
	}).(VirtualMachineInitializationDnsOutput)
}

// The DNS search domain.
func (o VirtualMachineInitializationDnsPtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInitializationDns) *string {
		if v == nil {
			return nil
		}
		return v.Domain
	}).(pulumi.StringPtrOutput)
}

// The DNS server. The `server` attribute is
// deprecated and will be removed in a future release. Please use the
// `servers` attribute instead.
//
// Deprecated: The `server` attribute is deprecated and will be removed in a future release. Please use the `servers` attribute instead.
func (o VirtualMachineInitializationDnsPtrOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInitializationDns) *string {
		if v == nil {
			return nil
		}
		return v.Server
	}).(pulumi.StringPtrOutput)
}

// The list of DNS servers.
func (o VirtualMachineInitializationDnsPtrOutput) Servers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualMachineInitializationDns) []string {
		if v == nil {
			return nil
		}
		return v.Servers
	}).(pulumi.StringArrayOutput)
}

type VirtualMachineInitializationIpConfig struct {
	// The IPv4 configuration.
	Ipv4 *VirtualMachineInitializationIpConfigIpv4 `pulumi:"ipv4"`
	// The IPv6 configuration.
	Ipv6 *VirtualMachineInitializationIpConfigIpv6 `pulumi:"ipv6"`
}

// VirtualMachineInitializationIpConfigInput is an input type that accepts VirtualMachineInitializationIpConfigArgs and VirtualMachineInitializationIpConfigOutput values.
// You can construct a concrete instance of `VirtualMachineInitializationIpConfigInput` via:
//
//	VirtualMachineInitializationIpConfigArgs{...}
type VirtualMachineInitializationIpConfigInput interface {
	pulumi.Input

	ToVirtualMachineInitializationIpConfigOutput() VirtualMachineInitializationIpConfigOutput
	ToVirtualMachineInitializationIpConfigOutputWithContext(context.Context) VirtualMachineInitializationIpConfigOutput
}

type VirtualMachineInitializationIpConfigArgs struct {
	// The IPv4 configuration.
	Ipv4 VirtualMachineInitializationIpConfigIpv4PtrInput `pulumi:"ipv4"`
	// The IPv6 configuration.
	Ipv6 VirtualMachineInitializationIpConfigIpv6PtrInput `pulumi:"ipv6"`
}

func (VirtualMachineInitializationIpConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineInitializationIpConfig)(nil)).Elem()
}

func (i VirtualMachineInitializationIpConfigArgs) ToVirtualMachineInitializationIpConfigOutput() VirtualMachineInitializationIpConfigOutput {
	return i.ToVirtualMachineInitializationIpConfigOutputWithContext(context.Background())
}

func (i VirtualMachineInitializationIpConfigArgs) ToVirtualMachineInitializationIpConfigOutputWithContext(ctx context.Context) VirtualMachineInitializationIpConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineInitializationIpConfigOutput)
}

// VirtualMachineInitializationIpConfigArrayInput is an input type that accepts VirtualMachineInitializationIpConfigArray and VirtualMachineInitializationIpConfigArrayOutput values.
// You can construct a concrete instance of `VirtualMachineInitializationIpConfigArrayInput` via:
//
//	VirtualMachineInitializationIpConfigArray{ VirtualMachineInitializationIpConfigArgs{...} }
type VirtualMachineInitializationIpConfigArrayInput interface {
	pulumi.Input

	ToVirtualMachineInitializationIpConfigArrayOutput() VirtualMachineInitializationIpConfigArrayOutput
	ToVirtualMachineInitializationIpConfigArrayOutputWithContext(context.Context) VirtualMachineInitializationIpConfigArrayOutput
}

type VirtualMachineInitializationIpConfigArray []VirtualMachineInitializationIpConfigInput

func (VirtualMachineInitializationIpConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineInitializationIpConfig)(nil)).Elem()
}

func (i VirtualMachineInitializationIpConfigArray) ToVirtualMachineInitializationIpConfigArrayOutput() VirtualMachineInitializationIpConfigArrayOutput {
	return i.ToVirtualMachineInitializationIpConfigArrayOutputWithContext(context.Background())
}

func (i VirtualMachineInitializationIpConfigArray) ToVirtualMachineInitializationIpConfigArrayOutputWithContext(ctx context.Context) VirtualMachineInitializationIpConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineInitializationIpConfigArrayOutput)
}

type VirtualMachineInitializationIpConfigOutput struct{ *pulumi.OutputState }

func (VirtualMachineInitializationIpConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineInitializationIpConfig)(nil)).Elem()
}

func (o VirtualMachineInitializationIpConfigOutput) ToVirtualMachineInitializationIpConfigOutput() VirtualMachineInitializationIpConfigOutput {
	return o
}

func (o VirtualMachineInitializationIpConfigOutput) ToVirtualMachineInitializationIpConfigOutputWithContext(ctx context.Context) VirtualMachineInitializationIpConfigOutput {
	return o
}

// The IPv4 configuration.
func (o VirtualMachineInitializationIpConfigOutput) Ipv4() VirtualMachineInitializationIpConfigIpv4PtrOutput {
	return o.ApplyT(func(v VirtualMachineInitializationIpConfig) *VirtualMachineInitializationIpConfigIpv4 { return v.Ipv4 }).(VirtualMachineInitializationIpConfigIpv4PtrOutput)
}

// The IPv6 configuration.
func (o VirtualMachineInitializationIpConfigOutput) Ipv6() VirtualMachineInitializationIpConfigIpv6PtrOutput {
	return o.ApplyT(func(v VirtualMachineInitializationIpConfig) *VirtualMachineInitializationIpConfigIpv6 { return v.Ipv6 }).(VirtualMachineInitializationIpConfigIpv6PtrOutput)
}

type VirtualMachineInitializationIpConfigArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineInitializationIpConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineInitializationIpConfig)(nil)).Elem()
}

func (o VirtualMachineInitializationIpConfigArrayOutput) ToVirtualMachineInitializationIpConfigArrayOutput() VirtualMachineInitializationIpConfigArrayOutput {
	return o
}

func (o VirtualMachineInitializationIpConfigArrayOutput) ToVirtualMachineInitializationIpConfigArrayOutputWithContext(ctx context.Context) VirtualMachineInitializationIpConfigArrayOutput {
	return o
}

func (o VirtualMachineInitializationIpConfigArrayOutput) Index(i pulumi.IntInput) VirtualMachineInitializationIpConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineInitializationIpConfig {
		return vs[0].([]VirtualMachineInitializationIpConfig)[vs[1].(int)]
	}).(VirtualMachineInitializationIpConfigOutput)
}

type VirtualMachineInitializationIpConfigIpv4 struct {
	// The IPv4 address in CIDR notation
	// (e.g. 192.168.2.2/24). Alternatively, set this to `dhcp` for
	// autodiscovery.
	Address *string `pulumi:"address"`
	// The IPv4 gateway (must be omitted
	// when `dhcp` is used as the address).
	Gateway *string `pulumi:"gateway"`
}

// VirtualMachineInitializationIpConfigIpv4Input is an input type that accepts VirtualMachineInitializationIpConfigIpv4Args and VirtualMachineInitializationIpConfigIpv4Output values.
// You can construct a concrete instance of `VirtualMachineInitializationIpConfigIpv4Input` via:
//
//	VirtualMachineInitializationIpConfigIpv4Args{...}
type VirtualMachineInitializationIpConfigIpv4Input interface {
	pulumi.Input

	ToVirtualMachineInitializationIpConfigIpv4Output() VirtualMachineInitializationIpConfigIpv4Output
	ToVirtualMachineInitializationIpConfigIpv4OutputWithContext(context.Context) VirtualMachineInitializationIpConfigIpv4Output
}

type VirtualMachineInitializationIpConfigIpv4Args struct {
	// The IPv4 address in CIDR notation
	// (e.g. 192.168.2.2/24). Alternatively, set this to `dhcp` for
	// autodiscovery.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The IPv4 gateway (must be omitted
	// when `dhcp` is used as the address).
	Gateway pulumi.StringPtrInput `pulumi:"gateway"`
}

func (VirtualMachineInitializationIpConfigIpv4Args) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineInitializationIpConfigIpv4)(nil)).Elem()
}

func (i VirtualMachineInitializationIpConfigIpv4Args) ToVirtualMachineInitializationIpConfigIpv4Output() VirtualMachineInitializationIpConfigIpv4Output {
	return i.ToVirtualMachineInitializationIpConfigIpv4OutputWithContext(context.Background())
}

func (i VirtualMachineInitializationIpConfigIpv4Args) ToVirtualMachineInitializationIpConfigIpv4OutputWithContext(ctx context.Context) VirtualMachineInitializationIpConfigIpv4Output {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineInitializationIpConfigIpv4Output)
}

func (i VirtualMachineInitializationIpConfigIpv4Args) ToVirtualMachineInitializationIpConfigIpv4PtrOutput() VirtualMachineInitializationIpConfigIpv4PtrOutput {
	return i.ToVirtualMachineInitializationIpConfigIpv4PtrOutputWithContext(context.Background())
}

func (i VirtualMachineInitializationIpConfigIpv4Args) ToVirtualMachineInitializationIpConfigIpv4PtrOutputWithContext(ctx context.Context) VirtualMachineInitializationIpConfigIpv4PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineInitializationIpConfigIpv4Output).ToVirtualMachineInitializationIpConfigIpv4PtrOutputWithContext(ctx)
}

// VirtualMachineInitializationIpConfigIpv4PtrInput is an input type that accepts VirtualMachineInitializationIpConfigIpv4Args, VirtualMachineInitializationIpConfigIpv4Ptr and VirtualMachineInitializationIpConfigIpv4PtrOutput values.
// You can construct a concrete instance of `VirtualMachineInitializationIpConfigIpv4PtrInput` via:
//
//	        VirtualMachineInitializationIpConfigIpv4Args{...}
//
//	or:
//
//	        nil
type VirtualMachineInitializationIpConfigIpv4PtrInput interface {
	pulumi.Input

	ToVirtualMachineInitializationIpConfigIpv4PtrOutput() VirtualMachineInitializationIpConfigIpv4PtrOutput
	ToVirtualMachineInitializationIpConfigIpv4PtrOutputWithContext(context.Context) VirtualMachineInitializationIpConfigIpv4PtrOutput
}

type virtualMachineInitializationIpConfigIpv4PtrType VirtualMachineInitializationIpConfigIpv4Args

func VirtualMachineInitializationIpConfigIpv4Ptr(v *VirtualMachineInitializationIpConfigIpv4Args) VirtualMachineInitializationIpConfigIpv4PtrInput {
	return (*virtualMachineInitializationIpConfigIpv4PtrType)(v)
}

func (*virtualMachineInitializationIpConfigIpv4PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineInitializationIpConfigIpv4)(nil)).Elem()
}

func (i *virtualMachineInitializationIpConfigIpv4PtrType) ToVirtualMachineInitializationIpConfigIpv4PtrOutput() VirtualMachineInitializationIpConfigIpv4PtrOutput {
	return i.ToVirtualMachineInitializationIpConfigIpv4PtrOutputWithContext(context.Background())
}

func (i *virtualMachineInitializationIpConfigIpv4PtrType) ToVirtualMachineInitializationIpConfigIpv4PtrOutputWithContext(ctx context.Context) VirtualMachineInitializationIpConfigIpv4PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineInitializationIpConfigIpv4PtrOutput)
}

type VirtualMachineInitializationIpConfigIpv4Output struct{ *pulumi.OutputState }

func (VirtualMachineInitializationIpConfigIpv4Output) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineInitializationIpConfigIpv4)(nil)).Elem()
}

func (o VirtualMachineInitializationIpConfigIpv4Output) ToVirtualMachineInitializationIpConfigIpv4Output() VirtualMachineInitializationIpConfigIpv4Output {
	return o
}

func (o VirtualMachineInitializationIpConfigIpv4Output) ToVirtualMachineInitializationIpConfigIpv4OutputWithContext(ctx context.Context) VirtualMachineInitializationIpConfigIpv4Output {
	return o
}

func (o VirtualMachineInitializationIpConfigIpv4Output) ToVirtualMachineInitializationIpConfigIpv4PtrOutput() VirtualMachineInitializationIpConfigIpv4PtrOutput {
	return o.ToVirtualMachineInitializationIpConfigIpv4PtrOutputWithContext(context.Background())
}

func (o VirtualMachineInitializationIpConfigIpv4Output) ToVirtualMachineInitializationIpConfigIpv4PtrOutputWithContext(ctx context.Context) VirtualMachineInitializationIpConfigIpv4PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineInitializationIpConfigIpv4) *VirtualMachineInitializationIpConfigIpv4 {
		return &v
	}).(VirtualMachineInitializationIpConfigIpv4PtrOutput)
}

// The IPv4 address in CIDR notation
// (e.g. 192.168.2.2/24). Alternatively, set this to `dhcp` for
// autodiscovery.
func (o VirtualMachineInitializationIpConfigIpv4Output) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineInitializationIpConfigIpv4) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The IPv4 gateway (must be omitted
// when `dhcp` is used as the address).
func (o VirtualMachineInitializationIpConfigIpv4Output) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineInitializationIpConfigIpv4) *string { return v.Gateway }).(pulumi.StringPtrOutput)
}

type VirtualMachineInitializationIpConfigIpv4PtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineInitializationIpConfigIpv4PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineInitializationIpConfigIpv4)(nil)).Elem()
}

func (o VirtualMachineInitializationIpConfigIpv4PtrOutput) ToVirtualMachineInitializationIpConfigIpv4PtrOutput() VirtualMachineInitializationIpConfigIpv4PtrOutput {
	return o
}

func (o VirtualMachineInitializationIpConfigIpv4PtrOutput) ToVirtualMachineInitializationIpConfigIpv4PtrOutputWithContext(ctx context.Context) VirtualMachineInitializationIpConfigIpv4PtrOutput {
	return o
}

func (o VirtualMachineInitializationIpConfigIpv4PtrOutput) Elem() VirtualMachineInitializationIpConfigIpv4Output {
	return o.ApplyT(func(v *VirtualMachineInitializationIpConfigIpv4) VirtualMachineInitializationIpConfigIpv4 {
		if v != nil {
			return *v
		}
		var ret VirtualMachineInitializationIpConfigIpv4
		return ret
	}).(VirtualMachineInitializationIpConfigIpv4Output)
}

// The IPv4 address in CIDR notation
// (e.g. 192.168.2.2/24). Alternatively, set this to `dhcp` for
// autodiscovery.
func (o VirtualMachineInitializationIpConfigIpv4PtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInitializationIpConfigIpv4) *string {
		if v == nil {
			return nil
		}
		return v.Address
	}).(pulumi.StringPtrOutput)
}

// The IPv4 gateway (must be omitted
// when `dhcp` is used as the address).
func (o VirtualMachineInitializationIpConfigIpv4PtrOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInitializationIpConfigIpv4) *string {
		if v == nil {
			return nil
		}
		return v.Gateway
	}).(pulumi.StringPtrOutput)
}

type VirtualMachineInitializationIpConfigIpv6 struct {
	// The IPv6 address in CIDR notation
	// (e.g. fd1c:000:0000::0000:000:7334/64). Alternatively, set this
	// to `dhcp` for autodiscovery.
	Address *string `pulumi:"address"`
	// The IPv6 gateway (must be omitted
	// when `dhcp` is used as the address).
	Gateway *string `pulumi:"gateway"`
}

// VirtualMachineInitializationIpConfigIpv6Input is an input type that accepts VirtualMachineInitializationIpConfigIpv6Args and VirtualMachineInitializationIpConfigIpv6Output values.
// You can construct a concrete instance of `VirtualMachineInitializationIpConfigIpv6Input` via:
//
//	VirtualMachineInitializationIpConfigIpv6Args{...}
type VirtualMachineInitializationIpConfigIpv6Input interface {
	pulumi.Input

	ToVirtualMachineInitializationIpConfigIpv6Output() VirtualMachineInitializationIpConfigIpv6Output
	ToVirtualMachineInitializationIpConfigIpv6OutputWithContext(context.Context) VirtualMachineInitializationIpConfigIpv6Output
}

type VirtualMachineInitializationIpConfigIpv6Args struct {
	// The IPv6 address in CIDR notation
	// (e.g. fd1c:000:0000::0000:000:7334/64). Alternatively, set this
	// to `dhcp` for autodiscovery.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The IPv6 gateway (must be omitted
	// when `dhcp` is used as the address).
	Gateway pulumi.StringPtrInput `pulumi:"gateway"`
}

func (VirtualMachineInitializationIpConfigIpv6Args) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineInitializationIpConfigIpv6)(nil)).Elem()
}

func (i VirtualMachineInitializationIpConfigIpv6Args) ToVirtualMachineInitializationIpConfigIpv6Output() VirtualMachineInitializationIpConfigIpv6Output {
	return i.ToVirtualMachineInitializationIpConfigIpv6OutputWithContext(context.Background())
}

func (i VirtualMachineInitializationIpConfigIpv6Args) ToVirtualMachineInitializationIpConfigIpv6OutputWithContext(ctx context.Context) VirtualMachineInitializationIpConfigIpv6Output {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineInitializationIpConfigIpv6Output)
}

func (i VirtualMachineInitializationIpConfigIpv6Args) ToVirtualMachineInitializationIpConfigIpv6PtrOutput() VirtualMachineInitializationIpConfigIpv6PtrOutput {
	return i.ToVirtualMachineInitializationIpConfigIpv6PtrOutputWithContext(context.Background())
}

func (i VirtualMachineInitializationIpConfigIpv6Args) ToVirtualMachineInitializationIpConfigIpv6PtrOutputWithContext(ctx context.Context) VirtualMachineInitializationIpConfigIpv6PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineInitializationIpConfigIpv6Output).ToVirtualMachineInitializationIpConfigIpv6PtrOutputWithContext(ctx)
}

// VirtualMachineInitializationIpConfigIpv6PtrInput is an input type that accepts VirtualMachineInitializationIpConfigIpv6Args, VirtualMachineInitializationIpConfigIpv6Ptr and VirtualMachineInitializationIpConfigIpv6PtrOutput values.
// You can construct a concrete instance of `VirtualMachineInitializationIpConfigIpv6PtrInput` via:
//
//	        VirtualMachineInitializationIpConfigIpv6Args{...}
//
//	or:
//
//	        nil
type VirtualMachineInitializationIpConfigIpv6PtrInput interface {
	pulumi.Input

	ToVirtualMachineInitializationIpConfigIpv6PtrOutput() VirtualMachineInitializationIpConfigIpv6PtrOutput
	ToVirtualMachineInitializationIpConfigIpv6PtrOutputWithContext(context.Context) VirtualMachineInitializationIpConfigIpv6PtrOutput
}

type virtualMachineInitializationIpConfigIpv6PtrType VirtualMachineInitializationIpConfigIpv6Args

func VirtualMachineInitializationIpConfigIpv6Ptr(v *VirtualMachineInitializationIpConfigIpv6Args) VirtualMachineInitializationIpConfigIpv6PtrInput {
	return (*virtualMachineInitializationIpConfigIpv6PtrType)(v)
}

func (*virtualMachineInitializationIpConfigIpv6PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineInitializationIpConfigIpv6)(nil)).Elem()
}

func (i *virtualMachineInitializationIpConfigIpv6PtrType) ToVirtualMachineInitializationIpConfigIpv6PtrOutput() VirtualMachineInitializationIpConfigIpv6PtrOutput {
	return i.ToVirtualMachineInitializationIpConfigIpv6PtrOutputWithContext(context.Background())
}

func (i *virtualMachineInitializationIpConfigIpv6PtrType) ToVirtualMachineInitializationIpConfigIpv6PtrOutputWithContext(ctx context.Context) VirtualMachineInitializationIpConfigIpv6PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineInitializationIpConfigIpv6PtrOutput)
}

type VirtualMachineInitializationIpConfigIpv6Output struct{ *pulumi.OutputState }

func (VirtualMachineInitializationIpConfigIpv6Output) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineInitializationIpConfigIpv6)(nil)).Elem()
}

func (o VirtualMachineInitializationIpConfigIpv6Output) ToVirtualMachineInitializationIpConfigIpv6Output() VirtualMachineInitializationIpConfigIpv6Output {
	return o
}

func (o VirtualMachineInitializationIpConfigIpv6Output) ToVirtualMachineInitializationIpConfigIpv6OutputWithContext(ctx context.Context) VirtualMachineInitializationIpConfigIpv6Output {
	return o
}

func (o VirtualMachineInitializationIpConfigIpv6Output) ToVirtualMachineInitializationIpConfigIpv6PtrOutput() VirtualMachineInitializationIpConfigIpv6PtrOutput {
	return o.ToVirtualMachineInitializationIpConfigIpv6PtrOutputWithContext(context.Background())
}

func (o VirtualMachineInitializationIpConfigIpv6Output) ToVirtualMachineInitializationIpConfigIpv6PtrOutputWithContext(ctx context.Context) VirtualMachineInitializationIpConfigIpv6PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineInitializationIpConfigIpv6) *VirtualMachineInitializationIpConfigIpv6 {
		return &v
	}).(VirtualMachineInitializationIpConfigIpv6PtrOutput)
}

// The IPv6 address in CIDR notation
// (e.g. fd1c:000:0000::0000:000:7334/64). Alternatively, set this
// to `dhcp` for autodiscovery.
func (o VirtualMachineInitializationIpConfigIpv6Output) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineInitializationIpConfigIpv6) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The IPv6 gateway (must be omitted
// when `dhcp` is used as the address).
func (o VirtualMachineInitializationIpConfigIpv6Output) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineInitializationIpConfigIpv6) *string { return v.Gateway }).(pulumi.StringPtrOutput)
}

type VirtualMachineInitializationIpConfigIpv6PtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineInitializationIpConfigIpv6PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineInitializationIpConfigIpv6)(nil)).Elem()
}

func (o VirtualMachineInitializationIpConfigIpv6PtrOutput) ToVirtualMachineInitializationIpConfigIpv6PtrOutput() VirtualMachineInitializationIpConfigIpv6PtrOutput {
	return o
}

func (o VirtualMachineInitializationIpConfigIpv6PtrOutput) ToVirtualMachineInitializationIpConfigIpv6PtrOutputWithContext(ctx context.Context) VirtualMachineInitializationIpConfigIpv6PtrOutput {
	return o
}

func (o VirtualMachineInitializationIpConfigIpv6PtrOutput) Elem() VirtualMachineInitializationIpConfigIpv6Output {
	return o.ApplyT(func(v *VirtualMachineInitializationIpConfigIpv6) VirtualMachineInitializationIpConfigIpv6 {
		if v != nil {
			return *v
		}
		var ret VirtualMachineInitializationIpConfigIpv6
		return ret
	}).(VirtualMachineInitializationIpConfigIpv6Output)
}

// The IPv6 address in CIDR notation
// (e.g. fd1c:000:0000::0000:000:7334/64). Alternatively, set this
// to `dhcp` for autodiscovery.
func (o VirtualMachineInitializationIpConfigIpv6PtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInitializationIpConfigIpv6) *string {
		if v == nil {
			return nil
		}
		return v.Address
	}).(pulumi.StringPtrOutput)
}

// The IPv6 gateway (must be omitted
// when `dhcp` is used as the address).
func (o VirtualMachineInitializationIpConfigIpv6PtrOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInitializationIpConfigIpv6) *string {
		if v == nil {
			return nil
		}
		return v.Gateway
	}).(pulumi.StringPtrOutput)
}

type VirtualMachineInitializationUserAccount struct {
	// The SSH keys.
	Keys []string `pulumi:"keys"`
	// The SSH password.
	Password *string `pulumi:"password"`
	// The SSH username.
	Username *string `pulumi:"username"`
}

// VirtualMachineInitializationUserAccountInput is an input type that accepts VirtualMachineInitializationUserAccountArgs and VirtualMachineInitializationUserAccountOutput values.
// You can construct a concrete instance of `VirtualMachineInitializationUserAccountInput` via:
//
//	VirtualMachineInitializationUserAccountArgs{...}
type VirtualMachineInitializationUserAccountInput interface {
	pulumi.Input

	ToVirtualMachineInitializationUserAccountOutput() VirtualMachineInitializationUserAccountOutput
	ToVirtualMachineInitializationUserAccountOutputWithContext(context.Context) VirtualMachineInitializationUserAccountOutput
}

type VirtualMachineInitializationUserAccountArgs struct {
	// The SSH keys.
	Keys pulumi.StringArrayInput `pulumi:"keys"`
	// The SSH password.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The SSH username.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (VirtualMachineInitializationUserAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineInitializationUserAccount)(nil)).Elem()
}

func (i VirtualMachineInitializationUserAccountArgs) ToVirtualMachineInitializationUserAccountOutput() VirtualMachineInitializationUserAccountOutput {
	return i.ToVirtualMachineInitializationUserAccountOutputWithContext(context.Background())
}

func (i VirtualMachineInitializationUserAccountArgs) ToVirtualMachineInitializationUserAccountOutputWithContext(ctx context.Context) VirtualMachineInitializationUserAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineInitializationUserAccountOutput)
}

func (i VirtualMachineInitializationUserAccountArgs) ToVirtualMachineInitializationUserAccountPtrOutput() VirtualMachineInitializationUserAccountPtrOutput {
	return i.ToVirtualMachineInitializationUserAccountPtrOutputWithContext(context.Background())
}

func (i VirtualMachineInitializationUserAccountArgs) ToVirtualMachineInitializationUserAccountPtrOutputWithContext(ctx context.Context) VirtualMachineInitializationUserAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineInitializationUserAccountOutput).ToVirtualMachineInitializationUserAccountPtrOutputWithContext(ctx)
}

// VirtualMachineInitializationUserAccountPtrInput is an input type that accepts VirtualMachineInitializationUserAccountArgs, VirtualMachineInitializationUserAccountPtr and VirtualMachineInitializationUserAccountPtrOutput values.
// You can construct a concrete instance of `VirtualMachineInitializationUserAccountPtrInput` via:
//
//	        VirtualMachineInitializationUserAccountArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineInitializationUserAccountPtrInput interface {
	pulumi.Input

	ToVirtualMachineInitializationUserAccountPtrOutput() VirtualMachineInitializationUserAccountPtrOutput
	ToVirtualMachineInitializationUserAccountPtrOutputWithContext(context.Context) VirtualMachineInitializationUserAccountPtrOutput
}

type virtualMachineInitializationUserAccountPtrType VirtualMachineInitializationUserAccountArgs

func VirtualMachineInitializationUserAccountPtr(v *VirtualMachineInitializationUserAccountArgs) VirtualMachineInitializationUserAccountPtrInput {
	return (*virtualMachineInitializationUserAccountPtrType)(v)
}

func (*virtualMachineInitializationUserAccountPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineInitializationUserAccount)(nil)).Elem()
}

func (i *virtualMachineInitializationUserAccountPtrType) ToVirtualMachineInitializationUserAccountPtrOutput() VirtualMachineInitializationUserAccountPtrOutput {
	return i.ToVirtualMachineInitializationUserAccountPtrOutputWithContext(context.Background())
}

func (i *virtualMachineInitializationUserAccountPtrType) ToVirtualMachineInitializationUserAccountPtrOutputWithContext(ctx context.Context) VirtualMachineInitializationUserAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineInitializationUserAccountPtrOutput)
}

type VirtualMachineInitializationUserAccountOutput struct{ *pulumi.OutputState }

func (VirtualMachineInitializationUserAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineInitializationUserAccount)(nil)).Elem()
}

func (o VirtualMachineInitializationUserAccountOutput) ToVirtualMachineInitializationUserAccountOutput() VirtualMachineInitializationUserAccountOutput {
	return o
}

func (o VirtualMachineInitializationUserAccountOutput) ToVirtualMachineInitializationUserAccountOutputWithContext(ctx context.Context) VirtualMachineInitializationUserAccountOutput {
	return o
}

func (o VirtualMachineInitializationUserAccountOutput) ToVirtualMachineInitializationUserAccountPtrOutput() VirtualMachineInitializationUserAccountPtrOutput {
	return o.ToVirtualMachineInitializationUserAccountPtrOutputWithContext(context.Background())
}

func (o VirtualMachineInitializationUserAccountOutput) ToVirtualMachineInitializationUserAccountPtrOutputWithContext(ctx context.Context) VirtualMachineInitializationUserAccountPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineInitializationUserAccount) *VirtualMachineInitializationUserAccount {
		return &v
	}).(VirtualMachineInitializationUserAccountPtrOutput)
}

// The SSH keys.
func (o VirtualMachineInitializationUserAccountOutput) Keys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualMachineInitializationUserAccount) []string { return v.Keys }).(pulumi.StringArrayOutput)
}

// The SSH password.
func (o VirtualMachineInitializationUserAccountOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineInitializationUserAccount) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The SSH username.
func (o VirtualMachineInitializationUserAccountOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineInitializationUserAccount) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type VirtualMachineInitializationUserAccountPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineInitializationUserAccountPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineInitializationUserAccount)(nil)).Elem()
}

func (o VirtualMachineInitializationUserAccountPtrOutput) ToVirtualMachineInitializationUserAccountPtrOutput() VirtualMachineInitializationUserAccountPtrOutput {
	return o
}

func (o VirtualMachineInitializationUserAccountPtrOutput) ToVirtualMachineInitializationUserAccountPtrOutputWithContext(ctx context.Context) VirtualMachineInitializationUserAccountPtrOutput {
	return o
}

func (o VirtualMachineInitializationUserAccountPtrOutput) Elem() VirtualMachineInitializationUserAccountOutput {
	return o.ApplyT(func(v *VirtualMachineInitializationUserAccount) VirtualMachineInitializationUserAccount {
		if v != nil {
			return *v
		}
		var ret VirtualMachineInitializationUserAccount
		return ret
	}).(VirtualMachineInitializationUserAccountOutput)
}

// The SSH keys.
func (o VirtualMachineInitializationUserAccountPtrOutput) Keys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualMachineInitializationUserAccount) []string {
		if v == nil {
			return nil
		}
		return v.Keys
	}).(pulumi.StringArrayOutput)
}

// The SSH password.
func (o VirtualMachineInitializationUserAccountPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInitializationUserAccount) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The SSH username.
func (o VirtualMachineInitializationUserAccountPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInitializationUserAccount) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type VirtualMachineMemory struct {
	// The dedicated memory in megabytes (defaults
	// to `512`).
	Dedicated *int `pulumi:"dedicated"`
	// The floating memory in megabytes (defaults
	// to `0`).
	Floating *int `pulumi:"floating"`
	// Enable/disable hugepages memory (defaults to disable).
	Hugepages *string `pulumi:"hugepages"`
	// Keep hugepages memory after the VM is stopped (defaults
	// to `false`).
	//
	// Settings `hugepages` and `keepHugepages` are only allowed for `root@pam` authenticated user.
	// And required `cpu.numa` to be enabled.
	KeepHugepages *bool `pulumi:"keepHugepages"`
	// The shared memory in megabytes (defaults to `0`).
	Shared *int `pulumi:"shared"`
}

// VirtualMachineMemoryInput is an input type that accepts VirtualMachineMemoryArgs and VirtualMachineMemoryOutput values.
// You can construct a concrete instance of `VirtualMachineMemoryInput` via:
//
//	VirtualMachineMemoryArgs{...}
type VirtualMachineMemoryInput interface {
	pulumi.Input

	ToVirtualMachineMemoryOutput() VirtualMachineMemoryOutput
	ToVirtualMachineMemoryOutputWithContext(context.Context) VirtualMachineMemoryOutput
}

type VirtualMachineMemoryArgs struct {
	// The dedicated memory in megabytes (defaults
	// to `512`).
	Dedicated pulumi.IntPtrInput `pulumi:"dedicated"`
	// The floating memory in megabytes (defaults
	// to `0`).
	Floating pulumi.IntPtrInput `pulumi:"floating"`
	// Enable/disable hugepages memory (defaults to disable).
	Hugepages pulumi.StringPtrInput `pulumi:"hugepages"`
	// Keep hugepages memory after the VM is stopped (defaults
	// to `false`).
	//
	// Settings `hugepages` and `keepHugepages` are only allowed for `root@pam` authenticated user.
	// And required `cpu.numa` to be enabled.
	KeepHugepages pulumi.BoolPtrInput `pulumi:"keepHugepages"`
	// The shared memory in megabytes (defaults to `0`).
	Shared pulumi.IntPtrInput `pulumi:"shared"`
}

func (VirtualMachineMemoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineMemory)(nil)).Elem()
}

func (i VirtualMachineMemoryArgs) ToVirtualMachineMemoryOutput() VirtualMachineMemoryOutput {
	return i.ToVirtualMachineMemoryOutputWithContext(context.Background())
}

func (i VirtualMachineMemoryArgs) ToVirtualMachineMemoryOutputWithContext(ctx context.Context) VirtualMachineMemoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineMemoryOutput)
}

func (i VirtualMachineMemoryArgs) ToVirtualMachineMemoryPtrOutput() VirtualMachineMemoryPtrOutput {
	return i.ToVirtualMachineMemoryPtrOutputWithContext(context.Background())
}

func (i VirtualMachineMemoryArgs) ToVirtualMachineMemoryPtrOutputWithContext(ctx context.Context) VirtualMachineMemoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineMemoryOutput).ToVirtualMachineMemoryPtrOutputWithContext(ctx)
}

// VirtualMachineMemoryPtrInput is an input type that accepts VirtualMachineMemoryArgs, VirtualMachineMemoryPtr and VirtualMachineMemoryPtrOutput values.
// You can construct a concrete instance of `VirtualMachineMemoryPtrInput` via:
//
//	        VirtualMachineMemoryArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineMemoryPtrInput interface {
	pulumi.Input

	ToVirtualMachineMemoryPtrOutput() VirtualMachineMemoryPtrOutput
	ToVirtualMachineMemoryPtrOutputWithContext(context.Context) VirtualMachineMemoryPtrOutput
}

type virtualMachineMemoryPtrType VirtualMachineMemoryArgs

func VirtualMachineMemoryPtr(v *VirtualMachineMemoryArgs) VirtualMachineMemoryPtrInput {
	return (*virtualMachineMemoryPtrType)(v)
}

func (*virtualMachineMemoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineMemory)(nil)).Elem()
}

func (i *virtualMachineMemoryPtrType) ToVirtualMachineMemoryPtrOutput() VirtualMachineMemoryPtrOutput {
	return i.ToVirtualMachineMemoryPtrOutputWithContext(context.Background())
}

func (i *virtualMachineMemoryPtrType) ToVirtualMachineMemoryPtrOutputWithContext(ctx context.Context) VirtualMachineMemoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineMemoryPtrOutput)
}

type VirtualMachineMemoryOutput struct{ *pulumi.OutputState }

func (VirtualMachineMemoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineMemory)(nil)).Elem()
}

func (o VirtualMachineMemoryOutput) ToVirtualMachineMemoryOutput() VirtualMachineMemoryOutput {
	return o
}

func (o VirtualMachineMemoryOutput) ToVirtualMachineMemoryOutputWithContext(ctx context.Context) VirtualMachineMemoryOutput {
	return o
}

func (o VirtualMachineMemoryOutput) ToVirtualMachineMemoryPtrOutput() VirtualMachineMemoryPtrOutput {
	return o.ToVirtualMachineMemoryPtrOutputWithContext(context.Background())
}

func (o VirtualMachineMemoryOutput) ToVirtualMachineMemoryPtrOutputWithContext(ctx context.Context) VirtualMachineMemoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineMemory) *VirtualMachineMemory {
		return &v
	}).(VirtualMachineMemoryPtrOutput)
}

// The dedicated memory in megabytes (defaults
// to `512`).
func (o VirtualMachineMemoryOutput) Dedicated() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineMemory) *int { return v.Dedicated }).(pulumi.IntPtrOutput)
}

// The floating memory in megabytes (defaults
// to `0`).
func (o VirtualMachineMemoryOutput) Floating() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineMemory) *int { return v.Floating }).(pulumi.IntPtrOutput)
}

// Enable/disable hugepages memory (defaults to disable).
func (o VirtualMachineMemoryOutput) Hugepages() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineMemory) *string { return v.Hugepages }).(pulumi.StringPtrOutput)
}

// Keep hugepages memory after the VM is stopped (defaults
// to `false`).
//
// Settings `hugepages` and `keepHugepages` are only allowed for `root@pam` authenticated user.
// And required `cpu.numa` to be enabled.
func (o VirtualMachineMemoryOutput) KeepHugepages() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineMemory) *bool { return v.KeepHugepages }).(pulumi.BoolPtrOutput)
}

// The shared memory in megabytes (defaults to `0`).
func (o VirtualMachineMemoryOutput) Shared() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineMemory) *int { return v.Shared }).(pulumi.IntPtrOutput)
}

type VirtualMachineMemoryPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineMemoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineMemory)(nil)).Elem()
}

func (o VirtualMachineMemoryPtrOutput) ToVirtualMachineMemoryPtrOutput() VirtualMachineMemoryPtrOutput {
	return o
}

func (o VirtualMachineMemoryPtrOutput) ToVirtualMachineMemoryPtrOutputWithContext(ctx context.Context) VirtualMachineMemoryPtrOutput {
	return o
}

func (o VirtualMachineMemoryPtrOutput) Elem() VirtualMachineMemoryOutput {
	return o.ApplyT(func(v *VirtualMachineMemory) VirtualMachineMemory {
		if v != nil {
			return *v
		}
		var ret VirtualMachineMemory
		return ret
	}).(VirtualMachineMemoryOutput)
}

// The dedicated memory in megabytes (defaults
// to `512`).
func (o VirtualMachineMemoryPtrOutput) Dedicated() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineMemory) *int {
		if v == nil {
			return nil
		}
		return v.Dedicated
	}).(pulumi.IntPtrOutput)
}

// The floating memory in megabytes (defaults
// to `0`).
func (o VirtualMachineMemoryPtrOutput) Floating() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineMemory) *int {
		if v == nil {
			return nil
		}
		return v.Floating
	}).(pulumi.IntPtrOutput)
}

// Enable/disable hugepages memory (defaults to disable).
func (o VirtualMachineMemoryPtrOutput) Hugepages() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineMemory) *string {
		if v == nil {
			return nil
		}
		return v.Hugepages
	}).(pulumi.StringPtrOutput)
}

// Keep hugepages memory after the VM is stopped (defaults
// to `false`).
//
// Settings `hugepages` and `keepHugepages` are only allowed for `root@pam` authenticated user.
// And required `cpu.numa` to be enabled.
func (o VirtualMachineMemoryPtrOutput) KeepHugepages() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachineMemory) *bool {
		if v == nil {
			return nil
		}
		return v.KeepHugepages
	}).(pulumi.BoolPtrOutput)
}

// The shared memory in megabytes (defaults to `0`).
func (o VirtualMachineMemoryPtrOutput) Shared() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineMemory) *int {
		if v == nil {
			return nil
		}
		return v.Shared
	}).(pulumi.IntPtrOutput)
}

type VirtualMachineNetworkDevice struct {
	// The name of the network bridge (defaults to `vmbr0`).
	Bridge *string `pulumi:"bridge"`
	// Whether to disconnect the network device from the network (defaults to `false`).
	Disconnected *bool `pulumi:"disconnected"`
	// Whether to enable the network device (defaults to `true`).
	Enabled *bool `pulumi:"enabled"`
	// Whether this interface's firewall rules should be used (defaults to `false`).
	Firewall *bool `pulumi:"firewall"`
	// The MAC address.
	MacAddress *string `pulumi:"macAddress"`
	// The network device model (defaults to `virtio`).
	Model *string `pulumi:"model"`
	// Force MTU, for VirtIO only. Set to 1 to use the bridge MTU. Cannot be larger than the bridge MTU.
	Mtu *int `pulumi:"mtu"`
	// The number of queues for VirtIO (1..64).
	Queues *int `pulumi:"queues"`
	// The rate limit in megabytes per second.
	RateLimit *float64 `pulumi:"rateLimit"`
	// String containing a `;` separated list of VLAN trunks
	// ("10;20;30"). Note that the VLAN-aware feature need to be enabled on the PVE
	// Linux Bridge to use trunks.
	Trunks *string `pulumi:"trunks"`
	// The VLAN identifier.
	VlanId *int `pulumi:"vlanId"`
}

// VirtualMachineNetworkDeviceInput is an input type that accepts VirtualMachineNetworkDeviceArgs and VirtualMachineNetworkDeviceOutput values.
// You can construct a concrete instance of `VirtualMachineNetworkDeviceInput` via:
//
//	VirtualMachineNetworkDeviceArgs{...}
type VirtualMachineNetworkDeviceInput interface {
	pulumi.Input

	ToVirtualMachineNetworkDeviceOutput() VirtualMachineNetworkDeviceOutput
	ToVirtualMachineNetworkDeviceOutputWithContext(context.Context) VirtualMachineNetworkDeviceOutput
}

type VirtualMachineNetworkDeviceArgs struct {
	// The name of the network bridge (defaults to `vmbr0`).
	Bridge pulumi.StringPtrInput `pulumi:"bridge"`
	// Whether to disconnect the network device from the network (defaults to `false`).
	Disconnected pulumi.BoolPtrInput `pulumi:"disconnected"`
	// Whether to enable the network device (defaults to `true`).
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Whether this interface's firewall rules should be used (defaults to `false`).
	Firewall pulumi.BoolPtrInput `pulumi:"firewall"`
	// The MAC address.
	MacAddress pulumi.StringPtrInput `pulumi:"macAddress"`
	// The network device model (defaults to `virtio`).
	Model pulumi.StringPtrInput `pulumi:"model"`
	// Force MTU, for VirtIO only. Set to 1 to use the bridge MTU. Cannot be larger than the bridge MTU.
	Mtu pulumi.IntPtrInput `pulumi:"mtu"`
	// The number of queues for VirtIO (1..64).
	Queues pulumi.IntPtrInput `pulumi:"queues"`
	// The rate limit in megabytes per second.
	RateLimit pulumi.Float64PtrInput `pulumi:"rateLimit"`
	// String containing a `;` separated list of VLAN trunks
	// ("10;20;30"). Note that the VLAN-aware feature need to be enabled on the PVE
	// Linux Bridge to use trunks.
	Trunks pulumi.StringPtrInput `pulumi:"trunks"`
	// The VLAN identifier.
	VlanId pulumi.IntPtrInput `pulumi:"vlanId"`
}

func (VirtualMachineNetworkDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineNetworkDevice)(nil)).Elem()
}

func (i VirtualMachineNetworkDeviceArgs) ToVirtualMachineNetworkDeviceOutput() VirtualMachineNetworkDeviceOutput {
	return i.ToVirtualMachineNetworkDeviceOutputWithContext(context.Background())
}

func (i VirtualMachineNetworkDeviceArgs) ToVirtualMachineNetworkDeviceOutputWithContext(ctx context.Context) VirtualMachineNetworkDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineNetworkDeviceOutput)
}

// VirtualMachineNetworkDeviceArrayInput is an input type that accepts VirtualMachineNetworkDeviceArray and VirtualMachineNetworkDeviceArrayOutput values.
// You can construct a concrete instance of `VirtualMachineNetworkDeviceArrayInput` via:
//
//	VirtualMachineNetworkDeviceArray{ VirtualMachineNetworkDeviceArgs{...} }
type VirtualMachineNetworkDeviceArrayInput interface {
	pulumi.Input

	ToVirtualMachineNetworkDeviceArrayOutput() VirtualMachineNetworkDeviceArrayOutput
	ToVirtualMachineNetworkDeviceArrayOutputWithContext(context.Context) VirtualMachineNetworkDeviceArrayOutput
}

type VirtualMachineNetworkDeviceArray []VirtualMachineNetworkDeviceInput

func (VirtualMachineNetworkDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineNetworkDevice)(nil)).Elem()
}

func (i VirtualMachineNetworkDeviceArray) ToVirtualMachineNetworkDeviceArrayOutput() VirtualMachineNetworkDeviceArrayOutput {
	return i.ToVirtualMachineNetworkDeviceArrayOutputWithContext(context.Background())
}

func (i VirtualMachineNetworkDeviceArray) ToVirtualMachineNetworkDeviceArrayOutputWithContext(ctx context.Context) VirtualMachineNetworkDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineNetworkDeviceArrayOutput)
}

type VirtualMachineNetworkDeviceOutput struct{ *pulumi.OutputState }

func (VirtualMachineNetworkDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineNetworkDevice)(nil)).Elem()
}

func (o VirtualMachineNetworkDeviceOutput) ToVirtualMachineNetworkDeviceOutput() VirtualMachineNetworkDeviceOutput {
	return o
}

func (o VirtualMachineNetworkDeviceOutput) ToVirtualMachineNetworkDeviceOutputWithContext(ctx context.Context) VirtualMachineNetworkDeviceOutput {
	return o
}

// The name of the network bridge (defaults to `vmbr0`).
func (o VirtualMachineNetworkDeviceOutput) Bridge() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkDevice) *string { return v.Bridge }).(pulumi.StringPtrOutput)
}

// Whether to disconnect the network device from the network (defaults to `false`).
func (o VirtualMachineNetworkDeviceOutput) Disconnected() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkDevice) *bool { return v.Disconnected }).(pulumi.BoolPtrOutput)
}

// Whether to enable the network device (defaults to `true`).
func (o VirtualMachineNetworkDeviceOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkDevice) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Whether this interface's firewall rules should be used (defaults to `false`).
func (o VirtualMachineNetworkDeviceOutput) Firewall() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkDevice) *bool { return v.Firewall }).(pulumi.BoolPtrOutput)
}

// The MAC address.
func (o VirtualMachineNetworkDeviceOutput) MacAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkDevice) *string { return v.MacAddress }).(pulumi.StringPtrOutput)
}

// The network device model (defaults to `virtio`).
func (o VirtualMachineNetworkDeviceOutput) Model() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkDevice) *string { return v.Model }).(pulumi.StringPtrOutput)
}

// Force MTU, for VirtIO only. Set to 1 to use the bridge MTU. Cannot be larger than the bridge MTU.
func (o VirtualMachineNetworkDeviceOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkDevice) *int { return v.Mtu }).(pulumi.IntPtrOutput)
}

// The number of queues for VirtIO (1..64).
func (o VirtualMachineNetworkDeviceOutput) Queues() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkDevice) *int { return v.Queues }).(pulumi.IntPtrOutput)
}

// The rate limit in megabytes per second.
func (o VirtualMachineNetworkDeviceOutput) RateLimit() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkDevice) *float64 { return v.RateLimit }).(pulumi.Float64PtrOutput)
}

// String containing a `;` separated list of VLAN trunks
// ("10;20;30"). Note that the VLAN-aware feature need to be enabled on the PVE
// Linux Bridge to use trunks.
func (o VirtualMachineNetworkDeviceOutput) Trunks() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkDevice) *string { return v.Trunks }).(pulumi.StringPtrOutput)
}

// The VLAN identifier.
func (o VirtualMachineNetworkDeviceOutput) VlanId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkDevice) *int { return v.VlanId }).(pulumi.IntPtrOutput)
}

type VirtualMachineNetworkDeviceArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineNetworkDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineNetworkDevice)(nil)).Elem()
}

func (o VirtualMachineNetworkDeviceArrayOutput) ToVirtualMachineNetworkDeviceArrayOutput() VirtualMachineNetworkDeviceArrayOutput {
	return o
}

func (o VirtualMachineNetworkDeviceArrayOutput) ToVirtualMachineNetworkDeviceArrayOutputWithContext(ctx context.Context) VirtualMachineNetworkDeviceArrayOutput {
	return o
}

func (o VirtualMachineNetworkDeviceArrayOutput) Index(i pulumi.IntInput) VirtualMachineNetworkDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineNetworkDevice {
		return vs[0].([]VirtualMachineNetworkDevice)[vs[1].(int)]
	}).(VirtualMachineNetworkDeviceOutput)
}

type VirtualMachineNuma struct {
	// The CPU cores to assign to the NUMA node (format is `0-7;16-31`).
	Cpus string `pulumi:"cpus"`
	// The NUMA device name for Proxmox, in form
	// of `numaX` where `X` is a sequential number from 0 to 7.
	Device string `pulumi:"device"`
	// The NUMA host nodes.
	Hostnodes *string `pulumi:"hostnodes"`
	// The memory in megabytes to assign to the NUMA node.
	Memory int `pulumi:"memory"`
	// The NUMA policy (defaults to `preferred`).
	Policy *string `pulumi:"policy"`
}

// VirtualMachineNumaInput is an input type that accepts VirtualMachineNumaArgs and VirtualMachineNumaOutput values.
// You can construct a concrete instance of `VirtualMachineNumaInput` via:
//
//	VirtualMachineNumaArgs{...}
type VirtualMachineNumaInput interface {
	pulumi.Input

	ToVirtualMachineNumaOutput() VirtualMachineNumaOutput
	ToVirtualMachineNumaOutputWithContext(context.Context) VirtualMachineNumaOutput
}

type VirtualMachineNumaArgs struct {
	// The CPU cores to assign to the NUMA node (format is `0-7;16-31`).
	Cpus pulumi.StringInput `pulumi:"cpus"`
	// The NUMA device name for Proxmox, in form
	// of `numaX` where `X` is a sequential number from 0 to 7.
	Device pulumi.StringInput `pulumi:"device"`
	// The NUMA host nodes.
	Hostnodes pulumi.StringPtrInput `pulumi:"hostnodes"`
	// The memory in megabytes to assign to the NUMA node.
	Memory pulumi.IntInput `pulumi:"memory"`
	// The NUMA policy (defaults to `preferred`).
	Policy pulumi.StringPtrInput `pulumi:"policy"`
}

func (VirtualMachineNumaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineNuma)(nil)).Elem()
}

func (i VirtualMachineNumaArgs) ToVirtualMachineNumaOutput() VirtualMachineNumaOutput {
	return i.ToVirtualMachineNumaOutputWithContext(context.Background())
}

func (i VirtualMachineNumaArgs) ToVirtualMachineNumaOutputWithContext(ctx context.Context) VirtualMachineNumaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineNumaOutput)
}

// VirtualMachineNumaArrayInput is an input type that accepts VirtualMachineNumaArray and VirtualMachineNumaArrayOutput values.
// You can construct a concrete instance of `VirtualMachineNumaArrayInput` via:
//
//	VirtualMachineNumaArray{ VirtualMachineNumaArgs{...} }
type VirtualMachineNumaArrayInput interface {
	pulumi.Input

	ToVirtualMachineNumaArrayOutput() VirtualMachineNumaArrayOutput
	ToVirtualMachineNumaArrayOutputWithContext(context.Context) VirtualMachineNumaArrayOutput
}

type VirtualMachineNumaArray []VirtualMachineNumaInput

func (VirtualMachineNumaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineNuma)(nil)).Elem()
}

func (i VirtualMachineNumaArray) ToVirtualMachineNumaArrayOutput() VirtualMachineNumaArrayOutput {
	return i.ToVirtualMachineNumaArrayOutputWithContext(context.Background())
}

func (i VirtualMachineNumaArray) ToVirtualMachineNumaArrayOutputWithContext(ctx context.Context) VirtualMachineNumaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineNumaArrayOutput)
}

type VirtualMachineNumaOutput struct{ *pulumi.OutputState }

func (VirtualMachineNumaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineNuma)(nil)).Elem()
}

func (o VirtualMachineNumaOutput) ToVirtualMachineNumaOutput() VirtualMachineNumaOutput {
	return o
}

func (o VirtualMachineNumaOutput) ToVirtualMachineNumaOutputWithContext(ctx context.Context) VirtualMachineNumaOutput {
	return o
}

// The CPU cores to assign to the NUMA node (format is `0-7;16-31`).
func (o VirtualMachineNumaOutput) Cpus() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineNuma) string { return v.Cpus }).(pulumi.StringOutput)
}

// The NUMA device name for Proxmox, in form
// of `numaX` where `X` is a sequential number from 0 to 7.
func (o VirtualMachineNumaOutput) Device() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineNuma) string { return v.Device }).(pulumi.StringOutput)
}

// The NUMA host nodes.
func (o VirtualMachineNumaOutput) Hostnodes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineNuma) *string { return v.Hostnodes }).(pulumi.StringPtrOutput)
}

// The memory in megabytes to assign to the NUMA node.
func (o VirtualMachineNumaOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v VirtualMachineNuma) int { return v.Memory }).(pulumi.IntOutput)
}

// The NUMA policy (defaults to `preferred`).
func (o VirtualMachineNumaOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineNuma) *string { return v.Policy }).(pulumi.StringPtrOutput)
}

type VirtualMachineNumaArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineNumaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineNuma)(nil)).Elem()
}

func (o VirtualMachineNumaArrayOutput) ToVirtualMachineNumaArrayOutput() VirtualMachineNumaArrayOutput {
	return o
}

func (o VirtualMachineNumaArrayOutput) ToVirtualMachineNumaArrayOutputWithContext(ctx context.Context) VirtualMachineNumaArrayOutput {
	return o
}

func (o VirtualMachineNumaArrayOutput) Index(i pulumi.IntInput) VirtualMachineNumaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineNuma {
		return vs[0].([]VirtualMachineNuma)[vs[1].(int)]
	}).(VirtualMachineNumaOutput)
}

type VirtualMachineOperatingSystem struct {
	// The type (defaults to `other`).
	Type *string `pulumi:"type"`
}

// VirtualMachineOperatingSystemInput is an input type that accepts VirtualMachineOperatingSystemArgs and VirtualMachineOperatingSystemOutput values.
// You can construct a concrete instance of `VirtualMachineOperatingSystemInput` via:
//
//	VirtualMachineOperatingSystemArgs{...}
type VirtualMachineOperatingSystemInput interface {
	pulumi.Input

	ToVirtualMachineOperatingSystemOutput() VirtualMachineOperatingSystemOutput
	ToVirtualMachineOperatingSystemOutputWithContext(context.Context) VirtualMachineOperatingSystemOutput
}

type VirtualMachineOperatingSystemArgs struct {
	// The type (defaults to `other`).
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (VirtualMachineOperatingSystemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineOperatingSystem)(nil)).Elem()
}

func (i VirtualMachineOperatingSystemArgs) ToVirtualMachineOperatingSystemOutput() VirtualMachineOperatingSystemOutput {
	return i.ToVirtualMachineOperatingSystemOutputWithContext(context.Background())
}

func (i VirtualMachineOperatingSystemArgs) ToVirtualMachineOperatingSystemOutputWithContext(ctx context.Context) VirtualMachineOperatingSystemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineOperatingSystemOutput)
}

func (i VirtualMachineOperatingSystemArgs) ToVirtualMachineOperatingSystemPtrOutput() VirtualMachineOperatingSystemPtrOutput {
	return i.ToVirtualMachineOperatingSystemPtrOutputWithContext(context.Background())
}

func (i VirtualMachineOperatingSystemArgs) ToVirtualMachineOperatingSystemPtrOutputWithContext(ctx context.Context) VirtualMachineOperatingSystemPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineOperatingSystemOutput).ToVirtualMachineOperatingSystemPtrOutputWithContext(ctx)
}

// VirtualMachineOperatingSystemPtrInput is an input type that accepts VirtualMachineOperatingSystemArgs, VirtualMachineOperatingSystemPtr and VirtualMachineOperatingSystemPtrOutput values.
// You can construct a concrete instance of `VirtualMachineOperatingSystemPtrInput` via:
//
//	        VirtualMachineOperatingSystemArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineOperatingSystemPtrInput interface {
	pulumi.Input

	ToVirtualMachineOperatingSystemPtrOutput() VirtualMachineOperatingSystemPtrOutput
	ToVirtualMachineOperatingSystemPtrOutputWithContext(context.Context) VirtualMachineOperatingSystemPtrOutput
}

type virtualMachineOperatingSystemPtrType VirtualMachineOperatingSystemArgs

func VirtualMachineOperatingSystemPtr(v *VirtualMachineOperatingSystemArgs) VirtualMachineOperatingSystemPtrInput {
	return (*virtualMachineOperatingSystemPtrType)(v)
}

func (*virtualMachineOperatingSystemPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineOperatingSystem)(nil)).Elem()
}

func (i *virtualMachineOperatingSystemPtrType) ToVirtualMachineOperatingSystemPtrOutput() VirtualMachineOperatingSystemPtrOutput {
	return i.ToVirtualMachineOperatingSystemPtrOutputWithContext(context.Background())
}

func (i *virtualMachineOperatingSystemPtrType) ToVirtualMachineOperatingSystemPtrOutputWithContext(ctx context.Context) VirtualMachineOperatingSystemPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineOperatingSystemPtrOutput)
}

type VirtualMachineOperatingSystemOutput struct{ *pulumi.OutputState }

func (VirtualMachineOperatingSystemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineOperatingSystem)(nil)).Elem()
}

func (o VirtualMachineOperatingSystemOutput) ToVirtualMachineOperatingSystemOutput() VirtualMachineOperatingSystemOutput {
	return o
}

func (o VirtualMachineOperatingSystemOutput) ToVirtualMachineOperatingSystemOutputWithContext(ctx context.Context) VirtualMachineOperatingSystemOutput {
	return o
}

func (o VirtualMachineOperatingSystemOutput) ToVirtualMachineOperatingSystemPtrOutput() VirtualMachineOperatingSystemPtrOutput {
	return o.ToVirtualMachineOperatingSystemPtrOutputWithContext(context.Background())
}

func (o VirtualMachineOperatingSystemOutput) ToVirtualMachineOperatingSystemPtrOutputWithContext(ctx context.Context) VirtualMachineOperatingSystemPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineOperatingSystem) *VirtualMachineOperatingSystem {
		return &v
	}).(VirtualMachineOperatingSystemPtrOutput)
}

// The type (defaults to `other`).
func (o VirtualMachineOperatingSystemOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineOperatingSystem) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type VirtualMachineOperatingSystemPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineOperatingSystemPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineOperatingSystem)(nil)).Elem()
}

func (o VirtualMachineOperatingSystemPtrOutput) ToVirtualMachineOperatingSystemPtrOutput() VirtualMachineOperatingSystemPtrOutput {
	return o
}

func (o VirtualMachineOperatingSystemPtrOutput) ToVirtualMachineOperatingSystemPtrOutputWithContext(ctx context.Context) VirtualMachineOperatingSystemPtrOutput {
	return o
}

func (o VirtualMachineOperatingSystemPtrOutput) Elem() VirtualMachineOperatingSystemOutput {
	return o.ApplyT(func(v *VirtualMachineOperatingSystem) VirtualMachineOperatingSystem {
		if v != nil {
			return *v
		}
		var ret VirtualMachineOperatingSystem
		return ret
	}).(VirtualMachineOperatingSystemOutput)
}

// The type (defaults to `other`).
func (o VirtualMachineOperatingSystemPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineOperatingSystem) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type VirtualMachineSerialDevice struct {
	// The device (defaults to `socket`).
	// - `/dev/*` - A host serial device.
	Device *string `pulumi:"device"`
}

// VirtualMachineSerialDeviceInput is an input type that accepts VirtualMachineSerialDeviceArgs and VirtualMachineSerialDeviceOutput values.
// You can construct a concrete instance of `VirtualMachineSerialDeviceInput` via:
//
//	VirtualMachineSerialDeviceArgs{...}
type VirtualMachineSerialDeviceInput interface {
	pulumi.Input

	ToVirtualMachineSerialDeviceOutput() VirtualMachineSerialDeviceOutput
	ToVirtualMachineSerialDeviceOutputWithContext(context.Context) VirtualMachineSerialDeviceOutput
}

type VirtualMachineSerialDeviceArgs struct {
	// The device (defaults to `socket`).
	// - `/dev/*` - A host serial device.
	Device pulumi.StringPtrInput `pulumi:"device"`
}

func (VirtualMachineSerialDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineSerialDevice)(nil)).Elem()
}

func (i VirtualMachineSerialDeviceArgs) ToVirtualMachineSerialDeviceOutput() VirtualMachineSerialDeviceOutput {
	return i.ToVirtualMachineSerialDeviceOutputWithContext(context.Background())
}

func (i VirtualMachineSerialDeviceArgs) ToVirtualMachineSerialDeviceOutputWithContext(ctx context.Context) VirtualMachineSerialDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineSerialDeviceOutput)
}

// VirtualMachineSerialDeviceArrayInput is an input type that accepts VirtualMachineSerialDeviceArray and VirtualMachineSerialDeviceArrayOutput values.
// You can construct a concrete instance of `VirtualMachineSerialDeviceArrayInput` via:
//
//	VirtualMachineSerialDeviceArray{ VirtualMachineSerialDeviceArgs{...} }
type VirtualMachineSerialDeviceArrayInput interface {
	pulumi.Input

	ToVirtualMachineSerialDeviceArrayOutput() VirtualMachineSerialDeviceArrayOutput
	ToVirtualMachineSerialDeviceArrayOutputWithContext(context.Context) VirtualMachineSerialDeviceArrayOutput
}

type VirtualMachineSerialDeviceArray []VirtualMachineSerialDeviceInput

func (VirtualMachineSerialDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineSerialDevice)(nil)).Elem()
}

func (i VirtualMachineSerialDeviceArray) ToVirtualMachineSerialDeviceArrayOutput() VirtualMachineSerialDeviceArrayOutput {
	return i.ToVirtualMachineSerialDeviceArrayOutputWithContext(context.Background())
}

func (i VirtualMachineSerialDeviceArray) ToVirtualMachineSerialDeviceArrayOutputWithContext(ctx context.Context) VirtualMachineSerialDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineSerialDeviceArrayOutput)
}

type VirtualMachineSerialDeviceOutput struct{ *pulumi.OutputState }

func (VirtualMachineSerialDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineSerialDevice)(nil)).Elem()
}

func (o VirtualMachineSerialDeviceOutput) ToVirtualMachineSerialDeviceOutput() VirtualMachineSerialDeviceOutput {
	return o
}

func (o VirtualMachineSerialDeviceOutput) ToVirtualMachineSerialDeviceOutputWithContext(ctx context.Context) VirtualMachineSerialDeviceOutput {
	return o
}

// The device (defaults to `socket`).
// - `/dev/*` - A host serial device.
func (o VirtualMachineSerialDeviceOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineSerialDevice) *string { return v.Device }).(pulumi.StringPtrOutput)
}

type VirtualMachineSerialDeviceArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineSerialDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineSerialDevice)(nil)).Elem()
}

func (o VirtualMachineSerialDeviceArrayOutput) ToVirtualMachineSerialDeviceArrayOutput() VirtualMachineSerialDeviceArrayOutput {
	return o
}

func (o VirtualMachineSerialDeviceArrayOutput) ToVirtualMachineSerialDeviceArrayOutputWithContext(ctx context.Context) VirtualMachineSerialDeviceArrayOutput {
	return o
}

func (o VirtualMachineSerialDeviceArrayOutput) Index(i pulumi.IntInput) VirtualMachineSerialDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineSerialDevice {
		return vs[0].([]VirtualMachineSerialDevice)[vs[1].(int)]
	}).(VirtualMachineSerialDeviceOutput)
}

type VirtualMachineSmbios struct {
	// The family string.
	Family *string `pulumi:"family"`
	// The manufacturer.
	Manufacturer *string `pulumi:"manufacturer"`
	// The product ID.
	Product *string `pulumi:"product"`
	// The serial number.
	Serial *string `pulumi:"serial"`
	// The SKU number.
	Sku *string `pulumi:"sku"`
	// The UUID (defaults to randomly generated UUID).
	Uuid *string `pulumi:"uuid"`
	// The version.
	Version *string `pulumi:"version"`
}

// VirtualMachineSmbiosInput is an input type that accepts VirtualMachineSmbiosArgs and VirtualMachineSmbiosOutput values.
// You can construct a concrete instance of `VirtualMachineSmbiosInput` via:
//
//	VirtualMachineSmbiosArgs{...}
type VirtualMachineSmbiosInput interface {
	pulumi.Input

	ToVirtualMachineSmbiosOutput() VirtualMachineSmbiosOutput
	ToVirtualMachineSmbiosOutputWithContext(context.Context) VirtualMachineSmbiosOutput
}

type VirtualMachineSmbiosArgs struct {
	// The family string.
	Family pulumi.StringPtrInput `pulumi:"family"`
	// The manufacturer.
	Manufacturer pulumi.StringPtrInput `pulumi:"manufacturer"`
	// The product ID.
	Product pulumi.StringPtrInput `pulumi:"product"`
	// The serial number.
	Serial pulumi.StringPtrInput `pulumi:"serial"`
	// The SKU number.
	Sku pulumi.StringPtrInput `pulumi:"sku"`
	// The UUID (defaults to randomly generated UUID).
	Uuid pulumi.StringPtrInput `pulumi:"uuid"`
	// The version.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (VirtualMachineSmbiosArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineSmbios)(nil)).Elem()
}

func (i VirtualMachineSmbiosArgs) ToVirtualMachineSmbiosOutput() VirtualMachineSmbiosOutput {
	return i.ToVirtualMachineSmbiosOutputWithContext(context.Background())
}

func (i VirtualMachineSmbiosArgs) ToVirtualMachineSmbiosOutputWithContext(ctx context.Context) VirtualMachineSmbiosOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineSmbiosOutput)
}

func (i VirtualMachineSmbiosArgs) ToVirtualMachineSmbiosPtrOutput() VirtualMachineSmbiosPtrOutput {
	return i.ToVirtualMachineSmbiosPtrOutputWithContext(context.Background())
}

func (i VirtualMachineSmbiosArgs) ToVirtualMachineSmbiosPtrOutputWithContext(ctx context.Context) VirtualMachineSmbiosPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineSmbiosOutput).ToVirtualMachineSmbiosPtrOutputWithContext(ctx)
}

// VirtualMachineSmbiosPtrInput is an input type that accepts VirtualMachineSmbiosArgs, VirtualMachineSmbiosPtr and VirtualMachineSmbiosPtrOutput values.
// You can construct a concrete instance of `VirtualMachineSmbiosPtrInput` via:
//
//	        VirtualMachineSmbiosArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineSmbiosPtrInput interface {
	pulumi.Input

	ToVirtualMachineSmbiosPtrOutput() VirtualMachineSmbiosPtrOutput
	ToVirtualMachineSmbiosPtrOutputWithContext(context.Context) VirtualMachineSmbiosPtrOutput
}

type virtualMachineSmbiosPtrType VirtualMachineSmbiosArgs

func VirtualMachineSmbiosPtr(v *VirtualMachineSmbiosArgs) VirtualMachineSmbiosPtrInput {
	return (*virtualMachineSmbiosPtrType)(v)
}

func (*virtualMachineSmbiosPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineSmbios)(nil)).Elem()
}

func (i *virtualMachineSmbiosPtrType) ToVirtualMachineSmbiosPtrOutput() VirtualMachineSmbiosPtrOutput {
	return i.ToVirtualMachineSmbiosPtrOutputWithContext(context.Background())
}

func (i *virtualMachineSmbiosPtrType) ToVirtualMachineSmbiosPtrOutputWithContext(ctx context.Context) VirtualMachineSmbiosPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineSmbiosPtrOutput)
}

type VirtualMachineSmbiosOutput struct{ *pulumi.OutputState }

func (VirtualMachineSmbiosOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineSmbios)(nil)).Elem()
}

func (o VirtualMachineSmbiosOutput) ToVirtualMachineSmbiosOutput() VirtualMachineSmbiosOutput {
	return o
}

func (o VirtualMachineSmbiosOutput) ToVirtualMachineSmbiosOutputWithContext(ctx context.Context) VirtualMachineSmbiosOutput {
	return o
}

func (o VirtualMachineSmbiosOutput) ToVirtualMachineSmbiosPtrOutput() VirtualMachineSmbiosPtrOutput {
	return o.ToVirtualMachineSmbiosPtrOutputWithContext(context.Background())
}

func (o VirtualMachineSmbiosOutput) ToVirtualMachineSmbiosPtrOutputWithContext(ctx context.Context) VirtualMachineSmbiosPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineSmbios) *VirtualMachineSmbios {
		return &v
	}).(VirtualMachineSmbiosPtrOutput)
}

// The family string.
func (o VirtualMachineSmbiosOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineSmbios) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The manufacturer.
func (o VirtualMachineSmbiosOutput) Manufacturer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineSmbios) *string { return v.Manufacturer }).(pulumi.StringPtrOutput)
}

// The product ID.
func (o VirtualMachineSmbiosOutput) Product() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineSmbios) *string { return v.Product }).(pulumi.StringPtrOutput)
}

// The serial number.
func (o VirtualMachineSmbiosOutput) Serial() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineSmbios) *string { return v.Serial }).(pulumi.StringPtrOutput)
}

// The SKU number.
func (o VirtualMachineSmbiosOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineSmbios) *string { return v.Sku }).(pulumi.StringPtrOutput)
}

// The UUID (defaults to randomly generated UUID).
func (o VirtualMachineSmbiosOutput) Uuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineSmbios) *string { return v.Uuid }).(pulumi.StringPtrOutput)
}

// The version.
func (o VirtualMachineSmbiosOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineSmbios) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type VirtualMachineSmbiosPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineSmbiosPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineSmbios)(nil)).Elem()
}

func (o VirtualMachineSmbiosPtrOutput) ToVirtualMachineSmbiosPtrOutput() VirtualMachineSmbiosPtrOutput {
	return o
}

func (o VirtualMachineSmbiosPtrOutput) ToVirtualMachineSmbiosPtrOutputWithContext(ctx context.Context) VirtualMachineSmbiosPtrOutput {
	return o
}

func (o VirtualMachineSmbiosPtrOutput) Elem() VirtualMachineSmbiosOutput {
	return o.ApplyT(func(v *VirtualMachineSmbios) VirtualMachineSmbios {
		if v != nil {
			return *v
		}
		var ret VirtualMachineSmbios
		return ret
	}).(VirtualMachineSmbiosOutput)
}

// The family string.
func (o VirtualMachineSmbiosPtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineSmbios) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The manufacturer.
func (o VirtualMachineSmbiosPtrOutput) Manufacturer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineSmbios) *string {
		if v == nil {
			return nil
		}
		return v.Manufacturer
	}).(pulumi.StringPtrOutput)
}

// The product ID.
func (o VirtualMachineSmbiosPtrOutput) Product() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineSmbios) *string {
		if v == nil {
			return nil
		}
		return v.Product
	}).(pulumi.StringPtrOutput)
}

// The serial number.
func (o VirtualMachineSmbiosPtrOutput) Serial() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineSmbios) *string {
		if v == nil {
			return nil
		}
		return v.Serial
	}).(pulumi.StringPtrOutput)
}

// The SKU number.
func (o VirtualMachineSmbiosPtrOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineSmbios) *string {
		if v == nil {
			return nil
		}
		return v.Sku
	}).(pulumi.StringPtrOutput)
}

// The UUID (defaults to randomly generated UUID).
func (o VirtualMachineSmbiosPtrOutput) Uuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineSmbios) *string {
		if v == nil {
			return nil
		}
		return v.Uuid
	}).(pulumi.StringPtrOutput)
}

// The version.
func (o VirtualMachineSmbiosPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineSmbios) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type VirtualMachineStartup struct {
	// A non-negative number defining the delay in
	// seconds before the next VM is shut down.
	DownDelay *int `pulumi:"downDelay"`
	// A non-negative number defining the general startup
	// order.
	Order *int `pulumi:"order"`
	// A non-negative number defining the delay in
	// seconds before the next VM is started.
	UpDelay *int `pulumi:"upDelay"`
}

// VirtualMachineStartupInput is an input type that accepts VirtualMachineStartupArgs and VirtualMachineStartupOutput values.
// You can construct a concrete instance of `VirtualMachineStartupInput` via:
//
//	VirtualMachineStartupArgs{...}
type VirtualMachineStartupInput interface {
	pulumi.Input

	ToVirtualMachineStartupOutput() VirtualMachineStartupOutput
	ToVirtualMachineStartupOutputWithContext(context.Context) VirtualMachineStartupOutput
}

type VirtualMachineStartupArgs struct {
	// A non-negative number defining the delay in
	// seconds before the next VM is shut down.
	DownDelay pulumi.IntPtrInput `pulumi:"downDelay"`
	// A non-negative number defining the general startup
	// order.
	Order pulumi.IntPtrInput `pulumi:"order"`
	// A non-negative number defining the delay in
	// seconds before the next VM is started.
	UpDelay pulumi.IntPtrInput `pulumi:"upDelay"`
}

func (VirtualMachineStartupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineStartup)(nil)).Elem()
}

func (i VirtualMachineStartupArgs) ToVirtualMachineStartupOutput() VirtualMachineStartupOutput {
	return i.ToVirtualMachineStartupOutputWithContext(context.Background())
}

func (i VirtualMachineStartupArgs) ToVirtualMachineStartupOutputWithContext(ctx context.Context) VirtualMachineStartupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineStartupOutput)
}

func (i VirtualMachineStartupArgs) ToVirtualMachineStartupPtrOutput() VirtualMachineStartupPtrOutput {
	return i.ToVirtualMachineStartupPtrOutputWithContext(context.Background())
}

func (i VirtualMachineStartupArgs) ToVirtualMachineStartupPtrOutputWithContext(ctx context.Context) VirtualMachineStartupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineStartupOutput).ToVirtualMachineStartupPtrOutputWithContext(ctx)
}

// VirtualMachineStartupPtrInput is an input type that accepts VirtualMachineStartupArgs, VirtualMachineStartupPtr and VirtualMachineStartupPtrOutput values.
// You can construct a concrete instance of `VirtualMachineStartupPtrInput` via:
//
//	        VirtualMachineStartupArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineStartupPtrInput interface {
	pulumi.Input

	ToVirtualMachineStartupPtrOutput() VirtualMachineStartupPtrOutput
	ToVirtualMachineStartupPtrOutputWithContext(context.Context) VirtualMachineStartupPtrOutput
}

type virtualMachineStartupPtrType VirtualMachineStartupArgs

func VirtualMachineStartupPtr(v *VirtualMachineStartupArgs) VirtualMachineStartupPtrInput {
	return (*virtualMachineStartupPtrType)(v)
}

func (*virtualMachineStartupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineStartup)(nil)).Elem()
}

func (i *virtualMachineStartupPtrType) ToVirtualMachineStartupPtrOutput() VirtualMachineStartupPtrOutput {
	return i.ToVirtualMachineStartupPtrOutputWithContext(context.Background())
}

func (i *virtualMachineStartupPtrType) ToVirtualMachineStartupPtrOutputWithContext(ctx context.Context) VirtualMachineStartupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineStartupPtrOutput)
}

type VirtualMachineStartupOutput struct{ *pulumi.OutputState }

func (VirtualMachineStartupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineStartup)(nil)).Elem()
}

func (o VirtualMachineStartupOutput) ToVirtualMachineStartupOutput() VirtualMachineStartupOutput {
	return o
}

func (o VirtualMachineStartupOutput) ToVirtualMachineStartupOutputWithContext(ctx context.Context) VirtualMachineStartupOutput {
	return o
}

func (o VirtualMachineStartupOutput) ToVirtualMachineStartupPtrOutput() VirtualMachineStartupPtrOutput {
	return o.ToVirtualMachineStartupPtrOutputWithContext(context.Background())
}

func (o VirtualMachineStartupOutput) ToVirtualMachineStartupPtrOutputWithContext(ctx context.Context) VirtualMachineStartupPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineStartup) *VirtualMachineStartup {
		return &v
	}).(VirtualMachineStartupPtrOutput)
}

// A non-negative number defining the delay in
// seconds before the next VM is shut down.
func (o VirtualMachineStartupOutput) DownDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineStartup) *int { return v.DownDelay }).(pulumi.IntPtrOutput)
}

// A non-negative number defining the general startup
// order.
func (o VirtualMachineStartupOutput) Order() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineStartup) *int { return v.Order }).(pulumi.IntPtrOutput)
}

// A non-negative number defining the delay in
// seconds before the next VM is started.
func (o VirtualMachineStartupOutput) UpDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineStartup) *int { return v.UpDelay }).(pulumi.IntPtrOutput)
}

type VirtualMachineStartupPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineStartupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineStartup)(nil)).Elem()
}

func (o VirtualMachineStartupPtrOutput) ToVirtualMachineStartupPtrOutput() VirtualMachineStartupPtrOutput {
	return o
}

func (o VirtualMachineStartupPtrOutput) ToVirtualMachineStartupPtrOutputWithContext(ctx context.Context) VirtualMachineStartupPtrOutput {
	return o
}

func (o VirtualMachineStartupPtrOutput) Elem() VirtualMachineStartupOutput {
	return o.ApplyT(func(v *VirtualMachineStartup) VirtualMachineStartup {
		if v != nil {
			return *v
		}
		var ret VirtualMachineStartup
		return ret
	}).(VirtualMachineStartupOutput)
}

// A non-negative number defining the delay in
// seconds before the next VM is shut down.
func (o VirtualMachineStartupPtrOutput) DownDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineStartup) *int {
		if v == nil {
			return nil
		}
		return v.DownDelay
	}).(pulumi.IntPtrOutput)
}

// A non-negative number defining the general startup
// order.
func (o VirtualMachineStartupPtrOutput) Order() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineStartup) *int {
		if v == nil {
			return nil
		}
		return v.Order
	}).(pulumi.IntPtrOutput)
}

// A non-negative number defining the delay in
// seconds before the next VM is started.
func (o VirtualMachineStartupPtrOutput) UpDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineStartup) *int {
		if v == nil {
			return nil
		}
		return v.UpDelay
	}).(pulumi.IntPtrOutput)
}

type VirtualMachineTpmState struct {
	// The identifier for the datastore to create
	// the disk in (defaults to `local-lvm`).
	DatastoreId *string `pulumi:"datastoreId"`
	// TPM state device version. Can be `v1.2` or `v2.0`.
	// (defaults to `v2.0`).
	Version *string `pulumi:"version"`
}

// VirtualMachineTpmStateInput is an input type that accepts VirtualMachineTpmStateArgs and VirtualMachineTpmStateOutput values.
// You can construct a concrete instance of `VirtualMachineTpmStateInput` via:
//
//	VirtualMachineTpmStateArgs{...}
type VirtualMachineTpmStateInput interface {
	pulumi.Input

	ToVirtualMachineTpmStateOutput() VirtualMachineTpmStateOutput
	ToVirtualMachineTpmStateOutputWithContext(context.Context) VirtualMachineTpmStateOutput
}

type VirtualMachineTpmStateArgs struct {
	// The identifier for the datastore to create
	// the disk in (defaults to `local-lvm`).
	DatastoreId pulumi.StringPtrInput `pulumi:"datastoreId"`
	// TPM state device version. Can be `v1.2` or `v2.0`.
	// (defaults to `v2.0`).
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (VirtualMachineTpmStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineTpmState)(nil)).Elem()
}

func (i VirtualMachineTpmStateArgs) ToVirtualMachineTpmStateOutput() VirtualMachineTpmStateOutput {
	return i.ToVirtualMachineTpmStateOutputWithContext(context.Background())
}

func (i VirtualMachineTpmStateArgs) ToVirtualMachineTpmStateOutputWithContext(ctx context.Context) VirtualMachineTpmStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineTpmStateOutput)
}

func (i VirtualMachineTpmStateArgs) ToVirtualMachineTpmStatePtrOutput() VirtualMachineTpmStatePtrOutput {
	return i.ToVirtualMachineTpmStatePtrOutputWithContext(context.Background())
}

func (i VirtualMachineTpmStateArgs) ToVirtualMachineTpmStatePtrOutputWithContext(ctx context.Context) VirtualMachineTpmStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineTpmStateOutput).ToVirtualMachineTpmStatePtrOutputWithContext(ctx)
}

// VirtualMachineTpmStatePtrInput is an input type that accepts VirtualMachineTpmStateArgs, VirtualMachineTpmStatePtr and VirtualMachineTpmStatePtrOutput values.
// You can construct a concrete instance of `VirtualMachineTpmStatePtrInput` via:
//
//	        VirtualMachineTpmStateArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineTpmStatePtrInput interface {
	pulumi.Input

	ToVirtualMachineTpmStatePtrOutput() VirtualMachineTpmStatePtrOutput
	ToVirtualMachineTpmStatePtrOutputWithContext(context.Context) VirtualMachineTpmStatePtrOutput
}

type virtualMachineTpmStatePtrType VirtualMachineTpmStateArgs

func VirtualMachineTpmStatePtr(v *VirtualMachineTpmStateArgs) VirtualMachineTpmStatePtrInput {
	return (*virtualMachineTpmStatePtrType)(v)
}

func (*virtualMachineTpmStatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineTpmState)(nil)).Elem()
}

func (i *virtualMachineTpmStatePtrType) ToVirtualMachineTpmStatePtrOutput() VirtualMachineTpmStatePtrOutput {
	return i.ToVirtualMachineTpmStatePtrOutputWithContext(context.Background())
}

func (i *virtualMachineTpmStatePtrType) ToVirtualMachineTpmStatePtrOutputWithContext(ctx context.Context) VirtualMachineTpmStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineTpmStatePtrOutput)
}

type VirtualMachineTpmStateOutput struct{ *pulumi.OutputState }

func (VirtualMachineTpmStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineTpmState)(nil)).Elem()
}

func (o VirtualMachineTpmStateOutput) ToVirtualMachineTpmStateOutput() VirtualMachineTpmStateOutput {
	return o
}

func (o VirtualMachineTpmStateOutput) ToVirtualMachineTpmStateOutputWithContext(ctx context.Context) VirtualMachineTpmStateOutput {
	return o
}

func (o VirtualMachineTpmStateOutput) ToVirtualMachineTpmStatePtrOutput() VirtualMachineTpmStatePtrOutput {
	return o.ToVirtualMachineTpmStatePtrOutputWithContext(context.Background())
}

func (o VirtualMachineTpmStateOutput) ToVirtualMachineTpmStatePtrOutputWithContext(ctx context.Context) VirtualMachineTpmStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineTpmState) *VirtualMachineTpmState {
		return &v
	}).(VirtualMachineTpmStatePtrOutput)
}

// The identifier for the datastore to create
// the disk in (defaults to `local-lvm`).
func (o VirtualMachineTpmStateOutput) DatastoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineTpmState) *string { return v.DatastoreId }).(pulumi.StringPtrOutput)
}

// TPM state device version. Can be `v1.2` or `v2.0`.
// (defaults to `v2.0`).
func (o VirtualMachineTpmStateOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineTpmState) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type VirtualMachineTpmStatePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineTpmStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineTpmState)(nil)).Elem()
}

func (o VirtualMachineTpmStatePtrOutput) ToVirtualMachineTpmStatePtrOutput() VirtualMachineTpmStatePtrOutput {
	return o
}

func (o VirtualMachineTpmStatePtrOutput) ToVirtualMachineTpmStatePtrOutputWithContext(ctx context.Context) VirtualMachineTpmStatePtrOutput {
	return o
}

func (o VirtualMachineTpmStatePtrOutput) Elem() VirtualMachineTpmStateOutput {
	return o.ApplyT(func(v *VirtualMachineTpmState) VirtualMachineTpmState {
		if v != nil {
			return *v
		}
		var ret VirtualMachineTpmState
		return ret
	}).(VirtualMachineTpmStateOutput)
}

// The identifier for the datastore to create
// the disk in (defaults to `local-lvm`).
func (o VirtualMachineTpmStatePtrOutput) DatastoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineTpmState) *string {
		if v == nil {
			return nil
		}
		return v.DatastoreId
	}).(pulumi.StringPtrOutput)
}

// TPM state device version. Can be `v1.2` or `v2.0`.
// (defaults to `v2.0`).
func (o VirtualMachineTpmStatePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineTpmState) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type VirtualMachineUsb struct {
	// The Host USB device or port or the value `spice`. Use either this or `mapping`.
	Host *string `pulumi:"host"`
	// The cluster-wide resource mapping name of the device, for example "usbdevice". Use either this or `host`.
	Mapping *string `pulumi:"mapping"`
	// Makes the USB device a USB3 device for the VM
	// (defaults to `false`).
	Usb3 *bool `pulumi:"usb3"`
}

// VirtualMachineUsbInput is an input type that accepts VirtualMachineUsbArgs and VirtualMachineUsbOutput values.
// You can construct a concrete instance of `VirtualMachineUsbInput` via:
//
//	VirtualMachineUsbArgs{...}
type VirtualMachineUsbInput interface {
	pulumi.Input

	ToVirtualMachineUsbOutput() VirtualMachineUsbOutput
	ToVirtualMachineUsbOutputWithContext(context.Context) VirtualMachineUsbOutput
}

type VirtualMachineUsbArgs struct {
	// The Host USB device or port or the value `spice`. Use either this or `mapping`.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// The cluster-wide resource mapping name of the device, for example "usbdevice". Use either this or `host`.
	Mapping pulumi.StringPtrInput `pulumi:"mapping"`
	// Makes the USB device a USB3 device for the VM
	// (defaults to `false`).
	Usb3 pulumi.BoolPtrInput `pulumi:"usb3"`
}

func (VirtualMachineUsbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineUsb)(nil)).Elem()
}

func (i VirtualMachineUsbArgs) ToVirtualMachineUsbOutput() VirtualMachineUsbOutput {
	return i.ToVirtualMachineUsbOutputWithContext(context.Background())
}

func (i VirtualMachineUsbArgs) ToVirtualMachineUsbOutputWithContext(ctx context.Context) VirtualMachineUsbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineUsbOutput)
}

// VirtualMachineUsbArrayInput is an input type that accepts VirtualMachineUsbArray and VirtualMachineUsbArrayOutput values.
// You can construct a concrete instance of `VirtualMachineUsbArrayInput` via:
//
//	VirtualMachineUsbArray{ VirtualMachineUsbArgs{...} }
type VirtualMachineUsbArrayInput interface {
	pulumi.Input

	ToVirtualMachineUsbArrayOutput() VirtualMachineUsbArrayOutput
	ToVirtualMachineUsbArrayOutputWithContext(context.Context) VirtualMachineUsbArrayOutput
}

type VirtualMachineUsbArray []VirtualMachineUsbInput

func (VirtualMachineUsbArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineUsb)(nil)).Elem()
}

func (i VirtualMachineUsbArray) ToVirtualMachineUsbArrayOutput() VirtualMachineUsbArrayOutput {
	return i.ToVirtualMachineUsbArrayOutputWithContext(context.Background())
}

func (i VirtualMachineUsbArray) ToVirtualMachineUsbArrayOutputWithContext(ctx context.Context) VirtualMachineUsbArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineUsbArrayOutput)
}

type VirtualMachineUsbOutput struct{ *pulumi.OutputState }

func (VirtualMachineUsbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineUsb)(nil)).Elem()
}

func (o VirtualMachineUsbOutput) ToVirtualMachineUsbOutput() VirtualMachineUsbOutput {
	return o
}

func (o VirtualMachineUsbOutput) ToVirtualMachineUsbOutputWithContext(ctx context.Context) VirtualMachineUsbOutput {
	return o
}

// The Host USB device or port or the value `spice`. Use either this or `mapping`.
func (o VirtualMachineUsbOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineUsb) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// The cluster-wide resource mapping name of the device, for example "usbdevice". Use either this or `host`.
func (o VirtualMachineUsbOutput) Mapping() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineUsb) *string { return v.Mapping }).(pulumi.StringPtrOutput)
}

// Makes the USB device a USB3 device for the VM
// (defaults to `false`).
func (o VirtualMachineUsbOutput) Usb3() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineUsb) *bool { return v.Usb3 }).(pulumi.BoolPtrOutput)
}

type VirtualMachineUsbArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineUsbArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineUsb)(nil)).Elem()
}

func (o VirtualMachineUsbArrayOutput) ToVirtualMachineUsbArrayOutput() VirtualMachineUsbArrayOutput {
	return o
}

func (o VirtualMachineUsbArrayOutput) ToVirtualMachineUsbArrayOutputWithContext(ctx context.Context) VirtualMachineUsbArrayOutput {
	return o
}

func (o VirtualMachineUsbArrayOutput) Index(i pulumi.IntInput) VirtualMachineUsbOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineUsb {
		return vs[0].([]VirtualMachineUsb)[vs[1].(int)]
	}).(VirtualMachineUsbOutput)
}

type VirtualMachineVga struct {
	// Enable VNC clipboard by setting to `vnc`. See the [Proxmox documentation](https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm_virtual_machines_settings) section 10.2.8 for more information.
	Clipboard *string `pulumi:"clipboard"`
	// The VGA memory in megabytes (defaults to `16`).
	Memory *int `pulumi:"memory"`
	// The VGA type (defaults to `std`).
	Type *string `pulumi:"type"`
}

// VirtualMachineVgaInput is an input type that accepts VirtualMachineVgaArgs and VirtualMachineVgaOutput values.
// You can construct a concrete instance of `VirtualMachineVgaInput` via:
//
//	VirtualMachineVgaArgs{...}
type VirtualMachineVgaInput interface {
	pulumi.Input

	ToVirtualMachineVgaOutput() VirtualMachineVgaOutput
	ToVirtualMachineVgaOutputWithContext(context.Context) VirtualMachineVgaOutput
}

type VirtualMachineVgaArgs struct {
	// Enable VNC clipboard by setting to `vnc`. See the [Proxmox documentation](https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm_virtual_machines_settings) section 10.2.8 for more information.
	Clipboard pulumi.StringPtrInput `pulumi:"clipboard"`
	// The VGA memory in megabytes (defaults to `16`).
	Memory pulumi.IntPtrInput `pulumi:"memory"`
	// The VGA type (defaults to `std`).
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (VirtualMachineVgaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineVga)(nil)).Elem()
}

func (i VirtualMachineVgaArgs) ToVirtualMachineVgaOutput() VirtualMachineVgaOutput {
	return i.ToVirtualMachineVgaOutputWithContext(context.Background())
}

func (i VirtualMachineVgaArgs) ToVirtualMachineVgaOutputWithContext(ctx context.Context) VirtualMachineVgaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineVgaOutput)
}

func (i VirtualMachineVgaArgs) ToVirtualMachineVgaPtrOutput() VirtualMachineVgaPtrOutput {
	return i.ToVirtualMachineVgaPtrOutputWithContext(context.Background())
}

func (i VirtualMachineVgaArgs) ToVirtualMachineVgaPtrOutputWithContext(ctx context.Context) VirtualMachineVgaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineVgaOutput).ToVirtualMachineVgaPtrOutputWithContext(ctx)
}

// VirtualMachineVgaPtrInput is an input type that accepts VirtualMachineVgaArgs, VirtualMachineVgaPtr and VirtualMachineVgaPtrOutput values.
// You can construct a concrete instance of `VirtualMachineVgaPtrInput` via:
//
//	        VirtualMachineVgaArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineVgaPtrInput interface {
	pulumi.Input

	ToVirtualMachineVgaPtrOutput() VirtualMachineVgaPtrOutput
	ToVirtualMachineVgaPtrOutputWithContext(context.Context) VirtualMachineVgaPtrOutput
}

type virtualMachineVgaPtrType VirtualMachineVgaArgs

func VirtualMachineVgaPtr(v *VirtualMachineVgaArgs) VirtualMachineVgaPtrInput {
	return (*virtualMachineVgaPtrType)(v)
}

func (*virtualMachineVgaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineVga)(nil)).Elem()
}

func (i *virtualMachineVgaPtrType) ToVirtualMachineVgaPtrOutput() VirtualMachineVgaPtrOutput {
	return i.ToVirtualMachineVgaPtrOutputWithContext(context.Background())
}

func (i *virtualMachineVgaPtrType) ToVirtualMachineVgaPtrOutputWithContext(ctx context.Context) VirtualMachineVgaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineVgaPtrOutput)
}

type VirtualMachineVgaOutput struct{ *pulumi.OutputState }

func (VirtualMachineVgaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineVga)(nil)).Elem()
}

func (o VirtualMachineVgaOutput) ToVirtualMachineVgaOutput() VirtualMachineVgaOutput {
	return o
}

func (o VirtualMachineVgaOutput) ToVirtualMachineVgaOutputWithContext(ctx context.Context) VirtualMachineVgaOutput {
	return o
}

func (o VirtualMachineVgaOutput) ToVirtualMachineVgaPtrOutput() VirtualMachineVgaPtrOutput {
	return o.ToVirtualMachineVgaPtrOutputWithContext(context.Background())
}

func (o VirtualMachineVgaOutput) ToVirtualMachineVgaPtrOutputWithContext(ctx context.Context) VirtualMachineVgaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineVga) *VirtualMachineVga {
		return &v
	}).(VirtualMachineVgaPtrOutput)
}

// Enable VNC clipboard by setting to `vnc`. See the [Proxmox documentation](https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm_virtual_machines_settings) section 10.2.8 for more information.
func (o VirtualMachineVgaOutput) Clipboard() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineVga) *string { return v.Clipboard }).(pulumi.StringPtrOutput)
}

// The VGA memory in megabytes (defaults to `16`).
func (o VirtualMachineVgaOutput) Memory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineVga) *int { return v.Memory }).(pulumi.IntPtrOutput)
}

// The VGA type (defaults to `std`).
func (o VirtualMachineVgaOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineVga) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type VirtualMachineVgaPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineVgaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineVga)(nil)).Elem()
}

func (o VirtualMachineVgaPtrOutput) ToVirtualMachineVgaPtrOutput() VirtualMachineVgaPtrOutput {
	return o
}

func (o VirtualMachineVgaPtrOutput) ToVirtualMachineVgaPtrOutputWithContext(ctx context.Context) VirtualMachineVgaPtrOutput {
	return o
}

func (o VirtualMachineVgaPtrOutput) Elem() VirtualMachineVgaOutput {
	return o.ApplyT(func(v *VirtualMachineVga) VirtualMachineVga {
		if v != nil {
			return *v
		}
		var ret VirtualMachineVga
		return ret
	}).(VirtualMachineVgaOutput)
}

// Enable VNC clipboard by setting to `vnc`. See the [Proxmox documentation](https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm_virtual_machines_settings) section 10.2.8 for more information.
func (o VirtualMachineVgaPtrOutput) Clipboard() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineVga) *string {
		if v == nil {
			return nil
		}
		return v.Clipboard
	}).(pulumi.StringPtrOutput)
}

// The VGA memory in megabytes (defaults to `16`).
func (o VirtualMachineVgaPtrOutput) Memory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineVga) *int {
		if v == nil {
			return nil
		}
		return v.Memory
	}).(pulumi.IntPtrOutput)
}

// The VGA type (defaults to `std`).
func (o VirtualMachineVgaPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineVga) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type GetVirtualMachinesFilter struct {
	// Name of the VM attribute to filter on. One of [`name`, `template`, `status`, `nodeName`]
	Name string `pulumi:"name"`
	// Treat values as regex patterns
	Regex *bool `pulumi:"regex"`
	// List of values to pass the filter. VM's attribute should match at least one value in the list.
	Values []string `pulumi:"values"`
}

// GetVirtualMachinesFilterInput is an input type that accepts GetVirtualMachinesFilterArgs and GetVirtualMachinesFilterOutput values.
// You can construct a concrete instance of `GetVirtualMachinesFilterInput` via:
//
//	GetVirtualMachinesFilterArgs{...}
type GetVirtualMachinesFilterInput interface {
	pulumi.Input

	ToGetVirtualMachinesFilterOutput() GetVirtualMachinesFilterOutput
	ToGetVirtualMachinesFilterOutputWithContext(context.Context) GetVirtualMachinesFilterOutput
}

type GetVirtualMachinesFilterArgs struct {
	// Name of the VM attribute to filter on. One of [`name`, `template`, `status`, `nodeName`]
	Name pulumi.StringInput `pulumi:"name"`
	// Treat values as regex patterns
	Regex pulumi.BoolPtrInput `pulumi:"regex"`
	// List of values to pass the filter. VM's attribute should match at least one value in the list.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetVirtualMachinesFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualMachinesFilter)(nil)).Elem()
}

func (i GetVirtualMachinesFilterArgs) ToGetVirtualMachinesFilterOutput() GetVirtualMachinesFilterOutput {
	return i.ToGetVirtualMachinesFilterOutputWithContext(context.Background())
}

func (i GetVirtualMachinesFilterArgs) ToGetVirtualMachinesFilterOutputWithContext(ctx context.Context) GetVirtualMachinesFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualMachinesFilterOutput)
}

// GetVirtualMachinesFilterArrayInput is an input type that accepts GetVirtualMachinesFilterArray and GetVirtualMachinesFilterArrayOutput values.
// You can construct a concrete instance of `GetVirtualMachinesFilterArrayInput` via:
//
//	GetVirtualMachinesFilterArray{ GetVirtualMachinesFilterArgs{...} }
type GetVirtualMachinesFilterArrayInput interface {
	pulumi.Input

	ToGetVirtualMachinesFilterArrayOutput() GetVirtualMachinesFilterArrayOutput
	ToGetVirtualMachinesFilterArrayOutputWithContext(context.Context) GetVirtualMachinesFilterArrayOutput
}

type GetVirtualMachinesFilterArray []GetVirtualMachinesFilterInput

func (GetVirtualMachinesFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVirtualMachinesFilter)(nil)).Elem()
}

func (i GetVirtualMachinesFilterArray) ToGetVirtualMachinesFilterArrayOutput() GetVirtualMachinesFilterArrayOutput {
	return i.ToGetVirtualMachinesFilterArrayOutputWithContext(context.Background())
}

func (i GetVirtualMachinesFilterArray) ToGetVirtualMachinesFilterArrayOutputWithContext(ctx context.Context) GetVirtualMachinesFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualMachinesFilterArrayOutput)
}

type GetVirtualMachinesFilterOutput struct{ *pulumi.OutputState }

func (GetVirtualMachinesFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualMachinesFilter)(nil)).Elem()
}

func (o GetVirtualMachinesFilterOutput) ToGetVirtualMachinesFilterOutput() GetVirtualMachinesFilterOutput {
	return o
}

func (o GetVirtualMachinesFilterOutput) ToGetVirtualMachinesFilterOutputWithContext(ctx context.Context) GetVirtualMachinesFilterOutput {
	return o
}

// Name of the VM attribute to filter on. One of [`name`, `template`, `status`, `nodeName`]
func (o GetVirtualMachinesFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetVirtualMachinesFilter) string { return v.Name }).(pulumi.StringOutput)
}

// Treat values as regex patterns
func (o GetVirtualMachinesFilterOutput) Regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetVirtualMachinesFilter) *bool { return v.Regex }).(pulumi.BoolPtrOutput)
}

// List of values to pass the filter. VM's attribute should match at least one value in the list.
func (o GetVirtualMachinesFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetVirtualMachinesFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetVirtualMachinesFilterArrayOutput struct{ *pulumi.OutputState }

func (GetVirtualMachinesFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVirtualMachinesFilter)(nil)).Elem()
}

func (o GetVirtualMachinesFilterArrayOutput) ToGetVirtualMachinesFilterArrayOutput() GetVirtualMachinesFilterArrayOutput {
	return o
}

func (o GetVirtualMachinesFilterArrayOutput) ToGetVirtualMachinesFilterArrayOutputWithContext(ctx context.Context) GetVirtualMachinesFilterArrayOutput {
	return o
}

func (o GetVirtualMachinesFilterArrayOutput) Index(i pulumi.IntInput) GetVirtualMachinesFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVirtualMachinesFilter {
		return vs[0].([]GetVirtualMachinesFilter)[vs[1].(int)]
	}).(GetVirtualMachinesFilterOutput)
}

type GetVirtualMachinesVm struct {
	// The virtual machine name.
	Name string `pulumi:"name"`
	// The node name. All cluster nodes will be queried in case this is omitted
	NodeName string `pulumi:"nodeName"`
	// Status of the VM
	Status *string `pulumi:"status"`
	// A list of tags to filter the VMs. The VM must have all
	// the tags to be included in the result.
	Tags []string `pulumi:"tags"`
	// Is VM a template (true) or a regular VM (false)
	Template *bool `pulumi:"template"`
	// The VM identifier.
	VmId int `pulumi:"vmId"`
}

// GetVirtualMachinesVmInput is an input type that accepts GetVirtualMachinesVmArgs and GetVirtualMachinesVmOutput values.
// You can construct a concrete instance of `GetVirtualMachinesVmInput` via:
//
//	GetVirtualMachinesVmArgs{...}
type GetVirtualMachinesVmInput interface {
	pulumi.Input

	ToGetVirtualMachinesVmOutput() GetVirtualMachinesVmOutput
	ToGetVirtualMachinesVmOutputWithContext(context.Context) GetVirtualMachinesVmOutput
}

type GetVirtualMachinesVmArgs struct {
	// The virtual machine name.
	Name pulumi.StringInput `pulumi:"name"`
	// The node name. All cluster nodes will be queried in case this is omitted
	NodeName pulumi.StringInput `pulumi:"nodeName"`
	// Status of the VM
	Status pulumi.StringPtrInput `pulumi:"status"`
	// A list of tags to filter the VMs. The VM must have all
	// the tags to be included in the result.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// Is VM a template (true) or a regular VM (false)
	Template pulumi.BoolPtrInput `pulumi:"template"`
	// The VM identifier.
	VmId pulumi.IntInput `pulumi:"vmId"`
}

func (GetVirtualMachinesVmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualMachinesVm)(nil)).Elem()
}

func (i GetVirtualMachinesVmArgs) ToGetVirtualMachinesVmOutput() GetVirtualMachinesVmOutput {
	return i.ToGetVirtualMachinesVmOutputWithContext(context.Background())
}

func (i GetVirtualMachinesVmArgs) ToGetVirtualMachinesVmOutputWithContext(ctx context.Context) GetVirtualMachinesVmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualMachinesVmOutput)
}

// GetVirtualMachinesVmArrayInput is an input type that accepts GetVirtualMachinesVmArray and GetVirtualMachinesVmArrayOutput values.
// You can construct a concrete instance of `GetVirtualMachinesVmArrayInput` via:
//
//	GetVirtualMachinesVmArray{ GetVirtualMachinesVmArgs{...} }
type GetVirtualMachinesVmArrayInput interface {
	pulumi.Input

	ToGetVirtualMachinesVmArrayOutput() GetVirtualMachinesVmArrayOutput
	ToGetVirtualMachinesVmArrayOutputWithContext(context.Context) GetVirtualMachinesVmArrayOutput
}

type GetVirtualMachinesVmArray []GetVirtualMachinesVmInput

func (GetVirtualMachinesVmArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVirtualMachinesVm)(nil)).Elem()
}

func (i GetVirtualMachinesVmArray) ToGetVirtualMachinesVmArrayOutput() GetVirtualMachinesVmArrayOutput {
	return i.ToGetVirtualMachinesVmArrayOutputWithContext(context.Background())
}

func (i GetVirtualMachinesVmArray) ToGetVirtualMachinesVmArrayOutputWithContext(ctx context.Context) GetVirtualMachinesVmArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualMachinesVmArrayOutput)
}

type GetVirtualMachinesVmOutput struct{ *pulumi.OutputState }

func (GetVirtualMachinesVmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualMachinesVm)(nil)).Elem()
}

func (o GetVirtualMachinesVmOutput) ToGetVirtualMachinesVmOutput() GetVirtualMachinesVmOutput {
	return o
}

func (o GetVirtualMachinesVmOutput) ToGetVirtualMachinesVmOutputWithContext(ctx context.Context) GetVirtualMachinesVmOutput {
	return o
}

// The virtual machine name.
func (o GetVirtualMachinesVmOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetVirtualMachinesVm) string { return v.Name }).(pulumi.StringOutput)
}

// The node name. All cluster nodes will be queried in case this is omitted
func (o GetVirtualMachinesVmOutput) NodeName() pulumi.StringOutput {
	return o.ApplyT(func(v GetVirtualMachinesVm) string { return v.NodeName }).(pulumi.StringOutput)
}

// Status of the VM
func (o GetVirtualMachinesVmOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVirtualMachinesVm) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// A list of tags to filter the VMs. The VM must have all
// the tags to be included in the result.
func (o GetVirtualMachinesVmOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetVirtualMachinesVm) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// Is VM a template (true) or a regular VM (false)
func (o GetVirtualMachinesVmOutput) Template() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetVirtualMachinesVm) *bool { return v.Template }).(pulumi.BoolPtrOutput)
}

// The VM identifier.
func (o GetVirtualMachinesVmOutput) VmId() pulumi.IntOutput {
	return o.ApplyT(func(v GetVirtualMachinesVm) int { return v.VmId }).(pulumi.IntOutput)
}

type GetVirtualMachinesVmArrayOutput struct{ *pulumi.OutputState }

func (GetVirtualMachinesVmArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVirtualMachinesVm)(nil)).Elem()
}

func (o GetVirtualMachinesVmArrayOutput) ToGetVirtualMachinesVmArrayOutput() GetVirtualMachinesVmArrayOutput {
	return o
}

func (o GetVirtualMachinesVmArrayOutput) ToGetVirtualMachinesVmArrayOutputWithContext(ctx context.Context) GetVirtualMachinesVmArrayOutput {
	return o
}

func (o GetVirtualMachinesVmArrayOutput) Index(i pulumi.IntInput) GetVirtualMachinesVmOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVirtualMachinesVm {
		return vs[0].([]GetVirtualMachinesVm)[vs[1].(int)]
	}).(GetVirtualMachinesVmOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachine2CdromInput)(nil)).Elem(), VirtualMachine2CdromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachine2CdromMapInput)(nil)).Elem(), VirtualMachine2CdromMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachine2CloneInput)(nil)).Elem(), VirtualMachine2CloneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachine2ClonePtrInput)(nil)).Elem(), VirtualMachine2CloneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachine2CpuInput)(nil)).Elem(), VirtualMachine2CpuArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachine2CpuPtrInput)(nil)).Elem(), VirtualMachine2CpuArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachine2TimeoutsInput)(nil)).Elem(), VirtualMachine2TimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachine2TimeoutsPtrInput)(nil)).Elem(), VirtualMachine2TimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachine2VgaInput)(nil)).Elem(), VirtualMachine2VgaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachine2VgaPtrInput)(nil)).Elem(), VirtualMachine2VgaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineAgentInput)(nil)).Elem(), VirtualMachineAgentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineAgentPtrInput)(nil)).Elem(), VirtualMachineAgentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineAudioDeviceInput)(nil)).Elem(), VirtualMachineAudioDeviceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineAudioDevicePtrInput)(nil)).Elem(), VirtualMachineAudioDeviceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineCdromInput)(nil)).Elem(), VirtualMachineCdromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineCdromPtrInput)(nil)).Elem(), VirtualMachineCdromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineCloneInput)(nil)).Elem(), VirtualMachineCloneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineClonePtrInput)(nil)).Elem(), VirtualMachineCloneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineCpuInput)(nil)).Elem(), VirtualMachineCpuArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineCpuPtrInput)(nil)).Elem(), VirtualMachineCpuArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineDiskInput)(nil)).Elem(), VirtualMachineDiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineDiskArrayInput)(nil)).Elem(), VirtualMachineDiskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineDiskSpeedInput)(nil)).Elem(), VirtualMachineDiskSpeedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineDiskSpeedPtrInput)(nil)).Elem(), VirtualMachineDiskSpeedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineEfiDiskInput)(nil)).Elem(), VirtualMachineEfiDiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineEfiDiskPtrInput)(nil)).Elem(), VirtualMachineEfiDiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineHostpciInput)(nil)).Elem(), VirtualMachineHostpciArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineHostpciArrayInput)(nil)).Elem(), VirtualMachineHostpciArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineInitializationInput)(nil)).Elem(), VirtualMachineInitializationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineInitializationPtrInput)(nil)).Elem(), VirtualMachineInitializationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineInitializationDnsInput)(nil)).Elem(), VirtualMachineInitializationDnsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineInitializationDnsPtrInput)(nil)).Elem(), VirtualMachineInitializationDnsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineInitializationIpConfigInput)(nil)).Elem(), VirtualMachineInitializationIpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineInitializationIpConfigArrayInput)(nil)).Elem(), VirtualMachineInitializationIpConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineInitializationIpConfigIpv4Input)(nil)).Elem(), VirtualMachineInitializationIpConfigIpv4Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineInitializationIpConfigIpv4PtrInput)(nil)).Elem(), VirtualMachineInitializationIpConfigIpv4Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineInitializationIpConfigIpv6Input)(nil)).Elem(), VirtualMachineInitializationIpConfigIpv6Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineInitializationIpConfigIpv6PtrInput)(nil)).Elem(), VirtualMachineInitializationIpConfigIpv6Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineInitializationUserAccountInput)(nil)).Elem(), VirtualMachineInitializationUserAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineInitializationUserAccountPtrInput)(nil)).Elem(), VirtualMachineInitializationUserAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineMemoryInput)(nil)).Elem(), VirtualMachineMemoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineMemoryPtrInput)(nil)).Elem(), VirtualMachineMemoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineNetworkDeviceInput)(nil)).Elem(), VirtualMachineNetworkDeviceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineNetworkDeviceArrayInput)(nil)).Elem(), VirtualMachineNetworkDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineNumaInput)(nil)).Elem(), VirtualMachineNumaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineNumaArrayInput)(nil)).Elem(), VirtualMachineNumaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineOperatingSystemInput)(nil)).Elem(), VirtualMachineOperatingSystemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineOperatingSystemPtrInput)(nil)).Elem(), VirtualMachineOperatingSystemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineSerialDeviceInput)(nil)).Elem(), VirtualMachineSerialDeviceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineSerialDeviceArrayInput)(nil)).Elem(), VirtualMachineSerialDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineSmbiosInput)(nil)).Elem(), VirtualMachineSmbiosArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineSmbiosPtrInput)(nil)).Elem(), VirtualMachineSmbiosArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineStartupInput)(nil)).Elem(), VirtualMachineStartupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineStartupPtrInput)(nil)).Elem(), VirtualMachineStartupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineTpmStateInput)(nil)).Elem(), VirtualMachineTpmStateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineTpmStatePtrInput)(nil)).Elem(), VirtualMachineTpmStateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineUsbInput)(nil)).Elem(), VirtualMachineUsbArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineUsbArrayInput)(nil)).Elem(), VirtualMachineUsbArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineVgaInput)(nil)).Elem(), VirtualMachineVgaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineVgaPtrInput)(nil)).Elem(), VirtualMachineVgaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVirtualMachinesFilterInput)(nil)).Elem(), GetVirtualMachinesFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVirtualMachinesFilterArrayInput)(nil)).Elem(), GetVirtualMachinesFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVirtualMachinesVmInput)(nil)).Elem(), GetVirtualMachinesVmArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVirtualMachinesVmArrayInput)(nil)).Elem(), GetVirtualMachinesVmArray{})
	pulumi.RegisterOutputType(VirtualMachine2CdromOutput{})
	pulumi.RegisterOutputType(VirtualMachine2CdromMapOutput{})
	pulumi.RegisterOutputType(VirtualMachine2CloneOutput{})
	pulumi.RegisterOutputType(VirtualMachine2ClonePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachine2CpuOutput{})
	pulumi.RegisterOutputType(VirtualMachine2CpuPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachine2TimeoutsOutput{})
	pulumi.RegisterOutputType(VirtualMachine2TimeoutsPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachine2VgaOutput{})
	pulumi.RegisterOutputType(VirtualMachine2VgaPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineAgentOutput{})
	pulumi.RegisterOutputType(VirtualMachineAgentPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineAudioDeviceOutput{})
	pulumi.RegisterOutputType(VirtualMachineAudioDevicePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineCdromOutput{})
	pulumi.RegisterOutputType(VirtualMachineCdromPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineCloneOutput{})
	pulumi.RegisterOutputType(VirtualMachineClonePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineCpuOutput{})
	pulumi.RegisterOutputType(VirtualMachineCpuPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineDiskOutput{})
	pulumi.RegisterOutputType(VirtualMachineDiskArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineDiskSpeedOutput{})
	pulumi.RegisterOutputType(VirtualMachineDiskSpeedPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineEfiDiskOutput{})
	pulumi.RegisterOutputType(VirtualMachineEfiDiskPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineHostpciOutput{})
	pulumi.RegisterOutputType(VirtualMachineHostpciArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineInitializationOutput{})
	pulumi.RegisterOutputType(VirtualMachineInitializationPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineInitializationDnsOutput{})
	pulumi.RegisterOutputType(VirtualMachineInitializationDnsPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineInitializationIpConfigOutput{})
	pulumi.RegisterOutputType(VirtualMachineInitializationIpConfigArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineInitializationIpConfigIpv4Output{})
	pulumi.RegisterOutputType(VirtualMachineInitializationIpConfigIpv4PtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineInitializationIpConfigIpv6Output{})
	pulumi.RegisterOutputType(VirtualMachineInitializationIpConfigIpv6PtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineInitializationUserAccountOutput{})
	pulumi.RegisterOutputType(VirtualMachineInitializationUserAccountPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineMemoryOutput{})
	pulumi.RegisterOutputType(VirtualMachineMemoryPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineNetworkDeviceOutput{})
	pulumi.RegisterOutputType(VirtualMachineNetworkDeviceArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineNumaOutput{})
	pulumi.RegisterOutputType(VirtualMachineNumaArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineOperatingSystemOutput{})
	pulumi.RegisterOutputType(VirtualMachineOperatingSystemPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineSerialDeviceOutput{})
	pulumi.RegisterOutputType(VirtualMachineSerialDeviceArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineSmbiosOutput{})
	pulumi.RegisterOutputType(VirtualMachineSmbiosPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineStartupOutput{})
	pulumi.RegisterOutputType(VirtualMachineStartupPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineTpmStateOutput{})
	pulumi.RegisterOutputType(VirtualMachineTpmStatePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineUsbOutput{})
	pulumi.RegisterOutputType(VirtualMachineUsbArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineVgaOutput{})
	pulumi.RegisterOutputType(VirtualMachineVgaPtrOutput{})
	pulumi.RegisterOutputType(GetVirtualMachinesFilterOutput{})
	pulumi.RegisterOutputType(GetVirtualMachinesFilterArrayOutput{})
	pulumi.RegisterOutputType(GetVirtualMachinesVmOutput{})
	pulumi.RegisterOutputType(GetVirtualMachinesVmArrayOutput{})
}

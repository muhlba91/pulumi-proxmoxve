// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package storage

import (
	"context"
	"reflect"

	"github.com/muhlba91/pulumi-proxmoxve/sdk/v7/go/proxmoxve/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves information about all the datastores available to a specific node.
func GetDatastores(ctx *pulumi.Context, args *GetDatastoresArgs, opts ...pulumi.InvokeOption) (*GetDatastoresResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDatastoresResult
	err := ctx.Invoke("proxmoxve:Storage/getDatastores:getDatastores", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDatastores.
type GetDatastoresArgs struct {
	// The list of datastores.
	Datastores []GetDatastoresDatastore `pulumi:"datastores"`
	// The filters to apply to the stores.
	Filters *GetDatastoresFilters `pulumi:"filters"`
	// The name of the node to retrieve the stores from.
	NodeName string `pulumi:"nodeName"`
}

// A collection of values returned by getDatastores.
type GetDatastoresResult struct {
	// The list of datastores.
	Datastores []GetDatastoresDatastore `pulumi:"datastores"`
	// The filters to apply to the stores.
	Filters *GetDatastoresFilters `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The name of the node to retrieve the stores from.
	NodeName string `pulumi:"nodeName"`
}

func GetDatastoresOutput(ctx *pulumi.Context, args GetDatastoresOutputArgs, opts ...pulumi.InvokeOption) GetDatastoresResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetDatastoresResultOutput, error) {
			args := v.(GetDatastoresArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("proxmoxve:Storage/getDatastores:getDatastores", args, GetDatastoresResultOutput{}, options).(GetDatastoresResultOutput), nil
		}).(GetDatastoresResultOutput)
}

// A collection of arguments for invoking getDatastores.
type GetDatastoresOutputArgs struct {
	// The list of datastores.
	Datastores GetDatastoresDatastoreArrayInput `pulumi:"datastores"`
	// The filters to apply to the stores.
	Filters GetDatastoresFiltersPtrInput `pulumi:"filters"`
	// The name of the node to retrieve the stores from.
	NodeName pulumi.StringInput `pulumi:"nodeName"`
}

func (GetDatastoresOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatastoresArgs)(nil)).Elem()
}

// A collection of values returned by getDatastores.
type GetDatastoresResultOutput struct{ *pulumi.OutputState }

func (GetDatastoresResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatastoresResult)(nil)).Elem()
}

func (o GetDatastoresResultOutput) ToGetDatastoresResultOutput() GetDatastoresResultOutput {
	return o
}

func (o GetDatastoresResultOutput) ToGetDatastoresResultOutputWithContext(ctx context.Context) GetDatastoresResultOutput {
	return o
}

// The list of datastores.
func (o GetDatastoresResultOutput) Datastores() GetDatastoresDatastoreArrayOutput {
	return o.ApplyT(func(v GetDatastoresResult) []GetDatastoresDatastore { return v.Datastores }).(GetDatastoresDatastoreArrayOutput)
}

// The filters to apply to the stores.
func (o GetDatastoresResultOutput) Filters() GetDatastoresFiltersPtrOutput {
	return o.ApplyT(func(v GetDatastoresResult) *GetDatastoresFilters { return v.Filters }).(GetDatastoresFiltersPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetDatastoresResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatastoresResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the node to retrieve the stores from.
func (o GetDatastoresResultOutput) NodeName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatastoresResult) string { return v.NodeName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDatastoresResultOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package storage

import (
	"context"
	"reflect"

	"github.com/muhlba91/pulumi-proxmoxve/sdk/v7/go/proxmoxve/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type FileSourceFile struct {
	// Whether the source file has changed since the last run
	Changed *bool `pulumi:"changed"`
	// The SHA256 checksum of the source file.
	Checksum *string `pulumi:"checksum"`
	// The file name to use instead of the source file
	// name. Useful when the source file does not have a valid file extension,
	// for example when the source file is a URL referencing a `.qcow2` image.
	FileName *string `pulumi:"fileName"`
	// Whether to skip the TLS verification step for
	// HTTPS sources (defaults to `false`).
	Insecure *bool `pulumi:"insecure"`
	// The minimum required TLS version for HTTPS
	// sources. "Supported values: `1.0|1.1|1.2|1.3` (defaults to `1.3`).
	MinTls *string `pulumi:"minTls"`
	// A path to a local file or a URL.
	Path string `pulumi:"path"`
}

// FileSourceFileInput is an input type that accepts FileSourceFileArgs and FileSourceFileOutput values.
// You can construct a concrete instance of `FileSourceFileInput` via:
//
//	FileSourceFileArgs{...}
type FileSourceFileInput interface {
	pulumi.Input

	ToFileSourceFileOutput() FileSourceFileOutput
	ToFileSourceFileOutputWithContext(context.Context) FileSourceFileOutput
}

type FileSourceFileArgs struct {
	// Whether the source file has changed since the last run
	Changed pulumi.BoolPtrInput `pulumi:"changed"`
	// The SHA256 checksum of the source file.
	Checksum pulumi.StringPtrInput `pulumi:"checksum"`
	// The file name to use instead of the source file
	// name. Useful when the source file does not have a valid file extension,
	// for example when the source file is a URL referencing a `.qcow2` image.
	FileName pulumi.StringPtrInput `pulumi:"fileName"`
	// Whether to skip the TLS verification step for
	// HTTPS sources (defaults to `false`).
	Insecure pulumi.BoolPtrInput `pulumi:"insecure"`
	// The minimum required TLS version for HTTPS
	// sources. "Supported values: `1.0|1.1|1.2|1.3` (defaults to `1.3`).
	MinTls pulumi.StringPtrInput `pulumi:"minTls"`
	// A path to a local file or a URL.
	Path pulumi.StringInput `pulumi:"path"`
}

func (FileSourceFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSourceFile)(nil)).Elem()
}

func (i FileSourceFileArgs) ToFileSourceFileOutput() FileSourceFileOutput {
	return i.ToFileSourceFileOutputWithContext(context.Background())
}

func (i FileSourceFileArgs) ToFileSourceFileOutputWithContext(ctx context.Context) FileSourceFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSourceFileOutput)
}

func (i FileSourceFileArgs) ToFileSourceFilePtrOutput() FileSourceFilePtrOutput {
	return i.ToFileSourceFilePtrOutputWithContext(context.Background())
}

func (i FileSourceFileArgs) ToFileSourceFilePtrOutputWithContext(ctx context.Context) FileSourceFilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSourceFileOutput).ToFileSourceFilePtrOutputWithContext(ctx)
}

// FileSourceFilePtrInput is an input type that accepts FileSourceFileArgs, FileSourceFilePtr and FileSourceFilePtrOutput values.
// You can construct a concrete instance of `FileSourceFilePtrInput` via:
//
//	        FileSourceFileArgs{...}
//
//	or:
//
//	        nil
type FileSourceFilePtrInput interface {
	pulumi.Input

	ToFileSourceFilePtrOutput() FileSourceFilePtrOutput
	ToFileSourceFilePtrOutputWithContext(context.Context) FileSourceFilePtrOutput
}

type fileSourceFilePtrType FileSourceFileArgs

func FileSourceFilePtr(v *FileSourceFileArgs) FileSourceFilePtrInput {
	return (*fileSourceFilePtrType)(v)
}

func (*fileSourceFilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSourceFile)(nil)).Elem()
}

func (i *fileSourceFilePtrType) ToFileSourceFilePtrOutput() FileSourceFilePtrOutput {
	return i.ToFileSourceFilePtrOutputWithContext(context.Background())
}

func (i *fileSourceFilePtrType) ToFileSourceFilePtrOutputWithContext(ctx context.Context) FileSourceFilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSourceFilePtrOutput)
}

type FileSourceFileOutput struct{ *pulumi.OutputState }

func (FileSourceFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSourceFile)(nil)).Elem()
}

func (o FileSourceFileOutput) ToFileSourceFileOutput() FileSourceFileOutput {
	return o
}

func (o FileSourceFileOutput) ToFileSourceFileOutputWithContext(ctx context.Context) FileSourceFileOutput {
	return o
}

func (o FileSourceFileOutput) ToFileSourceFilePtrOutput() FileSourceFilePtrOutput {
	return o.ToFileSourceFilePtrOutputWithContext(context.Background())
}

func (o FileSourceFileOutput) ToFileSourceFilePtrOutputWithContext(ctx context.Context) FileSourceFilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FileSourceFile) *FileSourceFile {
		return &v
	}).(FileSourceFilePtrOutput)
}

// Whether the source file has changed since the last run
func (o FileSourceFileOutput) Changed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FileSourceFile) *bool { return v.Changed }).(pulumi.BoolPtrOutput)
}

// The SHA256 checksum of the source file.
func (o FileSourceFileOutput) Checksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileSourceFile) *string { return v.Checksum }).(pulumi.StringPtrOutput)
}

// The file name to use instead of the source file
// name. Useful when the source file does not have a valid file extension,
// for example when the source file is a URL referencing a `.qcow2` image.
func (o FileSourceFileOutput) FileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileSourceFile) *string { return v.FileName }).(pulumi.StringPtrOutput)
}

// Whether to skip the TLS verification step for
// HTTPS sources (defaults to `false`).
func (o FileSourceFileOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FileSourceFile) *bool { return v.Insecure }).(pulumi.BoolPtrOutput)
}

// The minimum required TLS version for HTTPS
// sources. "Supported values: `1.0|1.1|1.2|1.3` (defaults to `1.3`).
func (o FileSourceFileOutput) MinTls() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileSourceFile) *string { return v.MinTls }).(pulumi.StringPtrOutput)
}

// A path to a local file or a URL.
func (o FileSourceFileOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v FileSourceFile) string { return v.Path }).(pulumi.StringOutput)
}

type FileSourceFilePtrOutput struct{ *pulumi.OutputState }

func (FileSourceFilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSourceFile)(nil)).Elem()
}

func (o FileSourceFilePtrOutput) ToFileSourceFilePtrOutput() FileSourceFilePtrOutput {
	return o
}

func (o FileSourceFilePtrOutput) ToFileSourceFilePtrOutputWithContext(ctx context.Context) FileSourceFilePtrOutput {
	return o
}

func (o FileSourceFilePtrOutput) Elem() FileSourceFileOutput {
	return o.ApplyT(func(v *FileSourceFile) FileSourceFile {
		if v != nil {
			return *v
		}
		var ret FileSourceFile
		return ret
	}).(FileSourceFileOutput)
}

// Whether the source file has changed since the last run
func (o FileSourceFilePtrOutput) Changed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FileSourceFile) *bool {
		if v == nil {
			return nil
		}
		return v.Changed
	}).(pulumi.BoolPtrOutput)
}

// The SHA256 checksum of the source file.
func (o FileSourceFilePtrOutput) Checksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSourceFile) *string {
		if v == nil {
			return nil
		}
		return v.Checksum
	}).(pulumi.StringPtrOutput)
}

// The file name to use instead of the source file
// name. Useful when the source file does not have a valid file extension,
// for example when the source file is a URL referencing a `.qcow2` image.
func (o FileSourceFilePtrOutput) FileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSourceFile) *string {
		if v == nil {
			return nil
		}
		return v.FileName
	}).(pulumi.StringPtrOutput)
}

// Whether to skip the TLS verification step for
// HTTPS sources (defaults to `false`).
func (o FileSourceFilePtrOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FileSourceFile) *bool {
		if v == nil {
			return nil
		}
		return v.Insecure
	}).(pulumi.BoolPtrOutput)
}

// The minimum required TLS version for HTTPS
// sources. "Supported values: `1.0|1.1|1.2|1.3` (defaults to `1.3`).
func (o FileSourceFilePtrOutput) MinTls() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSourceFile) *string {
		if v == nil {
			return nil
		}
		return v.MinTls
	}).(pulumi.StringPtrOutput)
}

// A path to a local file or a URL.
func (o FileSourceFilePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSourceFile) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

type FileSourceRaw struct {
	// The raw data.
	Data string `pulumi:"data"`
	// The file name.
	FileName string `pulumi:"fileName"`
	// The number of bytes to resize the file to.
	Resize *int `pulumi:"resize"`
}

// FileSourceRawInput is an input type that accepts FileSourceRawArgs and FileSourceRawOutput values.
// You can construct a concrete instance of `FileSourceRawInput` via:
//
//	FileSourceRawArgs{...}
type FileSourceRawInput interface {
	pulumi.Input

	ToFileSourceRawOutput() FileSourceRawOutput
	ToFileSourceRawOutputWithContext(context.Context) FileSourceRawOutput
}

type FileSourceRawArgs struct {
	// The raw data.
	Data pulumi.StringInput `pulumi:"data"`
	// The file name.
	FileName pulumi.StringInput `pulumi:"fileName"`
	// The number of bytes to resize the file to.
	Resize pulumi.IntPtrInput `pulumi:"resize"`
}

func (FileSourceRawArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSourceRaw)(nil)).Elem()
}

func (i FileSourceRawArgs) ToFileSourceRawOutput() FileSourceRawOutput {
	return i.ToFileSourceRawOutputWithContext(context.Background())
}

func (i FileSourceRawArgs) ToFileSourceRawOutputWithContext(ctx context.Context) FileSourceRawOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSourceRawOutput)
}

func (i FileSourceRawArgs) ToFileSourceRawPtrOutput() FileSourceRawPtrOutput {
	return i.ToFileSourceRawPtrOutputWithContext(context.Background())
}

func (i FileSourceRawArgs) ToFileSourceRawPtrOutputWithContext(ctx context.Context) FileSourceRawPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSourceRawOutput).ToFileSourceRawPtrOutputWithContext(ctx)
}

// FileSourceRawPtrInput is an input type that accepts FileSourceRawArgs, FileSourceRawPtr and FileSourceRawPtrOutput values.
// You can construct a concrete instance of `FileSourceRawPtrInput` via:
//
//	        FileSourceRawArgs{...}
//
//	or:
//
//	        nil
type FileSourceRawPtrInput interface {
	pulumi.Input

	ToFileSourceRawPtrOutput() FileSourceRawPtrOutput
	ToFileSourceRawPtrOutputWithContext(context.Context) FileSourceRawPtrOutput
}

type fileSourceRawPtrType FileSourceRawArgs

func FileSourceRawPtr(v *FileSourceRawArgs) FileSourceRawPtrInput {
	return (*fileSourceRawPtrType)(v)
}

func (*fileSourceRawPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSourceRaw)(nil)).Elem()
}

func (i *fileSourceRawPtrType) ToFileSourceRawPtrOutput() FileSourceRawPtrOutput {
	return i.ToFileSourceRawPtrOutputWithContext(context.Background())
}

func (i *fileSourceRawPtrType) ToFileSourceRawPtrOutputWithContext(ctx context.Context) FileSourceRawPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSourceRawPtrOutput)
}

type FileSourceRawOutput struct{ *pulumi.OutputState }

func (FileSourceRawOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSourceRaw)(nil)).Elem()
}

func (o FileSourceRawOutput) ToFileSourceRawOutput() FileSourceRawOutput {
	return o
}

func (o FileSourceRawOutput) ToFileSourceRawOutputWithContext(ctx context.Context) FileSourceRawOutput {
	return o
}

func (o FileSourceRawOutput) ToFileSourceRawPtrOutput() FileSourceRawPtrOutput {
	return o.ToFileSourceRawPtrOutputWithContext(context.Background())
}

func (o FileSourceRawOutput) ToFileSourceRawPtrOutputWithContext(ctx context.Context) FileSourceRawPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FileSourceRaw) *FileSourceRaw {
		return &v
	}).(FileSourceRawPtrOutput)
}

// The raw data.
func (o FileSourceRawOutput) Data() pulumi.StringOutput {
	return o.ApplyT(func(v FileSourceRaw) string { return v.Data }).(pulumi.StringOutput)
}

// The file name.
func (o FileSourceRawOutput) FileName() pulumi.StringOutput {
	return o.ApplyT(func(v FileSourceRaw) string { return v.FileName }).(pulumi.StringOutput)
}

// The number of bytes to resize the file to.
func (o FileSourceRawOutput) Resize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FileSourceRaw) *int { return v.Resize }).(pulumi.IntPtrOutput)
}

type FileSourceRawPtrOutput struct{ *pulumi.OutputState }

func (FileSourceRawPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSourceRaw)(nil)).Elem()
}

func (o FileSourceRawPtrOutput) ToFileSourceRawPtrOutput() FileSourceRawPtrOutput {
	return o
}

func (o FileSourceRawPtrOutput) ToFileSourceRawPtrOutputWithContext(ctx context.Context) FileSourceRawPtrOutput {
	return o
}

func (o FileSourceRawPtrOutput) Elem() FileSourceRawOutput {
	return o.ApplyT(func(v *FileSourceRaw) FileSourceRaw {
		if v != nil {
			return *v
		}
		var ret FileSourceRaw
		return ret
	}).(FileSourceRawOutput)
}

// The raw data.
func (o FileSourceRawPtrOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSourceRaw) *string {
		if v == nil {
			return nil
		}
		return &v.Data
	}).(pulumi.StringPtrOutput)
}

// The file name.
func (o FileSourceRawPtrOutput) FileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSourceRaw) *string {
		if v == nil {
			return nil
		}
		return &v.FileName
	}).(pulumi.StringPtrOutput)
}

// The number of bytes to resize the file to.
func (o FileSourceRawPtrOutput) Resize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FileSourceRaw) *int {
		if v == nil {
			return nil
		}
		return v.Resize
	}).(pulumi.IntPtrOutput)
}

type GetDatastoresDatastore struct {
	// Whether the store is active.
	Active *bool `pulumi:"active"`
	// Allowed store content types.
	ContentTypes []string `pulumi:"contentTypes"`
	// Whether the store is enabled.
	Enabled *bool `pulumi:"enabled"`
	// The ID of the store.
	Id string `pulumi:"id"`
	// The name of the node the store is on.
	NodeName string `pulumi:"nodeName"`
	// Shared flag from store configuration.
	Shared *bool `pulumi:"shared"`
	// Available store space in bytes.
	SpaceAvailable *int `pulumi:"spaceAvailable"`
	// Total store space in bytes.
	SpaceTotal *int `pulumi:"spaceTotal"`
	// Used store space in bytes.
	SpaceUsed *int `pulumi:"spaceUsed"`
	// Used fraction (used/total).
	SpaceUsedFraction *float64 `pulumi:"spaceUsedFraction"`
	// Store type.
	Type string `pulumi:"type"`
}

// GetDatastoresDatastoreInput is an input type that accepts GetDatastoresDatastoreArgs and GetDatastoresDatastoreOutput values.
// You can construct a concrete instance of `GetDatastoresDatastoreInput` via:
//
//	GetDatastoresDatastoreArgs{...}
type GetDatastoresDatastoreInput interface {
	pulumi.Input

	ToGetDatastoresDatastoreOutput() GetDatastoresDatastoreOutput
	ToGetDatastoresDatastoreOutputWithContext(context.Context) GetDatastoresDatastoreOutput
}

type GetDatastoresDatastoreArgs struct {
	// Whether the store is active.
	Active pulumi.BoolPtrInput `pulumi:"active"`
	// Allowed store content types.
	ContentTypes pulumi.StringArrayInput `pulumi:"contentTypes"`
	// Whether the store is enabled.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The ID of the store.
	Id pulumi.StringInput `pulumi:"id"`
	// The name of the node the store is on.
	NodeName pulumi.StringInput `pulumi:"nodeName"`
	// Shared flag from store configuration.
	Shared pulumi.BoolPtrInput `pulumi:"shared"`
	// Available store space in bytes.
	SpaceAvailable pulumi.IntPtrInput `pulumi:"spaceAvailable"`
	// Total store space in bytes.
	SpaceTotal pulumi.IntPtrInput `pulumi:"spaceTotal"`
	// Used store space in bytes.
	SpaceUsed pulumi.IntPtrInput `pulumi:"spaceUsed"`
	// Used fraction (used/total).
	SpaceUsedFraction pulumi.Float64PtrInput `pulumi:"spaceUsedFraction"`
	// Store type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetDatastoresDatastoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatastoresDatastore)(nil)).Elem()
}

func (i GetDatastoresDatastoreArgs) ToGetDatastoresDatastoreOutput() GetDatastoresDatastoreOutput {
	return i.ToGetDatastoresDatastoreOutputWithContext(context.Background())
}

func (i GetDatastoresDatastoreArgs) ToGetDatastoresDatastoreOutputWithContext(ctx context.Context) GetDatastoresDatastoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatastoresDatastoreOutput)
}

// GetDatastoresDatastoreArrayInput is an input type that accepts GetDatastoresDatastoreArray and GetDatastoresDatastoreArrayOutput values.
// You can construct a concrete instance of `GetDatastoresDatastoreArrayInput` via:
//
//	GetDatastoresDatastoreArray{ GetDatastoresDatastoreArgs{...} }
type GetDatastoresDatastoreArrayInput interface {
	pulumi.Input

	ToGetDatastoresDatastoreArrayOutput() GetDatastoresDatastoreArrayOutput
	ToGetDatastoresDatastoreArrayOutputWithContext(context.Context) GetDatastoresDatastoreArrayOutput
}

type GetDatastoresDatastoreArray []GetDatastoresDatastoreInput

func (GetDatastoresDatastoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatastoresDatastore)(nil)).Elem()
}

func (i GetDatastoresDatastoreArray) ToGetDatastoresDatastoreArrayOutput() GetDatastoresDatastoreArrayOutput {
	return i.ToGetDatastoresDatastoreArrayOutputWithContext(context.Background())
}

func (i GetDatastoresDatastoreArray) ToGetDatastoresDatastoreArrayOutputWithContext(ctx context.Context) GetDatastoresDatastoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatastoresDatastoreArrayOutput)
}

type GetDatastoresDatastoreOutput struct{ *pulumi.OutputState }

func (GetDatastoresDatastoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatastoresDatastore)(nil)).Elem()
}

func (o GetDatastoresDatastoreOutput) ToGetDatastoresDatastoreOutput() GetDatastoresDatastoreOutput {
	return o
}

func (o GetDatastoresDatastoreOutput) ToGetDatastoresDatastoreOutputWithContext(ctx context.Context) GetDatastoresDatastoreOutput {
	return o
}

// Whether the store is active.
func (o GetDatastoresDatastoreOutput) Active() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetDatastoresDatastore) *bool { return v.Active }).(pulumi.BoolPtrOutput)
}

// Allowed store content types.
func (o GetDatastoresDatastoreOutput) ContentTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDatastoresDatastore) []string { return v.ContentTypes }).(pulumi.StringArrayOutput)
}

// Whether the store is enabled.
func (o GetDatastoresDatastoreOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetDatastoresDatastore) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The ID of the store.
func (o GetDatastoresDatastoreOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatastoresDatastore) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the node the store is on.
func (o GetDatastoresDatastoreOutput) NodeName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatastoresDatastore) string { return v.NodeName }).(pulumi.StringOutput)
}

// Shared flag from store configuration.
func (o GetDatastoresDatastoreOutput) Shared() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetDatastoresDatastore) *bool { return v.Shared }).(pulumi.BoolPtrOutput)
}

// Available store space in bytes.
func (o GetDatastoresDatastoreOutput) SpaceAvailable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetDatastoresDatastore) *int { return v.SpaceAvailable }).(pulumi.IntPtrOutput)
}

// Total store space in bytes.
func (o GetDatastoresDatastoreOutput) SpaceTotal() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetDatastoresDatastore) *int { return v.SpaceTotal }).(pulumi.IntPtrOutput)
}

// Used store space in bytes.
func (o GetDatastoresDatastoreOutput) SpaceUsed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetDatastoresDatastore) *int { return v.SpaceUsed }).(pulumi.IntPtrOutput)
}

// Used fraction (used/total).
func (o GetDatastoresDatastoreOutput) SpaceUsedFraction() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v GetDatastoresDatastore) *float64 { return v.SpaceUsedFraction }).(pulumi.Float64PtrOutput)
}

// Store type.
func (o GetDatastoresDatastoreOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatastoresDatastore) string { return v.Type }).(pulumi.StringOutput)
}

type GetDatastoresDatastoreArrayOutput struct{ *pulumi.OutputState }

func (GetDatastoresDatastoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatastoresDatastore)(nil)).Elem()
}

func (o GetDatastoresDatastoreArrayOutput) ToGetDatastoresDatastoreArrayOutput() GetDatastoresDatastoreArrayOutput {
	return o
}

func (o GetDatastoresDatastoreArrayOutput) ToGetDatastoresDatastoreArrayOutputWithContext(ctx context.Context) GetDatastoresDatastoreArrayOutput {
	return o
}

func (o GetDatastoresDatastoreArrayOutput) Index(i pulumi.IntInput) GetDatastoresDatastoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDatastoresDatastore {
		return vs[0].([]GetDatastoresDatastore)[vs[1].(int)]
	}).(GetDatastoresDatastoreOutput)
}

type GetDatastoresFilters struct {
	// Only list stores with the given content types.
	ContentTypes []string `pulumi:"contentTypes"`
	// Only list stores with the given ID.
	Id *string `pulumi:"id"`
	// If `target` is different to `nodeName`, then only lists shared stores which content is accessible on this node and the specified `target` node.
	Target *string `pulumi:"target"`
}

// GetDatastoresFiltersInput is an input type that accepts GetDatastoresFiltersArgs and GetDatastoresFiltersOutput values.
// You can construct a concrete instance of `GetDatastoresFiltersInput` via:
//
//	GetDatastoresFiltersArgs{...}
type GetDatastoresFiltersInput interface {
	pulumi.Input

	ToGetDatastoresFiltersOutput() GetDatastoresFiltersOutput
	ToGetDatastoresFiltersOutputWithContext(context.Context) GetDatastoresFiltersOutput
}

type GetDatastoresFiltersArgs struct {
	// Only list stores with the given content types.
	ContentTypes pulumi.StringArrayInput `pulumi:"contentTypes"`
	// Only list stores with the given ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// If `target` is different to `nodeName`, then only lists shared stores which content is accessible on this node and the specified `target` node.
	Target pulumi.StringPtrInput `pulumi:"target"`
}

func (GetDatastoresFiltersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatastoresFilters)(nil)).Elem()
}

func (i GetDatastoresFiltersArgs) ToGetDatastoresFiltersOutput() GetDatastoresFiltersOutput {
	return i.ToGetDatastoresFiltersOutputWithContext(context.Background())
}

func (i GetDatastoresFiltersArgs) ToGetDatastoresFiltersOutputWithContext(ctx context.Context) GetDatastoresFiltersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatastoresFiltersOutput)
}

func (i GetDatastoresFiltersArgs) ToGetDatastoresFiltersPtrOutput() GetDatastoresFiltersPtrOutput {
	return i.ToGetDatastoresFiltersPtrOutputWithContext(context.Background())
}

func (i GetDatastoresFiltersArgs) ToGetDatastoresFiltersPtrOutputWithContext(ctx context.Context) GetDatastoresFiltersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatastoresFiltersOutput).ToGetDatastoresFiltersPtrOutputWithContext(ctx)
}

// GetDatastoresFiltersPtrInput is an input type that accepts GetDatastoresFiltersArgs, GetDatastoresFiltersPtr and GetDatastoresFiltersPtrOutput values.
// You can construct a concrete instance of `GetDatastoresFiltersPtrInput` via:
//
//	        GetDatastoresFiltersArgs{...}
//
//	or:
//
//	        nil
type GetDatastoresFiltersPtrInput interface {
	pulumi.Input

	ToGetDatastoresFiltersPtrOutput() GetDatastoresFiltersPtrOutput
	ToGetDatastoresFiltersPtrOutputWithContext(context.Context) GetDatastoresFiltersPtrOutput
}

type getDatastoresFiltersPtrType GetDatastoresFiltersArgs

func GetDatastoresFiltersPtr(v *GetDatastoresFiltersArgs) GetDatastoresFiltersPtrInput {
	return (*getDatastoresFiltersPtrType)(v)
}

func (*getDatastoresFiltersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetDatastoresFilters)(nil)).Elem()
}

func (i *getDatastoresFiltersPtrType) ToGetDatastoresFiltersPtrOutput() GetDatastoresFiltersPtrOutput {
	return i.ToGetDatastoresFiltersPtrOutputWithContext(context.Background())
}

func (i *getDatastoresFiltersPtrType) ToGetDatastoresFiltersPtrOutputWithContext(ctx context.Context) GetDatastoresFiltersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatastoresFiltersPtrOutput)
}

type GetDatastoresFiltersOutput struct{ *pulumi.OutputState }

func (GetDatastoresFiltersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatastoresFilters)(nil)).Elem()
}

func (o GetDatastoresFiltersOutput) ToGetDatastoresFiltersOutput() GetDatastoresFiltersOutput {
	return o
}

func (o GetDatastoresFiltersOutput) ToGetDatastoresFiltersOutputWithContext(ctx context.Context) GetDatastoresFiltersOutput {
	return o
}

func (o GetDatastoresFiltersOutput) ToGetDatastoresFiltersPtrOutput() GetDatastoresFiltersPtrOutput {
	return o.ToGetDatastoresFiltersPtrOutputWithContext(context.Background())
}

func (o GetDatastoresFiltersOutput) ToGetDatastoresFiltersPtrOutputWithContext(ctx context.Context) GetDatastoresFiltersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetDatastoresFilters) *GetDatastoresFilters {
		return &v
	}).(GetDatastoresFiltersPtrOutput)
}

// Only list stores with the given content types.
func (o GetDatastoresFiltersOutput) ContentTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDatastoresFilters) []string { return v.ContentTypes }).(pulumi.StringArrayOutput)
}

// Only list stores with the given ID.
func (o GetDatastoresFiltersOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDatastoresFilters) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// If `target` is different to `nodeName`, then only lists shared stores which content is accessible on this node and the specified `target` node.
func (o GetDatastoresFiltersOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDatastoresFilters) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type GetDatastoresFiltersPtrOutput struct{ *pulumi.OutputState }

func (GetDatastoresFiltersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetDatastoresFilters)(nil)).Elem()
}

func (o GetDatastoresFiltersPtrOutput) ToGetDatastoresFiltersPtrOutput() GetDatastoresFiltersPtrOutput {
	return o
}

func (o GetDatastoresFiltersPtrOutput) ToGetDatastoresFiltersPtrOutputWithContext(ctx context.Context) GetDatastoresFiltersPtrOutput {
	return o
}

func (o GetDatastoresFiltersPtrOutput) Elem() GetDatastoresFiltersOutput {
	return o.ApplyT(func(v *GetDatastoresFilters) GetDatastoresFilters {
		if v != nil {
			return *v
		}
		var ret GetDatastoresFilters
		return ret
	}).(GetDatastoresFiltersOutput)
}

// Only list stores with the given content types.
func (o GetDatastoresFiltersPtrOutput) ContentTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetDatastoresFilters) []string {
		if v == nil {
			return nil
		}
		return v.ContentTypes
	}).(pulumi.StringArrayOutput)
}

// Only list stores with the given ID.
func (o GetDatastoresFiltersPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetDatastoresFilters) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// If `target` is different to `nodeName`, then only lists shared stores which content is accessible on this node and the specified `target` node.
func (o GetDatastoresFiltersPtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetDatastoresFilters) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FileSourceFileInput)(nil)).Elem(), FileSourceFileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSourceFilePtrInput)(nil)).Elem(), FileSourceFileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSourceRawInput)(nil)).Elem(), FileSourceRawArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSourceRawPtrInput)(nil)).Elem(), FileSourceRawArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatastoresDatastoreInput)(nil)).Elem(), GetDatastoresDatastoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatastoresDatastoreArrayInput)(nil)).Elem(), GetDatastoresDatastoreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatastoresFiltersInput)(nil)).Elem(), GetDatastoresFiltersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatastoresFiltersPtrInput)(nil)).Elem(), GetDatastoresFiltersArgs{})
	pulumi.RegisterOutputType(FileSourceFileOutput{})
	pulumi.RegisterOutputType(FileSourceFilePtrOutput{})
	pulumi.RegisterOutputType(FileSourceRawOutput{})
	pulumi.RegisterOutputType(FileSourceRawPtrOutput{})
	pulumi.RegisterOutputType(GetDatastoresDatastoreOutput{})
	pulumi.RegisterOutputType(GetDatastoresDatastoreArrayOutput{})
	pulumi.RegisterOutputType(GetDatastoresFiltersOutput{})
	pulumi.RegisterOutputType(GetDatastoresFiltersPtrOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package proxmoxve

import (
	"context"
	"reflect"

	"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type HostsEntry struct {
	// The IP address.
	Address string `pulumi:"address"`
	// The hostnames.
	Hostnames []string `pulumi:"hostnames"`
}

// HostsEntryInput is an input type that accepts HostsEntryArgs and HostsEntryOutput values.
// You can construct a concrete instance of `HostsEntryInput` via:
//
//	HostsEntryArgs{...}
type HostsEntryInput interface {
	pulumi.Input

	ToHostsEntryOutput() HostsEntryOutput
	ToHostsEntryOutputWithContext(context.Context) HostsEntryOutput
}

type HostsEntryArgs struct {
	// The IP address.
	Address pulumi.StringInput `pulumi:"address"`
	// The hostnames.
	Hostnames pulumi.StringArrayInput `pulumi:"hostnames"`
}

func (HostsEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HostsEntry)(nil)).Elem()
}

func (i HostsEntryArgs) ToHostsEntryOutput() HostsEntryOutput {
	return i.ToHostsEntryOutputWithContext(context.Background())
}

func (i HostsEntryArgs) ToHostsEntryOutputWithContext(ctx context.Context) HostsEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostsEntryOutput)
}

// HostsEntryArrayInput is an input type that accepts HostsEntryArray and HostsEntryArrayOutput values.
// You can construct a concrete instance of `HostsEntryArrayInput` via:
//
//	HostsEntryArray{ HostsEntryArgs{...} }
type HostsEntryArrayInput interface {
	pulumi.Input

	ToHostsEntryArrayOutput() HostsEntryArrayOutput
	ToHostsEntryArrayOutputWithContext(context.Context) HostsEntryArrayOutput
}

type HostsEntryArray []HostsEntryInput

func (HostsEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HostsEntry)(nil)).Elem()
}

func (i HostsEntryArray) ToHostsEntryArrayOutput() HostsEntryArrayOutput {
	return i.ToHostsEntryArrayOutputWithContext(context.Background())
}

func (i HostsEntryArray) ToHostsEntryArrayOutputWithContext(ctx context.Context) HostsEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostsEntryArrayOutput)
}

type HostsEntryOutput struct{ *pulumi.OutputState }

func (HostsEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HostsEntry)(nil)).Elem()
}

func (o HostsEntryOutput) ToHostsEntryOutput() HostsEntryOutput {
	return o
}

func (o HostsEntryOutput) ToHostsEntryOutputWithContext(ctx context.Context) HostsEntryOutput {
	return o
}

// The IP address.
func (o HostsEntryOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v HostsEntry) string { return v.Address }).(pulumi.StringOutput)
}

// The hostnames.
func (o HostsEntryOutput) Hostnames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HostsEntry) []string { return v.Hostnames }).(pulumi.StringArrayOutput)
}

type HostsEntryArrayOutput struct{ *pulumi.OutputState }

func (HostsEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HostsEntry)(nil)).Elem()
}

func (o HostsEntryArrayOutput) ToHostsEntryArrayOutput() HostsEntryArrayOutput {
	return o
}

func (o HostsEntryArrayOutput) ToHostsEntryArrayOutputWithContext(ctx context.Context) HostsEntryArrayOutput {
	return o
}

func (o HostsEntryArrayOutput) Index(i pulumi.IntInput) HostsEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HostsEntry {
		return vs[0].([]HostsEntry)[vs[1].(int)]
	}).(HostsEntryOutput)
}

type ProviderSsh struct {
	// Whether to use the SSH agent for authentication. Takes precedence over the `privateKey` and `password` fields. Defaults to the value of the `PROXMOX_VE_SSH_AGENT` environment variable, or `false` if not set.
	Agent *bool `pulumi:"agent"`
	// The path to the SSH agent socket. Defaults to the value of the `SSH_AUTH_SOCK` environment variable.
	AgentSocket *string `pulumi:"agentSocket"`
	// Overrides for SSH connection configuration for a Proxmox VE node.
	Nodes []ProviderSshNode `pulumi:"nodes"`
	// The password used for the SSH connection. Defaults to the value of the `password` field of the `provider` block.
	Password *string `pulumi:"password"`
	// The unencrypted private key (in PEM format) used for the SSH connection. Defaults to the value of the `PROXMOX_VE_SSH_PRIVATE_KEY` environment variable.
	PrivateKey *string `pulumi:"privateKey"`
	// The password for the SOCKS5 proxy server. Defaults to the value of the `PROXMOX_VE_SSH_SOCKS5_PASSWORD` environment variable.
	Socks5Password *string `pulumi:"socks5Password"`
	// The address:port of the SOCKS5 proxy server. Defaults to the value of the `PROXMOX_VE_SSH_SOCKS5_SERVER` environment variable.
	Socks5Server *string `pulumi:"socks5Server"`
	// The username for the SOCKS5 proxy server. Defaults to the value of the `PROXMOX_VE_SSH_SOCKS5_USERNAME` environment variable.
	Socks5Username *string `pulumi:"socks5Username"`
	// The username used for the SSH connection. Defaults to the value of the `username` field of the `provider` block.
	Username *string `pulumi:"username"`
}

// ProviderSshInput is an input type that accepts ProviderSshArgs and ProviderSshOutput values.
// You can construct a concrete instance of `ProviderSshInput` via:
//
//	ProviderSshArgs{...}
type ProviderSshInput interface {
	pulumi.Input

	ToProviderSshOutput() ProviderSshOutput
	ToProviderSshOutputWithContext(context.Context) ProviderSshOutput
}

type ProviderSshArgs struct {
	// Whether to use the SSH agent for authentication. Takes precedence over the `privateKey` and `password` fields. Defaults to the value of the `PROXMOX_VE_SSH_AGENT` environment variable, or `false` if not set.
	Agent pulumi.BoolPtrInput `pulumi:"agent"`
	// The path to the SSH agent socket. Defaults to the value of the `SSH_AUTH_SOCK` environment variable.
	AgentSocket pulumi.StringPtrInput `pulumi:"agentSocket"`
	// Overrides for SSH connection configuration for a Proxmox VE node.
	Nodes ProviderSshNodeArrayInput `pulumi:"nodes"`
	// The password used for the SSH connection. Defaults to the value of the `password` field of the `provider` block.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The unencrypted private key (in PEM format) used for the SSH connection. Defaults to the value of the `PROXMOX_VE_SSH_PRIVATE_KEY` environment variable.
	PrivateKey pulumi.StringPtrInput `pulumi:"privateKey"`
	// The password for the SOCKS5 proxy server. Defaults to the value of the `PROXMOX_VE_SSH_SOCKS5_PASSWORD` environment variable.
	Socks5Password pulumi.StringPtrInput `pulumi:"socks5Password"`
	// The address:port of the SOCKS5 proxy server. Defaults to the value of the `PROXMOX_VE_SSH_SOCKS5_SERVER` environment variable.
	Socks5Server pulumi.StringPtrInput `pulumi:"socks5Server"`
	// The username for the SOCKS5 proxy server. Defaults to the value of the `PROXMOX_VE_SSH_SOCKS5_USERNAME` environment variable.
	Socks5Username pulumi.StringPtrInput `pulumi:"socks5Username"`
	// The username used for the SSH connection. Defaults to the value of the `username` field of the `provider` block.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ProviderSshArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderSsh)(nil)).Elem()
}

func (i ProviderSshArgs) ToProviderSshOutput() ProviderSshOutput {
	return i.ToProviderSshOutputWithContext(context.Background())
}

func (i ProviderSshArgs) ToProviderSshOutputWithContext(ctx context.Context) ProviderSshOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderSshOutput)
}

func (i ProviderSshArgs) ToProviderSshPtrOutput() ProviderSshPtrOutput {
	return i.ToProviderSshPtrOutputWithContext(context.Background())
}

func (i ProviderSshArgs) ToProviderSshPtrOutputWithContext(ctx context.Context) ProviderSshPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderSshOutput).ToProviderSshPtrOutputWithContext(ctx)
}

// ProviderSshPtrInput is an input type that accepts ProviderSshArgs, ProviderSshPtr and ProviderSshPtrOutput values.
// You can construct a concrete instance of `ProviderSshPtrInput` via:
//
//	        ProviderSshArgs{...}
//
//	or:
//
//	        nil
type ProviderSshPtrInput interface {
	pulumi.Input

	ToProviderSshPtrOutput() ProviderSshPtrOutput
	ToProviderSshPtrOutputWithContext(context.Context) ProviderSshPtrOutput
}

type providerSshPtrType ProviderSshArgs

func ProviderSshPtr(v *ProviderSshArgs) ProviderSshPtrInput {
	return (*providerSshPtrType)(v)
}

func (*providerSshPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderSsh)(nil)).Elem()
}

func (i *providerSshPtrType) ToProviderSshPtrOutput() ProviderSshPtrOutput {
	return i.ToProviderSshPtrOutputWithContext(context.Background())
}

func (i *providerSshPtrType) ToProviderSshPtrOutputWithContext(ctx context.Context) ProviderSshPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderSshPtrOutput)
}

type ProviderSshOutput struct{ *pulumi.OutputState }

func (ProviderSshOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderSsh)(nil)).Elem()
}

func (o ProviderSshOutput) ToProviderSshOutput() ProviderSshOutput {
	return o
}

func (o ProviderSshOutput) ToProviderSshOutputWithContext(ctx context.Context) ProviderSshOutput {
	return o
}

func (o ProviderSshOutput) ToProviderSshPtrOutput() ProviderSshPtrOutput {
	return o.ToProviderSshPtrOutputWithContext(context.Background())
}

func (o ProviderSshOutput) ToProviderSshPtrOutputWithContext(ctx context.Context) ProviderSshPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProviderSsh) *ProviderSsh {
		return &v
	}).(ProviderSshPtrOutput)
}

// Whether to use the SSH agent for authentication. Takes precedence over the `privateKey` and `password` fields. Defaults to the value of the `PROXMOX_VE_SSH_AGENT` environment variable, or `false` if not set.
func (o ProviderSshOutput) Agent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProviderSsh) *bool { return v.Agent }).(pulumi.BoolPtrOutput)
}

// The path to the SSH agent socket. Defaults to the value of the `SSH_AUTH_SOCK` environment variable.
func (o ProviderSshOutput) AgentSocket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderSsh) *string { return v.AgentSocket }).(pulumi.StringPtrOutput)
}

// Overrides for SSH connection configuration for a Proxmox VE node.
func (o ProviderSshOutput) Nodes() ProviderSshNodeArrayOutput {
	return o.ApplyT(func(v ProviderSsh) []ProviderSshNode { return v.Nodes }).(ProviderSshNodeArrayOutput)
}

// The password used for the SSH connection. Defaults to the value of the `password` field of the `provider` block.
func (o ProviderSshOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderSsh) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The unencrypted private key (in PEM format) used for the SSH connection. Defaults to the value of the `PROXMOX_VE_SSH_PRIVATE_KEY` environment variable.
func (o ProviderSshOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderSsh) *string { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// The password for the SOCKS5 proxy server. Defaults to the value of the `PROXMOX_VE_SSH_SOCKS5_PASSWORD` environment variable.
func (o ProviderSshOutput) Socks5Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderSsh) *string { return v.Socks5Password }).(pulumi.StringPtrOutput)
}

// The address:port of the SOCKS5 proxy server. Defaults to the value of the `PROXMOX_VE_SSH_SOCKS5_SERVER` environment variable.
func (o ProviderSshOutput) Socks5Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderSsh) *string { return v.Socks5Server }).(pulumi.StringPtrOutput)
}

// The username for the SOCKS5 proxy server. Defaults to the value of the `PROXMOX_VE_SSH_SOCKS5_USERNAME` environment variable.
func (o ProviderSshOutput) Socks5Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderSsh) *string { return v.Socks5Username }).(pulumi.StringPtrOutput)
}

// The username used for the SSH connection. Defaults to the value of the `username` field of the `provider` block.
func (o ProviderSshOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderSsh) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ProviderSshPtrOutput struct{ *pulumi.OutputState }

func (ProviderSshPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderSsh)(nil)).Elem()
}

func (o ProviderSshPtrOutput) ToProviderSshPtrOutput() ProviderSshPtrOutput {
	return o
}

func (o ProviderSshPtrOutput) ToProviderSshPtrOutputWithContext(ctx context.Context) ProviderSshPtrOutput {
	return o
}

func (o ProviderSshPtrOutput) Elem() ProviderSshOutput {
	return o.ApplyT(func(v *ProviderSsh) ProviderSsh {
		if v != nil {
			return *v
		}
		var ret ProviderSsh
		return ret
	}).(ProviderSshOutput)
}

// Whether to use the SSH agent for authentication. Takes precedence over the `privateKey` and `password` fields. Defaults to the value of the `PROXMOX_VE_SSH_AGENT` environment variable, or `false` if not set.
func (o ProviderSshPtrOutput) Agent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProviderSsh) *bool {
		if v == nil {
			return nil
		}
		return v.Agent
	}).(pulumi.BoolPtrOutput)
}

// The path to the SSH agent socket. Defaults to the value of the `SSH_AUTH_SOCK` environment variable.
func (o ProviderSshPtrOutput) AgentSocket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderSsh) *string {
		if v == nil {
			return nil
		}
		return v.AgentSocket
	}).(pulumi.StringPtrOutput)
}

// Overrides for SSH connection configuration for a Proxmox VE node.
func (o ProviderSshPtrOutput) Nodes() ProviderSshNodeArrayOutput {
	return o.ApplyT(func(v *ProviderSsh) []ProviderSshNode {
		if v == nil {
			return nil
		}
		return v.Nodes
	}).(ProviderSshNodeArrayOutput)
}

// The password used for the SSH connection. Defaults to the value of the `password` field of the `provider` block.
func (o ProviderSshPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderSsh) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The unencrypted private key (in PEM format) used for the SSH connection. Defaults to the value of the `PROXMOX_VE_SSH_PRIVATE_KEY` environment variable.
func (o ProviderSshPtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderSsh) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

// The password for the SOCKS5 proxy server. Defaults to the value of the `PROXMOX_VE_SSH_SOCKS5_PASSWORD` environment variable.
func (o ProviderSshPtrOutput) Socks5Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderSsh) *string {
		if v == nil {
			return nil
		}
		return v.Socks5Password
	}).(pulumi.StringPtrOutput)
}

// The address:port of the SOCKS5 proxy server. Defaults to the value of the `PROXMOX_VE_SSH_SOCKS5_SERVER` environment variable.
func (o ProviderSshPtrOutput) Socks5Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderSsh) *string {
		if v == nil {
			return nil
		}
		return v.Socks5Server
	}).(pulumi.StringPtrOutput)
}

// The username for the SOCKS5 proxy server. Defaults to the value of the `PROXMOX_VE_SSH_SOCKS5_USERNAME` environment variable.
func (o ProviderSshPtrOutput) Socks5Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderSsh) *string {
		if v == nil {
			return nil
		}
		return v.Socks5Username
	}).(pulumi.StringPtrOutput)
}

// The username used for the SSH connection. Defaults to the value of the `username` field of the `provider` block.
func (o ProviderSshPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderSsh) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ProviderSshNode struct {
	// The address of the Proxmox VE node.
	Address string `pulumi:"address"`
	// The name of the Proxmox VE node.
	Name string `pulumi:"name"`
	// The port of the Proxmox VE node.
	Port *int `pulumi:"port"`
}

// ProviderSshNodeInput is an input type that accepts ProviderSshNodeArgs and ProviderSshNodeOutput values.
// You can construct a concrete instance of `ProviderSshNodeInput` via:
//
//	ProviderSshNodeArgs{...}
type ProviderSshNodeInput interface {
	pulumi.Input

	ToProviderSshNodeOutput() ProviderSshNodeOutput
	ToProviderSshNodeOutputWithContext(context.Context) ProviderSshNodeOutput
}

type ProviderSshNodeArgs struct {
	// The address of the Proxmox VE node.
	Address pulumi.StringInput `pulumi:"address"`
	// The name of the Proxmox VE node.
	Name pulumi.StringInput `pulumi:"name"`
	// The port of the Proxmox VE node.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (ProviderSshNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderSshNode)(nil)).Elem()
}

func (i ProviderSshNodeArgs) ToProviderSshNodeOutput() ProviderSshNodeOutput {
	return i.ToProviderSshNodeOutputWithContext(context.Background())
}

func (i ProviderSshNodeArgs) ToProviderSshNodeOutputWithContext(ctx context.Context) ProviderSshNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderSshNodeOutput)
}

// ProviderSshNodeArrayInput is an input type that accepts ProviderSshNodeArray and ProviderSshNodeArrayOutput values.
// You can construct a concrete instance of `ProviderSshNodeArrayInput` via:
//
//	ProviderSshNodeArray{ ProviderSshNodeArgs{...} }
type ProviderSshNodeArrayInput interface {
	pulumi.Input

	ToProviderSshNodeArrayOutput() ProviderSshNodeArrayOutput
	ToProviderSshNodeArrayOutputWithContext(context.Context) ProviderSshNodeArrayOutput
}

type ProviderSshNodeArray []ProviderSshNodeInput

func (ProviderSshNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProviderSshNode)(nil)).Elem()
}

func (i ProviderSshNodeArray) ToProviderSshNodeArrayOutput() ProviderSshNodeArrayOutput {
	return i.ToProviderSshNodeArrayOutputWithContext(context.Background())
}

func (i ProviderSshNodeArray) ToProviderSshNodeArrayOutputWithContext(ctx context.Context) ProviderSshNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderSshNodeArrayOutput)
}

type ProviderSshNodeOutput struct{ *pulumi.OutputState }

func (ProviderSshNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderSshNode)(nil)).Elem()
}

func (o ProviderSshNodeOutput) ToProviderSshNodeOutput() ProviderSshNodeOutput {
	return o
}

func (o ProviderSshNodeOutput) ToProviderSshNodeOutputWithContext(ctx context.Context) ProviderSshNodeOutput {
	return o
}

// The address of the Proxmox VE node.
func (o ProviderSshNodeOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderSshNode) string { return v.Address }).(pulumi.StringOutput)
}

// The name of the Proxmox VE node.
func (o ProviderSshNodeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderSshNode) string { return v.Name }).(pulumi.StringOutput)
}

// The port of the Proxmox VE node.
func (o ProviderSshNodeOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProviderSshNode) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type ProviderSshNodeArrayOutput struct{ *pulumi.OutputState }

func (ProviderSshNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProviderSshNode)(nil)).Elem()
}

func (o ProviderSshNodeArrayOutput) ToProviderSshNodeArrayOutput() ProviderSshNodeArrayOutput {
	return o
}

func (o ProviderSshNodeArrayOutput) ToProviderSshNodeArrayOutputWithContext(ctx context.Context) ProviderSshNodeArrayOutput {
	return o
}

func (o ProviderSshNodeArrayOutput) Index(i pulumi.IntInput) ProviderSshNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProviderSshNode {
		return vs[0].([]ProviderSshNode)[vs[1].(int)]
	}).(ProviderSshNodeOutput)
}

type Vm2Clone struct {
	// The ID of the VM to clone.
	Id int `pulumi:"id"`
	// The number of retries to perform when cloning the VM (default: 3).
	Retries *int `pulumi:"retries"`
}

// Vm2CloneInput is an input type that accepts Vm2CloneArgs and Vm2CloneOutput values.
// You can construct a concrete instance of `Vm2CloneInput` via:
//
//	Vm2CloneArgs{...}
type Vm2CloneInput interface {
	pulumi.Input

	ToVm2CloneOutput() Vm2CloneOutput
	ToVm2CloneOutputWithContext(context.Context) Vm2CloneOutput
}

type Vm2CloneArgs struct {
	// The ID of the VM to clone.
	Id pulumi.IntInput `pulumi:"id"`
	// The number of retries to perform when cloning the VM (default: 3).
	Retries pulumi.IntPtrInput `pulumi:"retries"`
}

func (Vm2CloneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Vm2Clone)(nil)).Elem()
}

func (i Vm2CloneArgs) ToVm2CloneOutput() Vm2CloneOutput {
	return i.ToVm2CloneOutputWithContext(context.Background())
}

func (i Vm2CloneArgs) ToVm2CloneOutputWithContext(ctx context.Context) Vm2CloneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Vm2CloneOutput)
}

func (i Vm2CloneArgs) ToVm2ClonePtrOutput() Vm2ClonePtrOutput {
	return i.ToVm2ClonePtrOutputWithContext(context.Background())
}

func (i Vm2CloneArgs) ToVm2ClonePtrOutputWithContext(ctx context.Context) Vm2ClonePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Vm2CloneOutput).ToVm2ClonePtrOutputWithContext(ctx)
}

// Vm2ClonePtrInput is an input type that accepts Vm2CloneArgs, Vm2ClonePtr and Vm2ClonePtrOutput values.
// You can construct a concrete instance of `Vm2ClonePtrInput` via:
//
//	        Vm2CloneArgs{...}
//
//	or:
//
//	        nil
type Vm2ClonePtrInput interface {
	pulumi.Input

	ToVm2ClonePtrOutput() Vm2ClonePtrOutput
	ToVm2ClonePtrOutputWithContext(context.Context) Vm2ClonePtrOutput
}

type vm2ClonePtrType Vm2CloneArgs

func Vm2ClonePtr(v *Vm2CloneArgs) Vm2ClonePtrInput {
	return (*vm2ClonePtrType)(v)
}

func (*vm2ClonePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Vm2Clone)(nil)).Elem()
}

func (i *vm2ClonePtrType) ToVm2ClonePtrOutput() Vm2ClonePtrOutput {
	return i.ToVm2ClonePtrOutputWithContext(context.Background())
}

func (i *vm2ClonePtrType) ToVm2ClonePtrOutputWithContext(ctx context.Context) Vm2ClonePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Vm2ClonePtrOutput)
}

type Vm2CloneOutput struct{ *pulumi.OutputState }

func (Vm2CloneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Vm2Clone)(nil)).Elem()
}

func (o Vm2CloneOutput) ToVm2CloneOutput() Vm2CloneOutput {
	return o
}

func (o Vm2CloneOutput) ToVm2CloneOutputWithContext(ctx context.Context) Vm2CloneOutput {
	return o
}

func (o Vm2CloneOutput) ToVm2ClonePtrOutput() Vm2ClonePtrOutput {
	return o.ToVm2ClonePtrOutputWithContext(context.Background())
}

func (o Vm2CloneOutput) ToVm2ClonePtrOutputWithContext(ctx context.Context) Vm2ClonePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Vm2Clone) *Vm2Clone {
		return &v
	}).(Vm2ClonePtrOutput)
}

// The ID of the VM to clone.
func (o Vm2CloneOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v Vm2Clone) int { return v.Id }).(pulumi.IntOutput)
}

// The number of retries to perform when cloning the VM (default: 3).
func (o Vm2CloneOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Vm2Clone) *int { return v.Retries }).(pulumi.IntPtrOutput)
}

type Vm2ClonePtrOutput struct{ *pulumi.OutputState }

func (Vm2ClonePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vm2Clone)(nil)).Elem()
}

func (o Vm2ClonePtrOutput) ToVm2ClonePtrOutput() Vm2ClonePtrOutput {
	return o
}

func (o Vm2ClonePtrOutput) ToVm2ClonePtrOutputWithContext(ctx context.Context) Vm2ClonePtrOutput {
	return o
}

func (o Vm2ClonePtrOutput) Elem() Vm2CloneOutput {
	return o.ApplyT(func(v *Vm2Clone) Vm2Clone {
		if v != nil {
			return *v
		}
		var ret Vm2Clone
		return ret
	}).(Vm2CloneOutput)
}

// The ID of the VM to clone.
func (o Vm2ClonePtrOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Vm2Clone) *int {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.IntPtrOutput)
}

// The number of retries to perform when cloning the VM (default: 3).
func (o Vm2ClonePtrOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Vm2Clone) *int {
		if v == nil {
			return nil
		}
		return v.Retries
	}).(pulumi.IntPtrOutput)
}

type Vm2Cpu struct {
	// The CPU cores that are used to run the VM’s vCPU. The value is a list of CPU IDs, separated by commas. The CPU IDs are zero-based.  For example, `0,1,2,3` (which also can be shortened to `0-3`) means that the VM’s vCPUs are run on the first four CPU cores. Setting `affinity` is only allowed for `root@pam` authenticated user.
	Affinity *string `pulumi:"affinity"`
	// The CPU architecture `<aarch64 | x86_64>` (defaults to the host). Setting `affinity` is only allowed for `root@pam` authenticated user.
	Architecture *string `pulumi:"architecture"`
	// The number of CPU cores per socket (defaults to `1`).
	Cores *int `pulumi:"cores"`
	// Set of additional CPU flags. Use `+FLAG` to enable, `-FLAG` to disable a flag. Custom CPU models can specify any flag supported by QEMU/KVM, VM-specific flags must be from the following set for security reasons: `pcid`, `spec-ctrl`, `ibpb`, `ssbd`, `virt-ssbd`, `amd-ssbd`, `amd-no-ssb`, `pdpe1gb`, `md-clear`, `hv-tlbflush`, `hv-evmcs`, `aes`.
	Flags []string `pulumi:"flags"`
	// The number of hotplugged vCPUs (defaults to `0`).
	Hotplugged *int `pulumi:"hotplugged"`
	// Limit of CPU usage (defaults to `0` which means no limit).
	Limit *int `pulumi:"limit"`
	// Enable NUMA (defaults to `false`).
	Numa *bool `pulumi:"numa"`
	// The number of CPU sockets (defaults to `1`).
	Sockets *int `pulumi:"sockets"`
	// Emulated CPU type, it's recommended to use `x86-64-v2-AES` or higher (defaults to `kvm64`). See https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm_virtual_machines_settings for more information.
	Type *string `pulumi:"type"`
	// CPU weight for a VM. Argument is used in the kernel fair scheduler. The larger the number is, the more CPU time this VM gets. Number is relative to weights of all the other running VMs.
	Units *int `pulumi:"units"`
}

// Vm2CpuInput is an input type that accepts Vm2CpuArgs and Vm2CpuOutput values.
// You can construct a concrete instance of `Vm2CpuInput` via:
//
//	Vm2CpuArgs{...}
type Vm2CpuInput interface {
	pulumi.Input

	ToVm2CpuOutput() Vm2CpuOutput
	ToVm2CpuOutputWithContext(context.Context) Vm2CpuOutput
}

type Vm2CpuArgs struct {
	// The CPU cores that are used to run the VM’s vCPU. The value is a list of CPU IDs, separated by commas. The CPU IDs are zero-based.  For example, `0,1,2,3` (which also can be shortened to `0-3`) means that the VM’s vCPUs are run on the first four CPU cores. Setting `affinity` is only allowed for `root@pam` authenticated user.
	Affinity pulumi.StringPtrInput `pulumi:"affinity"`
	// The CPU architecture `<aarch64 | x86_64>` (defaults to the host). Setting `affinity` is only allowed for `root@pam` authenticated user.
	Architecture pulumi.StringPtrInput `pulumi:"architecture"`
	// The number of CPU cores per socket (defaults to `1`).
	Cores pulumi.IntPtrInput `pulumi:"cores"`
	// Set of additional CPU flags. Use `+FLAG` to enable, `-FLAG` to disable a flag. Custom CPU models can specify any flag supported by QEMU/KVM, VM-specific flags must be from the following set for security reasons: `pcid`, `spec-ctrl`, `ibpb`, `ssbd`, `virt-ssbd`, `amd-ssbd`, `amd-no-ssb`, `pdpe1gb`, `md-clear`, `hv-tlbflush`, `hv-evmcs`, `aes`.
	Flags pulumi.StringArrayInput `pulumi:"flags"`
	// The number of hotplugged vCPUs (defaults to `0`).
	Hotplugged pulumi.IntPtrInput `pulumi:"hotplugged"`
	// Limit of CPU usage (defaults to `0` which means no limit).
	Limit pulumi.IntPtrInput `pulumi:"limit"`
	// Enable NUMA (defaults to `false`).
	Numa pulumi.BoolPtrInput `pulumi:"numa"`
	// The number of CPU sockets (defaults to `1`).
	Sockets pulumi.IntPtrInput `pulumi:"sockets"`
	// Emulated CPU type, it's recommended to use `x86-64-v2-AES` or higher (defaults to `kvm64`). See https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm_virtual_machines_settings for more information.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// CPU weight for a VM. Argument is used in the kernel fair scheduler. The larger the number is, the more CPU time this VM gets. Number is relative to weights of all the other running VMs.
	Units pulumi.IntPtrInput `pulumi:"units"`
}

func (Vm2CpuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Vm2Cpu)(nil)).Elem()
}

func (i Vm2CpuArgs) ToVm2CpuOutput() Vm2CpuOutput {
	return i.ToVm2CpuOutputWithContext(context.Background())
}

func (i Vm2CpuArgs) ToVm2CpuOutputWithContext(ctx context.Context) Vm2CpuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Vm2CpuOutput)
}

func (i Vm2CpuArgs) ToVm2CpuPtrOutput() Vm2CpuPtrOutput {
	return i.ToVm2CpuPtrOutputWithContext(context.Background())
}

func (i Vm2CpuArgs) ToVm2CpuPtrOutputWithContext(ctx context.Context) Vm2CpuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Vm2CpuOutput).ToVm2CpuPtrOutputWithContext(ctx)
}

// Vm2CpuPtrInput is an input type that accepts Vm2CpuArgs, Vm2CpuPtr and Vm2CpuPtrOutput values.
// You can construct a concrete instance of `Vm2CpuPtrInput` via:
//
//	        Vm2CpuArgs{...}
//
//	or:
//
//	        nil
type Vm2CpuPtrInput interface {
	pulumi.Input

	ToVm2CpuPtrOutput() Vm2CpuPtrOutput
	ToVm2CpuPtrOutputWithContext(context.Context) Vm2CpuPtrOutput
}

type vm2CpuPtrType Vm2CpuArgs

func Vm2CpuPtr(v *Vm2CpuArgs) Vm2CpuPtrInput {
	return (*vm2CpuPtrType)(v)
}

func (*vm2CpuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Vm2Cpu)(nil)).Elem()
}

func (i *vm2CpuPtrType) ToVm2CpuPtrOutput() Vm2CpuPtrOutput {
	return i.ToVm2CpuPtrOutputWithContext(context.Background())
}

func (i *vm2CpuPtrType) ToVm2CpuPtrOutputWithContext(ctx context.Context) Vm2CpuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Vm2CpuPtrOutput)
}

type Vm2CpuOutput struct{ *pulumi.OutputState }

func (Vm2CpuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Vm2Cpu)(nil)).Elem()
}

func (o Vm2CpuOutput) ToVm2CpuOutput() Vm2CpuOutput {
	return o
}

func (o Vm2CpuOutput) ToVm2CpuOutputWithContext(ctx context.Context) Vm2CpuOutput {
	return o
}

func (o Vm2CpuOutput) ToVm2CpuPtrOutput() Vm2CpuPtrOutput {
	return o.ToVm2CpuPtrOutputWithContext(context.Background())
}

func (o Vm2CpuOutput) ToVm2CpuPtrOutputWithContext(ctx context.Context) Vm2CpuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Vm2Cpu) *Vm2Cpu {
		return &v
	}).(Vm2CpuPtrOutput)
}

// The CPU cores that are used to run the VM’s vCPU. The value is a list of CPU IDs, separated by commas. The CPU IDs are zero-based.  For example, `0,1,2,3` (which also can be shortened to `0-3`) means that the VM’s vCPUs are run on the first four CPU cores. Setting `affinity` is only allowed for `root@pam` authenticated user.
func (o Vm2CpuOutput) Affinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Vm2Cpu) *string { return v.Affinity }).(pulumi.StringPtrOutput)
}

// The CPU architecture `<aarch64 | x86_64>` (defaults to the host). Setting `affinity` is only allowed for `root@pam` authenticated user.
func (o Vm2CpuOutput) Architecture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Vm2Cpu) *string { return v.Architecture }).(pulumi.StringPtrOutput)
}

// The number of CPU cores per socket (defaults to `1`).
func (o Vm2CpuOutput) Cores() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Vm2Cpu) *int { return v.Cores }).(pulumi.IntPtrOutput)
}

// Set of additional CPU flags. Use `+FLAG` to enable, `-FLAG` to disable a flag. Custom CPU models can specify any flag supported by QEMU/KVM, VM-specific flags must be from the following set for security reasons: `pcid`, `spec-ctrl`, `ibpb`, `ssbd`, `virt-ssbd`, `amd-ssbd`, `amd-no-ssb`, `pdpe1gb`, `md-clear`, `hv-tlbflush`, `hv-evmcs`, `aes`.
func (o Vm2CpuOutput) Flags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Vm2Cpu) []string { return v.Flags }).(pulumi.StringArrayOutput)
}

// The number of hotplugged vCPUs (defaults to `0`).
func (o Vm2CpuOutput) Hotplugged() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Vm2Cpu) *int { return v.Hotplugged }).(pulumi.IntPtrOutput)
}

// Limit of CPU usage (defaults to `0` which means no limit).
func (o Vm2CpuOutput) Limit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Vm2Cpu) *int { return v.Limit }).(pulumi.IntPtrOutput)
}

// Enable NUMA (defaults to `false`).
func (o Vm2CpuOutput) Numa() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Vm2Cpu) *bool { return v.Numa }).(pulumi.BoolPtrOutput)
}

// The number of CPU sockets (defaults to `1`).
func (o Vm2CpuOutput) Sockets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Vm2Cpu) *int { return v.Sockets }).(pulumi.IntPtrOutput)
}

// Emulated CPU type, it's recommended to use `x86-64-v2-AES` or higher (defaults to `kvm64`). See https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm_virtual_machines_settings for more information.
func (o Vm2CpuOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Vm2Cpu) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// CPU weight for a VM. Argument is used in the kernel fair scheduler. The larger the number is, the more CPU time this VM gets. Number is relative to weights of all the other running VMs.
func (o Vm2CpuOutput) Units() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Vm2Cpu) *int { return v.Units }).(pulumi.IntPtrOutput)
}

type Vm2CpuPtrOutput struct{ *pulumi.OutputState }

func (Vm2CpuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vm2Cpu)(nil)).Elem()
}

func (o Vm2CpuPtrOutput) ToVm2CpuPtrOutput() Vm2CpuPtrOutput {
	return o
}

func (o Vm2CpuPtrOutput) ToVm2CpuPtrOutputWithContext(ctx context.Context) Vm2CpuPtrOutput {
	return o
}

func (o Vm2CpuPtrOutput) Elem() Vm2CpuOutput {
	return o.ApplyT(func(v *Vm2Cpu) Vm2Cpu {
		if v != nil {
			return *v
		}
		var ret Vm2Cpu
		return ret
	}).(Vm2CpuOutput)
}

// The CPU cores that are used to run the VM’s vCPU. The value is a list of CPU IDs, separated by commas. The CPU IDs are zero-based.  For example, `0,1,2,3` (which also can be shortened to `0-3`) means that the VM’s vCPUs are run on the first four CPU cores. Setting `affinity` is only allowed for `root@pam` authenticated user.
func (o Vm2CpuPtrOutput) Affinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vm2Cpu) *string {
		if v == nil {
			return nil
		}
		return v.Affinity
	}).(pulumi.StringPtrOutput)
}

// The CPU architecture `<aarch64 | x86_64>` (defaults to the host). Setting `affinity` is only allowed for `root@pam` authenticated user.
func (o Vm2CpuPtrOutput) Architecture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vm2Cpu) *string {
		if v == nil {
			return nil
		}
		return v.Architecture
	}).(pulumi.StringPtrOutput)
}

// The number of CPU cores per socket (defaults to `1`).
func (o Vm2CpuPtrOutput) Cores() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Vm2Cpu) *int {
		if v == nil {
			return nil
		}
		return v.Cores
	}).(pulumi.IntPtrOutput)
}

// Set of additional CPU flags. Use `+FLAG` to enable, `-FLAG` to disable a flag. Custom CPU models can specify any flag supported by QEMU/KVM, VM-specific flags must be from the following set for security reasons: `pcid`, `spec-ctrl`, `ibpb`, `ssbd`, `virt-ssbd`, `amd-ssbd`, `amd-no-ssb`, `pdpe1gb`, `md-clear`, `hv-tlbflush`, `hv-evmcs`, `aes`.
func (o Vm2CpuPtrOutput) Flags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Vm2Cpu) []string {
		if v == nil {
			return nil
		}
		return v.Flags
	}).(pulumi.StringArrayOutput)
}

// The number of hotplugged vCPUs (defaults to `0`).
func (o Vm2CpuPtrOutput) Hotplugged() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Vm2Cpu) *int {
		if v == nil {
			return nil
		}
		return v.Hotplugged
	}).(pulumi.IntPtrOutput)
}

// Limit of CPU usage (defaults to `0` which means no limit).
func (o Vm2CpuPtrOutput) Limit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Vm2Cpu) *int {
		if v == nil {
			return nil
		}
		return v.Limit
	}).(pulumi.IntPtrOutput)
}

// Enable NUMA (defaults to `false`).
func (o Vm2CpuPtrOutput) Numa() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Vm2Cpu) *bool {
		if v == nil {
			return nil
		}
		return v.Numa
	}).(pulumi.BoolPtrOutput)
}

// The number of CPU sockets (defaults to `1`).
func (o Vm2CpuPtrOutput) Sockets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Vm2Cpu) *int {
		if v == nil {
			return nil
		}
		return v.Sockets
	}).(pulumi.IntPtrOutput)
}

// Emulated CPU type, it's recommended to use `x86-64-v2-AES` or higher (defaults to `kvm64`). See https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm_virtual_machines_settings for more information.
func (o Vm2CpuPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vm2Cpu) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// CPU weight for a VM. Argument is used in the kernel fair scheduler. The larger the number is, the more CPU time this VM gets. Number is relative to weights of all the other running VMs.
func (o Vm2CpuPtrOutput) Units() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Vm2Cpu) *int {
		if v == nil {
			return nil
		}
		return v.Units
	}).(pulumi.IntPtrOutput)
}

type Vm2Timeouts struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create *string `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete *string `pulumi:"delete"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
	Read *string `pulumi:"read"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Update *string `pulumi:"update"`
}

// Vm2TimeoutsInput is an input type that accepts Vm2TimeoutsArgs and Vm2TimeoutsOutput values.
// You can construct a concrete instance of `Vm2TimeoutsInput` via:
//
//	Vm2TimeoutsArgs{...}
type Vm2TimeoutsInput interface {
	pulumi.Input

	ToVm2TimeoutsOutput() Vm2TimeoutsOutput
	ToVm2TimeoutsOutputWithContext(context.Context) Vm2TimeoutsOutput
}

type Vm2TimeoutsArgs struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create pulumi.StringPtrInput `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete pulumi.StringPtrInput `pulumi:"delete"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
	Read pulumi.StringPtrInput `pulumi:"read"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Update pulumi.StringPtrInput `pulumi:"update"`
}

func (Vm2TimeoutsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Vm2Timeouts)(nil)).Elem()
}

func (i Vm2TimeoutsArgs) ToVm2TimeoutsOutput() Vm2TimeoutsOutput {
	return i.ToVm2TimeoutsOutputWithContext(context.Background())
}

func (i Vm2TimeoutsArgs) ToVm2TimeoutsOutputWithContext(ctx context.Context) Vm2TimeoutsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Vm2TimeoutsOutput)
}

func (i Vm2TimeoutsArgs) ToVm2TimeoutsPtrOutput() Vm2TimeoutsPtrOutput {
	return i.ToVm2TimeoutsPtrOutputWithContext(context.Background())
}

func (i Vm2TimeoutsArgs) ToVm2TimeoutsPtrOutputWithContext(ctx context.Context) Vm2TimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Vm2TimeoutsOutput).ToVm2TimeoutsPtrOutputWithContext(ctx)
}

// Vm2TimeoutsPtrInput is an input type that accepts Vm2TimeoutsArgs, Vm2TimeoutsPtr and Vm2TimeoutsPtrOutput values.
// You can construct a concrete instance of `Vm2TimeoutsPtrInput` via:
//
//	        Vm2TimeoutsArgs{...}
//
//	or:
//
//	        nil
type Vm2TimeoutsPtrInput interface {
	pulumi.Input

	ToVm2TimeoutsPtrOutput() Vm2TimeoutsPtrOutput
	ToVm2TimeoutsPtrOutputWithContext(context.Context) Vm2TimeoutsPtrOutput
}

type vm2TimeoutsPtrType Vm2TimeoutsArgs

func Vm2TimeoutsPtr(v *Vm2TimeoutsArgs) Vm2TimeoutsPtrInput {
	return (*vm2TimeoutsPtrType)(v)
}

func (*vm2TimeoutsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Vm2Timeouts)(nil)).Elem()
}

func (i *vm2TimeoutsPtrType) ToVm2TimeoutsPtrOutput() Vm2TimeoutsPtrOutput {
	return i.ToVm2TimeoutsPtrOutputWithContext(context.Background())
}

func (i *vm2TimeoutsPtrType) ToVm2TimeoutsPtrOutputWithContext(ctx context.Context) Vm2TimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Vm2TimeoutsPtrOutput)
}

type Vm2TimeoutsOutput struct{ *pulumi.OutputState }

func (Vm2TimeoutsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Vm2Timeouts)(nil)).Elem()
}

func (o Vm2TimeoutsOutput) ToVm2TimeoutsOutput() Vm2TimeoutsOutput {
	return o
}

func (o Vm2TimeoutsOutput) ToVm2TimeoutsOutputWithContext(ctx context.Context) Vm2TimeoutsOutput {
	return o
}

func (o Vm2TimeoutsOutput) ToVm2TimeoutsPtrOutput() Vm2TimeoutsPtrOutput {
	return o.ToVm2TimeoutsPtrOutputWithContext(context.Background())
}

func (o Vm2TimeoutsOutput) ToVm2TimeoutsPtrOutputWithContext(ctx context.Context) Vm2TimeoutsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Vm2Timeouts) *Vm2Timeouts {
		return &v
	}).(Vm2TimeoutsPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o Vm2TimeoutsOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Vm2Timeouts) *string { return v.Create }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o Vm2TimeoutsOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Vm2Timeouts) *string { return v.Delete }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
func (o Vm2TimeoutsOutput) Read() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Vm2Timeouts) *string { return v.Read }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o Vm2TimeoutsOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Vm2Timeouts) *string { return v.Update }).(pulumi.StringPtrOutput)
}

type Vm2TimeoutsPtrOutput struct{ *pulumi.OutputState }

func (Vm2TimeoutsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vm2Timeouts)(nil)).Elem()
}

func (o Vm2TimeoutsPtrOutput) ToVm2TimeoutsPtrOutput() Vm2TimeoutsPtrOutput {
	return o
}

func (o Vm2TimeoutsPtrOutput) ToVm2TimeoutsPtrOutputWithContext(ctx context.Context) Vm2TimeoutsPtrOutput {
	return o
}

func (o Vm2TimeoutsPtrOutput) Elem() Vm2TimeoutsOutput {
	return o.ApplyT(func(v *Vm2Timeouts) Vm2Timeouts {
		if v != nil {
			return *v
		}
		var ret Vm2Timeouts
		return ret
	}).(Vm2TimeoutsOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o Vm2TimeoutsPtrOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vm2Timeouts) *string {
		if v == nil {
			return nil
		}
		return v.Create
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o Vm2TimeoutsPtrOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vm2Timeouts) *string {
		if v == nil {
			return nil
		}
		return v.Delete
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
func (o Vm2TimeoutsPtrOutput) Read() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vm2Timeouts) *string {
		if v == nil {
			return nil
		}
		return v.Read
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o Vm2TimeoutsPtrOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vm2Timeouts) *string {
		if v == nil {
			return nil
		}
		return v.Update
	}).(pulumi.StringPtrOutput)
}

type Vm2Vga struct {
	// Enable a specific clipboard. If not set, depending on the display type the SPICE one will be added. Currently only `vnc` is available. Migration with VNC clipboard is not supported by Proxmox.
	Clipboard *string `pulumi:"clipboard"`
	// The VGA memory in megabytes (4-512 MB). Has no effect with serial display.
	Memory *int `pulumi:"memory"`
	// The VGA type (defaults to `std`).
	Type *string `pulumi:"type"`
}

// Vm2VgaInput is an input type that accepts Vm2VgaArgs and Vm2VgaOutput values.
// You can construct a concrete instance of `Vm2VgaInput` via:
//
//	Vm2VgaArgs{...}
type Vm2VgaInput interface {
	pulumi.Input

	ToVm2VgaOutput() Vm2VgaOutput
	ToVm2VgaOutputWithContext(context.Context) Vm2VgaOutput
}

type Vm2VgaArgs struct {
	// Enable a specific clipboard. If not set, depending on the display type the SPICE one will be added. Currently only `vnc` is available. Migration with VNC clipboard is not supported by Proxmox.
	Clipboard pulumi.StringPtrInput `pulumi:"clipboard"`
	// The VGA memory in megabytes (4-512 MB). Has no effect with serial display.
	Memory pulumi.IntPtrInput `pulumi:"memory"`
	// The VGA type (defaults to `std`).
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (Vm2VgaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Vm2Vga)(nil)).Elem()
}

func (i Vm2VgaArgs) ToVm2VgaOutput() Vm2VgaOutput {
	return i.ToVm2VgaOutputWithContext(context.Background())
}

func (i Vm2VgaArgs) ToVm2VgaOutputWithContext(ctx context.Context) Vm2VgaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Vm2VgaOutput)
}

func (i Vm2VgaArgs) ToVm2VgaPtrOutput() Vm2VgaPtrOutput {
	return i.ToVm2VgaPtrOutputWithContext(context.Background())
}

func (i Vm2VgaArgs) ToVm2VgaPtrOutputWithContext(ctx context.Context) Vm2VgaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Vm2VgaOutput).ToVm2VgaPtrOutputWithContext(ctx)
}

// Vm2VgaPtrInput is an input type that accepts Vm2VgaArgs, Vm2VgaPtr and Vm2VgaPtrOutput values.
// You can construct a concrete instance of `Vm2VgaPtrInput` via:
//
//	        Vm2VgaArgs{...}
//
//	or:
//
//	        nil
type Vm2VgaPtrInput interface {
	pulumi.Input

	ToVm2VgaPtrOutput() Vm2VgaPtrOutput
	ToVm2VgaPtrOutputWithContext(context.Context) Vm2VgaPtrOutput
}

type vm2VgaPtrType Vm2VgaArgs

func Vm2VgaPtr(v *Vm2VgaArgs) Vm2VgaPtrInput {
	return (*vm2VgaPtrType)(v)
}

func (*vm2VgaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Vm2Vga)(nil)).Elem()
}

func (i *vm2VgaPtrType) ToVm2VgaPtrOutput() Vm2VgaPtrOutput {
	return i.ToVm2VgaPtrOutputWithContext(context.Background())
}

func (i *vm2VgaPtrType) ToVm2VgaPtrOutputWithContext(ctx context.Context) Vm2VgaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Vm2VgaPtrOutput)
}

type Vm2VgaOutput struct{ *pulumi.OutputState }

func (Vm2VgaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Vm2Vga)(nil)).Elem()
}

func (o Vm2VgaOutput) ToVm2VgaOutput() Vm2VgaOutput {
	return o
}

func (o Vm2VgaOutput) ToVm2VgaOutputWithContext(ctx context.Context) Vm2VgaOutput {
	return o
}

func (o Vm2VgaOutput) ToVm2VgaPtrOutput() Vm2VgaPtrOutput {
	return o.ToVm2VgaPtrOutputWithContext(context.Background())
}

func (o Vm2VgaOutput) ToVm2VgaPtrOutputWithContext(ctx context.Context) Vm2VgaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Vm2Vga) *Vm2Vga {
		return &v
	}).(Vm2VgaPtrOutput)
}

// Enable a specific clipboard. If not set, depending on the display type the SPICE one will be added. Currently only `vnc` is available. Migration with VNC clipboard is not supported by Proxmox.
func (o Vm2VgaOutput) Clipboard() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Vm2Vga) *string { return v.Clipboard }).(pulumi.StringPtrOutput)
}

// The VGA memory in megabytes (4-512 MB). Has no effect with serial display.
func (o Vm2VgaOutput) Memory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Vm2Vga) *int { return v.Memory }).(pulumi.IntPtrOutput)
}

// The VGA type (defaults to `std`).
func (o Vm2VgaOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Vm2Vga) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type Vm2VgaPtrOutput struct{ *pulumi.OutputState }

func (Vm2VgaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vm2Vga)(nil)).Elem()
}

func (o Vm2VgaPtrOutput) ToVm2VgaPtrOutput() Vm2VgaPtrOutput {
	return o
}

func (o Vm2VgaPtrOutput) ToVm2VgaPtrOutputWithContext(ctx context.Context) Vm2VgaPtrOutput {
	return o
}

func (o Vm2VgaPtrOutput) Elem() Vm2VgaOutput {
	return o.ApplyT(func(v *Vm2Vga) Vm2Vga {
		if v != nil {
			return *v
		}
		var ret Vm2Vga
		return ret
	}).(Vm2VgaOutput)
}

// Enable a specific clipboard. If not set, depending on the display type the SPICE one will be added. Currently only `vnc` is available. Migration with VNC clipboard is not supported by Proxmox.
func (o Vm2VgaPtrOutput) Clipboard() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vm2Vga) *string {
		if v == nil {
			return nil
		}
		return v.Clipboard
	}).(pulumi.StringPtrOutput)
}

// The VGA memory in megabytes (4-512 MB). Has no effect with serial display.
func (o Vm2VgaPtrOutput) Memory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Vm2Vga) *int {
		if v == nil {
			return nil
		}
		return v.Memory
	}).(pulumi.IntPtrOutput)
}

// The VGA type (defaults to `std`).
func (o Vm2VgaPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vm2Vga) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type GetVm2Clone struct {
	// The ID of the VM to clone.
	Id int `pulumi:"id"`
	// The number of retries to perform when cloning the VM (default: 3).
	Retries int `pulumi:"retries"`
}

// GetVm2CloneInput is an input type that accepts GetVm2CloneArgs and GetVm2CloneOutput values.
// You can construct a concrete instance of `GetVm2CloneInput` via:
//
//	GetVm2CloneArgs{...}
type GetVm2CloneInput interface {
	pulumi.Input

	ToGetVm2CloneOutput() GetVm2CloneOutput
	ToGetVm2CloneOutputWithContext(context.Context) GetVm2CloneOutput
}

type GetVm2CloneArgs struct {
	// The ID of the VM to clone.
	Id pulumi.IntInput `pulumi:"id"`
	// The number of retries to perform when cloning the VM (default: 3).
	Retries pulumi.IntInput `pulumi:"retries"`
}

func (GetVm2CloneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVm2Clone)(nil)).Elem()
}

func (i GetVm2CloneArgs) ToGetVm2CloneOutput() GetVm2CloneOutput {
	return i.ToGetVm2CloneOutputWithContext(context.Background())
}

func (i GetVm2CloneArgs) ToGetVm2CloneOutputWithContext(ctx context.Context) GetVm2CloneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVm2CloneOutput)
}

func (i GetVm2CloneArgs) ToGetVm2ClonePtrOutput() GetVm2ClonePtrOutput {
	return i.ToGetVm2ClonePtrOutputWithContext(context.Background())
}

func (i GetVm2CloneArgs) ToGetVm2ClonePtrOutputWithContext(ctx context.Context) GetVm2ClonePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVm2CloneOutput).ToGetVm2ClonePtrOutputWithContext(ctx)
}

// GetVm2ClonePtrInput is an input type that accepts GetVm2CloneArgs, GetVm2ClonePtr and GetVm2ClonePtrOutput values.
// You can construct a concrete instance of `GetVm2ClonePtrInput` via:
//
//	        GetVm2CloneArgs{...}
//
//	or:
//
//	        nil
type GetVm2ClonePtrInput interface {
	pulumi.Input

	ToGetVm2ClonePtrOutput() GetVm2ClonePtrOutput
	ToGetVm2ClonePtrOutputWithContext(context.Context) GetVm2ClonePtrOutput
}

type getVm2ClonePtrType GetVm2CloneArgs

func GetVm2ClonePtr(v *GetVm2CloneArgs) GetVm2ClonePtrInput {
	return (*getVm2ClonePtrType)(v)
}

func (*getVm2ClonePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetVm2Clone)(nil)).Elem()
}

func (i *getVm2ClonePtrType) ToGetVm2ClonePtrOutput() GetVm2ClonePtrOutput {
	return i.ToGetVm2ClonePtrOutputWithContext(context.Background())
}

func (i *getVm2ClonePtrType) ToGetVm2ClonePtrOutputWithContext(ctx context.Context) GetVm2ClonePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVm2ClonePtrOutput)
}

type GetVm2CloneOutput struct{ *pulumi.OutputState }

func (GetVm2CloneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVm2Clone)(nil)).Elem()
}

func (o GetVm2CloneOutput) ToGetVm2CloneOutput() GetVm2CloneOutput {
	return o
}

func (o GetVm2CloneOutput) ToGetVm2CloneOutputWithContext(ctx context.Context) GetVm2CloneOutput {
	return o
}

func (o GetVm2CloneOutput) ToGetVm2ClonePtrOutput() GetVm2ClonePtrOutput {
	return o.ToGetVm2ClonePtrOutputWithContext(context.Background())
}

func (o GetVm2CloneOutput) ToGetVm2ClonePtrOutputWithContext(ctx context.Context) GetVm2ClonePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetVm2Clone) *GetVm2Clone {
		return &v
	}).(GetVm2ClonePtrOutput)
}

// The ID of the VM to clone.
func (o GetVm2CloneOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetVm2Clone) int { return v.Id }).(pulumi.IntOutput)
}

// The number of retries to perform when cloning the VM (default: 3).
func (o GetVm2CloneOutput) Retries() pulumi.IntOutput {
	return o.ApplyT(func(v GetVm2Clone) int { return v.Retries }).(pulumi.IntOutput)
}

type GetVm2ClonePtrOutput struct{ *pulumi.OutputState }

func (GetVm2ClonePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetVm2Clone)(nil)).Elem()
}

func (o GetVm2ClonePtrOutput) ToGetVm2ClonePtrOutput() GetVm2ClonePtrOutput {
	return o
}

func (o GetVm2ClonePtrOutput) ToGetVm2ClonePtrOutputWithContext(ctx context.Context) GetVm2ClonePtrOutput {
	return o
}

func (o GetVm2ClonePtrOutput) Elem() GetVm2CloneOutput {
	return o.ApplyT(func(v *GetVm2Clone) GetVm2Clone {
		if v != nil {
			return *v
		}
		var ret GetVm2Clone
		return ret
	}).(GetVm2CloneOutput)
}

// The ID of the VM to clone.
func (o GetVm2ClonePtrOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GetVm2Clone) *int {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.IntPtrOutput)
}

// The number of retries to perform when cloning the VM (default: 3).
func (o GetVm2ClonePtrOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GetVm2Clone) *int {
		if v == nil {
			return nil
		}
		return &v.Retries
	}).(pulumi.IntPtrOutput)
}

type GetVm2Cpu struct {
	// List of host cores used to execute guest processes, for example: '0,5,8-11'
	Affinity string `pulumi:"affinity"`
	// The CPU architecture.
	Architecture string `pulumi:"architecture"`
	// The number of CPU cores per socket.
	Cores int `pulumi:"cores"`
	// Set of additional CPU flags.
	Flags []string `pulumi:"flags"`
	// The number of hotplugged vCPUs.
	Hotplugged int `pulumi:"hotplugged"`
	// Limit of CPU usage.
	Limit int `pulumi:"limit"`
	// Enable NUMA.
	Numa bool `pulumi:"numa"`
	// The number of CPU sockets.
	Sockets int `pulumi:"sockets"`
	// Emulated CPU type.
	Type string `pulumi:"type"`
	// CPU weight for a VM
	Units int `pulumi:"units"`
}

// GetVm2CpuInput is an input type that accepts GetVm2CpuArgs and GetVm2CpuOutput values.
// You can construct a concrete instance of `GetVm2CpuInput` via:
//
//	GetVm2CpuArgs{...}
type GetVm2CpuInput interface {
	pulumi.Input

	ToGetVm2CpuOutput() GetVm2CpuOutput
	ToGetVm2CpuOutputWithContext(context.Context) GetVm2CpuOutput
}

type GetVm2CpuArgs struct {
	// List of host cores used to execute guest processes, for example: '0,5,8-11'
	Affinity pulumi.StringInput `pulumi:"affinity"`
	// The CPU architecture.
	Architecture pulumi.StringInput `pulumi:"architecture"`
	// The number of CPU cores per socket.
	Cores pulumi.IntInput `pulumi:"cores"`
	// Set of additional CPU flags.
	Flags pulumi.StringArrayInput `pulumi:"flags"`
	// The number of hotplugged vCPUs.
	Hotplugged pulumi.IntInput `pulumi:"hotplugged"`
	// Limit of CPU usage.
	Limit pulumi.IntInput `pulumi:"limit"`
	// Enable NUMA.
	Numa pulumi.BoolInput `pulumi:"numa"`
	// The number of CPU sockets.
	Sockets pulumi.IntInput `pulumi:"sockets"`
	// Emulated CPU type.
	Type pulumi.StringInput `pulumi:"type"`
	// CPU weight for a VM
	Units pulumi.IntInput `pulumi:"units"`
}

func (GetVm2CpuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVm2Cpu)(nil)).Elem()
}

func (i GetVm2CpuArgs) ToGetVm2CpuOutput() GetVm2CpuOutput {
	return i.ToGetVm2CpuOutputWithContext(context.Background())
}

func (i GetVm2CpuArgs) ToGetVm2CpuOutputWithContext(ctx context.Context) GetVm2CpuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVm2CpuOutput)
}

func (i GetVm2CpuArgs) ToGetVm2CpuPtrOutput() GetVm2CpuPtrOutput {
	return i.ToGetVm2CpuPtrOutputWithContext(context.Background())
}

func (i GetVm2CpuArgs) ToGetVm2CpuPtrOutputWithContext(ctx context.Context) GetVm2CpuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVm2CpuOutput).ToGetVm2CpuPtrOutputWithContext(ctx)
}

// GetVm2CpuPtrInput is an input type that accepts GetVm2CpuArgs, GetVm2CpuPtr and GetVm2CpuPtrOutput values.
// You can construct a concrete instance of `GetVm2CpuPtrInput` via:
//
//	        GetVm2CpuArgs{...}
//
//	or:
//
//	        nil
type GetVm2CpuPtrInput interface {
	pulumi.Input

	ToGetVm2CpuPtrOutput() GetVm2CpuPtrOutput
	ToGetVm2CpuPtrOutputWithContext(context.Context) GetVm2CpuPtrOutput
}

type getVm2CpuPtrType GetVm2CpuArgs

func GetVm2CpuPtr(v *GetVm2CpuArgs) GetVm2CpuPtrInput {
	return (*getVm2CpuPtrType)(v)
}

func (*getVm2CpuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetVm2Cpu)(nil)).Elem()
}

func (i *getVm2CpuPtrType) ToGetVm2CpuPtrOutput() GetVm2CpuPtrOutput {
	return i.ToGetVm2CpuPtrOutputWithContext(context.Background())
}

func (i *getVm2CpuPtrType) ToGetVm2CpuPtrOutputWithContext(ctx context.Context) GetVm2CpuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVm2CpuPtrOutput)
}

type GetVm2CpuOutput struct{ *pulumi.OutputState }

func (GetVm2CpuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVm2Cpu)(nil)).Elem()
}

func (o GetVm2CpuOutput) ToGetVm2CpuOutput() GetVm2CpuOutput {
	return o
}

func (o GetVm2CpuOutput) ToGetVm2CpuOutputWithContext(ctx context.Context) GetVm2CpuOutput {
	return o
}

func (o GetVm2CpuOutput) ToGetVm2CpuPtrOutput() GetVm2CpuPtrOutput {
	return o.ToGetVm2CpuPtrOutputWithContext(context.Background())
}

func (o GetVm2CpuOutput) ToGetVm2CpuPtrOutputWithContext(ctx context.Context) GetVm2CpuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetVm2Cpu) *GetVm2Cpu {
		return &v
	}).(GetVm2CpuPtrOutput)
}

// List of host cores used to execute guest processes, for example: '0,5,8-11'
func (o GetVm2CpuOutput) Affinity() pulumi.StringOutput {
	return o.ApplyT(func(v GetVm2Cpu) string { return v.Affinity }).(pulumi.StringOutput)
}

// The CPU architecture.
func (o GetVm2CpuOutput) Architecture() pulumi.StringOutput {
	return o.ApplyT(func(v GetVm2Cpu) string { return v.Architecture }).(pulumi.StringOutput)
}

// The number of CPU cores per socket.
func (o GetVm2CpuOutput) Cores() pulumi.IntOutput {
	return o.ApplyT(func(v GetVm2Cpu) int { return v.Cores }).(pulumi.IntOutput)
}

// Set of additional CPU flags.
func (o GetVm2CpuOutput) Flags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetVm2Cpu) []string { return v.Flags }).(pulumi.StringArrayOutput)
}

// The number of hotplugged vCPUs.
func (o GetVm2CpuOutput) Hotplugged() pulumi.IntOutput {
	return o.ApplyT(func(v GetVm2Cpu) int { return v.Hotplugged }).(pulumi.IntOutput)
}

// Limit of CPU usage.
func (o GetVm2CpuOutput) Limit() pulumi.IntOutput {
	return o.ApplyT(func(v GetVm2Cpu) int { return v.Limit }).(pulumi.IntOutput)
}

// Enable NUMA.
func (o GetVm2CpuOutput) Numa() pulumi.BoolOutput {
	return o.ApplyT(func(v GetVm2Cpu) bool { return v.Numa }).(pulumi.BoolOutput)
}

// The number of CPU sockets.
func (o GetVm2CpuOutput) Sockets() pulumi.IntOutput {
	return o.ApplyT(func(v GetVm2Cpu) int { return v.Sockets }).(pulumi.IntOutput)
}

// Emulated CPU type.
func (o GetVm2CpuOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetVm2Cpu) string { return v.Type }).(pulumi.StringOutput)
}

// CPU weight for a VM
func (o GetVm2CpuOutput) Units() pulumi.IntOutput {
	return o.ApplyT(func(v GetVm2Cpu) int { return v.Units }).(pulumi.IntOutput)
}

type GetVm2CpuPtrOutput struct{ *pulumi.OutputState }

func (GetVm2CpuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetVm2Cpu)(nil)).Elem()
}

func (o GetVm2CpuPtrOutput) ToGetVm2CpuPtrOutput() GetVm2CpuPtrOutput {
	return o
}

func (o GetVm2CpuPtrOutput) ToGetVm2CpuPtrOutputWithContext(ctx context.Context) GetVm2CpuPtrOutput {
	return o
}

func (o GetVm2CpuPtrOutput) Elem() GetVm2CpuOutput {
	return o.ApplyT(func(v *GetVm2Cpu) GetVm2Cpu {
		if v != nil {
			return *v
		}
		var ret GetVm2Cpu
		return ret
	}).(GetVm2CpuOutput)
}

// List of host cores used to execute guest processes, for example: '0,5,8-11'
func (o GetVm2CpuPtrOutput) Affinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetVm2Cpu) *string {
		if v == nil {
			return nil
		}
		return &v.Affinity
	}).(pulumi.StringPtrOutput)
}

// The CPU architecture.
func (o GetVm2CpuPtrOutput) Architecture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetVm2Cpu) *string {
		if v == nil {
			return nil
		}
		return &v.Architecture
	}).(pulumi.StringPtrOutput)
}

// The number of CPU cores per socket.
func (o GetVm2CpuPtrOutput) Cores() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GetVm2Cpu) *int {
		if v == nil {
			return nil
		}
		return &v.Cores
	}).(pulumi.IntPtrOutput)
}

// Set of additional CPU flags.
func (o GetVm2CpuPtrOutput) Flags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetVm2Cpu) []string {
		if v == nil {
			return nil
		}
		return v.Flags
	}).(pulumi.StringArrayOutput)
}

// The number of hotplugged vCPUs.
func (o GetVm2CpuPtrOutput) Hotplugged() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GetVm2Cpu) *int {
		if v == nil {
			return nil
		}
		return &v.Hotplugged
	}).(pulumi.IntPtrOutput)
}

// Limit of CPU usage.
func (o GetVm2CpuPtrOutput) Limit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GetVm2Cpu) *int {
		if v == nil {
			return nil
		}
		return &v.Limit
	}).(pulumi.IntPtrOutput)
}

// Enable NUMA.
func (o GetVm2CpuPtrOutput) Numa() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GetVm2Cpu) *bool {
		if v == nil {
			return nil
		}
		return &v.Numa
	}).(pulumi.BoolPtrOutput)
}

// The number of CPU sockets.
func (o GetVm2CpuPtrOutput) Sockets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GetVm2Cpu) *int {
		if v == nil {
			return nil
		}
		return &v.Sockets
	}).(pulumi.IntPtrOutput)
}

// Emulated CPU type.
func (o GetVm2CpuPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetVm2Cpu) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// CPU weight for a VM
func (o GetVm2CpuPtrOutput) Units() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GetVm2Cpu) *int {
		if v == nil {
			return nil
		}
		return &v.Units
	}).(pulumi.IntPtrOutput)
}

type GetVm2Timeouts struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
	Read *string `pulumi:"read"`
}

// GetVm2TimeoutsInput is an input type that accepts GetVm2TimeoutsArgs and GetVm2TimeoutsOutput values.
// You can construct a concrete instance of `GetVm2TimeoutsInput` via:
//
//	GetVm2TimeoutsArgs{...}
type GetVm2TimeoutsInput interface {
	pulumi.Input

	ToGetVm2TimeoutsOutput() GetVm2TimeoutsOutput
	ToGetVm2TimeoutsOutputWithContext(context.Context) GetVm2TimeoutsOutput
}

type GetVm2TimeoutsArgs struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
	Read pulumi.StringPtrInput `pulumi:"read"`
}

func (GetVm2TimeoutsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVm2Timeouts)(nil)).Elem()
}

func (i GetVm2TimeoutsArgs) ToGetVm2TimeoutsOutput() GetVm2TimeoutsOutput {
	return i.ToGetVm2TimeoutsOutputWithContext(context.Background())
}

func (i GetVm2TimeoutsArgs) ToGetVm2TimeoutsOutputWithContext(ctx context.Context) GetVm2TimeoutsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVm2TimeoutsOutput)
}

func (i GetVm2TimeoutsArgs) ToGetVm2TimeoutsPtrOutput() GetVm2TimeoutsPtrOutput {
	return i.ToGetVm2TimeoutsPtrOutputWithContext(context.Background())
}

func (i GetVm2TimeoutsArgs) ToGetVm2TimeoutsPtrOutputWithContext(ctx context.Context) GetVm2TimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVm2TimeoutsOutput).ToGetVm2TimeoutsPtrOutputWithContext(ctx)
}

// GetVm2TimeoutsPtrInput is an input type that accepts GetVm2TimeoutsArgs, GetVm2TimeoutsPtr and GetVm2TimeoutsPtrOutput values.
// You can construct a concrete instance of `GetVm2TimeoutsPtrInput` via:
//
//	        GetVm2TimeoutsArgs{...}
//
//	or:
//
//	        nil
type GetVm2TimeoutsPtrInput interface {
	pulumi.Input

	ToGetVm2TimeoutsPtrOutput() GetVm2TimeoutsPtrOutput
	ToGetVm2TimeoutsPtrOutputWithContext(context.Context) GetVm2TimeoutsPtrOutput
}

type getVm2TimeoutsPtrType GetVm2TimeoutsArgs

func GetVm2TimeoutsPtr(v *GetVm2TimeoutsArgs) GetVm2TimeoutsPtrInput {
	return (*getVm2TimeoutsPtrType)(v)
}

func (*getVm2TimeoutsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetVm2Timeouts)(nil)).Elem()
}

func (i *getVm2TimeoutsPtrType) ToGetVm2TimeoutsPtrOutput() GetVm2TimeoutsPtrOutput {
	return i.ToGetVm2TimeoutsPtrOutputWithContext(context.Background())
}

func (i *getVm2TimeoutsPtrType) ToGetVm2TimeoutsPtrOutputWithContext(ctx context.Context) GetVm2TimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVm2TimeoutsPtrOutput)
}

type GetVm2TimeoutsOutput struct{ *pulumi.OutputState }

func (GetVm2TimeoutsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVm2Timeouts)(nil)).Elem()
}

func (o GetVm2TimeoutsOutput) ToGetVm2TimeoutsOutput() GetVm2TimeoutsOutput {
	return o
}

func (o GetVm2TimeoutsOutput) ToGetVm2TimeoutsOutputWithContext(ctx context.Context) GetVm2TimeoutsOutput {
	return o
}

func (o GetVm2TimeoutsOutput) ToGetVm2TimeoutsPtrOutput() GetVm2TimeoutsPtrOutput {
	return o.ToGetVm2TimeoutsPtrOutputWithContext(context.Background())
}

func (o GetVm2TimeoutsOutput) ToGetVm2TimeoutsPtrOutputWithContext(ctx context.Context) GetVm2TimeoutsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetVm2Timeouts) *GetVm2Timeouts {
		return &v
	}).(GetVm2TimeoutsPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
func (o GetVm2TimeoutsOutput) Read() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVm2Timeouts) *string { return v.Read }).(pulumi.StringPtrOutput)
}

type GetVm2TimeoutsPtrOutput struct{ *pulumi.OutputState }

func (GetVm2TimeoutsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetVm2Timeouts)(nil)).Elem()
}

func (o GetVm2TimeoutsPtrOutput) ToGetVm2TimeoutsPtrOutput() GetVm2TimeoutsPtrOutput {
	return o
}

func (o GetVm2TimeoutsPtrOutput) ToGetVm2TimeoutsPtrOutputWithContext(ctx context.Context) GetVm2TimeoutsPtrOutput {
	return o
}

func (o GetVm2TimeoutsPtrOutput) Elem() GetVm2TimeoutsOutput {
	return o.ApplyT(func(v *GetVm2Timeouts) GetVm2Timeouts {
		if v != nil {
			return *v
		}
		var ret GetVm2Timeouts
		return ret
	}).(GetVm2TimeoutsOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
func (o GetVm2TimeoutsPtrOutput) Read() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetVm2Timeouts) *string {
		if v == nil {
			return nil
		}
		return v.Read
	}).(pulumi.StringPtrOutput)
}

type GetVm2Vga struct {
	// Enable a specific clipboard.
	Clipboard string `pulumi:"clipboard"`
	// The VGA memory in megabytes (4-512 MB). Has no effect with serial display.
	Memory int `pulumi:"memory"`
	// The VGA type.
	Type string `pulumi:"type"`
}

// GetVm2VgaInput is an input type that accepts GetVm2VgaArgs and GetVm2VgaOutput values.
// You can construct a concrete instance of `GetVm2VgaInput` via:
//
//	GetVm2VgaArgs{...}
type GetVm2VgaInput interface {
	pulumi.Input

	ToGetVm2VgaOutput() GetVm2VgaOutput
	ToGetVm2VgaOutputWithContext(context.Context) GetVm2VgaOutput
}

type GetVm2VgaArgs struct {
	// Enable a specific clipboard.
	Clipboard pulumi.StringInput `pulumi:"clipboard"`
	// The VGA memory in megabytes (4-512 MB). Has no effect with serial display.
	Memory pulumi.IntInput `pulumi:"memory"`
	// The VGA type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetVm2VgaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVm2Vga)(nil)).Elem()
}

func (i GetVm2VgaArgs) ToGetVm2VgaOutput() GetVm2VgaOutput {
	return i.ToGetVm2VgaOutputWithContext(context.Background())
}

func (i GetVm2VgaArgs) ToGetVm2VgaOutputWithContext(ctx context.Context) GetVm2VgaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVm2VgaOutput)
}

func (i GetVm2VgaArgs) ToGetVm2VgaPtrOutput() GetVm2VgaPtrOutput {
	return i.ToGetVm2VgaPtrOutputWithContext(context.Background())
}

func (i GetVm2VgaArgs) ToGetVm2VgaPtrOutputWithContext(ctx context.Context) GetVm2VgaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVm2VgaOutput).ToGetVm2VgaPtrOutputWithContext(ctx)
}

// GetVm2VgaPtrInput is an input type that accepts GetVm2VgaArgs, GetVm2VgaPtr and GetVm2VgaPtrOutput values.
// You can construct a concrete instance of `GetVm2VgaPtrInput` via:
//
//	        GetVm2VgaArgs{...}
//
//	or:
//
//	        nil
type GetVm2VgaPtrInput interface {
	pulumi.Input

	ToGetVm2VgaPtrOutput() GetVm2VgaPtrOutput
	ToGetVm2VgaPtrOutputWithContext(context.Context) GetVm2VgaPtrOutput
}

type getVm2VgaPtrType GetVm2VgaArgs

func GetVm2VgaPtr(v *GetVm2VgaArgs) GetVm2VgaPtrInput {
	return (*getVm2VgaPtrType)(v)
}

func (*getVm2VgaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetVm2Vga)(nil)).Elem()
}

func (i *getVm2VgaPtrType) ToGetVm2VgaPtrOutput() GetVm2VgaPtrOutput {
	return i.ToGetVm2VgaPtrOutputWithContext(context.Background())
}

func (i *getVm2VgaPtrType) ToGetVm2VgaPtrOutputWithContext(ctx context.Context) GetVm2VgaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVm2VgaPtrOutput)
}

type GetVm2VgaOutput struct{ *pulumi.OutputState }

func (GetVm2VgaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVm2Vga)(nil)).Elem()
}

func (o GetVm2VgaOutput) ToGetVm2VgaOutput() GetVm2VgaOutput {
	return o
}

func (o GetVm2VgaOutput) ToGetVm2VgaOutputWithContext(ctx context.Context) GetVm2VgaOutput {
	return o
}

func (o GetVm2VgaOutput) ToGetVm2VgaPtrOutput() GetVm2VgaPtrOutput {
	return o.ToGetVm2VgaPtrOutputWithContext(context.Background())
}

func (o GetVm2VgaOutput) ToGetVm2VgaPtrOutputWithContext(ctx context.Context) GetVm2VgaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetVm2Vga) *GetVm2Vga {
		return &v
	}).(GetVm2VgaPtrOutput)
}

// Enable a specific clipboard.
func (o GetVm2VgaOutput) Clipboard() pulumi.StringOutput {
	return o.ApplyT(func(v GetVm2Vga) string { return v.Clipboard }).(pulumi.StringOutput)
}

// The VGA memory in megabytes (4-512 MB). Has no effect with serial display.
func (o GetVm2VgaOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v GetVm2Vga) int { return v.Memory }).(pulumi.IntOutput)
}

// The VGA type.
func (o GetVm2VgaOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetVm2Vga) string { return v.Type }).(pulumi.StringOutput)
}

type GetVm2VgaPtrOutput struct{ *pulumi.OutputState }

func (GetVm2VgaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetVm2Vga)(nil)).Elem()
}

func (o GetVm2VgaPtrOutput) ToGetVm2VgaPtrOutput() GetVm2VgaPtrOutput {
	return o
}

func (o GetVm2VgaPtrOutput) ToGetVm2VgaPtrOutputWithContext(ctx context.Context) GetVm2VgaPtrOutput {
	return o
}

func (o GetVm2VgaPtrOutput) Elem() GetVm2VgaOutput {
	return o.ApplyT(func(v *GetVm2Vga) GetVm2Vga {
		if v != nil {
			return *v
		}
		var ret GetVm2Vga
		return ret
	}).(GetVm2VgaOutput)
}

// Enable a specific clipboard.
func (o GetVm2VgaPtrOutput) Clipboard() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetVm2Vga) *string {
		if v == nil {
			return nil
		}
		return &v.Clipboard
	}).(pulumi.StringPtrOutput)
}

// The VGA memory in megabytes (4-512 MB). Has no effect with serial display.
func (o GetVm2VgaPtrOutput) Memory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GetVm2Vga) *int {
		if v == nil {
			return nil
		}
		return &v.Memory
	}).(pulumi.IntPtrOutput)
}

// The VGA type.
func (o GetVm2VgaPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetVm2Vga) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HostsEntryInput)(nil)).Elem(), HostsEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostsEntryArrayInput)(nil)).Elem(), HostsEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderSshInput)(nil)).Elem(), ProviderSshArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderSshPtrInput)(nil)).Elem(), ProviderSshArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderSshNodeInput)(nil)).Elem(), ProviderSshNodeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderSshNodeArrayInput)(nil)).Elem(), ProviderSshNodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*Vm2CloneInput)(nil)).Elem(), Vm2CloneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*Vm2ClonePtrInput)(nil)).Elem(), Vm2CloneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*Vm2CpuInput)(nil)).Elem(), Vm2CpuArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*Vm2CpuPtrInput)(nil)).Elem(), Vm2CpuArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*Vm2TimeoutsInput)(nil)).Elem(), Vm2TimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*Vm2TimeoutsPtrInput)(nil)).Elem(), Vm2TimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*Vm2VgaInput)(nil)).Elem(), Vm2VgaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*Vm2VgaPtrInput)(nil)).Elem(), Vm2VgaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVm2CloneInput)(nil)).Elem(), GetVm2CloneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVm2ClonePtrInput)(nil)).Elem(), GetVm2CloneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVm2CpuInput)(nil)).Elem(), GetVm2CpuArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVm2CpuPtrInput)(nil)).Elem(), GetVm2CpuArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVm2TimeoutsInput)(nil)).Elem(), GetVm2TimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVm2TimeoutsPtrInput)(nil)).Elem(), GetVm2TimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVm2VgaInput)(nil)).Elem(), GetVm2VgaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVm2VgaPtrInput)(nil)).Elem(), GetVm2VgaArgs{})
	pulumi.RegisterOutputType(HostsEntryOutput{})
	pulumi.RegisterOutputType(HostsEntryArrayOutput{})
	pulumi.RegisterOutputType(ProviderSshOutput{})
	pulumi.RegisterOutputType(ProviderSshPtrOutput{})
	pulumi.RegisterOutputType(ProviderSshNodeOutput{})
	pulumi.RegisterOutputType(ProviderSshNodeArrayOutput{})
	pulumi.RegisterOutputType(Vm2CloneOutput{})
	pulumi.RegisterOutputType(Vm2ClonePtrOutput{})
	pulumi.RegisterOutputType(Vm2CpuOutput{})
	pulumi.RegisterOutputType(Vm2CpuPtrOutput{})
	pulumi.RegisterOutputType(Vm2TimeoutsOutput{})
	pulumi.RegisterOutputType(Vm2TimeoutsPtrOutput{})
	pulumi.RegisterOutputType(Vm2VgaOutput{})
	pulumi.RegisterOutputType(Vm2VgaPtrOutput{})
	pulumi.RegisterOutputType(GetVm2CloneOutput{})
	pulumi.RegisterOutputType(GetVm2ClonePtrOutput{})
	pulumi.RegisterOutputType(GetVm2CpuOutput{})
	pulumi.RegisterOutputType(GetVm2CpuPtrOutput{})
	pulumi.RegisterOutputType(GetVm2TimeoutsOutput{})
	pulumi.RegisterOutputType(GetVm2TimeoutsPtrOutput{})
	pulumi.RegisterOutputType(GetVm2VgaOutput{})
	pulumi.RegisterOutputType(GetVm2VgaPtrOutput{})
}

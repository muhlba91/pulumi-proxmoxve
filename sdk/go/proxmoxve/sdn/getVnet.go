// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdn

import (
	"context"
	"reflect"

	"github.com/muhlba91/pulumi-proxmoxve/sdk/v7/go/proxmoxve/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves information about an existing SDN VNet.
func LookupVnet(ctx *pulumi.Context, args *LookupVnetArgs, opts ...pulumi.InvokeOption) (*LookupVnetResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVnetResult
	err := ctx.Invoke("proxmoxve:Sdn/getVnet:getVnet", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVnet.
type LookupVnetArgs struct {
	// The unique identifier of the SDN VNet.
	Id string `pulumi:"id"`
}

// A collection of values returned by getVnet.
type LookupVnetResult struct {
	// An optional alias for this VNet.
	Alias string `pulumi:"alias"`
	// The unique identifier of the SDN VNet.
	Id string `pulumi:"id"`
	// Isolate ports within this VNet.
	IsolatePorts bool `pulumi:"isolatePorts"`
	// Tag value for VLAN/VXLAN (can't be used with other zone types).
	Tag int `pulumi:"tag"`
	// Allow VM VLANs to pass through this VNet.
	VlanAware bool `pulumi:"vlanAware"`
	// The zone to which this VNet belongs.
	Zone string `pulumi:"zone"`
}

func LookupVnetOutput(ctx *pulumi.Context, args LookupVnetOutputArgs, opts ...pulumi.InvokeOption) LookupVnetResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupVnetResultOutput, error) {
			args := v.(LookupVnetArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("proxmoxve:Sdn/getVnet:getVnet", args, LookupVnetResultOutput{}, options).(LookupVnetResultOutput), nil
		}).(LookupVnetResultOutput)
}

// A collection of arguments for invoking getVnet.
type LookupVnetOutputArgs struct {
	// The unique identifier of the SDN VNet.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupVnetOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVnetArgs)(nil)).Elem()
}

// A collection of values returned by getVnet.
type LookupVnetResultOutput struct{ *pulumi.OutputState }

func (LookupVnetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVnetResult)(nil)).Elem()
}

func (o LookupVnetResultOutput) ToLookupVnetResultOutput() LookupVnetResultOutput {
	return o
}

func (o LookupVnetResultOutput) ToLookupVnetResultOutputWithContext(ctx context.Context) LookupVnetResultOutput {
	return o
}

// An optional alias for this VNet.
func (o LookupVnetResultOutput) Alias() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVnetResult) string { return v.Alias }).(pulumi.StringOutput)
}

// The unique identifier of the SDN VNet.
func (o LookupVnetResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVnetResult) string { return v.Id }).(pulumi.StringOutput)
}

// Isolate ports within this VNet.
func (o LookupVnetResultOutput) IsolatePorts() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVnetResult) bool { return v.IsolatePorts }).(pulumi.BoolOutput)
}

// Tag value for VLAN/VXLAN (can't be used with other zone types).
func (o LookupVnetResultOutput) Tag() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVnetResult) int { return v.Tag }).(pulumi.IntOutput)
}

// Allow VM VLANs to pass through this VNet.
func (o LookupVnetResultOutput) VlanAware() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVnetResult) bool { return v.VlanAware }).(pulumi.BoolOutput)
}

// The zone to which this VNet belongs.
func (o LookupVnetResultOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVnetResult) string { return v.Zone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVnetResultOutput{})
}

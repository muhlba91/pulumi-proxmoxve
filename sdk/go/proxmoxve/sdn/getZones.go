// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdn

import (
	"context"
	"reflect"

	"github.com/muhlba91/pulumi-proxmoxve/sdk/v7/go/proxmoxve/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves information about all SDN Zones in Proxmox. This data source can optionally filter zones by type.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/muhlba91/pulumi-proxmoxve/sdk/v7/go/proxmoxve/sdn"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			all, err := sdn.GetZones(ctx, &sdn.GetZonesArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			evpnOnly, err := sdn.GetZones(ctx, &sdn.GetZonesArgs{
//				Type: pulumi.StringRef("evpn"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			simpleOnly, err := sdn.GetZones(ctx, &sdn.GetZonesArgs{
//				Type: pulumi.StringRef("simple"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("dataProxmoxVirtualEnvironmentSdnZonesAll", []sdn.GetZonesZoneMap{
//				"zones": all.Zones,
//			})
//			ctx.Export("dataProxmoxVirtualEnvironmentSdnZonesFiltered", []sdn.GetZonesZoneMap{
//				"evpn_zones":   evpnOnly.Zones,
//				"simple_zones": simpleOnly.Zones,
//			})
//			return nil
//		})
//	}
//
// ```
func GetZones(ctx *pulumi.Context, args *GetZonesArgs, opts ...pulumi.InvokeOption) (*GetZonesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetZonesResult
	err := ctx.Invoke("proxmoxve:Sdn/getZones:getZones", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getZones.
type GetZonesArgs struct {
	// Filter zones by type (simple, vlan, qinq, vxlan, evpn).
	Type *string `pulumi:"type"`
}

// A collection of values returned by getZones.
type GetZonesResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Filter zones by type (simple, vlan, qinq, vxlan, evpn).
	Type *string `pulumi:"type"`
	// List of SDN zones.
	Zones []GetZonesZone `pulumi:"zones"`
}

func GetZonesOutput(ctx *pulumi.Context, args GetZonesOutputArgs, opts ...pulumi.InvokeOption) GetZonesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetZonesResultOutput, error) {
			args := v.(GetZonesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("proxmoxve:Sdn/getZones:getZones", args, GetZonesResultOutput{}, options).(GetZonesResultOutput), nil
		}).(GetZonesResultOutput)
}

// A collection of arguments for invoking getZones.
type GetZonesOutputArgs struct {
	// Filter zones by type (simple, vlan, qinq, vxlan, evpn).
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GetZonesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetZonesArgs)(nil)).Elem()
}

// A collection of values returned by getZones.
type GetZonesResultOutput struct{ *pulumi.OutputState }

func (GetZonesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetZonesResult)(nil)).Elem()
}

func (o GetZonesResultOutput) ToGetZonesResultOutput() GetZonesResultOutput {
	return o
}

func (o GetZonesResultOutput) ToGetZonesResultOutputWithContext(ctx context.Context) GetZonesResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetZonesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetZonesResult) string { return v.Id }).(pulumi.StringOutput)
}

// Filter zones by type (simple, vlan, qinq, vxlan, evpn).
func (o GetZonesResultOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetZonesResult) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// List of SDN zones.
func (o GetZonesResultOutput) Zones() GetZonesZoneArrayOutput {
	return o.ApplyT(func(v GetZonesResult) []GetZonesZone { return v.Zones }).(GetZonesZoneArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetZonesResultOutput{})
}

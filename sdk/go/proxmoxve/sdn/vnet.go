// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdn

import (
	"context"
	"reflect"

	"errors"
	"github.com/muhlba91/pulumi-proxmoxve/sdk/v7/go/proxmoxve/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages Proxmox VE SDN VNet.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/muhlba91/pulumi-proxmoxve/sdk/v7/go/proxmoxve/sdn"
//	"github.com/muhlba91/pulumi-proxmoxve/sdk/v7/go/proxmoxve/sdnzone"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			finalizer, err := sdn.NewApplier(ctx, "finalizer", nil)
//			if err != nil {
//				return err
//			}
//			// SDN Zone (Simple) - Basic zone for simple vnets
//			exampleZone1, err := sdnzone.NewSimple(ctx, "exampleZone1", &sdnzone.SimpleArgs{
//				ZoneId: pulumi.String("zone1"),
//				Nodes: pulumi.StringArray{
//					pulumi.String("pve"),
//				},
//				Mtu:        pulumi.Int(1500),
//				Dns:        pulumi.String("1.1.1.1"),
//				DnsZone:    pulumi.String("example.com"),
//				Ipam:       pulumi.String("pve"),
//				ReverseDns: pulumi.String("1.1.1.1"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				finalizer,
//			}))
//			if err != nil {
//				return err
//			}
//			// SDN Zone (Simple) - Second zone for demonstration
//			exampleZone2, err := sdnzone.NewSimple(ctx, "exampleZone2", &sdnzone.SimpleArgs{
//				ZoneId: pulumi.String("zone2"),
//				Nodes: pulumi.StringArray{
//					pulumi.String("pve"),
//				},
//				Mtu: pulumi.Int(1500),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				finalizer,
//			}))
//			if err != nil {
//				return err
//			}
//			// Basic VNet (Simple)
//			basicVnet, err := sdn.NewVnet(ctx, "basicVnet", &sdn.VnetArgs{
//				VnetId: pulumi.String("vnet1"),
//				Zone:   exampleZone1.ZoneId,
//			}, pulumi.DependsOn([]pulumi.Resource{
//				finalizer,
//			}))
//			if err != nil {
//				return err
//			}
//			// VNet with Alias and Port Isolation
//			isolatedVnet, err := sdn.NewVnet(ctx, "isolatedVnet", &sdn.VnetArgs{
//				VnetId:       pulumi.String("vnet2"),
//				Zone:         exampleZone2.ZoneId,
//				Alias:        pulumi.String("Isolated VNet"),
//				IsolatePorts: pulumi.Bool(true),
//				VlanAware:    pulumi.Bool(false),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				finalizer,
//			}))
//			if err != nil {
//				return err
//			}
//			// SDN Applier for all resources
//			_, err = sdn.NewApplier(ctx, "vnetApplier", nil, pulumi.DependsOn([]pulumi.Resource{
//				exampleZone1,
//				exampleZone2,
//				basicVnet,
//				isolatedVnet,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// #!/usr/bin/env sh
//
// SDN vnet can be imported using its unique identifier (vnet ID)
//
// ```sh
// $ pulumi import proxmoxve:Sdn/vnet:Vnet basic_vnet vnet1
// ```
//
// ```sh
// $ pulumi import proxmoxve:Sdn/vnet:Vnet isolated_vnet vnet2
// ```
type Vnet struct {
	pulumi.CustomResourceState

	// An optional alias for this VNet.
	Alias pulumi.StringPtrOutput `pulumi:"alias"`
	// Isolate ports within this VNet.
	IsolatePorts pulumi.BoolPtrOutput `pulumi:"isolatePorts"`
	// Tag value for VLAN/VXLAN (can't be used with other zone types).
	Tag pulumi.IntPtrOutput `pulumi:"tag"`
	// Allow VM VLANs to pass through this VNet.
	VlanAware pulumi.BoolPtrOutput `pulumi:"vlanAware"`
	// The unique identifier of the SDN VNet.
	VnetId pulumi.StringOutput `pulumi:"vnetId"`
	// The zone to which this VNet belongs.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewVnet registers a new resource with the given unique name, arguments, and options.
func NewVnet(ctx *pulumi.Context,
	name string, args *VnetArgs, opts ...pulumi.ResourceOption) (*Vnet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VnetId == nil {
		return nil, errors.New("invalid value for required argument 'VnetId'")
	}
	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Vnet
	err := ctx.RegisterResource("proxmoxve:Sdn/vnet:Vnet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVnet gets an existing Vnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVnet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VnetState, opts ...pulumi.ResourceOption) (*Vnet, error) {
	var resource Vnet
	err := ctx.ReadResource("proxmoxve:Sdn/vnet:Vnet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vnet resources.
type vnetState struct {
	// An optional alias for this VNet.
	Alias *string `pulumi:"alias"`
	// Isolate ports within this VNet.
	IsolatePorts *bool `pulumi:"isolatePorts"`
	// Tag value for VLAN/VXLAN (can't be used with other zone types).
	Tag *int `pulumi:"tag"`
	// Allow VM VLANs to pass through this VNet.
	VlanAware *bool `pulumi:"vlanAware"`
	// The unique identifier of the SDN VNet.
	VnetId *string `pulumi:"vnetId"`
	// The zone to which this VNet belongs.
	Zone *string `pulumi:"zone"`
}

type VnetState struct {
	// An optional alias for this VNet.
	Alias pulumi.StringPtrInput
	// Isolate ports within this VNet.
	IsolatePorts pulumi.BoolPtrInput
	// Tag value for VLAN/VXLAN (can't be used with other zone types).
	Tag pulumi.IntPtrInput
	// Allow VM VLANs to pass through this VNet.
	VlanAware pulumi.BoolPtrInput
	// The unique identifier of the SDN VNet.
	VnetId pulumi.StringPtrInput
	// The zone to which this VNet belongs.
	Zone pulumi.StringPtrInput
}

func (VnetState) ElementType() reflect.Type {
	return reflect.TypeOf((*vnetState)(nil)).Elem()
}

type vnetArgs struct {
	// An optional alias for this VNet.
	Alias *string `pulumi:"alias"`
	// Isolate ports within this VNet.
	IsolatePorts *bool `pulumi:"isolatePorts"`
	// Tag value for VLAN/VXLAN (can't be used with other zone types).
	Tag *int `pulumi:"tag"`
	// Allow VM VLANs to pass through this VNet.
	VlanAware *bool `pulumi:"vlanAware"`
	// The unique identifier of the SDN VNet.
	VnetId string `pulumi:"vnetId"`
	// The zone to which this VNet belongs.
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a Vnet resource.
type VnetArgs struct {
	// An optional alias for this VNet.
	Alias pulumi.StringPtrInput
	// Isolate ports within this VNet.
	IsolatePorts pulumi.BoolPtrInput
	// Tag value for VLAN/VXLAN (can't be used with other zone types).
	Tag pulumi.IntPtrInput
	// Allow VM VLANs to pass through this VNet.
	VlanAware pulumi.BoolPtrInput
	// The unique identifier of the SDN VNet.
	VnetId pulumi.StringInput
	// The zone to which this VNet belongs.
	Zone pulumi.StringInput
}

func (VnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vnetArgs)(nil)).Elem()
}

type VnetInput interface {
	pulumi.Input

	ToVnetOutput() VnetOutput
	ToVnetOutputWithContext(ctx context.Context) VnetOutput
}

func (*Vnet) ElementType() reflect.Type {
	return reflect.TypeOf((**Vnet)(nil)).Elem()
}

func (i *Vnet) ToVnetOutput() VnetOutput {
	return i.ToVnetOutputWithContext(context.Background())
}

func (i *Vnet) ToVnetOutputWithContext(ctx context.Context) VnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VnetOutput)
}

// VnetArrayInput is an input type that accepts VnetArray and VnetArrayOutput values.
// You can construct a concrete instance of `VnetArrayInput` via:
//
//	VnetArray{ VnetArgs{...} }
type VnetArrayInput interface {
	pulumi.Input

	ToVnetArrayOutput() VnetArrayOutput
	ToVnetArrayOutputWithContext(context.Context) VnetArrayOutput
}

type VnetArray []VnetInput

func (VnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vnet)(nil)).Elem()
}

func (i VnetArray) ToVnetArrayOutput() VnetArrayOutput {
	return i.ToVnetArrayOutputWithContext(context.Background())
}

func (i VnetArray) ToVnetArrayOutputWithContext(ctx context.Context) VnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VnetArrayOutput)
}

// VnetMapInput is an input type that accepts VnetMap and VnetMapOutput values.
// You can construct a concrete instance of `VnetMapInput` via:
//
//	VnetMap{ "key": VnetArgs{...} }
type VnetMapInput interface {
	pulumi.Input

	ToVnetMapOutput() VnetMapOutput
	ToVnetMapOutputWithContext(context.Context) VnetMapOutput
}

type VnetMap map[string]VnetInput

func (VnetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vnet)(nil)).Elem()
}

func (i VnetMap) ToVnetMapOutput() VnetMapOutput {
	return i.ToVnetMapOutputWithContext(context.Background())
}

func (i VnetMap) ToVnetMapOutputWithContext(ctx context.Context) VnetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VnetMapOutput)
}

type VnetOutput struct{ *pulumi.OutputState }

func (VnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vnet)(nil)).Elem()
}

func (o VnetOutput) ToVnetOutput() VnetOutput {
	return o
}

func (o VnetOutput) ToVnetOutputWithContext(ctx context.Context) VnetOutput {
	return o
}

// An optional alias for this VNet.
func (o VnetOutput) Alias() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vnet) pulumi.StringPtrOutput { return v.Alias }).(pulumi.StringPtrOutput)
}

// Isolate ports within this VNet.
func (o VnetOutput) IsolatePorts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Vnet) pulumi.BoolPtrOutput { return v.IsolatePorts }).(pulumi.BoolPtrOutput)
}

// Tag value for VLAN/VXLAN (can't be used with other zone types).
func (o VnetOutput) Tag() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Vnet) pulumi.IntPtrOutput { return v.Tag }).(pulumi.IntPtrOutput)
}

// Allow VM VLANs to pass through this VNet.
func (o VnetOutput) VlanAware() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Vnet) pulumi.BoolPtrOutput { return v.VlanAware }).(pulumi.BoolPtrOutput)
}

// The unique identifier of the SDN VNet.
func (o VnetOutput) VnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Vnet) pulumi.StringOutput { return v.VnetId }).(pulumi.StringOutput)
}

// The zone to which this VNet belongs.
func (o VnetOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *Vnet) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type VnetArrayOutput struct{ *pulumi.OutputState }

func (VnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vnet)(nil)).Elem()
}

func (o VnetArrayOutput) ToVnetArrayOutput() VnetArrayOutput {
	return o
}

func (o VnetArrayOutput) ToVnetArrayOutputWithContext(ctx context.Context) VnetArrayOutput {
	return o
}

func (o VnetArrayOutput) Index(i pulumi.IntInput) VnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Vnet {
		return vs[0].([]*Vnet)[vs[1].(int)]
	}).(VnetOutput)
}

type VnetMapOutput struct{ *pulumi.OutputState }

func (VnetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vnet)(nil)).Elem()
}

func (o VnetMapOutput) ToVnetMapOutput() VnetMapOutput {
	return o
}

func (o VnetMapOutput) ToVnetMapOutputWithContext(ctx context.Context) VnetMapOutput {
	return o
}

func (o VnetMapOutput) MapIndex(k pulumi.StringInput) VnetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Vnet {
		return vs[0].(map[string]*Vnet)[vs[1].(string)]
	}).(VnetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VnetInput)(nil)).Elem(), &Vnet{})
	pulumi.RegisterInputType(reflect.TypeOf((*VnetArrayInput)(nil)).Elem(), VnetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VnetMapInput)(nil)).Elem(), VnetMap{})
	pulumi.RegisterOutputType(VnetOutput{})
	pulumi.RegisterOutputType(VnetArrayOutput{})
	pulumi.RegisterOutputType(VnetMapOutput{})
}

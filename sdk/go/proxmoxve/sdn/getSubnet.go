// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdn

import (
	"context"
	"reflect"

	"github.com/muhlba91/pulumi-proxmoxve/sdk/v7/go/proxmoxve/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieve details about a specific SDN Subnet in Proxmox VE.
func LookupSubnet(ctx *pulumi.Context, args *LookupSubnetArgs, opts ...pulumi.InvokeOption) (*LookupSubnetResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSubnetResult
	err := ctx.Invoke("proxmoxve:Sdn/getSubnet:getSubnet", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSubnet.
type LookupSubnetArgs struct {
	// A CIDR network address, for example 10.0.0.0/8
	Cidr string `pulumi:"cidr"`
	// DHCP range (start and end IPs).
	DhcpRange *GetSubnetDhcpRange `pulumi:"dhcpRange"`
	// The VNet this subnet belongs to.
	Vnet string `pulumi:"vnet"`
}

// A collection of values returned by getSubnet.
type LookupSubnetResult struct {
	// A CIDR network address, for example 10.0.0.0/8
	Cidr string `pulumi:"cidr"`
	// The DNS server used for DHCP.
	DhcpDnsServer string `pulumi:"dhcpDnsServer"`
	// DHCP range (start and end IPs).
	DhcpRange GetSubnetDhcpRange `pulumi:"dhcpRange"`
	// Prefix used for DNS zone delegation.
	DnsZonePrefix string `pulumi:"dnsZonePrefix"`
	// The gateway address for the subnet.
	Gateway string `pulumi:"gateway"`
	// The full ID in the format 'vnet-id/subnet-id'.
	Id string `pulumi:"id"`
	// Whether SNAT is enabled for the subnet.
	Snat bool `pulumi:"snat"`
	// The VNet this subnet belongs to.
	Vnet string `pulumi:"vnet"`
}

func LookupSubnetOutput(ctx *pulumi.Context, args LookupSubnetOutputArgs, opts ...pulumi.InvokeOption) LookupSubnetResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSubnetResultOutput, error) {
			args := v.(LookupSubnetArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("proxmoxve:Sdn/getSubnet:getSubnet", args, LookupSubnetResultOutput{}, options).(LookupSubnetResultOutput), nil
		}).(LookupSubnetResultOutput)
}

// A collection of arguments for invoking getSubnet.
type LookupSubnetOutputArgs struct {
	// A CIDR network address, for example 10.0.0.0/8
	Cidr pulumi.StringInput `pulumi:"cidr"`
	// DHCP range (start and end IPs).
	DhcpRange GetSubnetDhcpRangePtrInput `pulumi:"dhcpRange"`
	// The VNet this subnet belongs to.
	Vnet pulumi.StringInput `pulumi:"vnet"`
}

func (LookupSubnetOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubnetArgs)(nil)).Elem()
}

// A collection of values returned by getSubnet.
type LookupSubnetResultOutput struct{ *pulumi.OutputState }

func (LookupSubnetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubnetResult)(nil)).Elem()
}

func (o LookupSubnetResultOutput) ToLookupSubnetResultOutput() LookupSubnetResultOutput {
	return o
}

func (o LookupSubnetResultOutput) ToLookupSubnetResultOutputWithContext(ctx context.Context) LookupSubnetResultOutput {
	return o
}

// A CIDR network address, for example 10.0.0.0/8
func (o LookupSubnetResultOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Cidr }).(pulumi.StringOutput)
}

// The DNS server used for DHCP.
func (o LookupSubnetResultOutput) DhcpDnsServer() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.DhcpDnsServer }).(pulumi.StringOutput)
}

// DHCP range (start and end IPs).
func (o LookupSubnetResultOutput) DhcpRange() GetSubnetDhcpRangeOutput {
	return o.ApplyT(func(v LookupSubnetResult) GetSubnetDhcpRange { return v.DhcpRange }).(GetSubnetDhcpRangeOutput)
}

// Prefix used for DNS zone delegation.
func (o LookupSubnetResultOutput) DnsZonePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.DnsZonePrefix }).(pulumi.StringOutput)
}

// The gateway address for the subnet.
func (o LookupSubnetResultOutput) Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Gateway }).(pulumi.StringOutput)
}

// The full ID in the format 'vnet-id/subnet-id'.
func (o LookupSubnetResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Id }).(pulumi.StringOutput)
}

// Whether SNAT is enabled for the subnet.
func (o LookupSubnetResultOutput) Snat() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSubnetResult) bool { return v.Snat }).(pulumi.BoolOutput)
}

// The VNet this subnet belongs to.
func (o LookupSubnetResultOutput) Vnet() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Vnet }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSubnetResultOutput{})
}

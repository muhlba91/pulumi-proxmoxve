// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdn

import (
	"context"
	"reflect"

	"errors"
	"github.com/muhlba91/pulumi-proxmoxve/sdk/v7/go/proxmoxve/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages SDN Subnets in Proxmox VE.
//
// ## Import
//
// #!/usr/bin/env sh
//
// SDN subnet can be imported using its unique identifier in the format: <vnet>/<subnet-id>
//
// The <subnet-id> is the canonical ID from Proxmox, e.g., "zone1-192.168.1.0-24"
//
// ```sh
// $ pulumi import proxmoxve:Sdn/subnet:Subnet basic_subnet vnet1/zone1-192.168.1.0-24
// ```
//
// ```sh
// $ pulumi import proxmoxve:Sdn/subnet:Subnet dhcp_subnet vnet2/zone2-192.168.2.0-24
// ```
type Subnet struct {
	pulumi.CustomResourceState

	// A CIDR network address, for example 10.0.0.0/8
	Cidr pulumi.StringOutput `pulumi:"cidr"`
	// The DNS server used for DHCP.
	DhcpDnsServer pulumi.StringPtrOutput `pulumi:"dhcpDnsServer"`
	// DHCP range (start and end IPs).
	DhcpRange SubnetDhcpRangePtrOutput `pulumi:"dhcpRange"`
	// Prefix used for DNS zone delegation.
	DnsZonePrefix pulumi.StringPtrOutput `pulumi:"dnsZonePrefix"`
	// The gateway address for the subnet.
	Gateway pulumi.StringPtrOutput `pulumi:"gateway"`
	// Whether SNAT is enabled for the subnet.
	Snat pulumi.BoolPtrOutput `pulumi:"snat"`
	// The VNet to which this subnet belongs.
	Vnet pulumi.StringOutput `pulumi:"vnet"`
}

// NewSubnet registers a new resource with the given unique name, arguments, and options.
func NewSubnet(ctx *pulumi.Context,
	name string, args *SubnetArgs, opts ...pulumi.ResourceOption) (*Subnet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cidr == nil {
		return nil, errors.New("invalid value for required argument 'Cidr'")
	}
	if args.Vnet == nil {
		return nil, errors.New("invalid value for required argument 'Vnet'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Subnet
	err := ctx.RegisterResource("proxmoxve:Sdn/subnet:Subnet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubnet gets an existing Subnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubnet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubnetState, opts ...pulumi.ResourceOption) (*Subnet, error) {
	var resource Subnet
	err := ctx.ReadResource("proxmoxve:Sdn/subnet:Subnet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Subnet resources.
type subnetState struct {
	// A CIDR network address, for example 10.0.0.0/8
	Cidr *string `pulumi:"cidr"`
	// The DNS server used for DHCP.
	DhcpDnsServer *string `pulumi:"dhcpDnsServer"`
	// DHCP range (start and end IPs).
	DhcpRange *SubnetDhcpRange `pulumi:"dhcpRange"`
	// Prefix used for DNS zone delegation.
	DnsZonePrefix *string `pulumi:"dnsZonePrefix"`
	// The gateway address for the subnet.
	Gateway *string `pulumi:"gateway"`
	// Whether SNAT is enabled for the subnet.
	Snat *bool `pulumi:"snat"`
	// The VNet to which this subnet belongs.
	Vnet *string `pulumi:"vnet"`
}

type SubnetState struct {
	// A CIDR network address, for example 10.0.0.0/8
	Cidr pulumi.StringPtrInput
	// The DNS server used for DHCP.
	DhcpDnsServer pulumi.StringPtrInput
	// DHCP range (start and end IPs).
	DhcpRange SubnetDhcpRangePtrInput
	// Prefix used for DNS zone delegation.
	DnsZonePrefix pulumi.StringPtrInput
	// The gateway address for the subnet.
	Gateway pulumi.StringPtrInput
	// Whether SNAT is enabled for the subnet.
	Snat pulumi.BoolPtrInput
	// The VNet to which this subnet belongs.
	Vnet pulumi.StringPtrInput
}

func (SubnetState) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetState)(nil)).Elem()
}

type subnetArgs struct {
	// A CIDR network address, for example 10.0.0.0/8
	Cidr string `pulumi:"cidr"`
	// The DNS server used for DHCP.
	DhcpDnsServer *string `pulumi:"dhcpDnsServer"`
	// DHCP range (start and end IPs).
	DhcpRange *SubnetDhcpRange `pulumi:"dhcpRange"`
	// Prefix used for DNS zone delegation.
	DnsZonePrefix *string `pulumi:"dnsZonePrefix"`
	// The gateway address for the subnet.
	Gateway *string `pulumi:"gateway"`
	// Whether SNAT is enabled for the subnet.
	Snat *bool `pulumi:"snat"`
	// The VNet to which this subnet belongs.
	Vnet string `pulumi:"vnet"`
}

// The set of arguments for constructing a Subnet resource.
type SubnetArgs struct {
	// A CIDR network address, for example 10.0.0.0/8
	Cidr pulumi.StringInput
	// The DNS server used for DHCP.
	DhcpDnsServer pulumi.StringPtrInput
	// DHCP range (start and end IPs).
	DhcpRange SubnetDhcpRangePtrInput
	// Prefix used for DNS zone delegation.
	DnsZonePrefix pulumi.StringPtrInput
	// The gateway address for the subnet.
	Gateway pulumi.StringPtrInput
	// Whether SNAT is enabled for the subnet.
	Snat pulumi.BoolPtrInput
	// The VNet to which this subnet belongs.
	Vnet pulumi.StringInput
}

func (SubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetArgs)(nil)).Elem()
}

type SubnetInput interface {
	pulumi.Input

	ToSubnetOutput() SubnetOutput
	ToSubnetOutputWithContext(ctx context.Context) SubnetOutput
}

func (*Subnet) ElementType() reflect.Type {
	return reflect.TypeOf((**Subnet)(nil)).Elem()
}

func (i *Subnet) ToSubnetOutput() SubnetOutput {
	return i.ToSubnetOutputWithContext(context.Background())
}

func (i *Subnet) ToSubnetOutputWithContext(ctx context.Context) SubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetOutput)
}

// SubnetArrayInput is an input type that accepts SubnetArray and SubnetArrayOutput values.
// You can construct a concrete instance of `SubnetArrayInput` via:
//
//	SubnetArray{ SubnetArgs{...} }
type SubnetArrayInput interface {
	pulumi.Input

	ToSubnetArrayOutput() SubnetArrayOutput
	ToSubnetArrayOutputWithContext(context.Context) SubnetArrayOutput
}

type SubnetArray []SubnetInput

func (SubnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Subnet)(nil)).Elem()
}

func (i SubnetArray) ToSubnetArrayOutput() SubnetArrayOutput {
	return i.ToSubnetArrayOutputWithContext(context.Background())
}

func (i SubnetArray) ToSubnetArrayOutputWithContext(ctx context.Context) SubnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetArrayOutput)
}

// SubnetMapInput is an input type that accepts SubnetMap and SubnetMapOutput values.
// You can construct a concrete instance of `SubnetMapInput` via:
//
//	SubnetMap{ "key": SubnetArgs{...} }
type SubnetMapInput interface {
	pulumi.Input

	ToSubnetMapOutput() SubnetMapOutput
	ToSubnetMapOutputWithContext(context.Context) SubnetMapOutput
}

type SubnetMap map[string]SubnetInput

func (SubnetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Subnet)(nil)).Elem()
}

func (i SubnetMap) ToSubnetMapOutput() SubnetMapOutput {
	return i.ToSubnetMapOutputWithContext(context.Background())
}

func (i SubnetMap) ToSubnetMapOutputWithContext(ctx context.Context) SubnetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetMapOutput)
}

type SubnetOutput struct{ *pulumi.OutputState }

func (SubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Subnet)(nil)).Elem()
}

func (o SubnetOutput) ToSubnetOutput() SubnetOutput {
	return o
}

func (o SubnetOutput) ToSubnetOutputWithContext(ctx context.Context) SubnetOutput {
	return o
}

// A CIDR network address, for example 10.0.0.0/8
func (o SubnetOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.Cidr }).(pulumi.StringOutput)
}

// The DNS server used for DHCP.
func (o SubnetOutput) DhcpDnsServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.DhcpDnsServer }).(pulumi.StringPtrOutput)
}

// DHCP range (start and end IPs).
func (o SubnetOutput) DhcpRange() SubnetDhcpRangePtrOutput {
	return o.ApplyT(func(v *Subnet) SubnetDhcpRangePtrOutput { return v.DhcpRange }).(SubnetDhcpRangePtrOutput)
}

// Prefix used for DNS zone delegation.
func (o SubnetOutput) DnsZonePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.DnsZonePrefix }).(pulumi.StringPtrOutput)
}

// The gateway address for the subnet.
func (o SubnetOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.Gateway }).(pulumi.StringPtrOutput)
}

// Whether SNAT is enabled for the subnet.
func (o SubnetOutput) Snat() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolPtrOutput { return v.Snat }).(pulumi.BoolPtrOutput)
}

// The VNet to which this subnet belongs.
func (o SubnetOutput) Vnet() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.Vnet }).(pulumi.StringOutput)
}

type SubnetArrayOutput struct{ *pulumi.OutputState }

func (SubnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Subnet)(nil)).Elem()
}

func (o SubnetArrayOutput) ToSubnetArrayOutput() SubnetArrayOutput {
	return o
}

func (o SubnetArrayOutput) ToSubnetArrayOutputWithContext(ctx context.Context) SubnetArrayOutput {
	return o
}

func (o SubnetArrayOutput) Index(i pulumi.IntInput) SubnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Subnet {
		return vs[0].([]*Subnet)[vs[1].(int)]
	}).(SubnetOutput)
}

type SubnetMapOutput struct{ *pulumi.OutputState }

func (SubnetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Subnet)(nil)).Elem()
}

func (o SubnetMapOutput) ToSubnetMapOutput() SubnetMapOutput {
	return o
}

func (o SubnetMapOutput) ToSubnetMapOutputWithContext(ctx context.Context) SubnetMapOutput {
	return o
}

func (o SubnetMapOutput) MapIndex(k pulumi.StringInput) SubnetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Subnet {
		return vs[0].(map[string]*Subnet)[vs[1].(string)]
	}).(SubnetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetInput)(nil)).Elem(), &Subnet{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetArrayInput)(nil)).Elem(), SubnetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetMapInput)(nil)).Elem(), SubnetMap{})
	pulumi.RegisterOutputType(SubnetOutput{})
	pulumi.RegisterOutputType(SubnetArrayOutput{})
	pulumi.RegisterOutputType(SubnetMapOutput{})
}

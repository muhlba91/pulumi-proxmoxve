// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdn

import (
	"context"
	"reflect"

	"github.com/muhlba91/pulumi-proxmoxve/sdk/v7/go/proxmoxve/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// **EXPERIMENTAL** Triggers Proxmox's SDN **Apply** (equivalent to `PUT /cluster/sdn`).Intended to be used with `replaceTriggeredBy` so it runs after SDN objects change.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/muhlba91/pulumi-proxmoxve/sdk/v7/go/proxmoxve/sdn"
//	"github.com/muhlba91/pulumi-proxmoxve/sdk/v7/go/proxmoxve/sdnzone"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			finalizer, err := sdn.NewApplier(ctx, "finalizer", nil)
//			if err != nil {
//				return err
//			}
//			// SDN Zone (Simple) - First zone for applier demonstration
//			exampleZone1, err := sdnzone.NewSimple(ctx, "exampleZone1", &sdnzone.SimpleArgs{
//				ZoneId: pulumi.String("zone1"),
//				Nodes: pulumi.StringArray{
//					pulumi.String("pve"),
//				},
//				Mtu:        pulumi.Int(1500),
//				Dns:        pulumi.String("1.1.1.1"),
//				DnsZone:    pulumi.String("example.com"),
//				Ipam:       pulumi.String("pve"),
//				ReverseDns: pulumi.String("1.1.1.1"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				finalizer,
//			}))
//			if err != nil {
//				return err
//			}
//			// SDN Zone (Simple) - Second zone for applier demonstration
//			exampleZone2, err := sdnzone.NewSimple(ctx, "exampleZone2", &sdnzone.SimpleArgs{
//				ZoneId: pulumi.String("zone2"),
//				Nodes: pulumi.StringArray{
//					pulumi.String("pve"),
//				},
//				Mtu: pulumi.Int(1500),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				finalizer,
//			}))
//			if err != nil {
//				return err
//			}
//			// SDN Applier - Applies SDN configuration changes
//			_, err = sdn.NewApplier(ctx, "exampleApplier", nil, pulumi.DependsOn([]pulumi.Resource{
//				exampleZone1,
//				exampleZone2,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Applier struct {
	pulumi.CustomResourceState
}

// NewApplier registers a new resource with the given unique name, arguments, and options.
func NewApplier(ctx *pulumi.Context,
	name string, args *ApplierArgs, opts ...pulumi.ResourceOption) (*Applier, error) {
	if args == nil {
		args = &ApplierArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Applier
	err := ctx.RegisterResource("proxmoxve:Sdn/applier:Applier", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplier gets an existing Applier resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplier(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplierState, opts ...pulumi.ResourceOption) (*Applier, error) {
	var resource Applier
	err := ctx.ReadResource("proxmoxve:Sdn/applier:Applier", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Applier resources.
type applierState struct {
}

type ApplierState struct {
}

func (ApplierState) ElementType() reflect.Type {
	return reflect.TypeOf((*applierState)(nil)).Elem()
}

type applierArgs struct {
}

// The set of arguments for constructing a Applier resource.
type ApplierArgs struct {
}

func (ApplierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applierArgs)(nil)).Elem()
}

type ApplierInput interface {
	pulumi.Input

	ToApplierOutput() ApplierOutput
	ToApplierOutputWithContext(ctx context.Context) ApplierOutput
}

func (*Applier) ElementType() reflect.Type {
	return reflect.TypeOf((**Applier)(nil)).Elem()
}

func (i *Applier) ToApplierOutput() ApplierOutput {
	return i.ToApplierOutputWithContext(context.Background())
}

func (i *Applier) ToApplierOutputWithContext(ctx context.Context) ApplierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplierOutput)
}

// ApplierArrayInput is an input type that accepts ApplierArray and ApplierArrayOutput values.
// You can construct a concrete instance of `ApplierArrayInput` via:
//
//	ApplierArray{ ApplierArgs{...} }
type ApplierArrayInput interface {
	pulumi.Input

	ToApplierArrayOutput() ApplierArrayOutput
	ToApplierArrayOutputWithContext(context.Context) ApplierArrayOutput
}

type ApplierArray []ApplierInput

func (ApplierArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Applier)(nil)).Elem()
}

func (i ApplierArray) ToApplierArrayOutput() ApplierArrayOutput {
	return i.ToApplierArrayOutputWithContext(context.Background())
}

func (i ApplierArray) ToApplierArrayOutputWithContext(ctx context.Context) ApplierArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplierArrayOutput)
}

// ApplierMapInput is an input type that accepts ApplierMap and ApplierMapOutput values.
// You can construct a concrete instance of `ApplierMapInput` via:
//
//	ApplierMap{ "key": ApplierArgs{...} }
type ApplierMapInput interface {
	pulumi.Input

	ToApplierMapOutput() ApplierMapOutput
	ToApplierMapOutputWithContext(context.Context) ApplierMapOutput
}

type ApplierMap map[string]ApplierInput

func (ApplierMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Applier)(nil)).Elem()
}

func (i ApplierMap) ToApplierMapOutput() ApplierMapOutput {
	return i.ToApplierMapOutputWithContext(context.Background())
}

func (i ApplierMap) ToApplierMapOutputWithContext(ctx context.Context) ApplierMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplierMapOutput)
}

type ApplierOutput struct{ *pulumi.OutputState }

func (ApplierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Applier)(nil)).Elem()
}

func (o ApplierOutput) ToApplierOutput() ApplierOutput {
	return o
}

func (o ApplierOutput) ToApplierOutputWithContext(ctx context.Context) ApplierOutput {
	return o
}

type ApplierArrayOutput struct{ *pulumi.OutputState }

func (ApplierArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Applier)(nil)).Elem()
}

func (o ApplierArrayOutput) ToApplierArrayOutput() ApplierArrayOutput {
	return o
}

func (o ApplierArrayOutput) ToApplierArrayOutputWithContext(ctx context.Context) ApplierArrayOutput {
	return o
}

func (o ApplierArrayOutput) Index(i pulumi.IntInput) ApplierOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Applier {
		return vs[0].([]*Applier)[vs[1].(int)]
	}).(ApplierOutput)
}

type ApplierMapOutput struct{ *pulumi.OutputState }

func (ApplierMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Applier)(nil)).Elem()
}

func (o ApplierMapOutput) ToApplierMapOutput() ApplierMapOutput {
	return o
}

func (o ApplierMapOutput) ToApplierMapOutputWithContext(ctx context.Context) ApplierMapOutput {
	return o
}

func (o ApplierMapOutput) MapIndex(k pulumi.StringInput) ApplierOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Applier {
		return vs[0].(map[string]*Applier)[vs[1].(string)]
	}).(ApplierOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplierInput)(nil)).Elem(), &Applier{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplierArrayInput)(nil)).Elem(), ApplierArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplierMapInput)(nil)).Elem(), ApplierMap{})
	pulumi.RegisterOutputType(ApplierOutput{})
	pulumi.RegisterOutputType(ApplierArrayOutput{})
	pulumi.RegisterOutputType(ApplierMapOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package proxmoxve

import (
	"context"
	"reflect"

	"github.com/muhlba91/pulumi-proxmoxve/sdk/v7/go/proxmoxve/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves information about all containers in the Proxmox cluster.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/muhlba91/pulumi-proxmoxve/sdk/v7/go/proxmoxve"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := proxmoxve.GetContainers(ctx, &proxmoxve.GetContainersArgs{
//				Tags: []string{
//					"ubuntu",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = proxmoxve.GetContainers(ctx, &proxmoxve.GetContainersArgs{
//				Filters: []proxmoxve.GetContainersFilter{
//					{
//						Name: "template",
//						Values: []string{
//							"true",
//						},
//					},
//					{
//						Name: "status",
//						Values: []string{
//							"stopped",
//						},
//					},
//					{
//						Name:  "name",
//						Regex: pulumi.BoolRef(true),
//						Values: []string{
//							"^ubuntu-20.*$",
//						},
//					},
//					{
//						Name:  "node_name",
//						Regex: pulumi.BoolRef(true),
//						Values: []string{
//							"node_us_[1-3]",
//							"node_eu_[1-3]",
//						},
//					},
//				},
//				Tags: []string{
//					"template",
//					"latest",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetContainers(ctx *pulumi.Context, args *GetContainersArgs, opts ...pulumi.InvokeOption) (*GetContainersResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetContainersResult
	err := ctx.Invoke("proxmoxve:index/getContainers:getContainers", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getContainers.
type GetContainersArgs struct {
	// Filter blocks. The container must satisfy all filter blocks to be included in the result.
	Filters []GetContainersFilter `pulumi:"filters"`
	// The node name. All cluster nodes will be queried in case this is omitted
	NodeName *string `pulumi:"nodeName"`
	// A list of tags to filter the containers. The container must have all
	// the tags to be included in the result.
	Tags []string `pulumi:"tags"`
}

// A collection of values returned by getContainers.
type GetContainersResult struct {
	// The containers list.
	Containers []GetContainersContainer `pulumi:"containers"`
	Filters    []GetContainersFilter    `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The node name.
	NodeName *string `pulumi:"nodeName"`
	// A list of tags of the container.
	Tags []string `pulumi:"tags"`
}

func GetContainersOutput(ctx *pulumi.Context, args GetContainersOutputArgs, opts ...pulumi.InvokeOption) GetContainersResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetContainersResultOutput, error) {
			args := v.(GetContainersArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("proxmoxve:index/getContainers:getContainers", args, GetContainersResultOutput{}, options).(GetContainersResultOutput), nil
		}).(GetContainersResultOutput)
}

// A collection of arguments for invoking getContainers.
type GetContainersOutputArgs struct {
	// Filter blocks. The container must satisfy all filter blocks to be included in the result.
	Filters GetContainersFilterArrayInput `pulumi:"filters"`
	// The node name. All cluster nodes will be queried in case this is omitted
	NodeName pulumi.StringPtrInput `pulumi:"nodeName"`
	// A list of tags to filter the containers. The container must have all
	// the tags to be included in the result.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
}

func (GetContainersOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainersArgs)(nil)).Elem()
}

// A collection of values returned by getContainers.
type GetContainersResultOutput struct{ *pulumi.OutputState }

func (GetContainersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainersResult)(nil)).Elem()
}

func (o GetContainersResultOutput) ToGetContainersResultOutput() GetContainersResultOutput {
	return o
}

func (o GetContainersResultOutput) ToGetContainersResultOutputWithContext(ctx context.Context) GetContainersResultOutput {
	return o
}

// The containers list.
func (o GetContainersResultOutput) Containers() GetContainersContainerArrayOutput {
	return o.ApplyT(func(v GetContainersResult) []GetContainersContainer { return v.Containers }).(GetContainersContainerArrayOutput)
}

func (o GetContainersResultOutput) Filters() GetContainersFilterArrayOutput {
	return o.ApplyT(func(v GetContainersResult) []GetContainersFilter { return v.Filters }).(GetContainersFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetContainersResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainersResult) string { return v.Id }).(pulumi.StringOutput)
}

// The node name.
func (o GetContainersResultOutput) NodeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetContainersResult) *string { return v.NodeName }).(pulumi.StringPtrOutput)
}

// A list of tags of the container.
func (o GetContainersResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetContainersResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetContainersResultOutput{})
}

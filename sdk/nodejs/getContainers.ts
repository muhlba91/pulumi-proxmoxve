// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Retrieves information about all containers in the Proxmox cluster.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as proxmoxve from "@muhlba91/pulumi-proxmoxve";
 *
 * const ubuntuContainers = proxmoxve.getContainers({
 *     tags: ["ubuntu"],
 * });
 * const ubuntuTemplates = proxmoxve.getContainers({
 *     filters: [
 *         {
 *             name: "template",
 *             values: ["true"],
 *         },
 *         {
 *             name: "status",
 *             values: ["stopped"],
 *         },
 *         {
 *             name: "name",
 *             regex: true,
 *             values: ["^ubuntu-20.*$"],
 *         },
 *         {
 *             name: "node_name",
 *             regex: true,
 *             values: [
 *                 "node_us_[1-3]",
 *                 "node_eu_[1-3]",
 *             ],
 *         },
 *     ],
 *     tags: [
 *         "template",
 *         "latest",
 *     ],
 * });
 * ```
 */
export function getContainers(args?: GetContainersArgs, opts?: pulumi.InvokeOptions): Promise<GetContainersResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("proxmoxve:index/getContainers:getContainers", {
        "filters": args.filters,
        "nodeName": args.nodeName,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getContainers.
 */
export interface GetContainersArgs {
    /**
     * Filter blocks. The container must satisfy all filter blocks to be included in the result.
     */
    filters?: inputs.GetContainersFilter[];
    /**
     * The node name. All cluster nodes will be queried in case this is omitted
     */
    nodeName?: string;
    /**
     * A list of tags to filter the containers. The container must have all
     * the tags to be included in the result.
     */
    tags?: string[];
}

/**
 * A collection of values returned by getContainers.
 */
export interface GetContainersResult {
    /**
     * The containers list.
     */
    readonly containers: outputs.GetContainersContainer[];
    readonly filters?: outputs.GetContainersFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The node name.
     */
    readonly nodeName?: string;
    /**
     * A list of tags of the container.
     */
    readonly tags?: string[];
}
/**
 * Retrieves information about all containers in the Proxmox cluster.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as proxmoxve from "@muhlba91/pulumi-proxmoxve";
 *
 * const ubuntuContainers = proxmoxve.getContainers({
 *     tags: ["ubuntu"],
 * });
 * const ubuntuTemplates = proxmoxve.getContainers({
 *     filters: [
 *         {
 *             name: "template",
 *             values: ["true"],
 *         },
 *         {
 *             name: "status",
 *             values: ["stopped"],
 *         },
 *         {
 *             name: "name",
 *             regex: true,
 *             values: ["^ubuntu-20.*$"],
 *         },
 *         {
 *             name: "node_name",
 *             regex: true,
 *             values: [
 *                 "node_us_[1-3]",
 *                 "node_eu_[1-3]",
 *             ],
 *         },
 *     ],
 *     tags: [
 *         "template",
 *         "latest",
 *     ],
 * });
 * ```
 */
export function getContainersOutput(args?: GetContainersOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetContainersResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("proxmoxve:index/getContainers:getContainers", {
        "filters": args.filters,
        "nodeName": args.nodeName,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getContainers.
 */
export interface GetContainersOutputArgs {
    /**
     * Filter blocks. The container must satisfy all filter blocks to be included in the result.
     */
    filters?: pulumi.Input<pulumi.Input<inputs.GetContainersFilterArgs>[]>;
    /**
     * The node name. All cluster nodes will be queried in case this is omitted
     */
    nodeName?: pulumi.Input<string>;
    /**
     * A list of tags to filter the containers. The container must have all
     * the tags to be included in the result.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

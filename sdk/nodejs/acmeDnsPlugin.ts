// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manages an ACME plugin in a Proxmox VE cluster.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as proxmoxve from "@muhlba91/pulumi-proxmoxve";
 *
 * const example = new proxmoxve.AcmeDnsPlugin("example", {
 *     api: "aws",
 *     data: {
 *         AWS_ACCESS_KEY_ID: "EXAMPLE",
 *         AWS_SECRET_ACCESS_KEY: "EXAMPLE",
 *     },
 *     plugin: "test",
 * });
 * ```
 *
 * ## Import
 *
 * #!/usr/bin/env sh
 *
 * ACME accounts can be imported using their name, e.g.:
 *
 * ```sh
 * $ pulumi import proxmoxve:index/acmeDnsPlugin:AcmeDnsPlugin example test
 * ```
 */
export class AcmeDnsPlugin extends pulumi.CustomResource {
    /**
     * Get an existing AcmeDnsPlugin resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AcmeDnsPluginState, opts?: pulumi.CustomResourceOptions): AcmeDnsPlugin {
        return new AcmeDnsPlugin(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'proxmoxve:index/acmeDnsPlugin:AcmeDnsPlugin';

    /**
     * Returns true if the given object is an instance of AcmeDnsPlugin.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AcmeDnsPlugin {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AcmeDnsPlugin.__pulumiType;
    }

    /**
     * API plugin name.
     */
    declare public readonly api: pulumi.Output<string>;
    /**
     * DNS plugin data.
     */
    declare public readonly data: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * SHA1 digest of the current configuration. Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.
     */
    declare public readonly digest: pulumi.Output<string>;
    /**
     * Flag to disable the config.
     */
    declare public readonly disable: pulumi.Output<boolean | undefined>;
    /**
     * ACME Plugin ID name.
     */
    declare public readonly plugin: pulumi.Output<string>;
    /**
     * Extra delay in seconds to wait before requesting validation. Allows to cope with a long TTL of DNS records (0 - 172800).
     */
    declare public readonly validationDelay: pulumi.Output<number>;

    /**
     * Create a AcmeDnsPlugin resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AcmeDnsPluginArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AcmeDnsPluginArgs | AcmeDnsPluginState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AcmeDnsPluginState | undefined;
            resourceInputs["api"] = state?.api;
            resourceInputs["data"] = state?.data;
            resourceInputs["digest"] = state?.digest;
            resourceInputs["disable"] = state?.disable;
            resourceInputs["plugin"] = state?.plugin;
            resourceInputs["validationDelay"] = state?.validationDelay;
        } else {
            const args = argsOrState as AcmeDnsPluginArgs | undefined;
            if (args?.api === undefined && !opts.urn) {
                throw new Error("Missing required property 'api'");
            }
            if (args?.plugin === undefined && !opts.urn) {
                throw new Error("Missing required property 'plugin'");
            }
            resourceInputs["api"] = args?.api;
            resourceInputs["data"] = args?.data;
            resourceInputs["digest"] = args?.digest;
            resourceInputs["disable"] = args?.disable;
            resourceInputs["plugin"] = args?.plugin;
            resourceInputs["validationDelay"] = args?.validationDelay;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AcmeDnsPlugin.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AcmeDnsPlugin resources.
 */
export interface AcmeDnsPluginState {
    /**
     * API plugin name.
     */
    api?: pulumi.Input<string>;
    /**
     * DNS plugin data.
     */
    data?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * SHA1 digest of the current configuration. Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.
     */
    digest?: pulumi.Input<string>;
    /**
     * Flag to disable the config.
     */
    disable?: pulumi.Input<boolean>;
    /**
     * ACME Plugin ID name.
     */
    plugin?: pulumi.Input<string>;
    /**
     * Extra delay in seconds to wait before requesting validation. Allows to cope with a long TTL of DNS records (0 - 172800).
     */
    validationDelay?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a AcmeDnsPlugin resource.
 */
export interface AcmeDnsPluginArgs {
    /**
     * API plugin name.
     */
    api: pulumi.Input<string>;
    /**
     * DNS plugin data.
     */
    data?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * SHA1 digest of the current configuration. Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.
     */
    digest?: pulumi.Input<string>;
    /**
     * Flag to disable the config.
     */
    disable?: pulumi.Input<boolean>;
    /**
     * ACME Plugin ID name.
     */
    plugin: pulumi.Input<string>;
    /**
     * Extra delay in seconds to wait before requesting validation. Allows to cope with a long TTL of DNS records (0 - 172800).
     */
    validationDelay?: pulumi.Input<number>;
}

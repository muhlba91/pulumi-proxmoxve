// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Retrieves a single ACME plugin by plugin ID name.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as proxmoxve from "@pulumi/proxmoxve";
 *
 * const example = proxmoxve.Acme.getPlugin({
 *     plugin: "standalone",
 * });
 * export const dataProxmoxVirtualEnvironmentAcmePlugin = example;
 * ```
 */
export function getPlugin(args: GetPluginArgs, opts?: pulumi.InvokeOptions): Promise<GetPluginResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("proxmoxve:Acme/getPlugin:getPlugin", {
        "plugin": args.plugin,
    }, opts);
}

/**
 * A collection of arguments for invoking getPlugin.
 */
export interface GetPluginArgs {
    /**
     * ACME Plugin ID name.
     */
    plugin: string;
}

/**
 * A collection of values returned by getPlugin.
 */
export interface GetPluginResult {
    /**
     * API plugin name.
     */
    readonly api: string;
    /**
     * DNS plugin data.
     */
    readonly data: {[key: string]: string};
    /**
     * Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.
     */
    readonly digest: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * ACME Plugin ID name.
     */
    readonly plugin: string;
    /**
     * ACME challenge type (dns, standalone).
     */
    readonly type: string;
    /**
     * Extra delay in seconds to wait before requesting validation. Allows to cope with a long TTL of DNS records (0 - 172800).
     */
    readonly validationDelay: number;
}
/**
 * Retrieves a single ACME plugin by plugin ID name.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as proxmoxve from "@pulumi/proxmoxve";
 *
 * const example = proxmoxve.Acme.getPlugin({
 *     plugin: "standalone",
 * });
 * export const dataProxmoxVirtualEnvironmentAcmePlugin = example;
 * ```
 */
export function getPluginOutput(args: GetPluginOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPluginResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("proxmoxve:Acme/getPlugin:getPlugin", {
        "plugin": args.plugin,
    }, opts);
}

/**
 * A collection of arguments for invoking getPlugin.
 */
export interface GetPluginOutputArgs {
    /**
     * ACME Plugin ID name.
     */
    plugin: pulumi.Input<string>;
}

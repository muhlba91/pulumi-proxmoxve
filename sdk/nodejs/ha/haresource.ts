// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages Proxmox HA resources.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as proxmoxve from "@muhlba91/pulumi-proxmoxve";
 *
 * const example = new proxmoxve.ha.HAResource("example", {
 *     resourceId: "vm:123",
 *     state: "started",
 *     group: "example",
 *     comment: "Managed by Terraform",
 * }, {
 *     dependsOn: [proxmox_virtual_environment_hagroup.example],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * #!/usr/bin/env sh
 *
 * HA resources can be imported using their identifiers, e.g.:
 *
 * ```sh
 * $ pulumi import proxmoxve:HA/hAResource:HAResource example vm:123
 * ```
 */
export class HAResource extends pulumi.CustomResource {
    /**
     * Get an existing HAResource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HAResourceState, opts?: pulumi.CustomResourceOptions): HAResource {
        return new HAResource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'proxmoxve:HA/hAResource:HAResource';

    /**
     * Returns true if the given object is an instance of HAResource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HAResource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HAResource.__pulumiType;
    }

    /**
     * The comment associated with this resource.
     */
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * The identifier of the High Availability group this resource is a member of.
     */
    public readonly group!: pulumi.Output<string | undefined>;
    /**
     * The maximal number of relocation attempts.
     */
    public readonly maxRelocate!: pulumi.Output<number | undefined>;
    /**
     * The maximal number of restart attempts.
     */
    public readonly maxRestart!: pulumi.Output<number | undefined>;
    /**
     * The Proxmox HA resource identifier
     */
    public readonly resourceId!: pulumi.Output<string>;
    /**
     * The desired state of the resource.
     */
    public readonly state!: pulumi.Output<string>;
    /**
     * The type of HA resources to create. If unset, it will be deduced from the `resourceId`.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a HAResource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HAResourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HAResourceArgs | HAResourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HAResourceState | undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["maxRelocate"] = state ? state.maxRelocate : undefined;
            resourceInputs["maxRestart"] = state ? state.maxRestart : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as HAResourceArgs | undefined;
            if ((!args || args.resourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceId'");
            }
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["maxRelocate"] = args ? args.maxRelocate : undefined;
            resourceInputs["maxRestart"] = args ? args.maxRestart : undefined;
            resourceInputs["resourceId"] = args ? args.resourceId : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HAResource.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering HAResource resources.
 */
export interface HAResourceState {
    /**
     * The comment associated with this resource.
     */
    comment?: pulumi.Input<string>;
    /**
     * The identifier of the High Availability group this resource is a member of.
     */
    group?: pulumi.Input<string>;
    /**
     * The maximal number of relocation attempts.
     */
    maxRelocate?: pulumi.Input<number>;
    /**
     * The maximal number of restart attempts.
     */
    maxRestart?: pulumi.Input<number>;
    /**
     * The Proxmox HA resource identifier
     */
    resourceId?: pulumi.Input<string>;
    /**
     * The desired state of the resource.
     */
    state?: pulumi.Input<string>;
    /**
     * The type of HA resources to create. If unset, it will be deduced from the `resourceId`.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HAResource resource.
 */
export interface HAResourceArgs {
    /**
     * The comment associated with this resource.
     */
    comment?: pulumi.Input<string>;
    /**
     * The identifier of the High Availability group this resource is a member of.
     */
    group?: pulumi.Input<string>;
    /**
     * The maximal number of relocation attempts.
     */
    maxRelocate?: pulumi.Input<number>;
    /**
     * The maximal number of restart attempts.
     */
    maxRestart?: pulumi.Input<number>;
    /**
     * The Proxmox HA resource identifier
     */
    resourceId: pulumi.Input<string>;
    /**
     * The desired state of the resource.
     */
    state?: pulumi.Input<string>;
    /**
     * The type of HA resources to create. If unset, it will be deduced from the `resourceId`.
     */
    type?: pulumi.Input<string>;
}

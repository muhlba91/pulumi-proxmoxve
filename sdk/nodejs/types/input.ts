// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface GetVm2Clone {
    /**
     * The ID of the VM to clone.
     */
    id: number;
    /**
     * The number of retries to perform when cloning the VM (default: 3).
     */
    retries?: number;
}

export interface GetVm2CloneArgs {
    /**
     * The ID of the VM to clone.
     */
    id: pulumi.Input<number>;
    /**
     * The number of retries to perform when cloning the VM (default: 3).
     */
    retries?: pulumi.Input<number>;
}

export interface GetVm2Cpu {
    /**
     * List of host cores used to execute guest processes, for example: '0,5,8-11'
     */
    affinity?: string;
    /**
     * The CPU architecture.
     */
    architecture?: string;
    /**
     * The number of CPU cores per socket.
     */
    cores?: number;
    /**
     * Set of additional CPU flags.
     */
    flags?: string[];
    /**
     * The number of hotplugged vCPUs.
     */
    hotplugged?: number;
    /**
     * Limit of CPU usage.
     */
    limit?: number;
    /**
     * Enable NUMA.
     */
    numa?: boolean;
    /**
     * The number of CPU sockets.
     */
    sockets?: number;
    /**
     * Emulated CPU type.
     */
    type?: string;
    /**
     * CPU weight for a VM
     */
    units?: number;
}

export interface GetVm2CpuArgs {
    /**
     * List of host cores used to execute guest processes, for example: '0,5,8-11'
     */
    affinity?: pulumi.Input<string>;
    /**
     * The CPU architecture.
     */
    architecture?: pulumi.Input<string>;
    /**
     * The number of CPU cores per socket.
     */
    cores?: pulumi.Input<number>;
    /**
     * Set of additional CPU flags.
     */
    flags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The number of hotplugged vCPUs.
     */
    hotplugged?: pulumi.Input<number>;
    /**
     * Limit of CPU usage.
     */
    limit?: pulumi.Input<number>;
    /**
     * Enable NUMA.
     */
    numa?: pulumi.Input<boolean>;
    /**
     * The number of CPU sockets.
     */
    sockets?: pulumi.Input<number>;
    /**
     * Emulated CPU type.
     */
    type?: pulumi.Input<string>;
    /**
     * CPU weight for a VM
     */
    units?: pulumi.Input<number>;
}

export interface GetVm2Timeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
     */
    read?: string;
}

export interface GetVm2TimeoutsArgs {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
     */
    read?: pulumi.Input<string>;
}

export interface GetVm2Vga {
    /**
     * Enable a specific clipboard.
     */
    clipboard?: string;
    /**
     * The VGA memory in megabytes (4-512 MB). Has no effect with serial display.
     */
    memory?: number;
    /**
     * The VGA type.
     */
    type?: string;
}

export interface GetVm2VgaArgs {
    /**
     * Enable a specific clipboard.
     */
    clipboard?: pulumi.Input<string>;
    /**
     * The VGA memory in megabytes (4-512 MB). Has no effect with serial display.
     */
    memory?: pulumi.Input<number>;
    /**
     * The VGA type.
     */
    type?: pulumi.Input<string>;
}

export interface HostsEntry {
    /**
     * The IP address.
     */
    address: pulumi.Input<string>;
    /**
     * The hostnames.
     */
    hostnames: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ProviderSsh {
    /**
     * Whether to use the SSH agent for authentication. Takes precedence over the `privateKey` and `password` fields. Defaults to the value of the `PROXMOX_VE_SSH_AGENT` environment variable, or `false` if not set.
     */
    agent?: pulumi.Input<boolean>;
    /**
     * The path to the SSH agent socket. Defaults to the value of the `SSH_AUTH_SOCK` environment variable.
     */
    agentSocket?: pulumi.Input<string>;
    /**
     * Overrides for SSH connection configuration for a Proxmox VE node.
     */
    nodes?: pulumi.Input<pulumi.Input<inputs.ProviderSshNode>[]>;
    /**
     * The password used for the SSH connection. Defaults to the value of the `password` field of the `provider` block.
     */
    password?: pulumi.Input<string>;
    /**
     * The unencrypted private key (in PEM format) used for the SSH connection. Defaults to the value of the `PROXMOX_VE_SSH_PRIVATE_KEY` environment variable.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * The password for the SOCKS5 proxy server. Defaults to the value of the `PROXMOX_VE_SSH_SOCKS5_PASSWORD` environment variable.
     */
    socks5Password?: pulumi.Input<string>;
    /**
     * The address:port of the SOCKS5 proxy server. Defaults to the value of the `PROXMOX_VE_SSH_SOCKS5_SERVER` environment variable.
     */
    socks5Server?: pulumi.Input<string>;
    /**
     * The username for the SOCKS5 proxy server. Defaults to the value of the `PROXMOX_VE_SSH_SOCKS5_USERNAME` environment variable.
     */
    socks5Username?: pulumi.Input<string>;
    /**
     * The username used for the SSH connection. Defaults to the value of the `username` field of the `provider` block.
     */
    username?: pulumi.Input<string>;
}

export interface ProviderSshNode {
    /**
     * The address of the Proxmox VE node.
     */
    address: pulumi.Input<string>;
    /**
     * The name of the Proxmox VE node.
     */
    name: pulumi.Input<string>;
    /**
     * The port of the Proxmox VE node.
     */
    port?: pulumi.Input<number>;
}

export interface Vm2Cdrom {
    /**
     * The file ID of the CD-ROM, or `cdrom|none`. Defaults to `none` to leave the CD-ROM empty. Use `cdrom` to connect to the physical drive.
     */
    fileId?: pulumi.Input<string>;
}

export interface Vm2Clone {
    /**
     * The ID of the VM to clone.
     */
    id: pulumi.Input<number>;
    /**
     * The number of retries to perform when cloning the VM (default: 3).
     */
    retries?: pulumi.Input<number>;
}

export interface Vm2Cpu {
    /**
     * The CPU cores that are used to run the VM’s vCPU. The value is a list of CPU IDs, separated by commas. The CPU IDs are zero-based.  For example, `0,1,2,3` (which also can be shortened to `0-3`) means that the VM’s vCPUs are run on the first four CPU cores. Setting `affinity` is only allowed for `root@pam` authenticated user.
     */
    affinity?: pulumi.Input<string>;
    /**
     * The CPU architecture `<aarch64 | x86_64>` (defaults to the host). Setting `affinity` is only allowed for `root@pam` authenticated user.
     */
    architecture?: pulumi.Input<string>;
    /**
     * The number of CPU cores per socket (defaults to `1`).
     */
    cores?: pulumi.Input<number>;
    /**
     * Set of additional CPU flags. Use `+FLAG` to enable, `-FLAG` to disable a flag. Custom CPU models can specify any flag supported by QEMU/KVM, VM-specific flags must be from the following set for security reasons: `pcid`, `spec-ctrl`, `ibpb`, `ssbd`, `virt-ssbd`, `amd-ssbd`, `amd-no-ssb`, `pdpe1gb`, `md-clear`, `hv-tlbflush`, `hv-evmcs`, `aes`.
     */
    flags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The number of hotplugged vCPUs (defaults to `0`).
     */
    hotplugged?: pulumi.Input<number>;
    /**
     * Limit of CPU usage (defaults to `0` which means no limit).
     */
    limit?: pulumi.Input<number>;
    /**
     * Enable NUMA (defaults to `false`).
     */
    numa?: pulumi.Input<boolean>;
    /**
     * The number of CPU sockets (defaults to `1`).
     */
    sockets?: pulumi.Input<number>;
    /**
     * Emulated CPU type, it's recommended to use `x86-64-v2-AES` or higher (defaults to `kvm64`). See https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm*virtual*machines_settings for more information.
     */
    type?: pulumi.Input<string>;
    /**
     * CPU weight for a VM. Argument is used in the kernel fair scheduler. The larger the number is, the more CPU time this VM gets. Number is relative to weights of all the other running VMs.
     */
    units?: pulumi.Input<number>;
}

export interface Vm2Timeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    create?: pulumi.Input<string>;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
     */
    delete?: pulumi.Input<string>;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
     */
    read?: pulumi.Input<string>;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    update?: pulumi.Input<string>;
}

export interface Vm2Vga {
    /**
     * Enable a specific clipboard. If not set, depending on the display type the SPICE one will be added. Currently only `vnc` is available. Migration with VNC clipboard is not supported by Proxmox.
     */
    clipboard?: pulumi.Input<string>;
    /**
     * The VGA memory in megabytes (4-512 MB). Has no effect with serial display.
     */
    memory?: pulumi.Input<number>;
    /**
     * The VGA type (defaults to `std`).
     */
    type?: pulumi.Input<string>;
}
export namespace Acme {
}

export namespace CT {
    export interface ContainerClone {
        /**
         * The identifier for the target datastore.
         */
        datastoreId?: pulumi.Input<string>;
        /**
         * The name of the source node (leave blank, if
         * equal to the `nodeName` argument).
         */
        nodeName?: pulumi.Input<string>;
        /**
         * The identifier for the source container.
         */
        vmId: pulumi.Input<number>;
    }

    export interface ContainerConsole {
        /**
         * Whether to enable the console device (defaults
         * to `true`).
         */
        enabled?: pulumi.Input<boolean>;
        /**
         * The number of available TTY (defaults to `2`).
         */
        ttyCount?: pulumi.Input<number>;
        /**
         * The console mode (defaults to `tty`).
         */
        type?: pulumi.Input<string>;
    }

    export interface ContainerCpu {
        /**
         * The CPU architecture (defaults to `amd64`).
         */
        architecture?: pulumi.Input<string>;
        /**
         * The number of CPU cores (defaults to `1`).
         */
        cores?: pulumi.Input<number>;
        /**
         * The CPU units (defaults to `1024`).
         */
        units?: pulumi.Input<number>;
    }

    export interface ContainerDisk {
        /**
         * The identifier for the datastore to create the
         * disk in (defaults to `local`).
         */
        datastoreId?: pulumi.Input<string>;
        /**
         * The size of the root filesystem in gigabytes (defaults
         * to `4`). Requires `datastoreId` to be set.
         */
        size?: pulumi.Input<number>;
    }

    export interface ContainerFeatures {
        /**
         * Whether the container supports FUSE mounts (defaults
         * to `false`)
         */
        fuse?: pulumi.Input<boolean>;
        /**
         * Whether the container supports `keyctl()` system
         * call (defaults to `false`)
         */
        keyctl?: pulumi.Input<boolean>;
        /**
         * List of allowed mount types (`cifs` or `nfs`)
         */
        mounts?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Whether the container is nested (defaults
         * to `false`)
         */
        nesting?: pulumi.Input<boolean>;
    }

    export interface ContainerInitialization {
        /**
         * The DNS configuration.
         */
        dns?: pulumi.Input<inputs.CT.ContainerInitializationDns>;
        /**
         * The hostname.
         */
        hostname?: pulumi.Input<string>;
        /**
         * The IP configuration (one block per network
         * device).
         */
        ipConfigs?: pulumi.Input<pulumi.Input<inputs.CT.ContainerInitializationIpConfig>[]>;
        /**
         * The user account configuration.
         */
        userAccount?: pulumi.Input<inputs.CT.ContainerInitializationUserAccount>;
    }

    export interface ContainerInitializationDns {
        /**
         * The DNS search domain.
         */
        domain?: pulumi.Input<string>;
        /**
         * The DNS server. The `server` attribute is
         * deprecated and will be removed in a future release. Please use
         * the `servers` attribute instead.
         *
         * @deprecated The `server` attribute is deprecated and will be removed in a future release. Please use the `servers` attribute instead.
         */
        server?: pulumi.Input<string>;
        /**
         * The list of DNS servers.
         */
        servers?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ContainerInitializationIpConfig {
        /**
         * The IPv4 configuration.
         */
        ipv4?: pulumi.Input<inputs.CT.ContainerInitializationIpConfigIpv4>;
        /**
         * The IPv4 configuration.
         */
        ipv6?: pulumi.Input<inputs.CT.ContainerInitializationIpConfigIpv6>;
    }

    export interface ContainerInitializationIpConfigIpv4 {
        /**
         * The IPv4 address (use `dhcp` for auto-discovery).
         */
        address?: pulumi.Input<string>;
        /**
         * The IPv4 gateway (must be omitted
         * when `dhcp` is used as the address).
         */
        gateway?: pulumi.Input<string>;
    }

    export interface ContainerInitializationIpConfigIpv6 {
        /**
         * The IPv6 address (use `dhcp` for auto-discovery).
         */
        address?: pulumi.Input<string>;
        /**
         * The IPv6 gateway (must be omitted
         * when `dhcp` is used as the address).
         */
        gateway?: pulumi.Input<string>;
    }

    export interface ContainerInitializationUserAccount {
        /**
         * The SSH keys for the root account.
         */
        keys?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The password for the root account.
         */
        password?: pulumi.Input<string>;
    }

    export interface ContainerMemory {
        /**
         * The dedicated memory in megabytes (defaults
         * to `512`).
         */
        dedicated?: pulumi.Input<number>;
        /**
         * The swap size in megabytes (defaults to `0`).
         */
        swap?: pulumi.Input<number>;
    }

    export interface ContainerMountPoint {
        /**
         * Explicitly enable or disable ACL support.
         */
        acl?: pulumi.Input<boolean>;
        /**
         * Whether to include the mount point in backups (only
         * used for volume mount points, defaults to `false`).
         */
        backup?: pulumi.Input<boolean>;
        /**
         * List of extra mount options.
         */
        mountOptions?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Path to the mount point as seen from inside the
         * container.
         */
        path: pulumi.Input<string>;
        /**
         * Enable user quotas inside the container (not supported
         * with ZFS subvolumes).
         */
        quota?: pulumi.Input<boolean>;
        /**
         * Read-only mount point.
         */
        readOnly?: pulumi.Input<boolean>;
        /**
         * Will include this volume to a storage replica job.
         */
        replicate?: pulumi.Input<boolean>;
        /**
         * Mark this non-volume mount point as available on all
         * nodes.
         */
        shared?: pulumi.Input<boolean>;
        /**
         * Volume size (only for volume mount points).
         * Can be specified with a unit suffix (e.g. `10G`).
         */
        size?: pulumi.Input<string>;
        /**
         * Volume, device or directory to mount into the
         * container.
         */
        volume: pulumi.Input<string>;
    }

    export interface ContainerNetworkInterface {
        /**
         * The name of the network bridge (defaults
         * to `vmbr0`).
         */
        bridge?: pulumi.Input<string>;
        /**
         * Whether to enable the network device (defaults
         * to `true`).
         */
        enabled?: pulumi.Input<boolean>;
        /**
         * Whether this interface's firewall rules should be
         * used (defaults to `false`).
         */
        firewall?: pulumi.Input<boolean>;
        /**
         * The MAC address.
         */
        macAddress?: pulumi.Input<string>;
        /**
         * Maximum transfer unit of the interface. Cannot be
         * larger than the bridge's MTU.
         */
        mtu?: pulumi.Input<number>;
        /**
         * The network interface name.
         */
        name: pulumi.Input<string>;
        /**
         * The rate limit in megabytes per second.
         */
        rateLimit?: pulumi.Input<number>;
        /**
         * The VLAN identifier.
         */
        vlanId?: pulumi.Input<number>;
    }

    export interface ContainerOperatingSystem {
        /**
         * The identifier for an OS template file.
         * The ID format is `<datastore_id>:<content_type>/<file_name>`, for example `local:iso/jammy-server-cloudimg-amd64.tar.gz`.
         * Can be also taken from `proxmoxve.Download.File` resource, or from the output of `pvesm list <storage>`.
         */
        templateFileId: pulumi.Input<string>;
        /**
         * The type (defaults to `unmanaged`).
         */
        type?: pulumi.Input<string>;
    }

    export interface ContainerStartup {
        /**
         * A non-negative number defining the delay in
         * seconds before the next container is shut down.
         */
        downDelay?: pulumi.Input<number>;
        /**
         * A non-negative number defining the general startup
         * order.
         */
        order?: pulumi.Input<number>;
        /**
         * A non-negative number defining the delay in
         * seconds before the next container is started.
         */
        upDelay?: pulumi.Input<number>;
    }
}

export namespace Cluster {
    export interface OptionsNextId {
        /**
         * The minimum number for the next free VM ID. Must be higher or equal to 100
         */
        lower?: pulumi.Input<number>;
        /**
         * The maximum number for the next free VM ID. Must be less or equal to 999999999
         */
        upper?: pulumi.Input<number>;
    }

    export interface OptionsNotify {
        /**
         * Cluster-wide notification settings for the HA fencing mode. Must be `always` | `never`.
         */
        haFencingMode?: pulumi.Input<string>;
        /**
         * Cluster-wide notification settings for the HA fencing target.
         */
        haFencingTarget?: pulumi.Input<string>;
        /**
         * Cluster-wide notification settings for package updates. Must be `auto` | `always` | `never`.
         */
        packageUpdates?: pulumi.Input<string>;
        /**
         * Cluster-wide notification settings for the package updates target.
         */
        packageUpdatesTarget?: pulumi.Input<string>;
        /**
         * Cluster-wide notification settings for replication. Must be `always` | `never`.
         */
        replication?: pulumi.Input<string>;
        /**
         * Cluster-wide notification settings for the replication target.
         */
        replicationTarget?: pulumi.Input<string>;
    }
}

export namespace Hardware {
    export namespace mapping {
        export interface PciMap {
            /**
             * The comment of the mapped PCI device.
             */
            comment?: pulumi.Input<string>;
            /**
             * The ID of the map.
             */
            id: pulumi.Input<string>;
            /**
             * The IOMMU group of the map. Not mandatory for the Proxmox VE API call, but causes a PCI hardware mapping to be incomplete when not set
             */
            iommuGroup?: pulumi.Input<number>;
            /**
             * The node name of the map.
             */
            node: pulumi.Input<string>;
            /**
             * The path of the map.
             */
            path: pulumi.Input<string>;
            /**
             * The subsystem ID group of the map. Not mandatory for the Proxmox VE API call, but causes a PCI hardware mapping to be incomplete when not set
             */
            subsystemId?: pulumi.Input<string>;
        }

        export interface UsbMap {
            /**
             * The comment of the mapped USB device.
             */
            comment?: pulumi.Input<string>;
            /**
             * The ID of the map.
             */
            id: pulumi.Input<string>;
            /**
             * The node name of the map.
             */
            node: pulumi.Input<string>;
            /**
             * The path of the map. For hardware mappings of type USB the path is optional and indicates that the device is mapped through the device ID instead of ports.
             */
            path?: pulumi.Input<string>;
        }
    }
}

export namespace Network {
    export interface FirewallIPSetCidr {
        /**
         * Arbitrary string annotation.
         */
        comment?: pulumi.Input<string>;
        /**
         * Network/IP specification in CIDR format.
         */
        name: pulumi.Input<string>;
        /**
         * Entries marked as `nomatch` are skipped as if those
         * were not added to the set.
         */
        nomatch?: pulumi.Input<boolean>;
    }

    export interface FirewallLogRatelimit {
        /**
         * Initial burst of packages which will always get
         * logged before the rate is applied (defaults to `5`).
         */
        burst?: pulumi.Input<number>;
        /**
         * Enable or disable the log rate limit.
         */
        enabled?: pulumi.Input<boolean>;
        /**
         * Frequency with which the burst bucket gets refilled
         * (defaults to `1/second`).
         */
        rate?: pulumi.Input<string>;
    }

    export interface FirewallRulesRule {
        /**
         * Rule action (`ACCEPT`, `DROP`, `REJECT`).
         */
        action?: pulumi.Input<string>;
        /**
         * Rule comment.
         */
        comment?: pulumi.Input<string>;
        /**
         * Restrict packet destination address. This can
         * refer to a single IP address, an IP set ('+ipsetname') or an IP
         * alias definition. You can also specify an address range
         * like `20.34.101.207-201.3.9.99`, or a list of IP addresses and
         * networks (entries are separated by comma). Please do not mix IPv4
         * and IPv6 addresses inside such lists.
         */
        dest?: pulumi.Input<string>;
        /**
         * Restrict TCP/UDP destination port. You can use
         * service names or simple numbers (0-65535), as defined
         * in `/etc/services`. Port ranges can be specified with '\d+:\d+', for
         * example `80:85`, and you can use comma separated list to match
         * several ports or ranges.
         */
        dport?: pulumi.Input<string>;
        /**
         * Enable this rule. Defaults to `true`.
         */
        enabled?: pulumi.Input<boolean>;
        /**
         * Network interface name. You have to use network
         * configuration key names for VMs and containers ('net\d+'). Host
         * related rules can use arbitrary strings.
         */
        iface?: pulumi.Input<string>;
        /**
         * Log level for this rule (`emerg`, `alert`, `crit`,
         * `err`, `warning`, `notice`, `info`, `debug`, `nolog`).
         */
        log?: pulumi.Input<string>;
        /**
         * Macro name. Use predefined standard macro
         * from <https://pve.proxmox.com/pve-docs/pve-admin-guide.html#_firewall_macro_definitions>
         */
        macro?: pulumi.Input<string>;
        /**
         * Position of the rule in the list.
         */
        pos?: pulumi.Input<number>;
        /**
         * Restrict packet protocol. You can use protocol
         * names as defined in '/etc/protocols'.
         */
        proto?: pulumi.Input<string>;
        /**
         * Security group name.
         */
        securityGroup?: pulumi.Input<string>;
        /**
         * Restrict packet source address. This can refer
         * to a single IP address, an IP set ('+ipsetname') or an IP alias
         * definition. You can also specify an address range
         * like `20.34.101.207-201.3.9.99`, or a list of IP addresses and
         * networks (entries are separated by comma). Please do not mix IPv4
         * and IPv6 addresses inside such lists.
         */
        source?: pulumi.Input<string>;
        /**
         * Restrict TCP/UDP source port. You can use
         * service names or simple numbers (0-65535), as defined
         * in `/etc/services`. Port ranges can be specified with '\d+:\d+', for
         * example `80:85`, and you can use comma separated list to match
         * several ports or ranges.
         * - a security group insertion block, which includes the following arguments:
         */
        sport?: pulumi.Input<string>;
        /**
         * Rule type (`in`, `out`).
         */
        type?: pulumi.Input<string>;
    }

    export interface FirewallSecurityGroupRule {
        /**
         * Rule action (`ACCEPT`, `DROP`, `REJECT`).
         */
        action?: pulumi.Input<string>;
        /**
         * Rule comment.
         */
        comment?: pulumi.Input<string>;
        /**
         * Restrict packet destination address. This can refer to
         * a single IP address, an IP set ('+ipsetname') or an IP alias
         * definition. You can also specify an address range like
         * `20.34.101.207-201.3.9.99`, or a list of IP addresses and networks
         * (entries are separated by comma). Please do not mix IPv4 and IPv6
         * addresses inside such lists.
         */
        dest?: pulumi.Input<string>;
        /**
         * Restrict TCP/UDP destination port. You can use
         * service names or simple numbers (0-65535), as defined in '/etc/
         * services'. Port ranges can be specified with '\d+:\d+', for example
         * `80:85`, and you can use comma separated list to match several ports or
         * ranges.
         */
        dport?: pulumi.Input<string>;
        /**
         * Enable rule
         */
        enabled?: pulumi.Input<boolean>;
        /**
         * Network interface name. You have to use network
         * configuration key names for VMs and containers ('net\d+'). Host related
         * rules can use arbitrary strings.
         */
        iface?: pulumi.Input<string>;
        /**
         * Log level for this rule (`emerg`, `alert`, `crit`,
         * `err`, `warning`, `notice`, `info`, `debug`, `nolog`).
         */
        log?: pulumi.Input<string>;
        /**
         * Macro name. Use predefined standard macro
         * from <https://pve.proxmox.com/pve-docs/pve-admin-guide.html#_firewall_macro_definitions>
         */
        macro?: pulumi.Input<string>;
        /**
         * Position of the rule in the list.
         */
        pos?: pulumi.Input<number>;
        /**
         * Restrict packet protocol. You can use protocol names
         * as defined in '/etc/protocols'.
         */
        proto?: pulumi.Input<string>;
        /**
         * Security group name
         */
        securityGroup?: pulumi.Input<string>;
        /**
         * Restrict packet source address. This can refer
         * to a single IP address, an IP set ('+ipsetname') or an IP alias
         * definition. You can also specify an address range like
         * `20.34.101.207-201.3.9.99`, or a list of IP addresses and networks (
         * entries are separated by comma). Please do not mix IPv4 and IPv6
         * addresses inside such lists.
         */
        source?: pulumi.Input<string>;
        /**
         * Restrict TCP/UDP source port. You can use
         * service names or simple numbers (0-65535), as defined in '/etc/
         * services'. Port ranges can be specified with '\d+:\d+', for example
         * `80:85`, and you can use comma separated list to match several ports or
         * ranges.
         */
        sport?: pulumi.Input<string>;
        /**
         * Rule type (`in`, `out`).
         */
        type?: pulumi.Input<string>;
    }

}

export namespace Permission {
    export interface GroupAcl {
        /**
         * The path.
         */
        path: pulumi.Input<string>;
        /**
         * Whether to propagate to child paths.
         */
        propagate?: pulumi.Input<boolean>;
        /**
         * The role identifier.
         */
        roleId: pulumi.Input<string>;
    }

    export interface PoolMember {
        /**
         * The datastore identifier.
         */
        datastoreId?: pulumi.Input<string>;
        /**
         * The member identifier.
         */
        id?: pulumi.Input<string>;
        /**
         * The node name.
         */
        nodeName?: pulumi.Input<string>;
        /**
         * The member type.
         */
        type?: pulumi.Input<string>;
        /**
         * The virtual machine identifier.
         */
        vmId?: pulumi.Input<number>;
    }

    export interface UserAcl {
        /**
         * The path.
         */
        path: pulumi.Input<string>;
        /**
         * Whether to propagate to child paths.
         */
        propagate?: pulumi.Input<boolean>;
        /**
         * The role identifier.
         */
        roleId: pulumi.Input<string>;
    }
}

export namespace Storage {
    export interface FileSourceFile {
        /**
         * Whether the source file has changed since the last run
         */
        changed?: pulumi.Input<boolean>;
        /**
         * The SHA256 checksum of the source file.
         */
        checksum?: pulumi.Input<string>;
        /**
         * The file name to use instead of the source file
         * name. Useful when the source file does not have a valid file extension,
         * for example when the source file is a URL referencing a `.qcow2` image.
         */
        fileName?: pulumi.Input<string>;
        /**
         * Whether to skip the TLS verification step for
         * HTTPS sources (defaults to `false`).
         */
        insecure?: pulumi.Input<boolean>;
        /**
         * The minimum required TLS version for HTTPS
         * sources. "Supported values: `1.0|1.1|1.2|1.3` (defaults to `1.3`).
         */
        minTls?: pulumi.Input<string>;
        /**
         * A path to a local file or a URL.
         */
        path: pulumi.Input<string>;
    }

    export interface FileSourceRaw {
        /**
         * The raw data.
         */
        data: pulumi.Input<string>;
        /**
         * The file name.
         */
        fileName: pulumi.Input<string>;
        /**
         * The number of bytes to resize the file to.
         */
        resize?: pulumi.Input<number>;
    }
}

export namespace VM {
    export interface GetVirtualMachinesFilter {
        /**
         * Name of the VM attribute to filter on. One of [`name`, `template`, `status`, `nodeName`]
         */
        name: string;
        /**
         * Treat values as regex patterns
         */
        regex?: boolean;
        /**
         * List of values to pass the filter. VM's attribute should match at least one value in the list.
         */
        values: string[];
    }

    export interface GetVirtualMachinesFilterArgs {
        /**
         * Name of the VM attribute to filter on. One of [`name`, `template`, `status`, `nodeName`]
         */
        name: pulumi.Input<string>;
        /**
         * Treat values as regex patterns
         */
        regex?: pulumi.Input<boolean>;
        /**
         * List of values to pass the filter. VM's attribute should match at least one value in the list.
         */
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface VirtualMachine2Cdrom {
        /**
         * The file ID of the CD-ROM, or `cdrom|none`. Defaults to `none` to leave the CD-ROM empty. Use `cdrom` to connect to the physical drive.
         */
        fileId?: pulumi.Input<string>;
    }

    export interface VirtualMachine2Clone {
        /**
         * The ID of the VM to clone.
         */
        id: pulumi.Input<number>;
        /**
         * The number of retries to perform when cloning the VM (default: 3).
         */
        retries?: pulumi.Input<number>;
    }

    export interface VirtualMachine2Cpu {
        /**
         * The CPU cores that are used to run the VM’s vCPU. The value is a list of CPU IDs, separated by commas. The CPU IDs are zero-based.  For example, `0,1,2,3` (which also can be shortened to `0-3`) means that the VM’s vCPUs are run on the first four CPU cores. Setting `affinity` is only allowed for `root@pam` authenticated user.
         */
        affinity?: pulumi.Input<string>;
        /**
         * The CPU architecture `<aarch64 | x86_64>` (defaults to the host). Setting `affinity` is only allowed for `root@pam` authenticated user.
         */
        architecture?: pulumi.Input<string>;
        /**
         * The number of CPU cores per socket (defaults to `1`).
         */
        cores?: pulumi.Input<number>;
        /**
         * Set of additional CPU flags. Use `+FLAG` to enable, `-FLAG` to disable a flag. Custom CPU models can specify any flag supported by QEMU/KVM, VM-specific flags must be from the following set for security reasons: `pcid`, `spec-ctrl`, `ibpb`, `ssbd`, `virt-ssbd`, `amd-ssbd`, `amd-no-ssb`, `pdpe1gb`, `md-clear`, `hv-tlbflush`, `hv-evmcs`, `aes`.
         */
        flags?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The number of hotplugged vCPUs (defaults to `0`).
         */
        hotplugged?: pulumi.Input<number>;
        /**
         * Limit of CPU usage (defaults to `0` which means no limit).
         */
        limit?: pulumi.Input<number>;
        /**
         * Enable NUMA (defaults to `false`).
         */
        numa?: pulumi.Input<boolean>;
        /**
         * The number of CPU sockets (defaults to `1`).
         */
        sockets?: pulumi.Input<number>;
        /**
         * Emulated CPU type, it's recommended to use `x86-64-v2-AES` or higher (defaults to `kvm64`). See https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm*virtual*machines_settings for more information.
         */
        type?: pulumi.Input<string>;
        /**
         * CPU weight for a VM. Argument is used in the kernel fair scheduler. The larger the number is, the more CPU time this VM gets. Number is relative to weights of all the other running VMs.
         */
        units?: pulumi.Input<number>;
    }

    export interface VirtualMachine2Timeouts {
        /**
         * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
         */
        create?: pulumi.Input<string>;
        /**
         * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
         */
        delete?: pulumi.Input<string>;
        /**
         * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
         */
        read?: pulumi.Input<string>;
        /**
         * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
         */
        update?: pulumi.Input<string>;
    }

    export interface VirtualMachine2Vga {
        /**
         * Enable a specific clipboard. If not set, depending on the display type the SPICE one will be added. Currently only `vnc` is available. Migration with VNC clipboard is not supported by Proxmox.
         */
        clipboard?: pulumi.Input<string>;
        /**
         * The VGA memory in megabytes (4-512 MB). Has no effect with serial display.
         */
        memory?: pulumi.Input<number>;
        /**
         * The VGA type (defaults to `std`).
         */
        type?: pulumi.Input<string>;
    }

    export interface VirtualMachineAgent {
        /**
         * Whether to enable the QEMU agent (defaults
         * to `false`).
         */
        enabled?: pulumi.Input<boolean>;
        /**
         * The maximum amount of time to wait for data from
         * the QEMU agent to become available ( defaults to `15m`).
         */
        timeout?: pulumi.Input<string>;
        /**
         * Whether to enable the FSTRIM feature in the QEMU agent
         * (defaults to `false`).
         */
        trim?: pulumi.Input<boolean>;
        /**
         * The QEMU agent interface type (defaults to `virtio`).
         */
        type?: pulumi.Input<string>;
    }

    export interface VirtualMachineAudioDevice {
        /**
         * The device (defaults to `intel-hda`).
         * - `AC97` - Intel 82801AA AC97 Audio.
         * - `ich9-intel-hda` - Intel HD Audio Controller (ich9).
         * - `intel-hda` - Intel HD Audio.
         */
        device?: pulumi.Input<string>;
        /**
         * The driver (defaults to `spice`).
         */
        driver?: pulumi.Input<string>;
        /**
         * Whether to enable the audio device (defaults
         * to `true`).
         */
        enabled?: pulumi.Input<boolean>;
    }

    export interface VirtualMachineCdrom {
        /**
         * Whether to enable the CDROM drive (defaults
         * to `false`).
         */
        enabled?: pulumi.Input<boolean>;
        /**
         * A file ID for an ISO file (defaults to `cdrom` as
         * in the physical drive). Use `none` to leave the CDROM drive empty.
         */
        fileId?: pulumi.Input<string>;
        /**
         * A hardware interface to connect CDROM drive to,
         * must be `ideN` (defaults to `ide3`). Note that `q35` machine type only
         * supports `ide0` and `ide2`.
         */
        interface?: pulumi.Input<string>;
    }

    export interface VirtualMachineClone {
        /**
         * The identifier for the target datastore.
         */
        datastoreId?: pulumi.Input<string>;
        /**
         * Full or linked clone (defaults to `true`).
         */
        full?: pulumi.Input<boolean>;
        /**
         * The name of the source node (leave blank, if
         * equal to the `nodeName` argument).
         */
        nodeName?: pulumi.Input<string>;
        /**
         * Number of retries in Proxmox for clone vm.
         * Sometimes Proxmox errors with timeout when creating multiple clones at
         * once.
         */
        retries?: pulumi.Input<number>;
        /**
         * The identifier for the source VM.
         */
        vmId: pulumi.Input<number>;
    }

    export interface VirtualMachineCpu {
        /**
         * The CPU cores that are used to run the VM’s vCPU. The
         * value is a list of CPU IDs, separated by commas. The CPU IDs are zero-based.
         * For example, `0,1,2,3` (which also can be shortened to `0-3`) means that the VM’s vCPUs are run on the first four
         * CPU cores. Setting `affinity` is only allowed for `root@pam` authenticated user.
         */
        affinity?: pulumi.Input<string>;
        /**
         * The CPU architecture (defaults to `x8664`).
         */
        architecture?: pulumi.Input<string>;
        /**
         * The number of CPU cores (defaults to `1`).
         */
        cores?: pulumi.Input<number>;
        /**
         * The CPU flags.
         * - `+aes`/`-aes` - Activate AES instruction set for HW acceleration.
         * - `+amd-no-ssb`/`-amd-no-ssb` - Notifies guest OS that host is not
         * vulnerable for Spectre on AMD CPUs.
         * - `+amd-ssbd`/`-amd-ssbd` - Improves Spectre mitigation performance with
         * AMD CPUs, best used with "virt-ssbd".
         * - `+hv-evmcs`/`-hv-evmcs` - Improve performance for nested
         * virtualization (only supported on Intel CPUs).
         * - `+hv-tlbflush`/`-hv-tlbflush` - Improve performance in overcommitted
         * Windows guests (may lead to guest BSOD on old CPUs).
         * - `+ibpb`/`-ibpb` - Allows improved Spectre mitigation on AMD CPUs.
         * - `+md-clear`/`-md-clear` - Required to let the guest OS know if MDS is
         * mitigated correctly.
         * - `+pcid`/`-pcid` - Meltdown fix cost reduction on Westmere, Sandy- and
         * Ivy Bridge Intel CPUs.
         * - `+pdpe1gb`/`-pdpe1gb` - Allows guest OS to use 1 GB size pages, if
         * host HW supports it.
         * - `+spec-ctrl`/`-spec-ctrl` - Allows improved Spectre mitigation with
         * Intel CPUs.
         * - `+ssbd`/`-ssbd` - Protection for "Speculative Store Bypass" for Intel
         * models.
         * - `+virt-ssbd`/`-virt-ssbd` - Basis for "Speculative Store Bypass"
         * protection for AMD models.
         */
        flags?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The number of hotplugged vCPUs (defaults
         * to `0`).
         */
        hotplugged?: pulumi.Input<number>;
        /**
         * Limit of CPU usage, `0...128`. (defaults to `0` -- no limit).
         */
        limit?: pulumi.Input<number>;
        /**
         * Enable/disable NUMA. (default to `false`)
         */
        numa?: pulumi.Input<boolean>;
        /**
         * The number of CPU sockets (defaults to `1`).
         */
        sockets?: pulumi.Input<number>;
        /**
         * The emulated CPU type, it's recommended to
         * use `x86-64-v2-AES` (defaults to `qemu64`).
         */
        type?: pulumi.Input<string>;
        /**
         * The CPU units (defaults to `1024`).
         */
        units?: pulumi.Input<number>;
    }

    export interface VirtualMachineDisk {
        /**
         * The disk AIO mode (defaults to `ioUring`).
         */
        aio?: pulumi.Input<string>;
        /**
         * Whether the drive should be included when making backups (defaults to `true`).
         */
        backup?: pulumi.Input<boolean>;
        /**
         * The cache type (defaults to `none`).
         */
        cache?: pulumi.Input<string>;
        /**
         * The identifier for the datastore to create
         * the disk in (defaults to `local-lvm`).
         */
        datastoreId?: pulumi.Input<string>;
        /**
         * Whether to pass discard/trim requests to the
         * underlying storage. Supported values are `on`/`ignore` (defaults
         * to `ignore`).
         */
        discard?: pulumi.Input<string>;
        /**
         * The file format (defaults to `qcow2`).
         */
        fileFormat?: pulumi.Input<string>;
        /**
         * The file ID for a disk image. The ID format is
         * `<datastore_id>:<content_type>/<file_name>`, for example `local:iso/centos8.img`. Can be also taken from
         * `proxmoxve.Download.File` resource.
         */
        fileId?: pulumi.Input<string>;
        /**
         * The disk interface for Proxmox, currently `scsi`,
         * `sata` and `virtio` interfaces are supported. Append the disk index at
         * the end, for example, `virtio0` for the first virtio disk, `virtio1` for
         * the second, etc.
         */
        interface: pulumi.Input<string>;
        /**
         * Whether to use iothreads for this disk (defaults
         * to `false`).
         */
        iothread?: pulumi.Input<boolean>;
        /**
         * The in-datastore path to the disk image.
         * ***Experimental.***Use to attach another VM's disks,
         * or (as root only) host's filesystem paths (`datastoreId` empty string).
         * See "*Example: Attached disks*".
         */
        pathInDatastore?: pulumi.Input<string>;
        /**
         * Whether the drive should be considered for replication jobs (defaults to `true`).
         */
        replicate?: pulumi.Input<boolean>;
        /**
         * The serial number of the disk, up to 20 bytes long.
         */
        serial?: pulumi.Input<string>;
        /**
         * The disk size in gigabytes (defaults to `8`).
         */
        size?: pulumi.Input<number>;
        /**
         * The speed limits.
         */
        speed?: pulumi.Input<inputs.VM.VirtualMachineDiskSpeed>;
        /**
         * Whether to use an SSD emulation option for this disk (
         * defaults to `false`). Note that SSD emulation is not supported on VirtIO
         * Block drives.
         */
        ssd?: pulumi.Input<boolean>;
    }

    export interface VirtualMachineDiskSpeed {
        /**
         * The maximum read I/O in operations per second.
         */
        iopsRead?: pulumi.Input<number>;
        /**
         * The maximum unthrottled read I/O pool in operations per second.
         */
        iopsReadBurstable?: pulumi.Input<number>;
        /**
         * The maximum write I/O in operations per second.
         */
        iopsWrite?: pulumi.Input<number>;
        /**
         * The maximum unthrottled write I/O pool in operations per second.
         */
        iopsWriteBurstable?: pulumi.Input<number>;
        /**
         * The maximum read speed in megabytes per second.
         */
        read?: pulumi.Input<number>;
        /**
         * The maximum burstable read speed in
         * megabytes per second.
         */
        readBurstable?: pulumi.Input<number>;
        /**
         * The maximum write speed in megabytes per second.
         */
        write?: pulumi.Input<number>;
        /**
         * The maximum burstable write speed in
         * megabytes per second.
         */
        writeBurstable?: pulumi.Input<number>;
    }

    export interface VirtualMachineEfiDisk {
        /**
         * The identifier for the datastore to create
         * the disk in (defaults to `local-lvm`).
         */
        datastoreId?: pulumi.Input<string>;
        /**
         * The file format (defaults to `raw`).
         */
        fileFormat?: pulumi.Input<string>;
        /**
         * Use am EFI vars template with
         * distribution-specific and Microsoft Standard keys enrolled, if used with
         * EFI type=`4m`. Ignored for VMs with cpu.architecture=`aarch64` (defaults
         * to `false`).
         */
        preEnrolledKeys?: pulumi.Input<boolean>;
        /**
         * Size and type of the OVMF EFI disk. `4m` is newer and
         * recommended, and required for Secure Boot. For backwards compatibility
         * use `2m`. Ignored for VMs with cpu.architecture=`aarch64` (defaults
         * to `2m`).
         */
        type?: pulumi.Input<string>;
    }

    export interface VirtualMachineHostpci {
        /**
         * The PCI device name for Proxmox, in form
         * of `hostpciX` where `X` is a sequential number from 0 to 15.
         */
        device: pulumi.Input<string>;
        /**
         * The PCI device ID. This parameter is not compatible
         * with `apiToken` and requires the root `username` and `password`
         * configured in the proxmox provider. Use either this or `mapping`.
         */
        id?: pulumi.Input<string>;
        /**
         * The resource mapping name of the device, for
         * example gpu. Use either this or `id`.
         */
        mapping?: pulumi.Input<string>;
        /**
         * The mediated device ID to use.
         */
        mdev?: pulumi.Input<string>;
        /**
         * Tells Proxmox to use a PCIe or PCI port. Some
         * guests/device combination require PCIe rather than PCI. PCIe is only
         * available for q35 machine types.
         */
        pcie?: pulumi.Input<boolean>;
        /**
         * A path to a ROM file for the device to use. This
         * is a relative path under `/usr/share/kvm/`.
         */
        romFile?: pulumi.Input<string>;
        /**
         * Makes the firmware ROM visible for the VM (defaults
         * to `true`).
         */
        rombar?: pulumi.Input<boolean>;
        /**
         * Marks the PCI(e) device as the primary GPU of the VM.
         * With this enabled the `vga` configuration argument will be ignored.
         */
        xvga?: pulumi.Input<boolean>;
    }

    export interface VirtualMachineInitialization {
        /**
         * The identifier for the datastore to create the
         * cloud-init disk in (defaults to `local-lvm`).
         */
        datastoreId?: pulumi.Input<string>;
        /**
         * The DNS configuration.
         */
        dns?: pulumi.Input<inputs.VM.VirtualMachineInitializationDns>;
        /**
         * The hardware interface to connect the cloud-init
         * image to. Must be one of `ide0..3`, `sata0..5`, `scsi0..30`. Will be
         * detected if the setting is missing but a cloud-init image is present,
         * otherwise defaults to `ide2`.
         */
        interface?: pulumi.Input<string>;
        /**
         * The IP configuration (one block per network
         * device).
         */
        ipConfigs?: pulumi.Input<pulumi.Input<inputs.VM.VirtualMachineInitializationIpConfig>[]>;
        /**
         * The identifier for a file containing
         * all meta data passed to the VM via cloud-init.
         */
        metaDataFileId?: pulumi.Input<string>;
        /**
         * The identifier for a file containing
         * network configuration data passed to the VM via cloud-init (conflicts
         * with `ipConfig`).
         */
        networkDataFileId?: pulumi.Input<string>;
        /**
         * The cloud-init configuration format
         */
        type?: pulumi.Input<string>;
        /**
         * Whether to do an automatic package upgrade after the first boot
         *
         * @deprecated The `upgrade` attribute is deprecated and will be removed in a future release.
         */
        upgrade?: pulumi.Input<boolean>;
        /**
         * The user account configuration (conflicts
         * with `userDataFileId`).
         */
        userAccount?: pulumi.Input<inputs.VM.VirtualMachineInitializationUserAccount>;
        /**
         * The identifier for a file containing
         * custom user data (conflicts with `userAccount`).
         */
        userDataFileId?: pulumi.Input<string>;
        /**
         * The identifier for a file containing
         * all vendor data passed to the VM via cloud-init.
         */
        vendorDataFileId?: pulumi.Input<string>;
    }

    export interface VirtualMachineInitializationDns {
        /**
         * The DNS search domain.
         */
        domain?: pulumi.Input<string>;
        /**
         * The DNS server. The `server` attribute is
         * deprecated and will be removed in a future release. Please use the
         * `servers` attribute instead.
         *
         * @deprecated The `server` attribute is deprecated and will be removed in a future release. Please use the `servers` attribute instead.
         */
        server?: pulumi.Input<string>;
        /**
         * The list of DNS servers.
         */
        servers?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface VirtualMachineInitializationIpConfig {
        /**
         * The IPv4 configuration.
         */
        ipv4?: pulumi.Input<inputs.VM.VirtualMachineInitializationIpConfigIpv4>;
        /**
         * The IPv6 configuration.
         */
        ipv6?: pulumi.Input<inputs.VM.VirtualMachineInitializationIpConfigIpv6>;
    }

    export interface VirtualMachineInitializationIpConfigIpv4 {
        /**
         * The IPv4 address in CIDR notation
         * (e.g. 192.168.2.2/24). Alternatively, set this to `dhcp` for
         * autodiscovery.
         */
        address?: pulumi.Input<string>;
        /**
         * The IPv4 gateway (must be omitted
         * when `dhcp` is used as the address).
         */
        gateway?: pulumi.Input<string>;
    }

    export interface VirtualMachineInitializationIpConfigIpv6 {
        /**
         * The IPv6 address in CIDR notation
         * (e.g. fd1c:000:0000::0000:000:7334/64). Alternatively, set this
         * to `dhcp` for autodiscovery.
         */
        address?: pulumi.Input<string>;
        /**
         * The IPv6 gateway (must be omitted
         * when `dhcp` is used as the address).
         */
        gateway?: pulumi.Input<string>;
    }

    export interface VirtualMachineInitializationUserAccount {
        /**
         * The SSH keys.
         */
        keys?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The SSH password.
         */
        password?: pulumi.Input<string>;
        /**
         * The SSH username.
         */
        username?: pulumi.Input<string>;
    }

    export interface VirtualMachineMemory {
        /**
         * The dedicated memory in megabytes (defaults
         * to `512`).
         */
        dedicated?: pulumi.Input<number>;
        /**
         * The floating memory in megabytes (defaults
         * to `0`).
         */
        floating?: pulumi.Input<number>;
        /**
         * Enable/disable hugepages memory (defaults to disable).
         */
        hugepages?: pulumi.Input<string>;
        /**
         * Keep hugepages memory after the VM is stopped (defaults
         * to `false`).
         *
         * Settings `hugepages` and `keepHugepages` are only allowed for `root@pam` authenticated user.
         * And required `cpu.numa` to be enabled.
         */
        keepHugepages?: pulumi.Input<boolean>;
        /**
         * The shared memory in megabytes (defaults to `0`).
         */
        shared?: pulumi.Input<number>;
    }

    export interface VirtualMachineNetworkDevice {
        /**
         * The name of the network bridge (defaults to `vmbr0`).
         */
        bridge?: pulumi.Input<string>;
        /**
         * Whether to disconnect the network device from the network (defaults to `false`).
         */
        disconnected?: pulumi.Input<boolean>;
        /**
         * Whether to enable the network device (defaults to `true`).
         */
        enabled?: pulumi.Input<boolean>;
        /**
         * Whether this interface's firewall rules should be used (defaults to `false`).
         */
        firewall?: pulumi.Input<boolean>;
        /**
         * The MAC address.
         */
        macAddress?: pulumi.Input<string>;
        /**
         * The network device model (defaults to `virtio`).
         */
        model?: pulumi.Input<string>;
        /**
         * Force MTU, for VirtIO only. Set to 1 to use the bridge MTU. Cannot be larger than the bridge MTU.
         */
        mtu?: pulumi.Input<number>;
        /**
         * The number of queues for VirtIO (1..64).
         */
        queues?: pulumi.Input<number>;
        /**
         * The rate limit in megabytes per second.
         */
        rateLimit?: pulumi.Input<number>;
        /**
         * String containing a `;` separated list of VLAN trunks
         * ("10;20;30"). Note that the VLAN-aware feature need to be enabled on the PVE
         * Linux Bridge to use trunks.
         */
        trunks?: pulumi.Input<string>;
        /**
         * The VLAN identifier.
         */
        vlanId?: pulumi.Input<number>;
    }

    export interface VirtualMachineNuma {
        /**
         * The CPU cores to assign to the NUMA node (format is `0-7;16-31`).
         */
        cpus: pulumi.Input<string>;
        /**
         * The NUMA device name for Proxmox, in form
         * of `numaX` where `X` is a sequential number from 0 to 7.
         */
        device: pulumi.Input<string>;
        /**
         * The NUMA host nodes.
         */
        hostnodes?: pulumi.Input<string>;
        /**
         * The memory in megabytes to assign to the NUMA node.
         */
        memory: pulumi.Input<number>;
        /**
         * The NUMA policy (defaults to `preferred`).
         */
        policy?: pulumi.Input<string>;
    }

    export interface VirtualMachineOperatingSystem {
        /**
         * The type (defaults to `other`).
         */
        type?: pulumi.Input<string>;
    }

    export interface VirtualMachineSerialDevice {
        /**
         * The device (defaults to `socket`).
         * - `/dev/*` - A host serial device.
         */
        device?: pulumi.Input<string>;
    }

    export interface VirtualMachineSmbios {
        /**
         * The family string.
         */
        family?: pulumi.Input<string>;
        /**
         * The manufacturer.
         */
        manufacturer?: pulumi.Input<string>;
        /**
         * The product ID.
         */
        product?: pulumi.Input<string>;
        /**
         * The serial number.
         */
        serial?: pulumi.Input<string>;
        /**
         * The SKU number.
         */
        sku?: pulumi.Input<string>;
        /**
         * The UUID (defaults to randomly generated UUID).
         */
        uuid?: pulumi.Input<string>;
        /**
         * The version.
         */
        version?: pulumi.Input<string>;
    }

    export interface VirtualMachineStartup {
        /**
         * A non-negative number defining the delay in
         * seconds before the next VM is shut down.
         */
        downDelay?: pulumi.Input<number>;
        /**
         * A non-negative number defining the general startup
         * order.
         */
        order?: pulumi.Input<number>;
        /**
         * A non-negative number defining the delay in
         * seconds before the next VM is started.
         */
        upDelay?: pulumi.Input<number>;
    }

    export interface VirtualMachineTpmState {
        /**
         * The identifier for the datastore to create
         * the disk in (defaults to `local-lvm`).
         */
        datastoreId?: pulumi.Input<string>;
        /**
         * TPM state device version. Can be `v1.2` or `v2.0`.
         * (defaults to `v2.0`).
         */
        version?: pulumi.Input<string>;
    }

    export interface VirtualMachineUsb {
        /**
         * The Host USB device or port or the value `spice`. Use either this or `mapping`.
         */
        host?: pulumi.Input<string>;
        /**
         * The cluster-wide resource mapping name of the device, for example "usbdevice". Use either this or `host`.
         */
        mapping?: pulumi.Input<string>;
        /**
         * Makes the USB device a USB3 device for the VM
         * (defaults to `false`).
         */
        usb3?: pulumi.Input<boolean>;
    }

    export interface VirtualMachineVga {
        /**
         * Enable VNC clipboard by setting to `vnc`. See the [Proxmox documentation](https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm_virtual_machines_settings) section 10.2.8 for more information.
         */
        clipboard?: pulumi.Input<string>;
        /**
         * The VGA memory in megabytes (defaults to `16`).
         */
        memory?: pulumi.Input<number>;
        /**
         * The VGA type (defaults to `std`).
         */
        type?: pulumi.Input<string>;
    }
}

export namespace config {
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

/**
 * Manages an APT standard repository of a Proxmox VE node.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as proxmoxve from "@muhlba91/pulumi-proxmoxve";
 *
 * const exampleRepository = new proxmoxve.apt.standard.Repository("exampleRepository", {
 *     handle: "no-subscription",
 *     node: "pve",
 * });
 * const exampleApt_repositoryRepository = new proxmoxve.apt.Repository("exampleApt/repositoryRepository", {
 *     enabled: true,
 *     filePath: exampleRepository.filePath,
 *     index: exampleRepository.index,
 *     node: exampleRepository.node,
 * });
 * ```
 *
 * ## Import
 *
 * #!/usr/bin/env sh
 *
 * An APT standard repository can be imported using a comma-separated list consisting of the name of the Proxmox VE node,
 *
 * and the standard repository handle in the exact same order, e.g.:
 *
 * ```sh
 * $ pulumi import proxmoxve:Apt/standard/repository:Repository example pve,no-subscription
 * ```
 */
export class Repository extends pulumi.CustomResource {
    /**
     * Get an existing Repository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RepositoryState, opts?: pulumi.CustomResourceOptions): Repository {
        return new Repository(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'proxmoxve:Apt/standard/repository:Repository';

    /**
     * Returns true if the given object is an instance of Repository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Repository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Repository.__pulumiType;
    }

    /**
     * The description of the APT standard repository.
     */
    declare public /*out*/ readonly description: pulumi.Output<string>;
    /**
     * The absolute path of the source list file that contains this standard repository.
     */
    declare public /*out*/ readonly filePath: pulumi.Output<string>;
    /**
     * The handle of the APT standard repository. Must be `ceph-quincy-enterprise` | `ceph-quincy-no-subscription` | `ceph-quincy-test` | `ceph-reef-enterprise` | `ceph-reef-no-subscription` | `ceph-reef-test` | `ceph-squid-enterprise` | `ceph-squid-no-subscription` | `ceph-squid-test` | `enterprise` | `no-subscription` | `test`.
     */
    declare public readonly handle: pulumi.Output<string>;
    /**
     * The index within the defining source list file.
     */
    declare public /*out*/ readonly index: pulumi.Output<number>;
    /**
     * The name of the APT standard repository.
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * The name of the target Proxmox VE node.
     */
    declare public readonly node: pulumi.Output<string>;
    /**
     * Indicates the activation status.
     */
    declare public /*out*/ readonly status: pulumi.Output<number>;

    /**
     * Create a Repository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RepositoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RepositoryArgs | RepositoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RepositoryState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["filePath"] = state?.filePath;
            resourceInputs["handle"] = state?.handle;
            resourceInputs["index"] = state?.index;
            resourceInputs["name"] = state?.name;
            resourceInputs["node"] = state?.node;
            resourceInputs["status"] = state?.status;
        } else {
            const args = argsOrState as RepositoryArgs | undefined;
            if (args?.handle === undefined && !opts.urn) {
                throw new Error("Missing required property 'handle'");
            }
            if (args?.node === undefined && !opts.urn) {
                throw new Error("Missing required property 'node'");
            }
            resourceInputs["handle"] = args?.handle;
            resourceInputs["node"] = args?.node;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["filePath"] = undefined /*out*/;
            resourceInputs["index"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Repository.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Repository resources.
 */
export interface RepositoryState {
    /**
     * The description of the APT standard repository.
     */
    description?: pulumi.Input<string>;
    /**
     * The absolute path of the source list file that contains this standard repository.
     */
    filePath?: pulumi.Input<string>;
    /**
     * The handle of the APT standard repository. Must be `ceph-quincy-enterprise` | `ceph-quincy-no-subscription` | `ceph-quincy-test` | `ceph-reef-enterprise` | `ceph-reef-no-subscription` | `ceph-reef-test` | `ceph-squid-enterprise` | `ceph-squid-no-subscription` | `ceph-squid-test` | `enterprise` | `no-subscription` | `test`.
     */
    handle?: pulumi.Input<string>;
    /**
     * The index within the defining source list file.
     */
    index?: pulumi.Input<number>;
    /**
     * The name of the APT standard repository.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the target Proxmox VE node.
     */
    node?: pulumi.Input<string>;
    /**
     * Indicates the activation status.
     */
    status?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Repository resource.
 */
export interface RepositoryArgs {
    /**
     * The handle of the APT standard repository. Must be `ceph-quincy-enterprise` | `ceph-quincy-no-subscription` | `ceph-quincy-test` | `ceph-reef-enterprise` | `ceph-reef-no-subscription` | `ceph-reef-test` | `ceph-squid-enterprise` | `ceph-squid-no-subscription` | `ceph-squid-test` | `enterprise` | `no-subscription` | `test`.
     */
    handle: pulumi.Input<string>;
    /**
     * The name of the target Proxmox VE node.
     */
    node: pulumi.Input<string>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as utilities from "../../utilities";

/**
 * Manages a USB hardware mapping in a Proxmox VE cluster.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as proxmoxve from "@muhlba91/pulumi-proxmoxve";
 *
 * const example = new proxmoxve.hardware.mapping.Usb("example", {
 *     comment: "This is a comment",
 *     maps: [{
 *         comment: "This is a device specific comment",
 *         id: "8087:0a2b",
 *         node: "pve",
 *         path: "1-8.2",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * #!/usr/bin/env sh
 *
 * A USB hardware mapping can be imported using their name, e.g.:
 *
 * ```sh
 * $ pulumi import proxmoxve:Hardware/mapping/usb:Usb example example
 * ```
 */
export class Usb extends pulumi.CustomResource {
    /**
     * Get an existing Usb resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UsbState, opts?: pulumi.CustomResourceOptions): Usb {
        return new Usb(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'proxmoxve:Hardware/mapping/usb:Usb';

    /**
     * Returns true if the given object is an instance of Usb.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Usb {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Usb.__pulumiType;
    }

    /**
     * The comment of this USB hardware mapping.
     */
    declare public readonly comment: pulumi.Output<string | undefined>;
    /**
     * The actual map of devices for the hardware mapping.
     */
    declare public readonly maps: pulumi.Output<outputs.Hardware.mapping.UsbMap[]>;
    /**
     * The name of this hardware mapping.
     */
    declare public readonly name: pulumi.Output<string>;

    /**
     * Create a Usb resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UsbArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UsbArgs | UsbState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UsbState | undefined;
            resourceInputs["comment"] = state?.comment;
            resourceInputs["maps"] = state?.maps;
            resourceInputs["name"] = state?.name;
        } else {
            const args = argsOrState as UsbArgs | undefined;
            if (args?.maps === undefined && !opts.urn) {
                throw new Error("Missing required property 'maps'");
            }
            resourceInputs["comment"] = args?.comment;
            resourceInputs["maps"] = args?.maps;
            resourceInputs["name"] = args?.name;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Usb.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Usb resources.
 */
export interface UsbState {
    /**
     * The comment of this USB hardware mapping.
     */
    comment?: pulumi.Input<string>;
    /**
     * The actual map of devices for the hardware mapping.
     */
    maps?: pulumi.Input<pulumi.Input<inputs.Hardware.mapping.UsbMap>[]>;
    /**
     * The name of this hardware mapping.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Usb resource.
 */
export interface UsbArgs {
    /**
     * The comment of this USB hardware mapping.
     */
    comment?: pulumi.Input<string>;
    /**
     * The actual map of devices for the hardware mapping.
     */
    maps: pulumi.Input<pulumi.Input<inputs.Hardware.mapping.UsbMap>[]>;
    /**
     * The name of this hardware mapping.
     */
    name?: pulumi.Input<string>;
}

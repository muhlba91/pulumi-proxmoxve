// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class Hosts extends pulumi.CustomResource {
    /**
     * Get an existing Hosts resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HostsState, opts?: pulumi.CustomResourceOptions): Hosts {
        return new Hosts(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'proxmoxve:index/hosts:Hosts';

    /**
     * Returns true if the given object is an instance of Hosts.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Hosts {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Hosts.__pulumiType;
    }

    /**
     * The addresses
     */
    public /*out*/ readonly addresses!: pulumi.Output<string[]>;
    /**
     * The SHA1 digest
     */
    public /*out*/ readonly digest!: pulumi.Output<string>;
    /**
     * The host entries
     */
    public readonly entries!: pulumi.Output<outputs.HostsEntry[]>;
    /**
     * The hostnames
     */
    public /*out*/ readonly hostnames!: pulumi.Output<string[][]>;
    /**
     * The node name
     */
    public readonly nodeName!: pulumi.Output<string>;

    /**
     * Create a Hosts resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HostsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HostsArgs | HostsState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HostsState | undefined;
            inputs["addresses"] = state ? state.addresses : undefined;
            inputs["digest"] = state ? state.digest : undefined;
            inputs["entries"] = state ? state.entries : undefined;
            inputs["hostnames"] = state ? state.hostnames : undefined;
            inputs["nodeName"] = state ? state.nodeName : undefined;
        } else {
            const args = argsOrState as HostsArgs | undefined;
            if ((!args || args.entries === undefined) && !opts.urn) {
                throw new Error("Missing required property 'entries'");
            }
            if ((!args || args.nodeName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeName'");
            }
            inputs["entries"] = args ? args.entries : undefined;
            inputs["nodeName"] = args ? args.nodeName : undefined;
            inputs["addresses"] = undefined /*out*/;
            inputs["digest"] = undefined /*out*/;
            inputs["hostnames"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Hosts.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Hosts resources.
 */
export interface HostsState {
    /**
     * The addresses
     */
    addresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The SHA1 digest
     */
    digest?: pulumi.Input<string>;
    /**
     * The host entries
     */
    entries?: pulumi.Input<pulumi.Input<inputs.HostsEntry>[]>;
    /**
     * The hostnames
     */
    hostnames?: pulumi.Input<pulumi.Input<pulumi.Input<string>[]>[]>;
    /**
     * The node name
     */
    nodeName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Hosts resource.
 */
export interface HostsArgs {
    /**
     * The host entries
     */
    entries: pulumi.Input<pulumi.Input<inputs.HostsEntry>[]>;
    /**
     * The node name
     */
    nodeName: pulumi.Input<string>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * VLAN Zone in Proxmox SDN. It uses an existing local Linux or OVS bridge to connect to the node's physical interface. It uses VLAN tagging defined in the VNet to isolate the network segments. This allows connectivity of VMs between different nodes.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as proxmoxve from "@muhlba91/pulumi-proxmoxve";
 *
 * const example = new proxmoxve.sdnzone.Vlan("example", {
 *     bridge: "vmbr0",
 *     dns: "1.1.1.1",
 *     dnsZone: "example.com",
 *     zoneId: "vlan1",
 *     ipam: "pve",
 *     mtu: 1500,
 *     nodes: ["pve"],
 *     reverseDns: "1.1.1.1",
 * });
 * ```
 *
 * ## Import
 *
 * #!/usr/bin/env sh
 *
 * VLAN SDN zone can be imported using its unique identifier (zone ID)
 *
 * ```sh
 * $ pulumi import proxmoxve:SDNZone/vlan:Vlan example vlan1
 * ```
 */
export class Vlan extends pulumi.CustomResource {
    /**
     * Get an existing Vlan resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VlanState, opts?: pulumi.CustomResourceOptions): Vlan {
        return new Vlan(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'proxmoxve:SDNZone/vlan:Vlan';

    /**
     * Returns true if the given object is an instance of Vlan.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vlan {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vlan.__pulumiType;
    }

    /**
     * The local bridge or OVS switch, already configured on *each* node that allows node-to-node connection.
     */
    declare public readonly bridge: pulumi.Output<string>;
    /**
     * DNS API server address.
     */
    declare public readonly dns: pulumi.Output<string | undefined>;
    /**
     * DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
     */
    declare public readonly dnsZone: pulumi.Output<string | undefined>;
    /**
     * IP Address Management system.
     */
    declare public readonly ipam: pulumi.Output<string | undefined>;
    /**
     * MTU value for the zone.
     */
    declare public readonly mtu: pulumi.Output<number | undefined>;
    /**
     * The Proxmox nodes which the zone and associated VNets should be deployed on
     */
    declare public readonly nodes: pulumi.Output<string[]>;
    /**
     * Reverse DNS API server address.
     */
    declare public readonly reverseDns: pulumi.Output<string | undefined>;
    /**
     * The unique identifier of the SDN zone.
     */
    declare public readonly zoneId: pulumi.Output<string>;

    /**
     * Create a Vlan resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VlanArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VlanArgs | VlanState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VlanState | undefined;
            resourceInputs["bridge"] = state?.bridge;
            resourceInputs["dns"] = state?.dns;
            resourceInputs["dnsZone"] = state?.dnsZone;
            resourceInputs["ipam"] = state?.ipam;
            resourceInputs["mtu"] = state?.mtu;
            resourceInputs["nodes"] = state?.nodes;
            resourceInputs["reverseDns"] = state?.reverseDns;
            resourceInputs["zoneId"] = state?.zoneId;
        } else {
            const args = argsOrState as VlanArgs | undefined;
            if (args?.bridge === undefined && !opts.urn) {
                throw new Error("Missing required property 'bridge'");
            }
            if (args?.nodes === undefined && !opts.urn) {
                throw new Error("Missing required property 'nodes'");
            }
            if (args?.zoneId === undefined && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["bridge"] = args?.bridge;
            resourceInputs["dns"] = args?.dns;
            resourceInputs["dnsZone"] = args?.dnsZone;
            resourceInputs["ipam"] = args?.ipam;
            resourceInputs["mtu"] = args?.mtu;
            resourceInputs["nodes"] = args?.nodes;
            resourceInputs["reverseDns"] = args?.reverseDns;
            resourceInputs["zoneId"] = args?.zoneId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vlan.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Vlan resources.
 */
export interface VlanState {
    /**
     * The local bridge or OVS switch, already configured on *each* node that allows node-to-node connection.
     */
    bridge?: pulumi.Input<string>;
    /**
     * DNS API server address.
     */
    dns?: pulumi.Input<string>;
    /**
     * DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
     */
    dnsZone?: pulumi.Input<string>;
    /**
     * IP Address Management system.
     */
    ipam?: pulumi.Input<string>;
    /**
     * MTU value for the zone.
     */
    mtu?: pulumi.Input<number>;
    /**
     * The Proxmox nodes which the zone and associated VNets should be deployed on
     */
    nodes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Reverse DNS API server address.
     */
    reverseDns?: pulumi.Input<string>;
    /**
     * The unique identifier of the SDN zone.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Vlan resource.
 */
export interface VlanArgs {
    /**
     * The local bridge or OVS switch, already configured on *each* node that allows node-to-node connection.
     */
    bridge: pulumi.Input<string>;
    /**
     * DNS API server address.
     */
    dns?: pulumi.Input<string>;
    /**
     * DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
     */
    dnsZone?: pulumi.Input<string>;
    /**
     * IP Address Management system.
     */
    ipam?: pulumi.Input<string>;
    /**
     * MTU value for the zone.
     */
    mtu?: pulumi.Input<number>;
    /**
     * The Proxmox nodes which the zone and associated VNets should be deployed on
     */
    nodes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Reverse DNS API server address.
     */
    reverseDns?: pulumi.Input<string>;
    /**
     * The unique identifier of the SDN zone.
     */
    zoneId: pulumi.Input<string>;
}

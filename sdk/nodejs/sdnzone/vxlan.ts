// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * VXLAN Zone in Proxmox SDN. It establishes a tunnel (overlay) on top of an existing network (underlay). This encapsulates layer 2 Ethernet frames within layer 4 UDP datagrams using the default destination port 4789. You have to configure the underlay network yourself to enable UDP connectivity between all peers. Because VXLAN encapsulation uses 50 bytes, the MTU needs to be 50 bytes lower than the outgoing physical interface.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as proxmoxve from "@muhlba91/pulumi-proxmoxve";
 *
 * const example = new proxmoxve.sdnzone.Vxlan("example", {
 *     dns: "1.1.1.1",
 *     dnsZone: "example.com",
 *     zoneId: "vxlan1",
 *     ipam: "pve",
 *     mtu: 1450,
 *     nodes: ["pve"],
 *     peers: [
 *         "10.0.0.1",
 *         "10.0.0.2",
 *         "10.0.0.3",
 *     ],
 *     reverseDns: "1.1.1.1",
 * });
 * ```
 *
 * ## Import
 *
 * #!/usr/bin/env sh
 *
 * VXLAN SDN zone can be imported using its unique identifier (zone ID)
 *
 * ```sh
 * $ pulumi import proxmoxve:SDNZone/vxlan:Vxlan example vxlan1
 * ```
 */
export class Vxlan extends pulumi.CustomResource {
    /**
     * Get an existing Vxlan resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VxlanState, opts?: pulumi.CustomResourceOptions): Vxlan {
        return new Vxlan(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'proxmoxve:SDNZone/vxlan:Vxlan';

    /**
     * Returns true if the given object is an instance of Vxlan.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vxlan {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vxlan.__pulumiType;
    }

    /**
     * DNS API server address.
     */
    declare public readonly dns: pulumi.Output<string | undefined>;
    /**
     * DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
     */
    declare public readonly dnsZone: pulumi.Output<string | undefined>;
    /**
     * IP Address Management system.
     */
    declare public readonly ipam: pulumi.Output<string | undefined>;
    /**
     * MTU value for the zone.
     */
    declare public readonly mtu: pulumi.Output<number | undefined>;
    /**
     * The Proxmox nodes which the zone and associated VNets should be deployed on
     */
    declare public readonly nodes: pulumi.Output<string[]>;
    /**
     * A list of IP addresses of each node in the VXLAN zone. This can be external nodes reachable at this IP address. All nodes in the cluster need to be mentioned here
     */
    declare public readonly peers: pulumi.Output<string[]>;
    /**
     * Reverse DNS API server address.
     */
    declare public readonly reverseDns: pulumi.Output<string | undefined>;
    /**
     * The unique identifier of the SDN zone.
     */
    declare public readonly zoneId: pulumi.Output<string>;

    /**
     * Create a Vxlan resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VxlanArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VxlanArgs | VxlanState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VxlanState | undefined;
            resourceInputs["dns"] = state?.dns;
            resourceInputs["dnsZone"] = state?.dnsZone;
            resourceInputs["ipam"] = state?.ipam;
            resourceInputs["mtu"] = state?.mtu;
            resourceInputs["nodes"] = state?.nodes;
            resourceInputs["peers"] = state?.peers;
            resourceInputs["reverseDns"] = state?.reverseDns;
            resourceInputs["zoneId"] = state?.zoneId;
        } else {
            const args = argsOrState as VxlanArgs | undefined;
            if (args?.nodes === undefined && !opts.urn) {
                throw new Error("Missing required property 'nodes'");
            }
            if (args?.peers === undefined && !opts.urn) {
                throw new Error("Missing required property 'peers'");
            }
            if (args?.zoneId === undefined && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["dns"] = args?.dns;
            resourceInputs["dnsZone"] = args?.dnsZone;
            resourceInputs["ipam"] = args?.ipam;
            resourceInputs["mtu"] = args?.mtu;
            resourceInputs["nodes"] = args?.nodes;
            resourceInputs["peers"] = args?.peers;
            resourceInputs["reverseDns"] = args?.reverseDns;
            resourceInputs["zoneId"] = args?.zoneId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vxlan.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Vxlan resources.
 */
export interface VxlanState {
    /**
     * DNS API server address.
     */
    dns?: pulumi.Input<string>;
    /**
     * DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
     */
    dnsZone?: pulumi.Input<string>;
    /**
     * IP Address Management system.
     */
    ipam?: pulumi.Input<string>;
    /**
     * MTU value for the zone.
     */
    mtu?: pulumi.Input<number>;
    /**
     * The Proxmox nodes which the zone and associated VNets should be deployed on
     */
    nodes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of IP addresses of each node in the VXLAN zone. This can be external nodes reachable at this IP address. All nodes in the cluster need to be mentioned here
     */
    peers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Reverse DNS API server address.
     */
    reverseDns?: pulumi.Input<string>;
    /**
     * The unique identifier of the SDN zone.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Vxlan resource.
 */
export interface VxlanArgs {
    /**
     * DNS API server address.
     */
    dns?: pulumi.Input<string>;
    /**
     * DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
     */
    dnsZone?: pulumi.Input<string>;
    /**
     * IP Address Management system.
     */
    ipam?: pulumi.Input<string>;
    /**
     * MTU value for the zone.
     */
    mtu?: pulumi.Input<number>;
    /**
     * The Proxmox nodes which the zone and associated VNets should be deployed on
     */
    nodes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of IP addresses of each node in the VXLAN zone. This can be external nodes reachable at this IP address. All nodes in the cluster need to be mentioned here
     */
    peers: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Reverse DNS API server address.
     */
    reverseDns?: pulumi.Input<string>;
    /**
     * The unique identifier of the SDN zone.
     */
    zoneId: pulumi.Input<string>;
}

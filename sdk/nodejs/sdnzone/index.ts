// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { EvpnArgs, EvpnState } from "./evpn";
export type Evpn = import("./evpn").Evpn;
export const Evpn: typeof import("./evpn").Evpn = null as any;
utilities.lazyLoad(exports, ["Evpn"], () => require("./evpn"));

export { GetEvpnArgs, GetEvpnResult, GetEvpnOutputArgs } from "./getEvpn";
export const getEvpn: typeof import("./getEvpn").getEvpn = null as any;
export const getEvpnOutput: typeof import("./getEvpn").getEvpnOutput = null as any;
utilities.lazyLoad(exports, ["getEvpn","getEvpnOutput"], () => require("./getEvpn"));

export { GetQinqArgs, GetQinqResult, GetQinqOutputArgs } from "./getQinq";
export const getQinq: typeof import("./getQinq").getQinq = null as any;
export const getQinqOutput: typeof import("./getQinq").getQinqOutput = null as any;
utilities.lazyLoad(exports, ["getQinq","getQinqOutput"], () => require("./getQinq"));

export { GetSimpleArgs, GetSimpleResult, GetSimpleOutputArgs } from "./getSimple";
export const getSimple: typeof import("./getSimple").getSimple = null as any;
export const getSimpleOutput: typeof import("./getSimple").getSimpleOutput = null as any;
utilities.lazyLoad(exports, ["getSimple","getSimpleOutput"], () => require("./getSimple"));

export { GetVlanArgs, GetVlanResult, GetVlanOutputArgs } from "./getVlan";
export const getVlan: typeof import("./getVlan").getVlan = null as any;
export const getVlanOutput: typeof import("./getVlan").getVlanOutput = null as any;
utilities.lazyLoad(exports, ["getVlan","getVlanOutput"], () => require("./getVlan"));

export { GetVxlanArgs, GetVxlanResult, GetVxlanOutputArgs } from "./getVxlan";
export const getVxlan: typeof import("./getVxlan").getVxlan = null as any;
export const getVxlanOutput: typeof import("./getVxlan").getVxlanOutput = null as any;
utilities.lazyLoad(exports, ["getVxlan","getVxlanOutput"], () => require("./getVxlan"));

export { QinqArgs, QinqState } from "./qinq";
export type Qinq = import("./qinq").Qinq;
export const Qinq: typeof import("./qinq").Qinq = null as any;
utilities.lazyLoad(exports, ["Qinq"], () => require("./qinq"));

export { SimpleArgs, SimpleState } from "./simple";
export type Simple = import("./simple").Simple;
export const Simple: typeof import("./simple").Simple = null as any;
utilities.lazyLoad(exports, ["Simple"], () => require("./simple"));

export { VlanArgs, VlanState } from "./vlan";
export type Vlan = import("./vlan").Vlan;
export const Vlan: typeof import("./vlan").Vlan = null as any;
utilities.lazyLoad(exports, ["Vlan"], () => require("./vlan"));

export { VxlanArgs, VxlanState } from "./vxlan";
export type Vxlan = import("./vxlan").Vxlan;
export const Vxlan: typeof import("./vxlan").Vxlan = null as any;
utilities.lazyLoad(exports, ["Vxlan"], () => require("./vxlan"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "proxmoxve:SDNZone/evpn:Evpn":
                return new Evpn(name, <any>undefined, { urn })
            case "proxmoxve:SDNZone/qinq:Qinq":
                return new Qinq(name, <any>undefined, { urn })
            case "proxmoxve:SDNZone/simple:Simple":
                return new Simple(name, <any>undefined, { urn })
            case "proxmoxve:SDNZone/vlan:Vlan":
                return new Vlan(name, <any>undefined, { urn })
            case "proxmoxve:SDNZone/vxlan:Vxlan":
                return new Vxlan(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("proxmoxve", "SDNZone/evpn", _module)
pulumi.runtime.registerResourceModule("proxmoxve", "SDNZone/qinq", _module)
pulumi.runtime.registerResourceModule("proxmoxve", "SDNZone/simple", _module)
pulumi.runtime.registerResourceModule("proxmoxve", "SDNZone/vlan", _module)
pulumi.runtime.registerResourceModule("proxmoxve", "SDNZone/vxlan", _module)

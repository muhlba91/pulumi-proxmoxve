// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * EVPN Zone in Proxmox SDN. The EVPN zone creates a routable Layer 3 network, capable of spanning across multiple clusters.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as proxmoxve from "@muhlba91/pulumi-proxmoxve";
 *
 * const example = new proxmoxve.sdnzone.Evpn("example", {
 *     advertiseSubnets: true,
 *     controller: "evpn-controller1",
 *     disableArpNdSuppression: false,
 *     dns: "1.1.1.1",
 *     dnsZone: "example.com",
 *     exitNodes: [
 *         "pve-exit1",
 *         "pve-exit2",
 *     ],
 *     exitNodesLocalRouting: true,
 *     zoneId: "evpn1",
 *     ipam: "pve",
 *     mtu: 1450,
 *     nodes: ["pve"],
 *     primaryExitNode: "pve-exit1",
 *     reverseDns: "1.1.1.1",
 *     rtImport: "65000:65000",
 *     vrfVxlan: 4000,
 * });
 * ```
 *
 * ## Import
 *
 * #!/usr/bin/env sh
 *
 * EVPN SDN zone can be imported using its unique identifier (zone ID)
 *
 * ```sh
 * $ pulumi import proxmoxve:SDNZone/evpn:Evpn example evpn1
 * ```
 */
export class Evpn extends pulumi.CustomResource {
    /**
     * Get an existing Evpn resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EvpnState, opts?: pulumi.CustomResourceOptions): Evpn {
        return new Evpn(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'proxmoxve:SDNZone/evpn:Evpn';

    /**
     * Returns true if the given object is an instance of Evpn.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Evpn {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Evpn.__pulumiType;
    }

    /**
     * Enable subnet advertisement for EVPN.
     */
    declare public readonly advertiseSubnets: pulumi.Output<boolean | undefined>;
    /**
     * EVPN controller address.
     */
    declare public readonly controller: pulumi.Output<string>;
    /**
     * Disable ARP/ND suppression for EVPN.
     */
    declare public readonly disableArpNdSuppression: pulumi.Output<boolean | undefined>;
    /**
     * DNS API server address.
     */
    declare public readonly dns: pulumi.Output<string | undefined>;
    /**
     * DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
     */
    declare public readonly dnsZone: pulumi.Output<string | undefined>;
    /**
     * List of exit nodes for EVPN.
     */
    declare public readonly exitNodes: pulumi.Output<string[]>;
    /**
     * Enable local routing for EVPN exit nodes.
     */
    declare public readonly exitNodesLocalRouting: pulumi.Output<boolean | undefined>;
    /**
     * IP Address Management system.
     */
    declare public readonly ipam: pulumi.Output<string | undefined>;
    /**
     * MTU value for the zone.
     */
    declare public readonly mtu: pulumi.Output<number | undefined>;
    /**
     * The Proxmox nodes which the zone and associated VNets should be deployed on
     */
    declare public readonly nodes: pulumi.Output<string[]>;
    /**
     * Indicates if the zone has pending configuration changes that need to be applied.
     */
    declare public /*out*/ readonly pending: pulumi.Output<boolean>;
    /**
     * Primary exit node for EVPN.
     */
    declare public readonly primaryExitNode: pulumi.Output<string | undefined>;
    /**
     * Reverse DNS API server address.
     */
    declare public readonly reverseDns: pulumi.Output<string | undefined>;
    /**
     * Route target import for EVPN.
     */
    declare public readonly rtImport: pulumi.Output<string | undefined>;
    /**
     * Indicates the current state of the zone.
     */
    declare public /*out*/ readonly state: pulumi.Output<string>;
    /**
     * VRF VXLAN-ID used for dedicated routing interconnect between VNets. It must be different than the VXLAN-ID of the VNets.
     */
    declare public readonly vrfVxlan: pulumi.Output<number>;
    /**
     * The unique identifier of the SDN zone.
     */
    declare public readonly zoneId: pulumi.Output<string>;

    /**
     * Create a Evpn resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EvpnArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EvpnArgs | EvpnState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EvpnState | undefined;
            resourceInputs["advertiseSubnets"] = state?.advertiseSubnets;
            resourceInputs["controller"] = state?.controller;
            resourceInputs["disableArpNdSuppression"] = state?.disableArpNdSuppression;
            resourceInputs["dns"] = state?.dns;
            resourceInputs["dnsZone"] = state?.dnsZone;
            resourceInputs["exitNodes"] = state?.exitNodes;
            resourceInputs["exitNodesLocalRouting"] = state?.exitNodesLocalRouting;
            resourceInputs["ipam"] = state?.ipam;
            resourceInputs["mtu"] = state?.mtu;
            resourceInputs["nodes"] = state?.nodes;
            resourceInputs["pending"] = state?.pending;
            resourceInputs["primaryExitNode"] = state?.primaryExitNode;
            resourceInputs["reverseDns"] = state?.reverseDns;
            resourceInputs["rtImport"] = state?.rtImport;
            resourceInputs["state"] = state?.state;
            resourceInputs["vrfVxlan"] = state?.vrfVxlan;
            resourceInputs["zoneId"] = state?.zoneId;
        } else {
            const args = argsOrState as EvpnArgs | undefined;
            if (args?.controller === undefined && !opts.urn) {
                throw new Error("Missing required property 'controller'");
            }
            if (args?.nodes === undefined && !opts.urn) {
                throw new Error("Missing required property 'nodes'");
            }
            if (args?.vrfVxlan === undefined && !opts.urn) {
                throw new Error("Missing required property 'vrfVxlan'");
            }
            if (args?.zoneId === undefined && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["advertiseSubnets"] = args?.advertiseSubnets;
            resourceInputs["controller"] = args?.controller;
            resourceInputs["disableArpNdSuppression"] = args?.disableArpNdSuppression;
            resourceInputs["dns"] = args?.dns;
            resourceInputs["dnsZone"] = args?.dnsZone;
            resourceInputs["exitNodes"] = args?.exitNodes;
            resourceInputs["exitNodesLocalRouting"] = args?.exitNodesLocalRouting;
            resourceInputs["ipam"] = args?.ipam;
            resourceInputs["mtu"] = args?.mtu;
            resourceInputs["nodes"] = args?.nodes;
            resourceInputs["primaryExitNode"] = args?.primaryExitNode;
            resourceInputs["reverseDns"] = args?.reverseDns;
            resourceInputs["rtImport"] = args?.rtImport;
            resourceInputs["vrfVxlan"] = args?.vrfVxlan;
            resourceInputs["zoneId"] = args?.zoneId;
            resourceInputs["pending"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Evpn.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Evpn resources.
 */
export interface EvpnState {
    /**
     * Enable subnet advertisement for EVPN.
     */
    advertiseSubnets?: pulumi.Input<boolean>;
    /**
     * EVPN controller address.
     */
    controller?: pulumi.Input<string>;
    /**
     * Disable ARP/ND suppression for EVPN.
     */
    disableArpNdSuppression?: pulumi.Input<boolean>;
    /**
     * DNS API server address.
     */
    dns?: pulumi.Input<string>;
    /**
     * DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
     */
    dnsZone?: pulumi.Input<string>;
    /**
     * List of exit nodes for EVPN.
     */
    exitNodes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable local routing for EVPN exit nodes.
     */
    exitNodesLocalRouting?: pulumi.Input<boolean>;
    /**
     * IP Address Management system.
     */
    ipam?: pulumi.Input<string>;
    /**
     * MTU value for the zone.
     */
    mtu?: pulumi.Input<number>;
    /**
     * The Proxmox nodes which the zone and associated VNets should be deployed on
     */
    nodes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates if the zone has pending configuration changes that need to be applied.
     */
    pending?: pulumi.Input<boolean>;
    /**
     * Primary exit node for EVPN.
     */
    primaryExitNode?: pulumi.Input<string>;
    /**
     * Reverse DNS API server address.
     */
    reverseDns?: pulumi.Input<string>;
    /**
     * Route target import for EVPN.
     */
    rtImport?: pulumi.Input<string>;
    /**
     * Indicates the current state of the zone.
     */
    state?: pulumi.Input<string>;
    /**
     * VRF VXLAN-ID used for dedicated routing interconnect between VNets. It must be different than the VXLAN-ID of the VNets.
     */
    vrfVxlan?: pulumi.Input<number>;
    /**
     * The unique identifier of the SDN zone.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Evpn resource.
 */
export interface EvpnArgs {
    /**
     * Enable subnet advertisement for EVPN.
     */
    advertiseSubnets?: pulumi.Input<boolean>;
    /**
     * EVPN controller address.
     */
    controller: pulumi.Input<string>;
    /**
     * Disable ARP/ND suppression for EVPN.
     */
    disableArpNdSuppression?: pulumi.Input<boolean>;
    /**
     * DNS API server address.
     */
    dns?: pulumi.Input<string>;
    /**
     * DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
     */
    dnsZone?: pulumi.Input<string>;
    /**
     * List of exit nodes for EVPN.
     */
    exitNodes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable local routing for EVPN exit nodes.
     */
    exitNodesLocalRouting?: pulumi.Input<boolean>;
    /**
     * IP Address Management system.
     */
    ipam?: pulumi.Input<string>;
    /**
     * MTU value for the zone.
     */
    mtu?: pulumi.Input<number>;
    /**
     * The Proxmox nodes which the zone and associated VNets should be deployed on
     */
    nodes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Primary exit node for EVPN.
     */
    primaryExitNode?: pulumi.Input<string>;
    /**
     * Reverse DNS API server address.
     */
    reverseDns?: pulumi.Input<string>;
    /**
     * Route target import for EVPN.
     */
    rtImport?: pulumi.Input<string>;
    /**
     * VRF VXLAN-ID used for dedicated routing interconnect between VNets. It must be different than the VXLAN-ID of the VNets.
     */
    vrfVxlan: pulumi.Input<number>;
    /**
     * The unique identifier of the SDN zone.
     */
    zoneId: pulumi.Input<string>;
}

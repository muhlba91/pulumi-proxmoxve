// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Retrieves information about a VLAN Zone in Proxmox SDN. It uses an existing local Linux or OVS bridge to connect to the node's physical interface. It uses VLAN tagging defined in the VNet to isolate the network segments. This allows connectivity of VMs between different nodes.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as proxmoxve from "@muhlba91/pulumi-proxmoxve";
 *
 * const example = proxmoxve.SDNZone.getVlan({
 *     id: "vlan1",
 * });
 * export const dataProxmoxVirtualEnvironmentSdnZoneVlan = {
 *     id: example.then(example => example.id),
 *     nodes: example.then(example => example.nodes),
 *     bridge: example.then(example => example.bridge),
 *     mtu: example.then(example => example.mtu),
 *     dns: example.then(example => example.dns),
 *     dns_zone: example.then(example => example.dnsZone),
 *     ipam: example.then(example => example.ipam),
 *     reverse_dns: example.then(example => example.reverseDns),
 * };
 * ```
 */
export function getVlan(args: GetVlanArgs, opts?: pulumi.InvokeOptions): Promise<GetVlanResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("proxmoxve:SDNZone/getVlan:getVlan", {
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getVlan.
 */
export interface GetVlanArgs {
    /**
     * The unique identifier of the SDN zone.
     */
    id: string;
}

/**
 * A collection of values returned by getVlan.
 */
export interface GetVlanResult {
    /**
     * The local bridge or OVS switch, already configured on *each* node that allows node-to-node connection.
     */
    readonly bridge: string;
    /**
     * DNS API server address.
     */
    readonly dns: string;
    /**
     * DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
     */
    readonly dnsZone: string;
    /**
     * The unique identifier of the SDN zone.
     */
    readonly id: string;
    /**
     * IP Address Management system.
     */
    readonly ipam: string;
    /**
     * MTU value for the zone.
     */
    readonly mtu: number;
    /**
     * The Proxmox nodes which the zone and associated VNets are deployed on
     */
    readonly nodes: string[];
    /**
     * Reverse DNS API server address.
     */
    readonly reverseDns: string;
}
/**
 * Retrieves information about a VLAN Zone in Proxmox SDN. It uses an existing local Linux or OVS bridge to connect to the node's physical interface. It uses VLAN tagging defined in the VNet to isolate the network segments. This allows connectivity of VMs between different nodes.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as proxmoxve from "@muhlba91/pulumi-proxmoxve";
 *
 * const example = proxmoxve.SDNZone.getVlan({
 *     id: "vlan1",
 * });
 * export const dataProxmoxVirtualEnvironmentSdnZoneVlan = {
 *     id: example.then(example => example.id),
 *     nodes: example.then(example => example.nodes),
 *     bridge: example.then(example => example.bridge),
 *     mtu: example.then(example => example.mtu),
 *     dns: example.then(example => example.dns),
 *     dns_zone: example.then(example => example.dnsZone),
 *     ipam: example.then(example => example.ipam),
 *     reverse_dns: example.then(example => example.reverseDns),
 * };
 * ```
 */
export function getVlanOutput(args: GetVlanOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetVlanResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("proxmoxve:SDNZone/getVlan:getVlan", {
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getVlan.
 */
export interface GetVlanOutputArgs {
    /**
     * The unique identifier of the SDN zone.
     */
    id: pulumi.Input<string>;
}

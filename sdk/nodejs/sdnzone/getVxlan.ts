// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Retrieves information about a VXLAN Zone in Proxmox SDN. It establishes a tunnel (overlay) on top of an existing network (underlay). This encapsulates layer 2 Ethernet frames within layer 4 UDP datagrams using the default destination port 4789. You have to configure the underlay network yourself to enable UDP connectivity between all peers. Because VXLAN encapsulation uses 50 bytes, the MTU needs to be 50 bytes lower than the outgoing physical interface.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as proxmoxve from "@muhlba91/pulumi-proxmoxve";
 *
 * const example = proxmoxve.SDNZone.getVxlan({
 *     id: "vxlan1",
 * });
 * export const dataProxmoxVirtualEnvironmentSdnZoneVxlan = {
 *     id: example.then(example => example.id),
 *     nodes: example.then(example => example.nodes),
 *     peers: example.then(example => example.peers),
 *     mtu: example.then(example => example.mtu),
 *     dns: example.then(example => example.dns),
 *     dns_zone: example.then(example => example.dnsZone),
 *     ipam: example.then(example => example.ipam),
 *     reverse_dns: example.then(example => example.reverseDns),
 * };
 * ```
 */
export function getVxlan(args: GetVxlanArgs, opts?: pulumi.InvokeOptions): Promise<GetVxlanResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("proxmoxve:SDNZone/getVxlan:getVxlan", {
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getVxlan.
 */
export interface GetVxlanArgs {
    /**
     * The unique identifier of the SDN zone.
     */
    id: string;
}

/**
 * A collection of values returned by getVxlan.
 */
export interface GetVxlanResult {
    /**
     * DNS API server address.
     */
    readonly dns: string;
    /**
     * DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
     */
    readonly dnsZone: string;
    /**
     * The unique identifier of the SDN zone.
     */
    readonly id: string;
    /**
     * IP Address Management system.
     */
    readonly ipam: string;
    /**
     * MTU value for the zone.
     */
    readonly mtu: number;
    /**
     * The Proxmox nodes which the zone and associated VNets are deployed on
     */
    readonly nodes: string[];
    /**
     * A list of IP addresses of each node in the VXLAN zone. This can be external nodes reachable at this IP address. All nodes in the cluster need to be mentioned here
     */
    readonly peers: string[];
    /**
     * Reverse DNS API server address.
     */
    readonly reverseDns: string;
}
/**
 * Retrieves information about a VXLAN Zone in Proxmox SDN. It establishes a tunnel (overlay) on top of an existing network (underlay). This encapsulates layer 2 Ethernet frames within layer 4 UDP datagrams using the default destination port 4789. You have to configure the underlay network yourself to enable UDP connectivity between all peers. Because VXLAN encapsulation uses 50 bytes, the MTU needs to be 50 bytes lower than the outgoing physical interface.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as proxmoxve from "@muhlba91/pulumi-proxmoxve";
 *
 * const example = proxmoxve.SDNZone.getVxlan({
 *     id: "vxlan1",
 * });
 * export const dataProxmoxVirtualEnvironmentSdnZoneVxlan = {
 *     id: example.then(example => example.id),
 *     nodes: example.then(example => example.nodes),
 *     peers: example.then(example => example.peers),
 *     mtu: example.then(example => example.mtu),
 *     dns: example.then(example => example.dns),
 *     dns_zone: example.then(example => example.dnsZone),
 *     ipam: example.then(example => example.ipam),
 *     reverse_dns: example.then(example => example.reverseDns),
 * };
 * ```
 */
export function getVxlanOutput(args: GetVxlanOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetVxlanResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("proxmoxve:SDNZone/getVxlan:getVxlan", {
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getVxlan.
 */
export interface GetVxlanOutputArgs {
    /**
     * The unique identifier of the SDN zone.
     */
    id: pulumi.Input<string>;
}

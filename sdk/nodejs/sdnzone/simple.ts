// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Simple Zone in Proxmox SDN. It will create an isolated VNet bridge. This bridge is not linked to a physical interface, and VM traffic is only local on each the node. It can be used in NAT or routed setups.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as proxmoxve from "@muhlba91/pulumi-proxmoxve";
 *
 * const example = new proxmoxve.sdnzone.Simple("example", {
 *     dns: "1.1.1.1",
 *     dnsZone: "example.com",
 *     zoneId: "simple1",
 *     ipam: "pve",
 *     mtu: 1500,
 *     nodes: ["pve"],
 *     reverseDns: "1.1.1.1",
 * });
 * ```
 *
 * ## Import
 *
 * #!/usr/bin/env sh
 *
 * Simple SDN zone can be imported using its unique identifier (zone ID)
 *
 * ```sh
 * $ pulumi import proxmoxve:SDNZone/simple:Simple example simple1
 * ```
 */
export class Simple extends pulumi.CustomResource {
    /**
     * Get an existing Simple resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SimpleState, opts?: pulumi.CustomResourceOptions): Simple {
        return new Simple(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'proxmoxve:SDNZone/simple:Simple';

    /**
     * Returns true if the given object is an instance of Simple.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Simple {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Simple.__pulumiType;
    }

    /**
     * The type of the DHCP backend for this zone. Currently the only supported value is `dnsmasq`.
     */
    declare public readonly dhcp: pulumi.Output<string | undefined>;
    /**
     * DNS API server address.
     */
    declare public readonly dns: pulumi.Output<string | undefined>;
    /**
     * DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
     */
    declare public readonly dnsZone: pulumi.Output<string | undefined>;
    /**
     * IP Address Management system.
     */
    declare public readonly ipam: pulumi.Output<string | undefined>;
    /**
     * MTU value for the zone.
     */
    declare public readonly mtu: pulumi.Output<number | undefined>;
    /**
     * The Proxmox nodes which the zone and associated VNets should be deployed on
     */
    declare public readonly nodes: pulumi.Output<string[]>;
    /**
     * Indicates if the zone has pending configuration changes that need to be applied.
     */
    declare public /*out*/ readonly pending: pulumi.Output<boolean>;
    /**
     * Reverse DNS API server address.
     */
    declare public readonly reverseDns: pulumi.Output<string | undefined>;
    /**
     * Indicates the current state of the zone.
     */
    declare public /*out*/ readonly state: pulumi.Output<string>;
    /**
     * The unique identifier of the SDN zone.
     */
    declare public readonly zoneId: pulumi.Output<string>;

    /**
     * Create a Simple resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SimpleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SimpleArgs | SimpleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SimpleState | undefined;
            resourceInputs["dhcp"] = state?.dhcp;
            resourceInputs["dns"] = state?.dns;
            resourceInputs["dnsZone"] = state?.dnsZone;
            resourceInputs["ipam"] = state?.ipam;
            resourceInputs["mtu"] = state?.mtu;
            resourceInputs["nodes"] = state?.nodes;
            resourceInputs["pending"] = state?.pending;
            resourceInputs["reverseDns"] = state?.reverseDns;
            resourceInputs["state"] = state?.state;
            resourceInputs["zoneId"] = state?.zoneId;
        } else {
            const args = argsOrState as SimpleArgs | undefined;
            if (args?.nodes === undefined && !opts.urn) {
                throw new Error("Missing required property 'nodes'");
            }
            if (args?.zoneId === undefined && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["dhcp"] = args?.dhcp;
            resourceInputs["dns"] = args?.dns;
            resourceInputs["dnsZone"] = args?.dnsZone;
            resourceInputs["ipam"] = args?.ipam;
            resourceInputs["mtu"] = args?.mtu;
            resourceInputs["nodes"] = args?.nodes;
            resourceInputs["reverseDns"] = args?.reverseDns;
            resourceInputs["zoneId"] = args?.zoneId;
            resourceInputs["pending"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Simple.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Simple resources.
 */
export interface SimpleState {
    /**
     * The type of the DHCP backend for this zone. Currently the only supported value is `dnsmasq`.
     */
    dhcp?: pulumi.Input<string>;
    /**
     * DNS API server address.
     */
    dns?: pulumi.Input<string>;
    /**
     * DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
     */
    dnsZone?: pulumi.Input<string>;
    /**
     * IP Address Management system.
     */
    ipam?: pulumi.Input<string>;
    /**
     * MTU value for the zone.
     */
    mtu?: pulumi.Input<number>;
    /**
     * The Proxmox nodes which the zone and associated VNets should be deployed on
     */
    nodes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates if the zone has pending configuration changes that need to be applied.
     */
    pending?: pulumi.Input<boolean>;
    /**
     * Reverse DNS API server address.
     */
    reverseDns?: pulumi.Input<string>;
    /**
     * Indicates the current state of the zone.
     */
    state?: pulumi.Input<string>;
    /**
     * The unique identifier of the SDN zone.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Simple resource.
 */
export interface SimpleArgs {
    /**
     * The type of the DHCP backend for this zone. Currently the only supported value is `dnsmasq`.
     */
    dhcp?: pulumi.Input<string>;
    /**
     * DNS API server address.
     */
    dns?: pulumi.Input<string>;
    /**
     * DNS domain name. Used to register hostnames, such as `<hostname>.<domain>`. The DNS zone must already exist on the DNS server.
     */
    dnsZone?: pulumi.Input<string>;
    /**
     * IP Address Management system.
     */
    ipam?: pulumi.Input<string>;
    /**
     * MTU value for the zone.
     */
    mtu?: pulumi.Input<number>;
    /**
     * The Proxmox nodes which the zone and associated VNets should be deployed on
     */
    nodes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Reverse DNS API server address.
     */
    reverseDns?: pulumi.Input<string>;
    /**
     * The unique identifier of the SDN zone.
     */
    zoneId: pulumi.Input<string>;
}

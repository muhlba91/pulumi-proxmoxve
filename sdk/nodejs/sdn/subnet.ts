// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages SDN Subnets in Proxmox VE.
 *
 * ## Import
 *
 * #!/usr/bin/env sh
 *
 * SDN subnet can be imported using its unique identifier in the format: <vnet>/<subnet-id>
 *
 * The <subnet-id> is the canonical ID from Proxmox, e.g., "zone1-192.168.1.0-24"
 *
 * ```sh
 * $ pulumi import proxmoxve:Sdn/subnet:Subnet basic_subnet vnet1/zone1-192.168.1.0-24
 * ```
 *
 * ```sh
 * $ pulumi import proxmoxve:Sdn/subnet:Subnet dhcp_subnet vnet2/zone2-192.168.2.0-24
 * ```
 */
export class Subnet extends pulumi.CustomResource {
    /**
     * Get an existing Subnet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SubnetState, opts?: pulumi.CustomResourceOptions): Subnet {
        return new Subnet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'proxmoxve:Sdn/subnet:Subnet';

    /**
     * Returns true if the given object is an instance of Subnet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Subnet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Subnet.__pulumiType;
    }

    /**
     * A CIDR network address, for example 10.0.0.0/8
     */
    declare public readonly cidr: pulumi.Output<string>;
    /**
     * The DNS server used for DHCP.
     */
    declare public readonly dhcpDnsServer: pulumi.Output<string | undefined>;
    /**
     * DHCP range (start and end IPs).
     */
    declare public readonly dhcpRange: pulumi.Output<outputs.Sdn.SubnetDhcpRange | undefined>;
    /**
     * Prefix used for DNS zone delegation.
     */
    declare public readonly dnsZonePrefix: pulumi.Output<string | undefined>;
    /**
     * The gateway address for the subnet.
     */
    declare public readonly gateway: pulumi.Output<string | undefined>;
    /**
     * Whether SNAT is enabled for the subnet.
     */
    declare public readonly snat: pulumi.Output<boolean | undefined>;
    /**
     * The VNet to which this subnet belongs.
     */
    declare public readonly vnet: pulumi.Output<string>;

    /**
     * Create a Subnet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubnetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SubnetArgs | SubnetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SubnetState | undefined;
            resourceInputs["cidr"] = state?.cidr;
            resourceInputs["dhcpDnsServer"] = state?.dhcpDnsServer;
            resourceInputs["dhcpRange"] = state?.dhcpRange;
            resourceInputs["dnsZonePrefix"] = state?.dnsZonePrefix;
            resourceInputs["gateway"] = state?.gateway;
            resourceInputs["snat"] = state?.snat;
            resourceInputs["vnet"] = state?.vnet;
        } else {
            const args = argsOrState as SubnetArgs | undefined;
            if (args?.cidr === undefined && !opts.urn) {
                throw new Error("Missing required property 'cidr'");
            }
            if (args?.vnet === undefined && !opts.urn) {
                throw new Error("Missing required property 'vnet'");
            }
            resourceInputs["cidr"] = args?.cidr;
            resourceInputs["dhcpDnsServer"] = args?.dhcpDnsServer;
            resourceInputs["dhcpRange"] = args?.dhcpRange;
            resourceInputs["dnsZonePrefix"] = args?.dnsZonePrefix;
            resourceInputs["gateway"] = args?.gateway;
            resourceInputs["snat"] = args?.snat;
            resourceInputs["vnet"] = args?.vnet;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Subnet.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Subnet resources.
 */
export interface SubnetState {
    /**
     * A CIDR network address, for example 10.0.0.0/8
     */
    cidr?: pulumi.Input<string>;
    /**
     * The DNS server used for DHCP.
     */
    dhcpDnsServer?: pulumi.Input<string>;
    /**
     * DHCP range (start and end IPs).
     */
    dhcpRange?: pulumi.Input<inputs.Sdn.SubnetDhcpRange>;
    /**
     * Prefix used for DNS zone delegation.
     */
    dnsZonePrefix?: pulumi.Input<string>;
    /**
     * The gateway address for the subnet.
     */
    gateway?: pulumi.Input<string>;
    /**
     * Whether SNAT is enabled for the subnet.
     */
    snat?: pulumi.Input<boolean>;
    /**
     * The VNet to which this subnet belongs.
     */
    vnet?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Subnet resource.
 */
export interface SubnetArgs {
    /**
     * A CIDR network address, for example 10.0.0.0/8
     */
    cidr: pulumi.Input<string>;
    /**
     * The DNS server used for DHCP.
     */
    dhcpDnsServer?: pulumi.Input<string>;
    /**
     * DHCP range (start and end IPs).
     */
    dhcpRange?: pulumi.Input<inputs.Sdn.SubnetDhcpRange>;
    /**
     * Prefix used for DNS zone delegation.
     */
    dnsZonePrefix?: pulumi.Input<string>;
    /**
     * The gateway address for the subnet.
     */
    gateway?: pulumi.Input<string>;
    /**
     * Whether SNAT is enabled for the subnet.
     */
    snat?: pulumi.Input<boolean>;
    /**
     * The VNet to which this subnet belongs.
     */
    vnet: pulumi.Input<string>;
}

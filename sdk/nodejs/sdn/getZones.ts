// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Retrieves information about all SDN Zones in Proxmox. This data source can optionally filter zones by type.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as proxmoxve from "@muhlba91/pulumi-proxmoxve";
 *
 * const all = proxmoxve.Sdn.getZones({});
 * const evpnOnly = proxmoxve.Sdn.getZones({
 *     type: "evpn",
 * });
 * const simpleOnly = proxmoxve.Sdn.getZones({
 *     type: "simple",
 * });
 * export const dataProxmoxVirtualEnvironmentSdnZonesAll = {
 *     zones: all.then(all => all.zones),
 * };
 * export const dataProxmoxVirtualEnvironmentSdnZonesFiltered = {
 *     evpn_zones: evpnOnly.then(evpnOnly => evpnOnly.zones),
 *     simple_zones: simpleOnly.then(simpleOnly => simpleOnly.zones),
 * };
 * ```
 */
export function getZones(args?: GetZonesArgs, opts?: pulumi.InvokeOptions): Promise<GetZonesResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("proxmoxve:Sdn/getZones:getZones", {
        "type": args.type,
    }, opts);
}

/**
 * A collection of arguments for invoking getZones.
 */
export interface GetZonesArgs {
    /**
     * Filter zones by type (simple, vlan, qinq, vxlan, evpn).
     */
    type?: string;
}

/**
 * A collection of values returned by getZones.
 */
export interface GetZonesResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Filter zones by type (simple, vlan, qinq, vxlan, evpn).
     */
    readonly type?: string;
    /**
     * List of SDN zones.
     */
    readonly zones: outputs.Sdn.GetZonesZone[];
}
/**
 * Retrieves information about all SDN Zones in Proxmox. This data source can optionally filter zones by type.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as proxmoxve from "@muhlba91/pulumi-proxmoxve";
 *
 * const all = proxmoxve.Sdn.getZones({});
 * const evpnOnly = proxmoxve.Sdn.getZones({
 *     type: "evpn",
 * });
 * const simpleOnly = proxmoxve.Sdn.getZones({
 *     type: "simple",
 * });
 * export const dataProxmoxVirtualEnvironmentSdnZonesAll = {
 *     zones: all.then(all => all.zones),
 * };
 * export const dataProxmoxVirtualEnvironmentSdnZonesFiltered = {
 *     evpn_zones: evpnOnly.then(evpnOnly => evpnOnly.zones),
 *     simple_zones: simpleOnly.then(simpleOnly => simpleOnly.zones),
 * };
 * ```
 */
export function getZonesOutput(args?: GetZonesOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetZonesResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("proxmoxve:Sdn/getZones:getZones", {
        "type": args.type,
    }, opts);
}

/**
 * A collection of arguments for invoking getZones.
 */
export interface GetZonesOutputArgs {
    /**
     * Filter zones by type (simple, vlan, qinq, vxlan, evpn).
     */
    type?: pulumi.Input<string>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Retrieve details about a specific SDN Subnet in Proxmox VE.
 */
export function getSubnet(args: GetSubnetArgs, opts?: pulumi.InvokeOptions): Promise<GetSubnetResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("proxmoxve:Sdn/getSubnet:getSubnet", {
        "cidr": args.cidr,
        "dhcpRange": args.dhcpRange,
        "vnet": args.vnet,
    }, opts);
}

/**
 * A collection of arguments for invoking getSubnet.
 */
export interface GetSubnetArgs {
    /**
     * A CIDR network address, for example 10.0.0.0/8
     */
    cidr: string;
    /**
     * DHCP range (start and end IPs).
     */
    dhcpRange?: inputs.Sdn.GetSubnetDhcpRange;
    /**
     * The VNet this subnet belongs to.
     */
    vnet: string;
}

/**
 * A collection of values returned by getSubnet.
 */
export interface GetSubnetResult {
    /**
     * A CIDR network address, for example 10.0.0.0/8
     */
    readonly cidr: string;
    /**
     * The DNS server used for DHCP.
     */
    readonly dhcpDnsServer: string;
    /**
     * DHCP range (start and end IPs).
     */
    readonly dhcpRange: outputs.Sdn.GetSubnetDhcpRange;
    /**
     * Prefix used for DNS zone delegation.
     */
    readonly dnsZonePrefix: string;
    /**
     * The gateway address for the subnet.
     */
    readonly gateway: string;
    /**
     * The full ID in the format 'vnet-id/subnet-id'.
     */
    readonly id: string;
    /**
     * Whether SNAT is enabled for the subnet.
     */
    readonly snat: boolean;
    /**
     * The VNet this subnet belongs to.
     */
    readonly vnet: string;
}
/**
 * Retrieve details about a specific SDN Subnet in Proxmox VE.
 */
export function getSubnetOutput(args: GetSubnetOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetSubnetResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("proxmoxve:Sdn/getSubnet:getSubnet", {
        "cidr": args.cidr,
        "dhcpRange": args.dhcpRange,
        "vnet": args.vnet,
    }, opts);
}

/**
 * A collection of arguments for invoking getSubnet.
 */
export interface GetSubnetOutputArgs {
    /**
     * A CIDR network address, for example 10.0.0.0/8
     */
    cidr: pulumi.Input<string>;
    /**
     * DHCP range (start and end IPs).
     */
    dhcpRange?: pulumi.Input<inputs.Sdn.GetSubnetDhcpRangeArgs>;
    /**
     * The VNet this subnet belongs to.
     */
    vnet: pulumi.Input<string>;
}

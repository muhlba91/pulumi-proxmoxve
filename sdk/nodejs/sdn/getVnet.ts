// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Retrieves information about an existing SDN VNet.
 */
export function getVnet(args: GetVnetArgs, opts?: pulumi.InvokeOptions): Promise<GetVnetResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("proxmoxve:Sdn/getVnet:getVnet", {
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getVnet.
 */
export interface GetVnetArgs {
    /**
     * The unique identifier of the SDN VNet.
     */
    id: string;
}

/**
 * A collection of values returned by getVnet.
 */
export interface GetVnetResult {
    /**
     * An optional alias for this VNet.
     */
    readonly alias: string;
    /**
     * The unique identifier of the SDN VNet.
     */
    readonly id: string;
    /**
     * Isolate ports within this VNet.
     */
    readonly isolatePorts: boolean;
    /**
     * Tag value for VLAN/VXLAN (can't be used with other zone types).
     */
    readonly tag: number;
    /**
     * Allow VM VLANs to pass through this VNet.
     */
    readonly vlanAware: boolean;
    /**
     * The zone to which this VNet belongs.
     */
    readonly zone: string;
}
/**
 * Retrieves information about an existing SDN VNet.
 */
export function getVnetOutput(args: GetVnetOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetVnetResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("proxmoxve:Sdn/getVnet:getVnet", {
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getVnet.
 */
export interface GetVnetOutputArgs {
    /**
     * The unique identifier of the SDN VNet.
     */
    id: pulumi.Input<string>;
}

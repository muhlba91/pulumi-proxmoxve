// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages Proxmox VE SDN VNet.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as proxmoxve from "@muhlba91/pulumi-proxmoxve";
 *
 * const finalizer = new proxmoxve.sdn.Applier("finalizer", {});
 * // SDN Zone (Simple) - Basic zone for simple vnets
 * const exampleZone1 = new proxmoxve.sdnzone.Simple("exampleZone1", {
 *     zoneId: "zone1",
 *     nodes: ["pve"],
 *     mtu: 1500,
 *     dns: "1.1.1.1",
 *     dnsZone: "example.com",
 *     ipam: "pve",
 *     reverseDns: "1.1.1.1",
 * }, {
 *     dependsOn: [finalizer],
 * });
 * // SDN Zone (Simple) - Second zone for demonstration
 * const exampleZone2 = new proxmoxve.sdnzone.Simple("exampleZone2", {
 *     zoneId: "zone2",
 *     nodes: ["pve"],
 *     mtu: 1500,
 * }, {
 *     dependsOn: [finalizer],
 * });
 * // Basic VNet (Simple)
 * const basicVnet = new proxmoxve.sdn.Vnet("basicVnet", {
 *     vnetId: "vnet1",
 *     zone: exampleZone1.zoneId,
 * }, {
 *     dependsOn: [finalizer],
 * });
 * // VNet with Alias and Port Isolation
 * const isolatedVnet = new proxmoxve.sdn.Vnet("isolatedVnet", {
 *     vnetId: "vnet2",
 *     zone: exampleZone2.zoneId,
 *     alias: "Isolated VNet",
 *     isolatePorts: true,
 *     vlanAware: false,
 * }, {
 *     dependsOn: [finalizer],
 * });
 * // SDN Applier for all resources
 * const vnetApplier = new proxmoxve.sdn.Applier("vnetApplier", {}, {
 *     dependsOn: [
 *         exampleZone1,
 *         exampleZone2,
 *         basicVnet,
 *         isolatedVnet,
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * #!/usr/bin/env sh
 *
 * SDN vnet can be imported using its unique identifier (vnet ID)
 *
 * ```sh
 * $ pulumi import proxmoxve:Sdn/vnet:Vnet basic_vnet vnet1
 * ```
 *
 * ```sh
 * $ pulumi import proxmoxve:Sdn/vnet:Vnet isolated_vnet vnet2
 * ```
 */
export class Vnet extends pulumi.CustomResource {
    /**
     * Get an existing Vnet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VnetState, opts?: pulumi.CustomResourceOptions): Vnet {
        return new Vnet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'proxmoxve:Sdn/vnet:Vnet';

    /**
     * Returns true if the given object is an instance of Vnet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vnet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vnet.__pulumiType;
    }

    /**
     * An optional alias for this VNet.
     */
    declare public readonly alias: pulumi.Output<string | undefined>;
    /**
     * Isolate ports within this VNet.
     */
    declare public readonly isolatePorts: pulumi.Output<boolean | undefined>;
    /**
     * Tag value for VLAN/VXLAN (can't be used with other zone types).
     */
    declare public readonly tag: pulumi.Output<number | undefined>;
    /**
     * Allow VM VLANs to pass through this VNet.
     */
    declare public readonly vlanAware: pulumi.Output<boolean | undefined>;
    /**
     * The unique identifier of the SDN VNet.
     */
    declare public readonly vnetId: pulumi.Output<string>;
    /**
     * The zone to which this VNet belongs.
     */
    declare public readonly zone: pulumi.Output<string>;

    /**
     * Create a Vnet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VnetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VnetArgs | VnetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VnetState | undefined;
            resourceInputs["alias"] = state?.alias;
            resourceInputs["isolatePorts"] = state?.isolatePorts;
            resourceInputs["tag"] = state?.tag;
            resourceInputs["vlanAware"] = state?.vlanAware;
            resourceInputs["vnetId"] = state?.vnetId;
            resourceInputs["zone"] = state?.zone;
        } else {
            const args = argsOrState as VnetArgs | undefined;
            if (args?.vnetId === undefined && !opts.urn) {
                throw new Error("Missing required property 'vnetId'");
            }
            if (args?.zone === undefined && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["alias"] = args?.alias;
            resourceInputs["isolatePorts"] = args?.isolatePorts;
            resourceInputs["tag"] = args?.tag;
            resourceInputs["vlanAware"] = args?.vlanAware;
            resourceInputs["vnetId"] = args?.vnetId;
            resourceInputs["zone"] = args?.zone;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vnet.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Vnet resources.
 */
export interface VnetState {
    /**
     * An optional alias for this VNet.
     */
    alias?: pulumi.Input<string>;
    /**
     * Isolate ports within this VNet.
     */
    isolatePorts?: pulumi.Input<boolean>;
    /**
     * Tag value for VLAN/VXLAN (can't be used with other zone types).
     */
    tag?: pulumi.Input<number>;
    /**
     * Allow VM VLANs to pass through this VNet.
     */
    vlanAware?: pulumi.Input<boolean>;
    /**
     * The unique identifier of the SDN VNet.
     */
    vnetId?: pulumi.Input<string>;
    /**
     * The zone to which this VNet belongs.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Vnet resource.
 */
export interface VnetArgs {
    /**
     * An optional alias for this VNet.
     */
    alias?: pulumi.Input<string>;
    /**
     * Isolate ports within this VNet.
     */
    isolatePorts?: pulumi.Input<boolean>;
    /**
     * Tag value for VLAN/VXLAN (can't be used with other zone types).
     */
    tag?: pulumi.Input<number>;
    /**
     * Allow VM VLANs to pass through this VNet.
     */
    vlanAware?: pulumi.Input<boolean>;
    /**
     * The unique identifier of the SDN VNet.
     */
    vnetId: pulumi.Input<string>;
    /**
     * The zone to which this VNet belongs.
     */
    zone: pulumi.Input<string>;
}

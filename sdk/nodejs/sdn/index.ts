// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ApplierArgs, ApplierState } from "./applier";
export type Applier = import("./applier").Applier;
export const Applier: typeof import("./applier").Applier = null as any;
utilities.lazyLoad(exports, ["Applier"], () => require("./applier"));

export { GetSubnetArgs, GetSubnetResult, GetSubnetOutputArgs } from "./getSubnet";
export const getSubnet: typeof import("./getSubnet").getSubnet = null as any;
export const getSubnetOutput: typeof import("./getSubnet").getSubnetOutput = null as any;
utilities.lazyLoad(exports, ["getSubnet","getSubnetOutput"], () => require("./getSubnet"));

export { GetVnetArgs, GetVnetResult, GetVnetOutputArgs } from "./getVnet";
export const getVnet: typeof import("./getVnet").getVnet = null as any;
export const getVnetOutput: typeof import("./getVnet").getVnetOutput = null as any;
utilities.lazyLoad(exports, ["getVnet","getVnetOutput"], () => require("./getVnet"));

export { GetZonesArgs, GetZonesResult, GetZonesOutputArgs } from "./getZones";
export const getZones: typeof import("./getZones").getZones = null as any;
export const getZonesOutput: typeof import("./getZones").getZonesOutput = null as any;
utilities.lazyLoad(exports, ["getZones","getZonesOutput"], () => require("./getZones"));

export { SubnetArgs, SubnetState } from "./subnet";
export type Subnet = import("./subnet").Subnet;
export const Subnet: typeof import("./subnet").Subnet = null as any;
utilities.lazyLoad(exports, ["Subnet"], () => require("./subnet"));

export { VnetArgs, VnetState } from "./vnet";
export type Vnet = import("./vnet").Vnet;
export const Vnet: typeof import("./vnet").Vnet = null as any;
utilities.lazyLoad(exports, ["Vnet"], () => require("./vnet"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "proxmoxve:Sdn/applier:Applier":
                return new Applier(name, <any>undefined, { urn })
            case "proxmoxve:Sdn/subnet:Subnet":
                return new Subnet(name, <any>undefined, { urn })
            case "proxmoxve:Sdn/vnet:Vnet":
                return new Vnet(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("proxmoxve", "Sdn/applier", _module)
pulumi.runtime.registerResourceModule("proxmoxve", "Sdn/subnet", _module)
pulumi.runtime.registerResourceModule("proxmoxve", "Sdn/vnet", _module)

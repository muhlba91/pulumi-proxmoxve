// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manages ACLs on the Proxmox cluster.
 *
 * ACLs are used to control access to resources in the Proxmox cluster.
 * Each ACL consists of a path, a user, group or token, a role, and a flag to allow propagation of permissions.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as proxmoxve from "@muhlba91/pulumi-proxmoxve";
 *
 * const operationsAutomation = new proxmoxve.permission.User("operationsAutomation", {
 *     comment: "Managed by Pulumi",
 *     password: "a-strong-password",
 *     userId: "operations-automation@pve",
 * });
 * const operationsMonitoring = new proxmoxve.permission.Role("operationsMonitoring", {
 *     roleId: "operations-monitoring",
 *     privileges: ["VM.Monitor"],
 * });
 * const operationsAutomationMonitoring = new proxmoxve.Acl("operationsAutomationMonitoring", {
 *     userId: operationsAutomation.userId,
 *     roleId: operationsMonitoring.roleId,
 *     path: "/vms/1234",
 *     propagate: true,
 * });
 * ```
 *
 * ## Import
 *
 * #!/usr/bin/env sh
 *
 * ACL can be imported using its unique identifier, e.g.: {path}?{group|user@realm|user@realm!token}?{role}
 *
 * ```sh
 * $ pulumi import proxmoxve:index/acl:Acl operations_automation_monitoring /?monitor@pve?operations-monitoring
 * ```
 */
export class Acl extends pulumi.CustomResource {
    /**
     * Get an existing Acl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AclState, opts?: pulumi.CustomResourceOptions): Acl {
        return new Acl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'proxmoxve:index/acl:Acl';

    /**
     * Returns true if the given object is an instance of Acl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Acl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Acl.__pulumiType;
    }

    /**
     * The group the ACL should apply to (mutually exclusive with `tokenId` and `userId`)
     */
    public readonly groupId!: pulumi.Output<string | undefined>;
    /**
     * Access control path
     */
    public readonly path!: pulumi.Output<string>;
    /**
     * Allow to propagate (inherit) permissions.
     */
    public readonly propagate!: pulumi.Output<boolean>;
    /**
     * The role to apply
     */
    public readonly roleId!: pulumi.Output<string>;
    /**
     * The token the ACL should apply to (mutually exclusive with `groupId` and `userId`)
     */
    public readonly tokenId!: pulumi.Output<string | undefined>;
    /**
     * The user the ACL should apply to (mutually exclusive with `groupId` and `tokenId`)
     */
    public readonly userId!: pulumi.Output<string | undefined>;

    /**
     * Create a Acl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AclArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AclArgs | AclState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AclState | undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["propagate"] = state ? state.propagate : undefined;
            resourceInputs["roleId"] = state ? state.roleId : undefined;
            resourceInputs["tokenId"] = state ? state.tokenId : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as AclArgs | undefined;
            if ((!args || args.path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            if ((!args || args.roleId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleId'");
            }
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["propagate"] = args ? args.propagate : undefined;
            resourceInputs["roleId"] = args ? args.roleId : undefined;
            resourceInputs["tokenId"] = args ? args.tokenId : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Acl.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Acl resources.
 */
export interface AclState {
    /**
     * The group the ACL should apply to (mutually exclusive with `tokenId` and `userId`)
     */
    groupId?: pulumi.Input<string>;
    /**
     * Access control path
     */
    path?: pulumi.Input<string>;
    /**
     * Allow to propagate (inherit) permissions.
     */
    propagate?: pulumi.Input<boolean>;
    /**
     * The role to apply
     */
    roleId?: pulumi.Input<string>;
    /**
     * The token the ACL should apply to (mutually exclusive with `groupId` and `userId`)
     */
    tokenId?: pulumi.Input<string>;
    /**
     * The user the ACL should apply to (mutually exclusive with `groupId` and `tokenId`)
     */
    userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Acl resource.
 */
export interface AclArgs {
    /**
     * The group the ACL should apply to (mutually exclusive with `tokenId` and `userId`)
     */
    groupId?: pulumi.Input<string>;
    /**
     * Access control path
     */
    path: pulumi.Input<string>;
    /**
     * Allow to propagate (inherit) permissions.
     */
    propagate?: pulumi.Input<boolean>;
    /**
     * The role to apply
     */
    roleId: pulumi.Input<string>;
    /**
     * The token the ACL should apply to (mutually exclusive with `groupId` and `userId`)
     */
    tokenId?: pulumi.Input<string>;
    /**
     * The user the ACL should apply to (mutually exclusive with `groupId` and `tokenId`)
     */
    userId?: pulumi.Input<string>;
}

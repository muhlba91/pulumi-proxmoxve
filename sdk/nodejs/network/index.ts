// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { FirewallArgs, FirewallState } from "./firewall";
export type Firewall = import("./firewall").Firewall;
export const Firewall: typeof import("./firewall").Firewall = null as any;
utilities.lazyLoad(exports, ["Firewall"], () => require("./firewall"));

export { FirewallAliasArgs, FirewallAliasState } from "./firewallAlias";
export type FirewallAlias = import("./firewallAlias").FirewallAlias;
export const FirewallAlias: typeof import("./firewallAlias").FirewallAlias = null as any;
utilities.lazyLoad(exports, ["FirewallAlias"], () => require("./firewallAlias"));

export { FirewallIPSetArgs, FirewallIPSetState } from "./firewallIPSet";
export type FirewallIPSet = import("./firewallIPSet").FirewallIPSet;
export const FirewallIPSet: typeof import("./firewallIPSet").FirewallIPSet = null as any;
utilities.lazyLoad(exports, ["FirewallIPSet"], () => require("./firewallIPSet"));

export { FirewallOptionsArgs, FirewallOptionsState } from "./firewallOptions";
export type FirewallOptions = import("./firewallOptions").FirewallOptions;
export const FirewallOptions: typeof import("./firewallOptions").FirewallOptions = null as any;
utilities.lazyLoad(exports, ["FirewallOptions"], () => require("./firewallOptions"));

export { FirewallRulesArgs, FirewallRulesState } from "./firewallRules";
export type FirewallRules = import("./firewallRules").FirewallRules;
export const FirewallRules: typeof import("./firewallRules").FirewallRules = null as any;
utilities.lazyLoad(exports, ["FirewallRules"], () => require("./firewallRules"));

export { FirewallSecurityGroupArgs, FirewallSecurityGroupState } from "./firewallSecurityGroup";
export type FirewallSecurityGroup = import("./firewallSecurityGroup").FirewallSecurityGroup;
export const FirewallSecurityGroup: typeof import("./firewallSecurityGroup").FirewallSecurityGroup = null as any;
utilities.lazyLoad(exports, ["FirewallSecurityGroup"], () => require("./firewallSecurityGroup"));

export { GetDNSArgs, GetDNSResult, GetDNSOutputArgs } from "./getDNS";
export const getDNS: typeof import("./getDNS").getDNS = null as any;
export const getDNSOutput: typeof import("./getDNS").getDNSOutput = null as any;
utilities.lazyLoad(exports, ["getDNS","getDNSOutput"], () => require("./getDNS"));

export { GetHostsArgs, GetHostsResult, GetHostsOutputArgs } from "./getHosts";
export const getHosts: typeof import("./getHosts").getHosts = null as any;
export const getHostsOutput: typeof import("./getHosts").getHostsOutput = null as any;
utilities.lazyLoad(exports, ["getHosts","getHostsOutput"], () => require("./getHosts"));

export { GetTimeArgs, GetTimeResult, GetTimeOutputArgs } from "./getTime";
export const getTime: typeof import("./getTime").getTime = null as any;
export const getTimeOutput: typeof import("./getTime").getTimeOutput = null as any;
utilities.lazyLoad(exports, ["getTime","getTimeOutput"], () => require("./getTime"));

export { GetVersionResult } from "./getVersion";
export const getVersion: typeof import("./getVersion").getVersion = null as any;
export const getVersionOutput: typeof import("./getVersion").getVersionOutput = null as any;
utilities.lazyLoad(exports, ["getVersion","getVersionOutput"], () => require("./getVersion"));

export { NetworkBridgeArgs, NetworkBridgeState } from "./networkBridge";
export type NetworkBridge = import("./networkBridge").NetworkBridge;
export const NetworkBridge: typeof import("./networkBridge").NetworkBridge = null as any;
utilities.lazyLoad(exports, ["NetworkBridge"], () => require("./networkBridge"));

export { NetworkVlanArgs, NetworkVlanState } from "./networkVlan";
export type NetworkVlan = import("./networkVlan").NetworkVlan;
export const NetworkVlan: typeof import("./networkVlan").NetworkVlan = null as any;
utilities.lazyLoad(exports, ["NetworkVlan"], () => require("./networkVlan"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "proxmoxve:Network/firewall:Firewall":
                return new Firewall(name, <any>undefined, { urn })
            case "proxmoxve:Network/firewallAlias:FirewallAlias":
                return new FirewallAlias(name, <any>undefined, { urn })
            case "proxmoxve:Network/firewallIPSet:FirewallIPSet":
                return new FirewallIPSet(name, <any>undefined, { urn })
            case "proxmoxve:Network/firewallOptions:FirewallOptions":
                return new FirewallOptions(name, <any>undefined, { urn })
            case "proxmoxve:Network/firewallRules:FirewallRules":
                return new FirewallRules(name, <any>undefined, { urn })
            case "proxmoxve:Network/firewallSecurityGroup:FirewallSecurityGroup":
                return new FirewallSecurityGroup(name, <any>undefined, { urn })
            case "proxmoxve:Network/networkBridge:NetworkBridge":
                return new NetworkBridge(name, <any>undefined, { urn })
            case "proxmoxve:Network/networkVlan:NetworkVlan":
                return new NetworkVlan(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("proxmoxve", "Network/firewall", _module)
pulumi.runtime.registerResourceModule("proxmoxve", "Network/firewallAlias", _module)
pulumi.runtime.registerResourceModule("proxmoxve", "Network/firewallIPSet", _module)
pulumi.runtime.registerResourceModule("proxmoxve", "Network/firewallOptions", _module)
pulumi.runtime.registerResourceModule("proxmoxve", "Network/firewallRules", _module)
pulumi.runtime.registerResourceModule("proxmoxve", "Network/firewallSecurityGroup", _module)
pulumi.runtime.registerResourceModule("proxmoxve", "Network/networkBridge", _module)
pulumi.runtime.registerResourceModule("proxmoxve", "Network/networkVlan", _module)

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a container.
 *
 * ## Import
 *
 * Instances can be imported using the `node_name` and the `vm_id`, e.g., bash
 *
 * ```sh
 *  $ pulumi import proxmoxve:CT/container:Container ubuntu_container first-node/1234
 * ```
 */
export class Container extends pulumi.CustomResource {
    /**
     * Get an existing Container resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContainerState, opts?: pulumi.CustomResourceOptions): Container {
        return new Container(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'proxmoxve:CT/container:Container';

    /**
     * Returns true if the given object is an instance of Container.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Container {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Container.__pulumiType;
    }

    /**
     * The cloning configuration.
     */
    public readonly clone!: pulumi.Output<outputs.CT.ContainerClone | undefined>;
    /**
     * Console.
     */
    public readonly console!: pulumi.Output<outputs.CT.ContainerConsole | undefined>;
    /**
     * The CPU configuration.
     */
    public readonly cpu!: pulumi.Output<outputs.CT.ContainerCpu | undefined>;
    /**
     * The description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The disk configuration.
     */
    public readonly disk!: pulumi.Output<outputs.CT.ContainerDisk | undefined>;
    /**
     * The container features
     */
    public readonly features!: pulumi.Output<outputs.CT.ContainerFeatures | undefined>;
    /**
     * The initialization configuration.
     */
    public readonly initialization!: pulumi.Output<outputs.CT.ContainerInitialization | undefined>;
    /**
     * The memory configuration.
     */
    public readonly memory!: pulumi.Output<outputs.CT.ContainerMemory | undefined>;
    /**
     * A mount point
     */
    public readonly mountPoints!: pulumi.Output<outputs.CT.ContainerMountPoint[] | undefined>;
    /**
     * A network interface (multiple blocks
     * supported).
     */
    public readonly networkInterfaces!: pulumi.Output<outputs.CT.ContainerNetworkInterface[] | undefined>;
    /**
     * The name of the node to assign the container to.
     */
    public readonly nodeName!: pulumi.Output<string>;
    /**
     * The Operating System configuration.
     */
    public readonly operatingSystem!: pulumi.Output<outputs.CT.ContainerOperatingSystem | undefined>;
    /**
     * The identifier for a pool to assign the container to.
     */
    public readonly poolId!: pulumi.Output<string | undefined>;
    /**
     * Automatically start container when the host system boots (defaults to `true`).
     */
    public readonly startOnBoot!: pulumi.Output<boolean | undefined>;
    /**
     * Whether to start the container (defaults to `true`).
     */
    public readonly started!: pulumi.Output<boolean | undefined>;
    /**
     * A list of tags the container tags. This is only meta
     * information (defaults to `[]`). Note: Proxmox always sorts the container tags.
     * If the list in template is not sorted, then Proxmox will always report a
     * difference on the resource. You may use the `ignoreChanges` lifecycle
     * meta-argument to ignore changes to this attribute.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * Whether to create a template (defaults to `false`).
     */
    public readonly template!: pulumi.Output<boolean | undefined>;
    /**
     * Whether the container runs as unprivileged on
     * the host (defaults to `false`).
     */
    public readonly unprivileged!: pulumi.Output<boolean | undefined>;
    /**
     * The container identifier
     */
    public readonly vmId!: pulumi.Output<number | undefined>;

    /**
     * Create a Container resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContainerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContainerArgs | ContainerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContainerState | undefined;
            resourceInputs["clone"] = state ? state.clone : undefined;
            resourceInputs["console"] = state ? state.console : undefined;
            resourceInputs["cpu"] = state ? state.cpu : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disk"] = state ? state.disk : undefined;
            resourceInputs["features"] = state ? state.features : undefined;
            resourceInputs["initialization"] = state ? state.initialization : undefined;
            resourceInputs["memory"] = state ? state.memory : undefined;
            resourceInputs["mountPoints"] = state ? state.mountPoints : undefined;
            resourceInputs["networkInterfaces"] = state ? state.networkInterfaces : undefined;
            resourceInputs["nodeName"] = state ? state.nodeName : undefined;
            resourceInputs["operatingSystem"] = state ? state.operatingSystem : undefined;
            resourceInputs["poolId"] = state ? state.poolId : undefined;
            resourceInputs["startOnBoot"] = state ? state.startOnBoot : undefined;
            resourceInputs["started"] = state ? state.started : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["unprivileged"] = state ? state.unprivileged : undefined;
            resourceInputs["vmId"] = state ? state.vmId : undefined;
        } else {
            const args = argsOrState as ContainerArgs | undefined;
            if ((!args || args.nodeName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeName'");
            }
            resourceInputs["clone"] = args ? args.clone : undefined;
            resourceInputs["console"] = args ? args.console : undefined;
            resourceInputs["cpu"] = args ? args.cpu : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disk"] = args ? args.disk : undefined;
            resourceInputs["features"] = args ? args.features : undefined;
            resourceInputs["initialization"] = args ? args.initialization : undefined;
            resourceInputs["memory"] = args ? args.memory : undefined;
            resourceInputs["mountPoints"] = args ? args.mountPoints : undefined;
            resourceInputs["networkInterfaces"] = args ? args.networkInterfaces : undefined;
            resourceInputs["nodeName"] = args ? args.nodeName : undefined;
            resourceInputs["operatingSystem"] = args ? args.operatingSystem : undefined;
            resourceInputs["poolId"] = args ? args.poolId : undefined;
            resourceInputs["startOnBoot"] = args ? args.startOnBoot : undefined;
            resourceInputs["started"] = args ? args.started : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["unprivileged"] = args ? args.unprivileged : undefined;
            resourceInputs["vmId"] = args ? args.vmId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Container.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Container resources.
 */
export interface ContainerState {
    /**
     * The cloning configuration.
     */
    clone?: pulumi.Input<inputs.CT.ContainerClone>;
    /**
     * Console.
     */
    console?: pulumi.Input<inputs.CT.ContainerConsole>;
    /**
     * The CPU configuration.
     */
    cpu?: pulumi.Input<inputs.CT.ContainerCpu>;
    /**
     * The description.
     */
    description?: pulumi.Input<string>;
    /**
     * The disk configuration.
     */
    disk?: pulumi.Input<inputs.CT.ContainerDisk>;
    /**
     * The container features
     */
    features?: pulumi.Input<inputs.CT.ContainerFeatures>;
    /**
     * The initialization configuration.
     */
    initialization?: pulumi.Input<inputs.CT.ContainerInitialization>;
    /**
     * The memory configuration.
     */
    memory?: pulumi.Input<inputs.CT.ContainerMemory>;
    /**
     * A mount point
     */
    mountPoints?: pulumi.Input<pulumi.Input<inputs.CT.ContainerMountPoint>[]>;
    /**
     * A network interface (multiple blocks
     * supported).
     */
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.CT.ContainerNetworkInterface>[]>;
    /**
     * The name of the node to assign the container to.
     */
    nodeName?: pulumi.Input<string>;
    /**
     * The Operating System configuration.
     */
    operatingSystem?: pulumi.Input<inputs.CT.ContainerOperatingSystem>;
    /**
     * The identifier for a pool to assign the container to.
     */
    poolId?: pulumi.Input<string>;
    /**
     * Automatically start container when the host system boots (defaults to `true`).
     */
    startOnBoot?: pulumi.Input<boolean>;
    /**
     * Whether to start the container (defaults to `true`).
     */
    started?: pulumi.Input<boolean>;
    /**
     * A list of tags the container tags. This is only meta
     * information (defaults to `[]`). Note: Proxmox always sorts the container tags.
     * If the list in template is not sorted, then Proxmox will always report a
     * difference on the resource. You may use the `ignoreChanges` lifecycle
     * meta-argument to ignore changes to this attribute.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to create a template (defaults to `false`).
     */
    template?: pulumi.Input<boolean>;
    /**
     * Whether the container runs as unprivileged on
     * the host (defaults to `false`).
     */
    unprivileged?: pulumi.Input<boolean>;
    /**
     * The container identifier
     */
    vmId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Container resource.
 */
export interface ContainerArgs {
    /**
     * The cloning configuration.
     */
    clone?: pulumi.Input<inputs.CT.ContainerClone>;
    /**
     * Console.
     */
    console?: pulumi.Input<inputs.CT.ContainerConsole>;
    /**
     * The CPU configuration.
     */
    cpu?: pulumi.Input<inputs.CT.ContainerCpu>;
    /**
     * The description.
     */
    description?: pulumi.Input<string>;
    /**
     * The disk configuration.
     */
    disk?: pulumi.Input<inputs.CT.ContainerDisk>;
    /**
     * The container features
     */
    features?: pulumi.Input<inputs.CT.ContainerFeatures>;
    /**
     * The initialization configuration.
     */
    initialization?: pulumi.Input<inputs.CT.ContainerInitialization>;
    /**
     * The memory configuration.
     */
    memory?: pulumi.Input<inputs.CT.ContainerMemory>;
    /**
     * A mount point
     */
    mountPoints?: pulumi.Input<pulumi.Input<inputs.CT.ContainerMountPoint>[]>;
    /**
     * A network interface (multiple blocks
     * supported).
     */
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.CT.ContainerNetworkInterface>[]>;
    /**
     * The name of the node to assign the container to.
     */
    nodeName: pulumi.Input<string>;
    /**
     * The Operating System configuration.
     */
    operatingSystem?: pulumi.Input<inputs.CT.ContainerOperatingSystem>;
    /**
     * The identifier for a pool to assign the container to.
     */
    poolId?: pulumi.Input<string>;
    /**
     * Automatically start container when the host system boots (defaults to `true`).
     */
    startOnBoot?: pulumi.Input<boolean>;
    /**
     * Whether to start the container (defaults to `true`).
     */
    started?: pulumi.Input<boolean>;
    /**
     * A list of tags the container tags. This is only meta
     * information (defaults to `[]`). Note: Proxmox always sorts the container tags.
     * If the list in template is not sorted, then Proxmox will always report a
     * difference on the resource. You may use the `ignoreChanges` lifecycle
     * meta-argument to ignore changes to this attribute.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to create a template (defaults to `false`).
     */
    template?: pulumi.Input<boolean>;
    /**
     * Whether the container runs as unprivileged on
     * the host (defaults to `false`).
     */
    unprivileged?: pulumi.Input<boolean>;
    /**
     * The container identifier
     */
    vmId?: pulumi.Input<number>;
}

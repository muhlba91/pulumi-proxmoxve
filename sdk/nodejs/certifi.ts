// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manages the custom SSL/TLS certificate for a specific node.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as proxmoxve from "@muhlba91/pulumi-proxmoxve";
 * import * as tls from "@pulumi/tls";
 *
 * const proxmoxVirtualEnvironmentCertificatePrivateKey = new tls.PrivateKey("proxmoxVirtualEnvironmentCertificatePrivateKey", {
 *     algorithm: "RSA",
 *     rsaBits: 2048,
 * });
 * const proxmoxVirtualEnvironmentCertificateSelfSignedCert = new tls.SelfSignedCert("proxmoxVirtualEnvironmentCertificateSelfSignedCert", {
 *     keyAlgorithm: proxmoxVirtualEnvironmentCertificatePrivateKey.algorithm,
 *     privateKeyPem: proxmoxVirtualEnvironmentCertificatePrivateKey.privateKeyPem,
 *     subject: {
 *         commonName: "example.com",
 *         organization: "Terraform Provider for Proxmox",
 *     },
 *     validityPeriodHours: 8760,
 *     allowedUses: [
 *         "key_encipherment",
 *         "digital_signature",
 *         "server_auth",
 *     ],
 * });
 * const example = new proxmoxve.Certifi("example", {
 *     certificate: proxmoxVirtualEnvironmentCertificateSelfSignedCert.certPem,
 *     nodeName: "first-node",
 *     privateKey: proxmoxVirtualEnvironmentCertificatePrivateKey.privateKeyPem,
 * });
 * ```
 */
export class Certifi extends pulumi.CustomResource {
    /**
     * Get an existing Certifi resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertifiState, opts?: pulumi.CustomResourceOptions): Certifi {
        return new Certifi(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'proxmoxve:index/certifi:Certifi';

    /**
     * Returns true if the given object is an instance of Certifi.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Certifi {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Certifi.__pulumiType;
    }

    /**
     * The PEM encoded certificate.
     */
    public readonly certificate!: pulumi.Output<string>;
    /**
     * The PEM encoded certificate chain.
     */
    public readonly certificateChain!: pulumi.Output<string | undefined>;
    /**
     * The expiration date (RFC 3339).
     */
    public /*out*/ readonly expirationDate!: pulumi.Output<string>;
    /**
     * The file name.
     */
    public /*out*/ readonly fileName!: pulumi.Output<string>;
    /**
     * The issuer.
     */
    public /*out*/ readonly issuer!: pulumi.Output<string>;
    /**
     * A node name.
     */
    public readonly nodeName!: pulumi.Output<string>;
    /**
     * Whether to overwrite an existing certificate
     */
    public readonly overwrite!: pulumi.Output<boolean | undefined>;
    /**
     * The PEM encoded private key.
     */
    public readonly privateKey!: pulumi.Output<string>;
    /**
     * The public key size.
     */
    public /*out*/ readonly publicKeySize!: pulumi.Output<number>;
    /**
     * The public key type.
     */
    public /*out*/ readonly publicKeyType!: pulumi.Output<string>;
    /**
     * The SSL fingerprint.
     */
    public /*out*/ readonly sslFingerprint!: pulumi.Output<string>;
    /**
     * The start date (RFC 3339).
     */
    public /*out*/ readonly startDate!: pulumi.Output<string>;
    /**
     * The subject.
     */
    public /*out*/ readonly subject!: pulumi.Output<string>;
    /**
     * The subject alternative names.
     */
    public /*out*/ readonly subjectAlternativeNames!: pulumi.Output<string[]>;

    /**
     * Create a Certifi resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertifiArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CertifiArgs | CertifiState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CertifiState | undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["certificateChain"] = state ? state.certificateChain : undefined;
            resourceInputs["expirationDate"] = state ? state.expirationDate : undefined;
            resourceInputs["fileName"] = state ? state.fileName : undefined;
            resourceInputs["issuer"] = state ? state.issuer : undefined;
            resourceInputs["nodeName"] = state ? state.nodeName : undefined;
            resourceInputs["overwrite"] = state ? state.overwrite : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["publicKeySize"] = state ? state.publicKeySize : undefined;
            resourceInputs["publicKeyType"] = state ? state.publicKeyType : undefined;
            resourceInputs["sslFingerprint"] = state ? state.sslFingerprint : undefined;
            resourceInputs["startDate"] = state ? state.startDate : undefined;
            resourceInputs["subject"] = state ? state.subject : undefined;
            resourceInputs["subjectAlternativeNames"] = state ? state.subjectAlternativeNames : undefined;
        } else {
            const args = argsOrState as CertifiArgs | undefined;
            if ((!args || args.certificate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificate'");
            }
            if ((!args || args.nodeName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeName'");
            }
            if ((!args || args.privateKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'privateKey'");
            }
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["certificateChain"] = args ? args.certificateChain : undefined;
            resourceInputs["nodeName"] = args ? args.nodeName : undefined;
            resourceInputs["overwrite"] = args ? args.overwrite : undefined;
            resourceInputs["privateKey"] = args?.privateKey ? pulumi.secret(args.privateKey) : undefined;
            resourceInputs["expirationDate"] = undefined /*out*/;
            resourceInputs["fileName"] = undefined /*out*/;
            resourceInputs["issuer"] = undefined /*out*/;
            resourceInputs["publicKeySize"] = undefined /*out*/;
            resourceInputs["publicKeyType"] = undefined /*out*/;
            resourceInputs["sslFingerprint"] = undefined /*out*/;
            resourceInputs["startDate"] = undefined /*out*/;
            resourceInputs["subject"] = undefined /*out*/;
            resourceInputs["subjectAlternativeNames"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["privateKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Certifi.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Certifi resources.
 */
export interface CertifiState {
    /**
     * The PEM encoded certificate.
     */
    certificate?: pulumi.Input<string>;
    /**
     * The PEM encoded certificate chain.
     */
    certificateChain?: pulumi.Input<string>;
    /**
     * The expiration date (RFC 3339).
     */
    expirationDate?: pulumi.Input<string>;
    /**
     * The file name.
     */
    fileName?: pulumi.Input<string>;
    /**
     * The issuer.
     */
    issuer?: pulumi.Input<string>;
    /**
     * A node name.
     */
    nodeName?: pulumi.Input<string>;
    /**
     * Whether to overwrite an existing certificate
     */
    overwrite?: pulumi.Input<boolean>;
    /**
     * The PEM encoded private key.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * The public key size.
     */
    publicKeySize?: pulumi.Input<number>;
    /**
     * The public key type.
     */
    publicKeyType?: pulumi.Input<string>;
    /**
     * The SSL fingerprint.
     */
    sslFingerprint?: pulumi.Input<string>;
    /**
     * The start date (RFC 3339).
     */
    startDate?: pulumi.Input<string>;
    /**
     * The subject.
     */
    subject?: pulumi.Input<string>;
    /**
     * The subject alternative names.
     */
    subjectAlternativeNames?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Certifi resource.
 */
export interface CertifiArgs {
    /**
     * The PEM encoded certificate.
     */
    certificate: pulumi.Input<string>;
    /**
     * The PEM encoded certificate chain.
     */
    certificateChain?: pulumi.Input<string>;
    /**
     * A node name.
     */
    nodeName: pulumi.Input<string>;
    /**
     * Whether to overwrite an existing certificate
     */
    overwrite?: pulumi.Input<boolean>;
    /**
     * The PEM encoded private key.
     */
    privateKey: pulumi.Input<string>;
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Retrieves information about a specific PVE metric server.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as proxmoxve from "@pulumi/proxmoxve";
 *
 * const example = proxmoxve.Metrics.getServer({
 *     name: "example_influxdb",
 * });
 * export const dataProxmoxVirtualEnvironmentMetricsServer = {
 *     server: example.then(example => example.server),
 *     port: example.then(example => example.port),
 * };
 * ```
 */
export function getServer(args: GetServerArgs, opts?: pulumi.InvokeOptions): Promise<GetServerResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("proxmoxve:Metrics/getServer:getServer", {
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getServer.
 */
export interface GetServerArgs {
    /**
     * Unique name that will be ID of this metric server in PVE.
     */
    name: string;
}

/**
 * A collection of values returned by getServer.
 */
export interface GetServerResult {
    /**
     * Indicates if the metric server is disabled.
     */
    readonly disable: boolean;
    /**
     * The unique identifier of this resource.
     */
    readonly id: string;
    /**
     * Unique name that will be ID of this metric server in PVE.
     */
    readonly name: string;
    /**
     * Server network port.
     */
    readonly port: number;
    /**
     * Server dns name or IP address.
     */
    readonly server: string;
    /**
     * Plugin type. Either `graphite` or `influxdb`.
     */
    readonly type: string;
}
/**
 * Retrieves information about a specific PVE metric server.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as proxmoxve from "@pulumi/proxmoxve";
 *
 * const example = proxmoxve.Metrics.getServer({
 *     name: "example_influxdb",
 * });
 * export const dataProxmoxVirtualEnvironmentMetricsServer = {
 *     server: example.then(example => example.server),
 *     port: example.then(example => example.port),
 * };
 * ```
 */
export function getServerOutput(args: GetServerOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetServerResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("proxmoxve:Metrics/getServer:getServer", {
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getServer.
 */
export interface GetServerOutputArgs {
    /**
     * Unique name that will be ID of this metric server in PVE.
     */
    name: pulumi.Input<string>;
}

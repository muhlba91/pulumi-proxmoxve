// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages PVE metrics server.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as proxmoxve from "@muhlba91/pulumi-proxmoxve";
 *
 * const influxdbServer = new proxmoxve.metrics.MetricsServer("influxdbServer", {
 *     port: 8089,
 *     server: "192.168.3.2",
 *     type: "influxdb",
 * });
 * const graphiteServer = new proxmoxve.metrics.MetricsServer("graphiteServer", {
 *     port: 2003,
 *     server: "192.168.4.2",
 *     type: "graphite",
 * });
 * ```
 *
 * ## Import
 *
 * #!/usr/bin/env sh
 *
 * ```sh
 * $ pulumi import proxmoxve:Metrics/metricsServer:MetricsServer example example
 * ```
 */
export class MetricsServer extends pulumi.CustomResource {
    /**
     * Get an existing MetricsServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MetricsServerState, opts?: pulumi.CustomResourceOptions): MetricsServer {
        return new MetricsServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'proxmoxve:Metrics/metricsServer:MetricsServer';

    /**
     * Returns true if the given object is an instance of MetricsServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MetricsServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MetricsServer.__pulumiType;
    }

    /**
     * Set this to `true` to disable this metric server.
     */
    public readonly disable!: pulumi.Output<boolean | undefined>;
    /**
     * Root graphite path (ex: `proxmox.mycluster.mykey`).
     */
    public readonly graphitePath!: pulumi.Output<string | undefined>;
    /**
     * Protocol to send graphite data. Choice is between `udp` | `tcp`. If not set, PVE default is `udp`.
     */
    public readonly graphiteProto!: pulumi.Output<string | undefined>;
    /**
     * An API path prefix inserted between `<host>:<port>/` and `/api2/`. Can be useful if the InfluxDB service runs behind a reverse proxy.
     */
    public readonly influxApiPathPrefix!: pulumi.Output<string | undefined>;
    /**
     * The InfluxDB bucket/db. Only necessary when using the http v2 api.
     */
    public readonly influxBucket!: pulumi.Output<string | undefined>;
    /**
     * Protocol for InfluxDB. Choice is between `udp` | `http` | `https`. If not set, PVE default is `udp`.
     */
    public readonly influxDbProto!: pulumi.Output<string | undefined>;
    /**
     * InfluxDB max-body-size in bytes. Requests are batched up to this size. If not set, PVE default is `25000000`.
     */
    public readonly influxMaxBodySize!: pulumi.Output<number | undefined>;
    /**
     * The InfluxDB organization. Only necessary when using the http v2 api. Has no meaning when using v2 compatibility api.
     */
    public readonly influxOrganization!: pulumi.Output<string | undefined>;
    /**
     * The InfluxDB access token. Only necessary when using the http v2 api. If the v2 compatibility api is used, use `user:password` instead.
     */
    public readonly influxToken!: pulumi.Output<string | undefined>;
    /**
     * Set to `false` to disable certificate verification for https endpoints.
     */
    public readonly influxVerify!: pulumi.Output<boolean | undefined>;
    /**
     * MTU (maximum transmission unit) for metrics transmission over UDP. If not set, PVE default is `1500` (allowed `512` - `65536`).
     */
    public readonly mtu!: pulumi.Output<number | undefined>;
    /**
     * Unique name that will be ID of this metric server in PVE.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Server network port.
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * Server dns name or IP address.
     */
    public readonly server!: pulumi.Output<string>;
    /**
     * TCP socket timeout in seconds. If not set, PVE default is `1`.
     */
    public readonly timeout!: pulumi.Output<number | undefined>;
    /**
     * Plugin type. Choice is between `graphite` | `influxdb`.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a MetricsServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MetricsServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MetricsServerArgs | MetricsServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MetricsServerState | undefined;
            resourceInputs["disable"] = state ? state.disable : undefined;
            resourceInputs["graphitePath"] = state ? state.graphitePath : undefined;
            resourceInputs["graphiteProto"] = state ? state.graphiteProto : undefined;
            resourceInputs["influxApiPathPrefix"] = state ? state.influxApiPathPrefix : undefined;
            resourceInputs["influxBucket"] = state ? state.influxBucket : undefined;
            resourceInputs["influxDbProto"] = state ? state.influxDbProto : undefined;
            resourceInputs["influxMaxBodySize"] = state ? state.influxMaxBodySize : undefined;
            resourceInputs["influxOrganization"] = state ? state.influxOrganization : undefined;
            resourceInputs["influxToken"] = state ? state.influxToken : undefined;
            resourceInputs["influxVerify"] = state ? state.influxVerify : undefined;
            resourceInputs["mtu"] = state ? state.mtu : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["server"] = state ? state.server : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as MetricsServerArgs | undefined;
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if ((!args || args.server === undefined) && !opts.urn) {
                throw new Error("Missing required property 'server'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["disable"] = args ? args.disable : undefined;
            resourceInputs["graphitePath"] = args ? args.graphitePath : undefined;
            resourceInputs["graphiteProto"] = args ? args.graphiteProto : undefined;
            resourceInputs["influxApiPathPrefix"] = args ? args.influxApiPathPrefix : undefined;
            resourceInputs["influxBucket"] = args ? args.influxBucket : undefined;
            resourceInputs["influxDbProto"] = args ? args.influxDbProto : undefined;
            resourceInputs["influxMaxBodySize"] = args ? args.influxMaxBodySize : undefined;
            resourceInputs["influxOrganization"] = args ? args.influxOrganization : undefined;
            resourceInputs["influxToken"] = args?.influxToken ? pulumi.secret(args.influxToken) : undefined;
            resourceInputs["influxVerify"] = args ? args.influxVerify : undefined;
            resourceInputs["mtu"] = args ? args.mtu : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["server"] = args ? args.server : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["influxToken"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(MetricsServer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MetricsServer resources.
 */
export interface MetricsServerState {
    /**
     * Set this to `true` to disable this metric server.
     */
    disable?: pulumi.Input<boolean>;
    /**
     * Root graphite path (ex: `proxmox.mycluster.mykey`).
     */
    graphitePath?: pulumi.Input<string>;
    /**
     * Protocol to send graphite data. Choice is between `udp` | `tcp`. If not set, PVE default is `udp`.
     */
    graphiteProto?: pulumi.Input<string>;
    /**
     * An API path prefix inserted between `<host>:<port>/` and `/api2/`. Can be useful if the InfluxDB service runs behind a reverse proxy.
     */
    influxApiPathPrefix?: pulumi.Input<string>;
    /**
     * The InfluxDB bucket/db. Only necessary when using the http v2 api.
     */
    influxBucket?: pulumi.Input<string>;
    /**
     * Protocol for InfluxDB. Choice is between `udp` | `http` | `https`. If not set, PVE default is `udp`.
     */
    influxDbProto?: pulumi.Input<string>;
    /**
     * InfluxDB max-body-size in bytes. Requests are batched up to this size. If not set, PVE default is `25000000`.
     */
    influxMaxBodySize?: pulumi.Input<number>;
    /**
     * The InfluxDB organization. Only necessary when using the http v2 api. Has no meaning when using v2 compatibility api.
     */
    influxOrganization?: pulumi.Input<string>;
    /**
     * The InfluxDB access token. Only necessary when using the http v2 api. If the v2 compatibility api is used, use `user:password` instead.
     */
    influxToken?: pulumi.Input<string>;
    /**
     * Set to `false` to disable certificate verification for https endpoints.
     */
    influxVerify?: pulumi.Input<boolean>;
    /**
     * MTU (maximum transmission unit) for metrics transmission over UDP. If not set, PVE default is `1500` (allowed `512` - `65536`).
     */
    mtu?: pulumi.Input<number>;
    /**
     * Unique name that will be ID of this metric server in PVE.
     */
    name?: pulumi.Input<string>;
    /**
     * Server network port.
     */
    port?: pulumi.Input<number>;
    /**
     * Server dns name or IP address.
     */
    server?: pulumi.Input<string>;
    /**
     * TCP socket timeout in seconds. If not set, PVE default is `1`.
     */
    timeout?: pulumi.Input<number>;
    /**
     * Plugin type. Choice is between `graphite` | `influxdb`.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MetricsServer resource.
 */
export interface MetricsServerArgs {
    /**
     * Set this to `true` to disable this metric server.
     */
    disable?: pulumi.Input<boolean>;
    /**
     * Root graphite path (ex: `proxmox.mycluster.mykey`).
     */
    graphitePath?: pulumi.Input<string>;
    /**
     * Protocol to send graphite data. Choice is between `udp` | `tcp`. If not set, PVE default is `udp`.
     */
    graphiteProto?: pulumi.Input<string>;
    /**
     * An API path prefix inserted between `<host>:<port>/` and `/api2/`. Can be useful if the InfluxDB service runs behind a reverse proxy.
     */
    influxApiPathPrefix?: pulumi.Input<string>;
    /**
     * The InfluxDB bucket/db. Only necessary when using the http v2 api.
     */
    influxBucket?: pulumi.Input<string>;
    /**
     * Protocol for InfluxDB. Choice is between `udp` | `http` | `https`. If not set, PVE default is `udp`.
     */
    influxDbProto?: pulumi.Input<string>;
    /**
     * InfluxDB max-body-size in bytes. Requests are batched up to this size. If not set, PVE default is `25000000`.
     */
    influxMaxBodySize?: pulumi.Input<number>;
    /**
     * The InfluxDB organization. Only necessary when using the http v2 api. Has no meaning when using v2 compatibility api.
     */
    influxOrganization?: pulumi.Input<string>;
    /**
     * The InfluxDB access token. Only necessary when using the http v2 api. If the v2 compatibility api is used, use `user:password` instead.
     */
    influxToken?: pulumi.Input<string>;
    /**
     * Set to `false` to disable certificate verification for https endpoints.
     */
    influxVerify?: pulumi.Input<boolean>;
    /**
     * MTU (maximum transmission unit) for metrics transmission over UDP. If not set, PVE default is `1500` (allowed `512` - `65536`).
     */
    mtu?: pulumi.Input<number>;
    /**
     * Unique name that will be ID of this metric server in PVE.
     */
    name?: pulumi.Input<string>;
    /**
     * Server network port.
     */
    port: pulumi.Input<number>;
    /**
     * Server dns name or IP address.
     */
    server: pulumi.Input<string>;
    /**
     * TCP socket timeout in seconds. If not set, PVE default is `1`.
     */
    timeout?: pulumi.Input<number>;
    /**
     * Plugin type. Choice is between `graphite` | `influxdb`.
     */
    type: pulumi.Input<string>;
}

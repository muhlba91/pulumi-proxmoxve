// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.Hardware_mapping;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import io.muehlbachler.pulumi.proxmoxve.Hardware_mapping.inputs.DirMapArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DirArgs extends com.pulumi.resources.ResourceArgs {

    public static final DirArgs Empty = new DirArgs();

    /**
     * The comment of this directory mapping.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return The comment of this directory mapping.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * The actual map of devices for the hardware mapping.
     * 
     */
    @Import(name="maps", required=true)
    private Output<List<DirMapArgs>> maps;

    /**
     * @return The actual map of devices for the hardware mapping.
     * 
     */
    public Output<List<DirMapArgs>> maps() {
        return this.maps;
    }

    /**
     * The name of this directory mapping.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of this directory mapping.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private DirArgs() {}

    private DirArgs(DirArgs $) {
        this.comment = $.comment;
        this.maps = $.maps;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DirArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DirArgs $;

        public Builder() {
            $ = new DirArgs();
        }

        public Builder(DirArgs defaults) {
            $ = new DirArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param comment The comment of this directory mapping.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment The comment of this directory mapping.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param maps The actual map of devices for the hardware mapping.
         * 
         * @return builder
         * 
         */
        public Builder maps(Output<List<DirMapArgs>> maps) {
            $.maps = maps;
            return this;
        }

        /**
         * @param maps The actual map of devices for the hardware mapping.
         * 
         * @return builder
         * 
         */
        public Builder maps(List<DirMapArgs> maps) {
            return maps(Output.of(maps));
        }

        /**
         * @param maps The actual map of devices for the hardware mapping.
         * 
         * @return builder
         * 
         */
        public Builder maps(DirMapArgs... maps) {
            return maps(List.of(maps));
        }

        /**
         * @param name The name of this directory mapping.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of this directory mapping.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public DirArgs build() {
            if ($.maps == null) {
                throw new MissingRequiredPropertyException("DirArgs", "maps");
            }
            return $;
        }
    }

}

// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.Storage.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDatastoresDatastore extends com.pulumi.resources.InvokeArgs {

    public static final GetDatastoresDatastore Empty = new GetDatastoresDatastore();

    /**
     * Whether the store is active.
     * 
     */
    @Import(name="active")
    private @Nullable Boolean active;

    /**
     * @return Whether the store is active.
     * 
     */
    public Optional<Boolean> active() {
        return Optional.ofNullable(this.active);
    }

    /**
     * Allowed store content types.
     * 
     */
    @Import(name="contentTypes", required=true)
    private List<String> contentTypes;

    /**
     * @return Allowed store content types.
     * 
     */
    public List<String> contentTypes() {
        return this.contentTypes;
    }

    /**
     * Whether the store is enabled.
     * 
     */
    @Import(name="enabled")
    private @Nullable Boolean enabled;

    /**
     * @return Whether the store is enabled.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The ID of the store.
     * 
     */
    @Import(name="id", required=true)
    private String id;

    /**
     * @return The ID of the store.
     * 
     */
    public String id() {
        return this.id;
    }

    /**
     * The name of the node the store is on.
     * 
     */
    @Import(name="nodeName", required=true)
    private String nodeName;

    /**
     * @return The name of the node the store is on.
     * 
     */
    public String nodeName() {
        return this.nodeName;
    }

    /**
     * Shared flag from store configuration.
     * 
     */
    @Import(name="shared")
    private @Nullable Boolean shared;

    /**
     * @return Shared flag from store configuration.
     * 
     */
    public Optional<Boolean> shared() {
        return Optional.ofNullable(this.shared);
    }

    /**
     * Available store space in bytes.
     * 
     */
    @Import(name="spaceAvailable")
    private @Nullable Integer spaceAvailable;

    /**
     * @return Available store space in bytes.
     * 
     */
    public Optional<Integer> spaceAvailable() {
        return Optional.ofNullable(this.spaceAvailable);
    }

    /**
     * Total store space in bytes.
     * 
     */
    @Import(name="spaceTotal")
    private @Nullable Integer spaceTotal;

    /**
     * @return Total store space in bytes.
     * 
     */
    public Optional<Integer> spaceTotal() {
        return Optional.ofNullable(this.spaceTotal);
    }

    /**
     * Used store space in bytes.
     * 
     */
    @Import(name="spaceUsed")
    private @Nullable Integer spaceUsed;

    /**
     * @return Used store space in bytes.
     * 
     */
    public Optional<Integer> spaceUsed() {
        return Optional.ofNullable(this.spaceUsed);
    }

    /**
     * Used fraction (used/total).
     * 
     */
    @Import(name="spaceUsedFraction")
    private @Nullable Double spaceUsedFraction;

    /**
     * @return Used fraction (used/total).
     * 
     */
    public Optional<Double> spaceUsedFraction() {
        return Optional.ofNullable(this.spaceUsedFraction);
    }

    /**
     * Store type.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return Store type.
     * 
     */
    public String type() {
        return this.type;
    }

    private GetDatastoresDatastore() {}

    private GetDatastoresDatastore(GetDatastoresDatastore $) {
        this.active = $.active;
        this.contentTypes = $.contentTypes;
        this.enabled = $.enabled;
        this.id = $.id;
        this.nodeName = $.nodeName;
        this.shared = $.shared;
        this.spaceAvailable = $.spaceAvailable;
        this.spaceTotal = $.spaceTotal;
        this.spaceUsed = $.spaceUsed;
        this.spaceUsedFraction = $.spaceUsedFraction;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDatastoresDatastore defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDatastoresDatastore $;

        public Builder() {
            $ = new GetDatastoresDatastore();
        }

        public Builder(GetDatastoresDatastore defaults) {
            $ = new GetDatastoresDatastore(Objects.requireNonNull(defaults));
        }

        /**
         * @param active Whether the store is active.
         * 
         * @return builder
         * 
         */
        public Builder active(@Nullable Boolean active) {
            $.active = active;
            return this;
        }

        /**
         * @param contentTypes Allowed store content types.
         * 
         * @return builder
         * 
         */
        public Builder contentTypes(List<String> contentTypes) {
            $.contentTypes = contentTypes;
            return this;
        }

        /**
         * @param contentTypes Allowed store content types.
         * 
         * @return builder
         * 
         */
        public Builder contentTypes(String... contentTypes) {
            return contentTypes(List.of(contentTypes));
        }

        /**
         * @param enabled Whether the store is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Boolean enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param id The ID of the store.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            $.id = id;
            return this;
        }

        /**
         * @param nodeName The name of the node the store is on.
         * 
         * @return builder
         * 
         */
        public Builder nodeName(String nodeName) {
            $.nodeName = nodeName;
            return this;
        }

        /**
         * @param shared Shared flag from store configuration.
         * 
         * @return builder
         * 
         */
        public Builder shared(@Nullable Boolean shared) {
            $.shared = shared;
            return this;
        }

        /**
         * @param spaceAvailable Available store space in bytes.
         * 
         * @return builder
         * 
         */
        public Builder spaceAvailable(@Nullable Integer spaceAvailable) {
            $.spaceAvailable = spaceAvailable;
            return this;
        }

        /**
         * @param spaceTotal Total store space in bytes.
         * 
         * @return builder
         * 
         */
        public Builder spaceTotal(@Nullable Integer spaceTotal) {
            $.spaceTotal = spaceTotal;
            return this;
        }

        /**
         * @param spaceUsed Used store space in bytes.
         * 
         * @return builder
         * 
         */
        public Builder spaceUsed(@Nullable Integer spaceUsed) {
            $.spaceUsed = spaceUsed;
            return this;
        }

        /**
         * @param spaceUsedFraction Used fraction (used/total).
         * 
         * @return builder
         * 
         */
        public Builder spaceUsedFraction(@Nullable Double spaceUsedFraction) {
            $.spaceUsedFraction = spaceUsedFraction;
            return this;
        }

        /**
         * @param type Store type.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public GetDatastoresDatastore build() {
            if ($.contentTypes == null) {
                throw new MissingRequiredPropertyException("GetDatastoresDatastore", "contentTypes");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("GetDatastoresDatastore", "id");
            }
            if ($.nodeName == null) {
                throw new MissingRequiredPropertyException("GetDatastoresDatastore", "nodeName");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("GetDatastoresDatastore", "type");
            }
            return $;
        }
    }

}

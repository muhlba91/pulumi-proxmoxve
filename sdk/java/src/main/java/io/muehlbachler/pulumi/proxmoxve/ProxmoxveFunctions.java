// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.deployment.InvokeOutputOptions;
import io.muehlbachler.pulumi.proxmoxve.Utilities;
import io.muehlbachler.pulumi.proxmoxve.inputs.GetContainerArgs;
import io.muehlbachler.pulumi.proxmoxve.inputs.GetContainerPlainArgs;
import io.muehlbachler.pulumi.proxmoxve.inputs.GetContainersArgs;
import io.muehlbachler.pulumi.proxmoxve.inputs.GetContainersPlainArgs;
import io.muehlbachler.pulumi.proxmoxve.inputs.GetFileArgs;
import io.muehlbachler.pulumi.proxmoxve.inputs.GetFilePlainArgs;
import io.muehlbachler.pulumi.proxmoxve.inputs.GetNodeArgs;
import io.muehlbachler.pulumi.proxmoxve.inputs.GetNodePlainArgs;
import io.muehlbachler.pulumi.proxmoxve.inputs.GetVm2Args;
import io.muehlbachler.pulumi.proxmoxve.inputs.GetVm2PlainArgs;
import io.muehlbachler.pulumi.proxmoxve.outputs.GetContainerResult;
import io.muehlbachler.pulumi.proxmoxve.outputs.GetContainersResult;
import io.muehlbachler.pulumi.proxmoxve.outputs.GetFileResult;
import io.muehlbachler.pulumi.proxmoxve.outputs.GetNodeResult;
import io.muehlbachler.pulumi.proxmoxve.outputs.GetVm2Result;
import java.util.concurrent.CompletableFuture;

public final class ProxmoxveFunctions {
    /**
     * Retrieves information about a specific Container.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.proxmoxve.ProxmoxveFunctions;
     * import com.pulumi.proxmoxve.inputs.GetContainerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var testContainer = ProxmoxveFunctions.getContainer(GetContainerArgs.builder()
     *             .nodeName("test")
     *             .vmId(100)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetContainerResult> getContainer(GetContainerArgs args) {
        return getContainer(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves information about a specific Container.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.proxmoxve.ProxmoxveFunctions;
     * import com.pulumi.proxmoxve.inputs.GetContainerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var testContainer = ProxmoxveFunctions.getContainer(GetContainerArgs.builder()
     *             .nodeName("test")
     *             .vmId(100)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetContainerResult> getContainerPlain(GetContainerPlainArgs args) {
        return getContainerPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves information about a specific Container.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.proxmoxve.ProxmoxveFunctions;
     * import com.pulumi.proxmoxve.inputs.GetContainerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var testContainer = ProxmoxveFunctions.getContainer(GetContainerArgs.builder()
     *             .nodeName("test")
     *             .vmId(100)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetContainerResult> getContainer(GetContainerArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("proxmoxve:index/getContainer:getContainer", TypeShape.of(GetContainerResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves information about a specific Container.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.proxmoxve.ProxmoxveFunctions;
     * import com.pulumi.proxmoxve.inputs.GetContainerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var testContainer = ProxmoxveFunctions.getContainer(GetContainerArgs.builder()
     *             .nodeName("test")
     *             .vmId(100)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetContainerResult> getContainer(GetContainerArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("proxmoxve:index/getContainer:getContainer", TypeShape.of(GetContainerResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves information about a specific Container.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.proxmoxve.ProxmoxveFunctions;
     * import com.pulumi.proxmoxve.inputs.GetContainerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var testContainer = ProxmoxveFunctions.getContainer(GetContainerArgs.builder()
     *             .nodeName("test")
     *             .vmId(100)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetContainerResult> getContainerPlain(GetContainerPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("proxmoxve:index/getContainer:getContainer", TypeShape.of(GetContainerResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves information about all containers in the Proxmox cluster.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.proxmoxve.ProxmoxveFunctions;
     * import com.pulumi.proxmoxve.inputs.GetContainersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ubuntuContainers = ProxmoxveFunctions.getContainers(GetContainersArgs.builder()
     *             .tags("ubuntu")
     *             .build());
     * 
     *         final var ubuntuTemplates = ProxmoxveFunctions.getContainers(GetContainersArgs.builder()
     *             .filters(            
     *                 GetContainersFilterArgs.builder()
     *                     .name("template")
     *                     .values("true")
     *                     .build(),
     *                 GetContainersFilterArgs.builder()
     *                     .name("status")
     *                     .values("stopped")
     *                     .build(),
     *                 GetContainersFilterArgs.builder()
     *                     .name("name")
     *                     .regex(true)
     *                     .values("^ubuntu-20.*$")
     *                     .build(),
     *                 GetContainersFilterArgs.builder()
     *                     .name("node_name")
     *                     .regex(true)
     *                     .values(                    
     *                         "node_us_[1-3]",
     *                         "node_eu_[1-3]")
     *                     .build())
     *             .tags(            
     *                 "template",
     *                 "latest")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetContainersResult> getContainers() {
        return getContainers(GetContainersArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieves information about all containers in the Proxmox cluster.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.proxmoxve.ProxmoxveFunctions;
     * import com.pulumi.proxmoxve.inputs.GetContainersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ubuntuContainers = ProxmoxveFunctions.getContainers(GetContainersArgs.builder()
     *             .tags("ubuntu")
     *             .build());
     * 
     *         final var ubuntuTemplates = ProxmoxveFunctions.getContainers(GetContainersArgs.builder()
     *             .filters(            
     *                 GetContainersFilterArgs.builder()
     *                     .name("template")
     *                     .values("true")
     *                     .build(),
     *                 GetContainersFilterArgs.builder()
     *                     .name("status")
     *                     .values("stopped")
     *                     .build(),
     *                 GetContainersFilterArgs.builder()
     *                     .name("name")
     *                     .regex(true)
     *                     .values("^ubuntu-20.*$")
     *                     .build(),
     *                 GetContainersFilterArgs.builder()
     *                     .name("node_name")
     *                     .regex(true)
     *                     .values(                    
     *                         "node_us_[1-3]",
     *                         "node_eu_[1-3]")
     *                     .build())
     *             .tags(            
     *                 "template",
     *                 "latest")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetContainersResult> getContainersPlain() {
        return getContainersPlain(GetContainersPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieves information about all containers in the Proxmox cluster.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.proxmoxve.ProxmoxveFunctions;
     * import com.pulumi.proxmoxve.inputs.GetContainersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ubuntuContainers = ProxmoxveFunctions.getContainers(GetContainersArgs.builder()
     *             .tags("ubuntu")
     *             .build());
     * 
     *         final var ubuntuTemplates = ProxmoxveFunctions.getContainers(GetContainersArgs.builder()
     *             .filters(            
     *                 GetContainersFilterArgs.builder()
     *                     .name("template")
     *                     .values("true")
     *                     .build(),
     *                 GetContainersFilterArgs.builder()
     *                     .name("status")
     *                     .values("stopped")
     *                     .build(),
     *                 GetContainersFilterArgs.builder()
     *                     .name("name")
     *                     .regex(true)
     *                     .values("^ubuntu-20.*$")
     *                     .build(),
     *                 GetContainersFilterArgs.builder()
     *                     .name("node_name")
     *                     .regex(true)
     *                     .values(                    
     *                         "node_us_[1-3]",
     *                         "node_eu_[1-3]")
     *                     .build())
     *             .tags(            
     *                 "template",
     *                 "latest")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetContainersResult> getContainers(GetContainersArgs args) {
        return getContainers(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves information about all containers in the Proxmox cluster.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.proxmoxve.ProxmoxveFunctions;
     * import com.pulumi.proxmoxve.inputs.GetContainersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ubuntuContainers = ProxmoxveFunctions.getContainers(GetContainersArgs.builder()
     *             .tags("ubuntu")
     *             .build());
     * 
     *         final var ubuntuTemplates = ProxmoxveFunctions.getContainers(GetContainersArgs.builder()
     *             .filters(            
     *                 GetContainersFilterArgs.builder()
     *                     .name("template")
     *                     .values("true")
     *                     .build(),
     *                 GetContainersFilterArgs.builder()
     *                     .name("status")
     *                     .values("stopped")
     *                     .build(),
     *                 GetContainersFilterArgs.builder()
     *                     .name("name")
     *                     .regex(true)
     *                     .values("^ubuntu-20.*$")
     *                     .build(),
     *                 GetContainersFilterArgs.builder()
     *                     .name("node_name")
     *                     .regex(true)
     *                     .values(                    
     *                         "node_us_[1-3]",
     *                         "node_eu_[1-3]")
     *                     .build())
     *             .tags(            
     *                 "template",
     *                 "latest")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetContainersResult> getContainersPlain(GetContainersPlainArgs args) {
        return getContainersPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves information about all containers in the Proxmox cluster.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.proxmoxve.ProxmoxveFunctions;
     * import com.pulumi.proxmoxve.inputs.GetContainersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ubuntuContainers = ProxmoxveFunctions.getContainers(GetContainersArgs.builder()
     *             .tags("ubuntu")
     *             .build());
     * 
     *         final var ubuntuTemplates = ProxmoxveFunctions.getContainers(GetContainersArgs.builder()
     *             .filters(            
     *                 GetContainersFilterArgs.builder()
     *                     .name("template")
     *                     .values("true")
     *                     .build(),
     *                 GetContainersFilterArgs.builder()
     *                     .name("status")
     *                     .values("stopped")
     *                     .build(),
     *                 GetContainersFilterArgs.builder()
     *                     .name("name")
     *                     .regex(true)
     *                     .values("^ubuntu-20.*$")
     *                     .build(),
     *                 GetContainersFilterArgs.builder()
     *                     .name("node_name")
     *                     .regex(true)
     *                     .values(                    
     *                         "node_us_[1-3]",
     *                         "node_eu_[1-3]")
     *                     .build())
     *             .tags(            
     *                 "template",
     *                 "latest")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetContainersResult> getContainers(GetContainersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("proxmoxve:index/getContainers:getContainers", TypeShape.of(GetContainersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves information about all containers in the Proxmox cluster.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.proxmoxve.ProxmoxveFunctions;
     * import com.pulumi.proxmoxve.inputs.GetContainersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ubuntuContainers = ProxmoxveFunctions.getContainers(GetContainersArgs.builder()
     *             .tags("ubuntu")
     *             .build());
     * 
     *         final var ubuntuTemplates = ProxmoxveFunctions.getContainers(GetContainersArgs.builder()
     *             .filters(            
     *                 GetContainersFilterArgs.builder()
     *                     .name("template")
     *                     .values("true")
     *                     .build(),
     *                 GetContainersFilterArgs.builder()
     *                     .name("status")
     *                     .values("stopped")
     *                     .build(),
     *                 GetContainersFilterArgs.builder()
     *                     .name("name")
     *                     .regex(true)
     *                     .values("^ubuntu-20.*$")
     *                     .build(),
     *                 GetContainersFilterArgs.builder()
     *                     .name("node_name")
     *                     .regex(true)
     *                     .values(                    
     *                         "node_us_[1-3]",
     *                         "node_eu_[1-3]")
     *                     .build())
     *             .tags(            
     *                 "template",
     *                 "latest")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetContainersResult> getContainers(GetContainersArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("proxmoxve:index/getContainers:getContainers", TypeShape.of(GetContainersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves information about all containers in the Proxmox cluster.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.proxmoxve.ProxmoxveFunctions;
     * import com.pulumi.proxmoxve.inputs.GetContainersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ubuntuContainers = ProxmoxveFunctions.getContainers(GetContainersArgs.builder()
     *             .tags("ubuntu")
     *             .build());
     * 
     *         final var ubuntuTemplates = ProxmoxveFunctions.getContainers(GetContainersArgs.builder()
     *             .filters(            
     *                 GetContainersFilterArgs.builder()
     *                     .name("template")
     *                     .values("true")
     *                     .build(),
     *                 GetContainersFilterArgs.builder()
     *                     .name("status")
     *                     .values("stopped")
     *                     .build(),
     *                 GetContainersFilterArgs.builder()
     *                     .name("name")
     *                     .regex(true)
     *                     .values("^ubuntu-20.*$")
     *                     .build(),
     *                 GetContainersFilterArgs.builder()
     *                     .name("node_name")
     *                     .regex(true)
     *                     .values(                    
     *                         "node_us_[1-3]",
     *                         "node_eu_[1-3]")
     *                     .build())
     *             .tags(            
     *                 "template",
     *                 "latest")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetContainersResult> getContainersPlain(GetContainersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("proxmoxve:index/getContainers:getContainers", TypeShape.of(GetContainersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves information about an existing file in a Proxmox Virtual Environment node.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.proxmoxve.ProxmoxveFunctions;
     * import com.pulumi.proxmoxve.inputs.GetFileArgs;
     * import io.muehlbachler.pulumi.proxmoxve.VM.VirtualMachine;
     * import io.muehlbachler.pulumi.proxmoxve.VM.VirtualMachineArgs;
     * import com.pulumi.proxmoxve.VM.inputs.VirtualMachineCdromArgs;
     * import com.pulumi.proxmoxve.VM.inputs.VirtualMachineCpuArgs;
     * import com.pulumi.proxmoxve.VM.inputs.VirtualMachineMemoryArgs;
     * import com.pulumi.proxmoxve.VM.inputs.VirtualMachineDiskArgs;
     * import com.pulumi.proxmoxve.VM.inputs.VirtualMachineNetworkDeviceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ubuntuIso = ProxmoxveFunctions.getFile(GetFileArgs.builder()
     *             .nodeName("pve")
     *             .datastoreId("local")
     *             .contentType("iso")
     *             .fileName("ubuntu-22.04.3-live-server-amd64.iso")
     *             .build());
     * 
     *         final var ubuntuContainerTemplate = ProxmoxveFunctions.getFile(GetFileArgs.builder()
     *             .nodeName("pve")
     *             .datastoreId("local")
     *             .contentType("vztmpl")
     *             .fileName("ubuntu-22.04-standard_22.04-1_amd64.tar.zst")
     *             .build());
     * 
     *         final var cloudInitSnippet = ProxmoxveFunctions.getFile(GetFileArgs.builder()
     *             .nodeName("pve")
     *             .datastoreId("local")
     *             .contentType("snippets")
     *             .fileName("cloud-init-config.yaml")
     *             .build());
     * 
     *         final var importedFile = ProxmoxveFunctions.getFile(GetFileArgs.builder()
     *             .nodeName("pve")
     *             .datastoreId("local")
     *             .contentType("import")
     *             .fileName("imported-config.yaml")
     *             .build());
     * 
     *         ctx.export("ubuntuIsoId", ubuntuIso.id());
     *         ctx.export("ubuntuIsoSize", ubuntuIso.fileSize());
     *         ctx.export("containerTemplateFormat", ubuntuContainerTemplate.fileFormat());
     *         var example = new VirtualMachine("example", VirtualMachineArgs.builder()
     *             .nodeName("pve")
     *             .vmId(100)
     *             .cdrom(VirtualMachineCdromArgs.builder()
     *                 .fileId(ubuntuIso.id())
     *                 .build())
     *             .cpu(VirtualMachineCpuArgs.builder()
     *                 .cores(2)
     *                 .build())
     *             .memory(VirtualMachineMemoryArgs.builder()
     *                 .dedicated(2048)
     *                 .build())
     *             .disks(VirtualMachineDiskArgs.builder()
     *                 .datastoreId("local-lvm")
     *                 .fileFormat("qcow2")
     *                 .size(20)
     *                 .build())
     *             .networkDevices(VirtualMachineNetworkDeviceArgs.builder()
     *                 .bridge("vmbr0")
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFileResult> getFile(GetFileArgs args) {
        return getFile(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves information about an existing file in a Proxmox Virtual Environment node.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.proxmoxve.ProxmoxveFunctions;
     * import com.pulumi.proxmoxve.inputs.GetFileArgs;
     * import io.muehlbachler.pulumi.proxmoxve.VM.VirtualMachine;
     * import io.muehlbachler.pulumi.proxmoxve.VM.VirtualMachineArgs;
     * import com.pulumi.proxmoxve.VM.inputs.VirtualMachineCdromArgs;
     * import com.pulumi.proxmoxve.VM.inputs.VirtualMachineCpuArgs;
     * import com.pulumi.proxmoxve.VM.inputs.VirtualMachineMemoryArgs;
     * import com.pulumi.proxmoxve.VM.inputs.VirtualMachineDiskArgs;
     * import com.pulumi.proxmoxve.VM.inputs.VirtualMachineNetworkDeviceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ubuntuIso = ProxmoxveFunctions.getFile(GetFileArgs.builder()
     *             .nodeName("pve")
     *             .datastoreId("local")
     *             .contentType("iso")
     *             .fileName("ubuntu-22.04.3-live-server-amd64.iso")
     *             .build());
     * 
     *         final var ubuntuContainerTemplate = ProxmoxveFunctions.getFile(GetFileArgs.builder()
     *             .nodeName("pve")
     *             .datastoreId("local")
     *             .contentType("vztmpl")
     *             .fileName("ubuntu-22.04-standard_22.04-1_amd64.tar.zst")
     *             .build());
     * 
     *         final var cloudInitSnippet = ProxmoxveFunctions.getFile(GetFileArgs.builder()
     *             .nodeName("pve")
     *             .datastoreId("local")
     *             .contentType("snippets")
     *             .fileName("cloud-init-config.yaml")
     *             .build());
     * 
     *         final var importedFile = ProxmoxveFunctions.getFile(GetFileArgs.builder()
     *             .nodeName("pve")
     *             .datastoreId("local")
     *             .contentType("import")
     *             .fileName("imported-config.yaml")
     *             .build());
     * 
     *         ctx.export("ubuntuIsoId", ubuntuIso.id());
     *         ctx.export("ubuntuIsoSize", ubuntuIso.fileSize());
     *         ctx.export("containerTemplateFormat", ubuntuContainerTemplate.fileFormat());
     *         var example = new VirtualMachine("example", VirtualMachineArgs.builder()
     *             .nodeName("pve")
     *             .vmId(100)
     *             .cdrom(VirtualMachineCdromArgs.builder()
     *                 .fileId(ubuntuIso.id())
     *                 .build())
     *             .cpu(VirtualMachineCpuArgs.builder()
     *                 .cores(2)
     *                 .build())
     *             .memory(VirtualMachineMemoryArgs.builder()
     *                 .dedicated(2048)
     *                 .build())
     *             .disks(VirtualMachineDiskArgs.builder()
     *                 .datastoreId("local-lvm")
     *                 .fileFormat("qcow2")
     *                 .size(20)
     *                 .build())
     *             .networkDevices(VirtualMachineNetworkDeviceArgs.builder()
     *                 .bridge("vmbr0")
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFileResult> getFilePlain(GetFilePlainArgs args) {
        return getFilePlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves information about an existing file in a Proxmox Virtual Environment node.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.proxmoxve.ProxmoxveFunctions;
     * import com.pulumi.proxmoxve.inputs.GetFileArgs;
     * import io.muehlbachler.pulumi.proxmoxve.VM.VirtualMachine;
     * import io.muehlbachler.pulumi.proxmoxve.VM.VirtualMachineArgs;
     * import com.pulumi.proxmoxve.VM.inputs.VirtualMachineCdromArgs;
     * import com.pulumi.proxmoxve.VM.inputs.VirtualMachineCpuArgs;
     * import com.pulumi.proxmoxve.VM.inputs.VirtualMachineMemoryArgs;
     * import com.pulumi.proxmoxve.VM.inputs.VirtualMachineDiskArgs;
     * import com.pulumi.proxmoxve.VM.inputs.VirtualMachineNetworkDeviceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ubuntuIso = ProxmoxveFunctions.getFile(GetFileArgs.builder()
     *             .nodeName("pve")
     *             .datastoreId("local")
     *             .contentType("iso")
     *             .fileName("ubuntu-22.04.3-live-server-amd64.iso")
     *             .build());
     * 
     *         final var ubuntuContainerTemplate = ProxmoxveFunctions.getFile(GetFileArgs.builder()
     *             .nodeName("pve")
     *             .datastoreId("local")
     *             .contentType("vztmpl")
     *             .fileName("ubuntu-22.04-standard_22.04-1_amd64.tar.zst")
     *             .build());
     * 
     *         final var cloudInitSnippet = ProxmoxveFunctions.getFile(GetFileArgs.builder()
     *             .nodeName("pve")
     *             .datastoreId("local")
     *             .contentType("snippets")
     *             .fileName("cloud-init-config.yaml")
     *             .build());
     * 
     *         final var importedFile = ProxmoxveFunctions.getFile(GetFileArgs.builder()
     *             .nodeName("pve")
     *             .datastoreId("local")
     *             .contentType("import")
     *             .fileName("imported-config.yaml")
     *             .build());
     * 
     *         ctx.export("ubuntuIsoId", ubuntuIso.id());
     *         ctx.export("ubuntuIsoSize", ubuntuIso.fileSize());
     *         ctx.export("containerTemplateFormat", ubuntuContainerTemplate.fileFormat());
     *         var example = new VirtualMachine("example", VirtualMachineArgs.builder()
     *             .nodeName("pve")
     *             .vmId(100)
     *             .cdrom(VirtualMachineCdromArgs.builder()
     *                 .fileId(ubuntuIso.id())
     *                 .build())
     *             .cpu(VirtualMachineCpuArgs.builder()
     *                 .cores(2)
     *                 .build())
     *             .memory(VirtualMachineMemoryArgs.builder()
     *                 .dedicated(2048)
     *                 .build())
     *             .disks(VirtualMachineDiskArgs.builder()
     *                 .datastoreId("local-lvm")
     *                 .fileFormat("qcow2")
     *                 .size(20)
     *                 .build())
     *             .networkDevices(VirtualMachineNetworkDeviceArgs.builder()
     *                 .bridge("vmbr0")
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFileResult> getFile(GetFileArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("proxmoxve:index/getFile:getFile", TypeShape.of(GetFileResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves information about an existing file in a Proxmox Virtual Environment node.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.proxmoxve.ProxmoxveFunctions;
     * import com.pulumi.proxmoxve.inputs.GetFileArgs;
     * import io.muehlbachler.pulumi.proxmoxve.VM.VirtualMachine;
     * import io.muehlbachler.pulumi.proxmoxve.VM.VirtualMachineArgs;
     * import com.pulumi.proxmoxve.VM.inputs.VirtualMachineCdromArgs;
     * import com.pulumi.proxmoxve.VM.inputs.VirtualMachineCpuArgs;
     * import com.pulumi.proxmoxve.VM.inputs.VirtualMachineMemoryArgs;
     * import com.pulumi.proxmoxve.VM.inputs.VirtualMachineDiskArgs;
     * import com.pulumi.proxmoxve.VM.inputs.VirtualMachineNetworkDeviceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ubuntuIso = ProxmoxveFunctions.getFile(GetFileArgs.builder()
     *             .nodeName("pve")
     *             .datastoreId("local")
     *             .contentType("iso")
     *             .fileName("ubuntu-22.04.3-live-server-amd64.iso")
     *             .build());
     * 
     *         final var ubuntuContainerTemplate = ProxmoxveFunctions.getFile(GetFileArgs.builder()
     *             .nodeName("pve")
     *             .datastoreId("local")
     *             .contentType("vztmpl")
     *             .fileName("ubuntu-22.04-standard_22.04-1_amd64.tar.zst")
     *             .build());
     * 
     *         final var cloudInitSnippet = ProxmoxveFunctions.getFile(GetFileArgs.builder()
     *             .nodeName("pve")
     *             .datastoreId("local")
     *             .contentType("snippets")
     *             .fileName("cloud-init-config.yaml")
     *             .build());
     * 
     *         final var importedFile = ProxmoxveFunctions.getFile(GetFileArgs.builder()
     *             .nodeName("pve")
     *             .datastoreId("local")
     *             .contentType("import")
     *             .fileName("imported-config.yaml")
     *             .build());
     * 
     *         ctx.export("ubuntuIsoId", ubuntuIso.id());
     *         ctx.export("ubuntuIsoSize", ubuntuIso.fileSize());
     *         ctx.export("containerTemplateFormat", ubuntuContainerTemplate.fileFormat());
     *         var example = new VirtualMachine("example", VirtualMachineArgs.builder()
     *             .nodeName("pve")
     *             .vmId(100)
     *             .cdrom(VirtualMachineCdromArgs.builder()
     *                 .fileId(ubuntuIso.id())
     *                 .build())
     *             .cpu(VirtualMachineCpuArgs.builder()
     *                 .cores(2)
     *                 .build())
     *             .memory(VirtualMachineMemoryArgs.builder()
     *                 .dedicated(2048)
     *                 .build())
     *             .disks(VirtualMachineDiskArgs.builder()
     *                 .datastoreId("local-lvm")
     *                 .fileFormat("qcow2")
     *                 .size(20)
     *                 .build())
     *             .networkDevices(VirtualMachineNetworkDeviceArgs.builder()
     *                 .bridge("vmbr0")
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFileResult> getFile(GetFileArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("proxmoxve:index/getFile:getFile", TypeShape.of(GetFileResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves information about an existing file in a Proxmox Virtual Environment node.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.proxmoxve.ProxmoxveFunctions;
     * import com.pulumi.proxmoxve.inputs.GetFileArgs;
     * import io.muehlbachler.pulumi.proxmoxve.VM.VirtualMachine;
     * import io.muehlbachler.pulumi.proxmoxve.VM.VirtualMachineArgs;
     * import com.pulumi.proxmoxve.VM.inputs.VirtualMachineCdromArgs;
     * import com.pulumi.proxmoxve.VM.inputs.VirtualMachineCpuArgs;
     * import com.pulumi.proxmoxve.VM.inputs.VirtualMachineMemoryArgs;
     * import com.pulumi.proxmoxve.VM.inputs.VirtualMachineDiskArgs;
     * import com.pulumi.proxmoxve.VM.inputs.VirtualMachineNetworkDeviceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ubuntuIso = ProxmoxveFunctions.getFile(GetFileArgs.builder()
     *             .nodeName("pve")
     *             .datastoreId("local")
     *             .contentType("iso")
     *             .fileName("ubuntu-22.04.3-live-server-amd64.iso")
     *             .build());
     * 
     *         final var ubuntuContainerTemplate = ProxmoxveFunctions.getFile(GetFileArgs.builder()
     *             .nodeName("pve")
     *             .datastoreId("local")
     *             .contentType("vztmpl")
     *             .fileName("ubuntu-22.04-standard_22.04-1_amd64.tar.zst")
     *             .build());
     * 
     *         final var cloudInitSnippet = ProxmoxveFunctions.getFile(GetFileArgs.builder()
     *             .nodeName("pve")
     *             .datastoreId("local")
     *             .contentType("snippets")
     *             .fileName("cloud-init-config.yaml")
     *             .build());
     * 
     *         final var importedFile = ProxmoxveFunctions.getFile(GetFileArgs.builder()
     *             .nodeName("pve")
     *             .datastoreId("local")
     *             .contentType("import")
     *             .fileName("imported-config.yaml")
     *             .build());
     * 
     *         ctx.export("ubuntuIsoId", ubuntuIso.id());
     *         ctx.export("ubuntuIsoSize", ubuntuIso.fileSize());
     *         ctx.export("containerTemplateFormat", ubuntuContainerTemplate.fileFormat());
     *         var example = new VirtualMachine("example", VirtualMachineArgs.builder()
     *             .nodeName("pve")
     *             .vmId(100)
     *             .cdrom(VirtualMachineCdromArgs.builder()
     *                 .fileId(ubuntuIso.id())
     *                 .build())
     *             .cpu(VirtualMachineCpuArgs.builder()
     *                 .cores(2)
     *                 .build())
     *             .memory(VirtualMachineMemoryArgs.builder()
     *                 .dedicated(2048)
     *                 .build())
     *             .disks(VirtualMachineDiskArgs.builder()
     *                 .datastoreId("local-lvm")
     *                 .fileFormat("qcow2")
     *                 .size(20)
     *                 .build())
     *             .networkDevices(VirtualMachineNetworkDeviceArgs.builder()
     *                 .bridge("vmbr0")
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFileResult> getFilePlain(GetFilePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("proxmoxve:index/getFile:getFile", TypeShape.of(GetFileResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves information about node.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.proxmoxve.ProxmoxveFunctions;
     * import com.pulumi.proxmoxve.inputs.GetNodeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var node = ProxmoxveFunctions.getNode(GetNodeArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNodeResult> getNode(GetNodeArgs args) {
        return getNode(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves information about node.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.proxmoxve.ProxmoxveFunctions;
     * import com.pulumi.proxmoxve.inputs.GetNodeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var node = ProxmoxveFunctions.getNode(GetNodeArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNodeResult> getNodePlain(GetNodePlainArgs args) {
        return getNodePlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves information about node.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.proxmoxve.ProxmoxveFunctions;
     * import com.pulumi.proxmoxve.inputs.GetNodeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var node = ProxmoxveFunctions.getNode(GetNodeArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNodeResult> getNode(GetNodeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("proxmoxve:index/getNode:getNode", TypeShape.of(GetNodeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves information about node.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.proxmoxve.ProxmoxveFunctions;
     * import com.pulumi.proxmoxve.inputs.GetNodeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var node = ProxmoxveFunctions.getNode(GetNodeArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNodeResult> getNode(GetNodeArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("proxmoxve:index/getNode:getNode", TypeShape.of(GetNodeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves information about node.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.proxmoxve.ProxmoxveFunctions;
     * import com.pulumi.proxmoxve.inputs.GetNodeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var node = ProxmoxveFunctions.getNode(GetNodeArgs.builder()
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNodeResult> getNodePlain(GetNodePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("proxmoxve:index/getNode:getNode", TypeShape.of(GetNodeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **DO NOT USE**
     * This is an experimental implementation of a Proxmox VM datasource using Plugin Framework.
     * 
     */
    public static Output<GetVm2Result> getVm2(GetVm2Args args) {
        return getVm2(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **DO NOT USE**
     * This is an experimental implementation of a Proxmox VM datasource using Plugin Framework.
     * 
     */
    public static CompletableFuture<GetVm2Result> getVm2Plain(GetVm2PlainArgs args) {
        return getVm2Plain(args, InvokeOptions.Empty);
    }
    /**
     * !&gt; **DO NOT USE**
     * This is an experimental implementation of a Proxmox VM datasource using Plugin Framework.
     * 
     */
    public static Output<GetVm2Result> getVm2(GetVm2Args args, InvokeOptions options) {
        return Deployment.getInstance().invoke("proxmoxve:index/getVm2:getVm2", TypeShape.of(GetVm2Result.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **DO NOT USE**
     * This is an experimental implementation of a Proxmox VM datasource using Plugin Framework.
     * 
     */
    public static Output<GetVm2Result> getVm2(GetVm2Args args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("proxmoxve:index/getVm2:getVm2", TypeShape.of(GetVm2Result.class), args, Utilities.withVersion(options));
    }
    /**
     * !&gt; **DO NOT USE**
     * This is an experimental implementation of a Proxmox VM datasource using Plugin Framework.
     * 
     */
    public static CompletableFuture<GetVm2Result> getVm2Plain(GetVm2PlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("proxmoxve:index/getVm2:getVm2", TypeShape.of(GetVm2Result.class), args, Utilities.withVersion(options));
    }
}

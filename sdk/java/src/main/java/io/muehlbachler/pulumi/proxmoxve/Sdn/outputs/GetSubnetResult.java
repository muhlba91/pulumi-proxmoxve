// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.Sdn.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import io.muehlbachler.pulumi.proxmoxve.Sdn.outputs.GetSubnetDhcpRange;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSubnetResult {
    /**
     * @return A CIDR network address, for example 10.0.0.0/8
     * 
     */
    private String cidr;
    /**
     * @return The DNS server used for DHCP.
     * 
     */
    private String dhcpDnsServer;
    /**
     * @return DHCP range (start and end IPs).
     * 
     */
    private GetSubnetDhcpRange dhcpRange;
    /**
     * @return Prefix used for DNS zone delegation.
     * 
     */
    private String dnsZonePrefix;
    /**
     * @return The gateway address for the subnet.
     * 
     */
    private String gateway;
    /**
     * @return The full ID in the format &#39;vnet-id/subnet-id&#39;.
     * 
     */
    private String id;
    /**
     * @return Whether SNAT is enabled for the subnet.
     * 
     */
    private Boolean snat;
    /**
     * @return The VNet this subnet belongs to.
     * 
     */
    private String vnet;

    private GetSubnetResult() {}
    /**
     * @return A CIDR network address, for example 10.0.0.0/8
     * 
     */
    public String cidr() {
        return this.cidr;
    }
    /**
     * @return The DNS server used for DHCP.
     * 
     */
    public String dhcpDnsServer() {
        return this.dhcpDnsServer;
    }
    /**
     * @return DHCP range (start and end IPs).
     * 
     */
    public GetSubnetDhcpRange dhcpRange() {
        return this.dhcpRange;
    }
    /**
     * @return Prefix used for DNS zone delegation.
     * 
     */
    public String dnsZonePrefix() {
        return this.dnsZonePrefix;
    }
    /**
     * @return The gateway address for the subnet.
     * 
     */
    public String gateway() {
        return this.gateway;
    }
    /**
     * @return The full ID in the format &#39;vnet-id/subnet-id&#39;.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Whether SNAT is enabled for the subnet.
     * 
     */
    public Boolean snat() {
        return this.snat;
    }
    /**
     * @return The VNet this subnet belongs to.
     * 
     */
    public String vnet() {
        return this.vnet;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSubnetResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String cidr;
        private String dhcpDnsServer;
        private GetSubnetDhcpRange dhcpRange;
        private String dnsZonePrefix;
        private String gateway;
        private String id;
        private Boolean snat;
        private String vnet;
        public Builder() {}
        public Builder(GetSubnetResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cidr = defaults.cidr;
    	      this.dhcpDnsServer = defaults.dhcpDnsServer;
    	      this.dhcpRange = defaults.dhcpRange;
    	      this.dnsZonePrefix = defaults.dnsZonePrefix;
    	      this.gateway = defaults.gateway;
    	      this.id = defaults.id;
    	      this.snat = defaults.snat;
    	      this.vnet = defaults.vnet;
        }

        @CustomType.Setter
        public Builder cidr(String cidr) {
            if (cidr == null) {
              throw new MissingRequiredPropertyException("GetSubnetResult", "cidr");
            }
            this.cidr = cidr;
            return this;
        }
        @CustomType.Setter
        public Builder dhcpDnsServer(String dhcpDnsServer) {
            if (dhcpDnsServer == null) {
              throw new MissingRequiredPropertyException("GetSubnetResult", "dhcpDnsServer");
            }
            this.dhcpDnsServer = dhcpDnsServer;
            return this;
        }
        @CustomType.Setter
        public Builder dhcpRange(GetSubnetDhcpRange dhcpRange) {
            if (dhcpRange == null) {
              throw new MissingRequiredPropertyException("GetSubnetResult", "dhcpRange");
            }
            this.dhcpRange = dhcpRange;
            return this;
        }
        @CustomType.Setter
        public Builder dnsZonePrefix(String dnsZonePrefix) {
            if (dnsZonePrefix == null) {
              throw new MissingRequiredPropertyException("GetSubnetResult", "dnsZonePrefix");
            }
            this.dnsZonePrefix = dnsZonePrefix;
            return this;
        }
        @CustomType.Setter
        public Builder gateway(String gateway) {
            if (gateway == null) {
              throw new MissingRequiredPropertyException("GetSubnetResult", "gateway");
            }
            this.gateway = gateway;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSubnetResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder snat(Boolean snat) {
            if (snat == null) {
              throw new MissingRequiredPropertyException("GetSubnetResult", "snat");
            }
            this.snat = snat;
            return this;
        }
        @CustomType.Setter
        public Builder vnet(String vnet) {
            if (vnet == null) {
              throw new MissingRequiredPropertyException("GetSubnetResult", "vnet");
            }
            this.vnet = vnet;
            return this;
        }
        public GetSubnetResult build() {
            final var _resultValue = new GetSubnetResult();
            _resultValue.cidr = cidr;
            _resultValue.dhcpDnsServer = dhcpDnsServer;
            _resultValue.dhcpRange = dhcpRange;
            _resultValue.dnsZonePrefix = dnsZonePrefix;
            _resultValue.gateway = gateway;
            _resultValue.id = id;
            _resultValue.snat = snat;
            _resultValue.vnet = vnet;
            return _resultValue;
        }
    }
}

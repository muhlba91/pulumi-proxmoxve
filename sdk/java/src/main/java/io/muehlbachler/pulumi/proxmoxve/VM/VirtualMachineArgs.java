// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.VM;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import io.muehlbachler.pulumi.proxmoxve.VM.inputs.VirtualMachineAgentArgs;
import io.muehlbachler.pulumi.proxmoxve.VM.inputs.VirtualMachineAudioDeviceArgs;
import io.muehlbachler.pulumi.proxmoxve.VM.inputs.VirtualMachineCdromArgs;
import io.muehlbachler.pulumi.proxmoxve.VM.inputs.VirtualMachineCloneArgs;
import io.muehlbachler.pulumi.proxmoxve.VM.inputs.VirtualMachineCpuArgs;
import io.muehlbachler.pulumi.proxmoxve.VM.inputs.VirtualMachineDiskArgs;
import io.muehlbachler.pulumi.proxmoxve.VM.inputs.VirtualMachineEfiDiskArgs;
import io.muehlbachler.pulumi.proxmoxve.VM.inputs.VirtualMachineHostpciArgs;
import io.muehlbachler.pulumi.proxmoxve.VM.inputs.VirtualMachineInitializationArgs;
import io.muehlbachler.pulumi.proxmoxve.VM.inputs.VirtualMachineMemoryArgs;
import io.muehlbachler.pulumi.proxmoxve.VM.inputs.VirtualMachineNetworkDeviceArgs;
import io.muehlbachler.pulumi.proxmoxve.VM.inputs.VirtualMachineOperatingSystemArgs;
import io.muehlbachler.pulumi.proxmoxve.VM.inputs.VirtualMachineSerialDeviceArgs;
import io.muehlbachler.pulumi.proxmoxve.VM.inputs.VirtualMachineSmbiosArgs;
import io.muehlbachler.pulumi.proxmoxve.VM.inputs.VirtualMachineStartupArgs;
import io.muehlbachler.pulumi.proxmoxve.VM.inputs.VirtualMachineTpmStateArgs;
import io.muehlbachler.pulumi.proxmoxve.VM.inputs.VirtualMachineUsbArgs;
import io.muehlbachler.pulumi.proxmoxve.VM.inputs.VirtualMachineVgaArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualMachineArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualMachineArgs Empty = new VirtualMachineArgs();

    /**
     * Whether to enable ACPI (defaults to `true`).
     * 
     */
    @Import(name="acpi")
    private @Nullable Output<Boolean> acpi;

    /**
     * @return Whether to enable ACPI (defaults to `true`).
     * 
     */
    public Optional<Output<Boolean>> acpi() {
        return Optional.ofNullable(this.acpi);
    }

    /**
     * The QEMU agent configuration.
     * 
     */
    @Import(name="agent")
    private @Nullable Output<VirtualMachineAgentArgs> agent;

    /**
     * @return The QEMU agent configuration.
     * 
     */
    public Optional<Output<VirtualMachineAgentArgs>> agent() {
        return Optional.ofNullable(this.agent);
    }

    /**
     * An audio device.
     * 
     */
    @Import(name="audioDevice")
    private @Nullable Output<VirtualMachineAudioDeviceArgs> audioDevice;

    /**
     * @return An audio device.
     * 
     */
    public Optional<Output<VirtualMachineAudioDeviceArgs>> audioDevice() {
        return Optional.ofNullable(this.audioDevice);
    }

    /**
     * The BIOS implementation (defaults to `seabios`).
     * 
     */
    @Import(name="bios")
    private @Nullable Output<String> bios;

    /**
     * @return The BIOS implementation (defaults to `seabios`).
     * 
     */
    public Optional<Output<String>> bios() {
        return Optional.ofNullable(this.bios);
    }

    /**
     * Specify a list of devices to boot from in the order
     * they appear in the list (defaults to `[]`).
     * 
     */
    @Import(name="bootOrders")
    private @Nullable Output<List<String>> bootOrders;

    /**
     * @return Specify a list of devices to boot from in the order
     * they appear in the list (defaults to `[]`).
     * 
     */
    public Optional<Output<List<String>>> bootOrders() {
        return Optional.ofNullable(this.bootOrders);
    }

    /**
     * The CDROM configuration.
     * 
     */
    @Import(name="cdrom")
    private @Nullable Output<VirtualMachineCdromArgs> cdrom;

    /**
     * @return The CDROM configuration.
     * 
     */
    public Optional<Output<VirtualMachineCdromArgs>> cdrom() {
        return Optional.ofNullable(this.cdrom);
    }

    /**
     * The cloning configuration.
     * 
     */
    @Import(name="clone")
    private @Nullable Output<VirtualMachineCloneArgs> clone;

    /**
     * @return The cloning configuration.
     * 
     */
    public Optional<Output<VirtualMachineCloneArgs>> clone_() {
        return Optional.ofNullable(this.clone);
    }

    /**
     * The CPU configuration.
     * 
     */
    @Import(name="cpu")
    private @Nullable Output<VirtualMachineCpuArgs> cpu;

    /**
     * @return The CPU configuration.
     * 
     */
    public Optional<Output<VirtualMachineCpuArgs>> cpu() {
        return Optional.ofNullable(this.cpu);
    }

    /**
     * The description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A disk (multiple blocks supported).
     * 
     */
    @Import(name="disks")
    private @Nullable Output<List<VirtualMachineDiskArgs>> disks;

    /**
     * @return A disk (multiple blocks supported).
     * 
     */
    public Optional<Output<List<VirtualMachineDiskArgs>>> disks() {
        return Optional.ofNullable(this.disks);
    }

    /**
     * The efi disk device (required if `bios` is set
     * to `ovmf`)
     * 
     */
    @Import(name="efiDisk")
    private @Nullable Output<VirtualMachineEfiDiskArgs> efiDisk;

    /**
     * @return The efi disk device (required if `bios` is set
     * to `ovmf`)
     * 
     */
    public Optional<Output<VirtualMachineEfiDiskArgs>> efiDisk() {
        return Optional.ofNullable(this.efiDisk);
    }

    /**
     * The identifier for a file containing a hook script (needs to be executable).
     * 
     */
    @Import(name="hookScriptFileId")
    private @Nullable Output<String> hookScriptFileId;

    /**
     * @return The identifier for a file containing a hook script (needs to be executable).
     * 
     */
    public Optional<Output<String>> hookScriptFileId() {
        return Optional.ofNullable(this.hookScriptFileId);
    }

    /**
     * A host PCI device mapping (multiple blocks supported).
     * 
     */
    @Import(name="hostpcis")
    private @Nullable Output<List<VirtualMachineHostpciArgs>> hostpcis;

    /**
     * @return A host PCI device mapping (multiple blocks supported).
     * 
     */
    public Optional<Output<List<VirtualMachineHostpciArgs>>> hostpcis() {
        return Optional.ofNullable(this.hostpcis);
    }

    /**
     * The cloud-init configuration.
     * 
     */
    @Import(name="initialization")
    private @Nullable Output<VirtualMachineInitializationArgs> initialization;

    /**
     * @return The cloud-init configuration.
     * 
     */
    public Optional<Output<VirtualMachineInitializationArgs>> initialization() {
        return Optional.ofNullable(this.initialization);
    }

    /**
     * The keyboard layout (defaults to `en-us`).
     * 
     */
    @Import(name="keyboardLayout")
    private @Nullable Output<String> keyboardLayout;

    /**
     * @return The keyboard layout (defaults to `en-us`).
     * 
     */
    public Optional<Output<String>> keyboardLayout() {
        return Optional.ofNullable(this.keyboardLayout);
    }

    /**
     * Arbitrary arguments passed to kvm.
     * 
     */
    @Import(name="kvmArguments")
    private @Nullable Output<String> kvmArguments;

    /**
     * @return Arbitrary arguments passed to kvm.
     * 
     */
    public Optional<Output<String>> kvmArguments() {
        return Optional.ofNullable(this.kvmArguments);
    }

    /**
     * The VM machine type (defaults to `pc`).
     * 
     */
    @Import(name="machine")
    private @Nullable Output<String> machine;

    /**
     * @return The VM machine type (defaults to `pc`).
     * 
     */
    public Optional<Output<String>> machine() {
        return Optional.ofNullable(this.machine);
    }

    /**
     * The VGA memory in megabytes (defaults to `16`).
     * 
     */
    @Import(name="memory")
    private @Nullable Output<VirtualMachineMemoryArgs> memory;

    /**
     * @return The VGA memory in megabytes (defaults to `16`).
     * 
     */
    public Optional<Output<VirtualMachineMemoryArgs>> memory() {
        return Optional.ofNullable(this.memory);
    }

    /**
     * Migrate the VM on node change instead of re-creating
     * it (defaults to `false`).
     * 
     */
    @Import(name="migrate")
    private @Nullable Output<Boolean> migrate;

    /**
     * @return Migrate the VM on node change instead of re-creating
     * it (defaults to `false`).
     * 
     */
    public Optional<Output<Boolean>> migrate() {
        return Optional.ofNullable(this.migrate);
    }

    /**
     * The virtual machine name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The virtual machine name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A network device (multiple blocks supported).
     * 
     */
    @Import(name="networkDevices")
    private @Nullable Output<List<VirtualMachineNetworkDeviceArgs>> networkDevices;

    /**
     * @return A network device (multiple blocks supported).
     * 
     */
    public Optional<Output<List<VirtualMachineNetworkDeviceArgs>>> networkDevices() {
        return Optional.ofNullable(this.networkDevices);
    }

    /**
     * The name of the node to assign the virtual machine
     * to.
     * 
     */
    @Import(name="nodeName", required=true)
    private Output<String> nodeName;

    /**
     * @return The name of the node to assign the virtual machine
     * to.
     * 
     */
    public Output<String> nodeName() {
        return this.nodeName;
    }

    /**
     * Specifies whether a VM will be started during system
     * boot. (defaults to `true`)
     * 
     */
    @Import(name="onBoot")
    private @Nullable Output<Boolean> onBoot;

    /**
     * @return Specifies whether a VM will be started during system
     * boot. (defaults to `true`)
     * 
     */
    public Optional<Output<Boolean>> onBoot() {
        return Optional.ofNullable(this.onBoot);
    }

    /**
     * The Operating System configuration.
     * 
     */
    @Import(name="operatingSystem")
    private @Nullable Output<VirtualMachineOperatingSystemArgs> operatingSystem;

    /**
     * @return The Operating System configuration.
     * 
     */
    public Optional<Output<VirtualMachineOperatingSystemArgs>> operatingSystem() {
        return Optional.ofNullable(this.operatingSystem);
    }

    /**
     * The identifier for a pool to assign the virtual machine
     * to.
     * 
     */
    @Import(name="poolId")
    private @Nullable Output<String> poolId;

    /**
     * @return The identifier for a pool to assign the virtual machine
     * to.
     * 
     */
    public Optional<Output<String>> poolId() {
        return Optional.ofNullable(this.poolId);
    }

    /**
     * Reboot the VM after initial creation. (defaults
     * to `false`)
     * 
     */
    @Import(name="reboot")
    private @Nullable Output<Boolean> reboot;

    /**
     * @return Reboot the VM after initial creation. (defaults
     * to `false`)
     * 
     */
    public Optional<Output<Boolean>> reboot() {
        return Optional.ofNullable(this.reboot);
    }

    /**
     * The SCSI hardware type (defaults to
     * `virtio-scsi-pci`).
     * 
     */
    @Import(name="scsiHardware")
    private @Nullable Output<String> scsiHardware;

    /**
     * @return The SCSI hardware type (defaults to
     * `virtio-scsi-pci`).
     * 
     */
    public Optional<Output<String>> scsiHardware() {
        return Optional.ofNullable(this.scsiHardware);
    }

    /**
     * A serial device (multiple blocks supported).
     * 
     */
    @Import(name="serialDevices")
    private @Nullable Output<List<VirtualMachineSerialDeviceArgs>> serialDevices;

    /**
     * @return A serial device (multiple blocks supported).
     * 
     */
    public Optional<Output<List<VirtualMachineSerialDeviceArgs>>> serialDevices() {
        return Optional.ofNullable(this.serialDevices);
    }

    /**
     * The SMBIOS (type1) settings for the VM.
     * 
     */
    @Import(name="smbios")
    private @Nullable Output<VirtualMachineSmbiosArgs> smbios;

    /**
     * @return The SMBIOS (type1) settings for the VM.
     * 
     */
    public Optional<Output<VirtualMachineSmbiosArgs>> smbios() {
        return Optional.ofNullable(this.smbios);
    }

    /**
     * Whether to start the virtual machine (defaults
     * to `true`).
     * 
     */
    @Import(name="started")
    private @Nullable Output<Boolean> started;

    /**
     * @return Whether to start the virtual machine (defaults
     * to `true`).
     * 
     */
    public Optional<Output<Boolean>> started() {
        return Optional.ofNullable(this.started);
    }

    /**
     * Defines startup and shutdown behavior of the VM.
     * 
     */
    @Import(name="startup")
    private @Nullable Output<VirtualMachineStartupArgs> startup;

    /**
     * @return Defines startup and shutdown behavior of the VM.
     * 
     */
    public Optional<Output<VirtualMachineStartupArgs>> startup() {
        return Optional.ofNullable(this.startup);
    }

    /**
     * Whether to stop rather than shutdown on VM destroy (defaults to `false`)
     * 
     */
    @Import(name="stopOnDestroy")
    private @Nullable Output<Boolean> stopOnDestroy;

    /**
     * @return Whether to stop rather than shutdown on VM destroy (defaults to `false`)
     * 
     */
    public Optional<Output<Boolean>> stopOnDestroy() {
        return Optional.ofNullable(this.stopOnDestroy);
    }

    /**
     * Whether to enable the USB tablet device (defaults
     * to `true`).
     * 
     */
    @Import(name="tabletDevice")
    private @Nullable Output<Boolean> tabletDevice;

    /**
     * @return Whether to enable the USB tablet device (defaults
     * to `true`).
     * 
     */
    public Optional<Output<Boolean>> tabletDevice() {
        return Optional.ofNullable(this.tabletDevice);
    }

    /**
     * A list of tags of the VM. This is only meta information (
     * defaults to `[]`). Note: Proxmox always sorts the VM tags. If the list in
     * template is not sorted, then Proxmox will always report a difference on the
     * resource. You may use the `ignore_changes` lifecycle meta-argument to ignore
     * changes to this attribute.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return A list of tags of the VM. This is only meta information (
     * defaults to `[]`). Note: Proxmox always sorts the VM tags. If the list in
     * template is not sorted, then Proxmox will always report a difference on the
     * resource. You may use the `ignore_changes` lifecycle meta-argument to ignore
     * changes to this attribute.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Whether to create a template (defaults to `false`).
     * 
     */
    @Import(name="template")
    private @Nullable Output<Boolean> template;

    /**
     * @return Whether to create a template (defaults to `false`).
     * 
     */
    public Optional<Output<Boolean>> template() {
        return Optional.ofNullable(this.template);
    }

    /**
     * Timeout for cloning a VM in seconds (defaults to
     * 1800).
     * 
     */
    @Import(name="timeoutClone")
    private @Nullable Output<Integer> timeoutClone;

    /**
     * @return Timeout for cloning a VM in seconds (defaults to
     * 1800).
     * 
     */
    public Optional<Output<Integer>> timeoutClone() {
        return Optional.ofNullable(this.timeoutClone);
    }

    /**
     * Timeout for creating a VM in seconds (defaults to
     * 1800).
     * 
     */
    @Import(name="timeoutCreate")
    private @Nullable Output<Integer> timeoutCreate;

    /**
     * @return Timeout for creating a VM in seconds (defaults to
     * 1800).
     * 
     */
    public Optional<Output<Integer>> timeoutCreate() {
        return Optional.ofNullable(this.timeoutCreate);
    }

    /**
     * Timeout for migrating the VM (defaults to
     * 1800).
     * 
     */
    @Import(name="timeoutMigrate")
    private @Nullable Output<Integer> timeoutMigrate;

    /**
     * @return Timeout for migrating the VM (defaults to
     * 1800).
     * 
     */
    public Optional<Output<Integer>> timeoutMigrate() {
        return Optional.ofNullable(this.timeoutMigrate);
    }

    /**
     * Timeout for moving the disk of a VM in
     * seconds (defaults to 1800).
     * 
     */
    @Import(name="timeoutMoveDisk")
    private @Nullable Output<Integer> timeoutMoveDisk;

    /**
     * @return Timeout for moving the disk of a VM in
     * seconds (defaults to 1800).
     * 
     */
    public Optional<Output<Integer>> timeoutMoveDisk() {
        return Optional.ofNullable(this.timeoutMoveDisk);
    }

    /**
     * Timeout for rebooting a VM in seconds (defaults
     * to 1800).
     * 
     */
    @Import(name="timeoutReboot")
    private @Nullable Output<Integer> timeoutReboot;

    /**
     * @return Timeout for rebooting a VM in seconds (defaults
     * to 1800).
     * 
     */
    public Optional<Output<Integer>> timeoutReboot() {
        return Optional.ofNullable(this.timeoutReboot);
    }

    /**
     * Timeout for shutting down a VM in seconds (
     * defaults to 1800).
     * 
     */
    @Import(name="timeoutShutdownVm")
    private @Nullable Output<Integer> timeoutShutdownVm;

    /**
     * @return Timeout for shutting down a VM in seconds (
     * defaults to 1800).
     * 
     */
    public Optional<Output<Integer>> timeoutShutdownVm() {
        return Optional.ofNullable(this.timeoutShutdownVm);
    }

    /**
     * Timeout for starting a VM in seconds (defaults
     * to 1800).
     * 
     */
    @Import(name="timeoutStartVm")
    private @Nullable Output<Integer> timeoutStartVm;

    /**
     * @return Timeout for starting a VM in seconds (defaults
     * to 1800).
     * 
     */
    public Optional<Output<Integer>> timeoutStartVm() {
        return Optional.ofNullable(this.timeoutStartVm);
    }

    /**
     * Timeout for stopping a VM in seconds (defaults
     * to 300).
     * 
     */
    @Import(name="timeoutStopVm")
    private @Nullable Output<Integer> timeoutStopVm;

    /**
     * @return Timeout for stopping a VM in seconds (defaults
     * to 300).
     * 
     */
    public Optional<Output<Integer>> timeoutStopVm() {
        return Optional.ofNullable(this.timeoutStopVm);
    }

    /**
     * The TPM state device.
     * 
     */
    @Import(name="tpmState")
    private @Nullable Output<VirtualMachineTpmStateArgs> tpmState;

    /**
     * @return The TPM state device.
     * 
     */
    public Optional<Output<VirtualMachineTpmStateArgs>> tpmState() {
        return Optional.ofNullable(this.tpmState);
    }

    /**
     * A host USB device mapping (multiple blocks supported).
     * 
     */
    @Import(name="usbs")
    private @Nullable Output<List<VirtualMachineUsbArgs>> usbs;

    /**
     * @return A host USB device mapping (multiple blocks supported).
     * 
     */
    public Optional<Output<List<VirtualMachineUsbArgs>>> usbs() {
        return Optional.ofNullable(this.usbs);
    }

    /**
     * The VGA configuration.
     * 
     */
    @Import(name="vga")
    private @Nullable Output<VirtualMachineVgaArgs> vga;

    /**
     * @return The VGA configuration.
     * 
     */
    public Optional<Output<VirtualMachineVgaArgs>> vga() {
        return Optional.ofNullable(this.vga);
    }

    /**
     * The VM identifier.
     * 
     */
    @Import(name="vmId")
    private @Nullable Output<Integer> vmId;

    /**
     * @return The VM identifier.
     * 
     */
    public Optional<Output<Integer>> vmId() {
        return Optional.ofNullable(this.vmId);
    }

    private VirtualMachineArgs() {}

    private VirtualMachineArgs(VirtualMachineArgs $) {
        this.acpi = $.acpi;
        this.agent = $.agent;
        this.audioDevice = $.audioDevice;
        this.bios = $.bios;
        this.bootOrders = $.bootOrders;
        this.cdrom = $.cdrom;
        this.clone = $.clone;
        this.cpu = $.cpu;
        this.description = $.description;
        this.disks = $.disks;
        this.efiDisk = $.efiDisk;
        this.hookScriptFileId = $.hookScriptFileId;
        this.hostpcis = $.hostpcis;
        this.initialization = $.initialization;
        this.keyboardLayout = $.keyboardLayout;
        this.kvmArguments = $.kvmArguments;
        this.machine = $.machine;
        this.memory = $.memory;
        this.migrate = $.migrate;
        this.name = $.name;
        this.networkDevices = $.networkDevices;
        this.nodeName = $.nodeName;
        this.onBoot = $.onBoot;
        this.operatingSystem = $.operatingSystem;
        this.poolId = $.poolId;
        this.reboot = $.reboot;
        this.scsiHardware = $.scsiHardware;
        this.serialDevices = $.serialDevices;
        this.smbios = $.smbios;
        this.started = $.started;
        this.startup = $.startup;
        this.stopOnDestroy = $.stopOnDestroy;
        this.tabletDevice = $.tabletDevice;
        this.tags = $.tags;
        this.template = $.template;
        this.timeoutClone = $.timeoutClone;
        this.timeoutCreate = $.timeoutCreate;
        this.timeoutMigrate = $.timeoutMigrate;
        this.timeoutMoveDisk = $.timeoutMoveDisk;
        this.timeoutReboot = $.timeoutReboot;
        this.timeoutShutdownVm = $.timeoutShutdownVm;
        this.timeoutStartVm = $.timeoutStartVm;
        this.timeoutStopVm = $.timeoutStopVm;
        this.tpmState = $.tpmState;
        this.usbs = $.usbs;
        this.vga = $.vga;
        this.vmId = $.vmId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualMachineArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualMachineArgs $;

        public Builder() {
            $ = new VirtualMachineArgs();
        }

        public Builder(VirtualMachineArgs defaults) {
            $ = new VirtualMachineArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param acpi Whether to enable ACPI (defaults to `true`).
         * 
         * @return builder
         * 
         */
        public Builder acpi(@Nullable Output<Boolean> acpi) {
            $.acpi = acpi;
            return this;
        }

        /**
         * @param acpi Whether to enable ACPI (defaults to `true`).
         * 
         * @return builder
         * 
         */
        public Builder acpi(Boolean acpi) {
            return acpi(Output.of(acpi));
        }

        /**
         * @param agent The QEMU agent configuration.
         * 
         * @return builder
         * 
         */
        public Builder agent(@Nullable Output<VirtualMachineAgentArgs> agent) {
            $.agent = agent;
            return this;
        }

        /**
         * @param agent The QEMU agent configuration.
         * 
         * @return builder
         * 
         */
        public Builder agent(VirtualMachineAgentArgs agent) {
            return agent(Output.of(agent));
        }

        /**
         * @param audioDevice An audio device.
         * 
         * @return builder
         * 
         */
        public Builder audioDevice(@Nullable Output<VirtualMachineAudioDeviceArgs> audioDevice) {
            $.audioDevice = audioDevice;
            return this;
        }

        /**
         * @param audioDevice An audio device.
         * 
         * @return builder
         * 
         */
        public Builder audioDevice(VirtualMachineAudioDeviceArgs audioDevice) {
            return audioDevice(Output.of(audioDevice));
        }

        /**
         * @param bios The BIOS implementation (defaults to `seabios`).
         * 
         * @return builder
         * 
         */
        public Builder bios(@Nullable Output<String> bios) {
            $.bios = bios;
            return this;
        }

        /**
         * @param bios The BIOS implementation (defaults to `seabios`).
         * 
         * @return builder
         * 
         */
        public Builder bios(String bios) {
            return bios(Output.of(bios));
        }

        /**
         * @param bootOrders Specify a list of devices to boot from in the order
         * they appear in the list (defaults to `[]`).
         * 
         * @return builder
         * 
         */
        public Builder bootOrders(@Nullable Output<List<String>> bootOrders) {
            $.bootOrders = bootOrders;
            return this;
        }

        /**
         * @param bootOrders Specify a list of devices to boot from in the order
         * they appear in the list (defaults to `[]`).
         * 
         * @return builder
         * 
         */
        public Builder bootOrders(List<String> bootOrders) {
            return bootOrders(Output.of(bootOrders));
        }

        /**
         * @param bootOrders Specify a list of devices to boot from in the order
         * they appear in the list (defaults to `[]`).
         * 
         * @return builder
         * 
         */
        public Builder bootOrders(String... bootOrders) {
            return bootOrders(List.of(bootOrders));
        }

        /**
         * @param cdrom The CDROM configuration.
         * 
         * @return builder
         * 
         */
        public Builder cdrom(@Nullable Output<VirtualMachineCdromArgs> cdrom) {
            $.cdrom = cdrom;
            return this;
        }

        /**
         * @param cdrom The CDROM configuration.
         * 
         * @return builder
         * 
         */
        public Builder cdrom(VirtualMachineCdromArgs cdrom) {
            return cdrom(Output.of(cdrom));
        }

        /**
         * @param clone The cloning configuration.
         * 
         * @return builder
         * 
         */
        public Builder clone_(@Nullable Output<VirtualMachineCloneArgs> clone) {
            $.clone = clone;
            return this;
        }

        /**
         * @param clone The cloning configuration.
         * 
         * @return builder
         * 
         */
        public Builder clone_(VirtualMachineCloneArgs clone) {
            return clone_(Output.of(clone));
        }

        /**
         * @param cpu The CPU configuration.
         * 
         * @return builder
         * 
         */
        public Builder cpu(@Nullable Output<VirtualMachineCpuArgs> cpu) {
            $.cpu = cpu;
            return this;
        }

        /**
         * @param cpu The CPU configuration.
         * 
         * @return builder
         * 
         */
        public Builder cpu(VirtualMachineCpuArgs cpu) {
            return cpu(Output.of(cpu));
        }

        /**
         * @param description The description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param disks A disk (multiple blocks supported).
         * 
         * @return builder
         * 
         */
        public Builder disks(@Nullable Output<List<VirtualMachineDiskArgs>> disks) {
            $.disks = disks;
            return this;
        }

        /**
         * @param disks A disk (multiple blocks supported).
         * 
         * @return builder
         * 
         */
        public Builder disks(List<VirtualMachineDiskArgs> disks) {
            return disks(Output.of(disks));
        }

        /**
         * @param disks A disk (multiple blocks supported).
         * 
         * @return builder
         * 
         */
        public Builder disks(VirtualMachineDiskArgs... disks) {
            return disks(List.of(disks));
        }

        /**
         * @param efiDisk The efi disk device (required if `bios` is set
         * to `ovmf`)
         * 
         * @return builder
         * 
         */
        public Builder efiDisk(@Nullable Output<VirtualMachineEfiDiskArgs> efiDisk) {
            $.efiDisk = efiDisk;
            return this;
        }

        /**
         * @param efiDisk The efi disk device (required if `bios` is set
         * to `ovmf`)
         * 
         * @return builder
         * 
         */
        public Builder efiDisk(VirtualMachineEfiDiskArgs efiDisk) {
            return efiDisk(Output.of(efiDisk));
        }

        /**
         * @param hookScriptFileId The identifier for a file containing a hook script (needs to be executable).
         * 
         * @return builder
         * 
         */
        public Builder hookScriptFileId(@Nullable Output<String> hookScriptFileId) {
            $.hookScriptFileId = hookScriptFileId;
            return this;
        }

        /**
         * @param hookScriptFileId The identifier for a file containing a hook script (needs to be executable).
         * 
         * @return builder
         * 
         */
        public Builder hookScriptFileId(String hookScriptFileId) {
            return hookScriptFileId(Output.of(hookScriptFileId));
        }

        /**
         * @param hostpcis A host PCI device mapping (multiple blocks supported).
         * 
         * @return builder
         * 
         */
        public Builder hostpcis(@Nullable Output<List<VirtualMachineHostpciArgs>> hostpcis) {
            $.hostpcis = hostpcis;
            return this;
        }

        /**
         * @param hostpcis A host PCI device mapping (multiple blocks supported).
         * 
         * @return builder
         * 
         */
        public Builder hostpcis(List<VirtualMachineHostpciArgs> hostpcis) {
            return hostpcis(Output.of(hostpcis));
        }

        /**
         * @param hostpcis A host PCI device mapping (multiple blocks supported).
         * 
         * @return builder
         * 
         */
        public Builder hostpcis(VirtualMachineHostpciArgs... hostpcis) {
            return hostpcis(List.of(hostpcis));
        }

        /**
         * @param initialization The cloud-init configuration.
         * 
         * @return builder
         * 
         */
        public Builder initialization(@Nullable Output<VirtualMachineInitializationArgs> initialization) {
            $.initialization = initialization;
            return this;
        }

        /**
         * @param initialization The cloud-init configuration.
         * 
         * @return builder
         * 
         */
        public Builder initialization(VirtualMachineInitializationArgs initialization) {
            return initialization(Output.of(initialization));
        }

        /**
         * @param keyboardLayout The keyboard layout (defaults to `en-us`).
         * 
         * @return builder
         * 
         */
        public Builder keyboardLayout(@Nullable Output<String> keyboardLayout) {
            $.keyboardLayout = keyboardLayout;
            return this;
        }

        /**
         * @param keyboardLayout The keyboard layout (defaults to `en-us`).
         * 
         * @return builder
         * 
         */
        public Builder keyboardLayout(String keyboardLayout) {
            return keyboardLayout(Output.of(keyboardLayout));
        }

        /**
         * @param kvmArguments Arbitrary arguments passed to kvm.
         * 
         * @return builder
         * 
         */
        public Builder kvmArguments(@Nullable Output<String> kvmArguments) {
            $.kvmArguments = kvmArguments;
            return this;
        }

        /**
         * @param kvmArguments Arbitrary arguments passed to kvm.
         * 
         * @return builder
         * 
         */
        public Builder kvmArguments(String kvmArguments) {
            return kvmArguments(Output.of(kvmArguments));
        }

        /**
         * @param machine The VM machine type (defaults to `pc`).
         * 
         * @return builder
         * 
         */
        public Builder machine(@Nullable Output<String> machine) {
            $.machine = machine;
            return this;
        }

        /**
         * @param machine The VM machine type (defaults to `pc`).
         * 
         * @return builder
         * 
         */
        public Builder machine(String machine) {
            return machine(Output.of(machine));
        }

        /**
         * @param memory The VGA memory in megabytes (defaults to `16`).
         * 
         * @return builder
         * 
         */
        public Builder memory(@Nullable Output<VirtualMachineMemoryArgs> memory) {
            $.memory = memory;
            return this;
        }

        /**
         * @param memory The VGA memory in megabytes (defaults to `16`).
         * 
         * @return builder
         * 
         */
        public Builder memory(VirtualMachineMemoryArgs memory) {
            return memory(Output.of(memory));
        }

        /**
         * @param migrate Migrate the VM on node change instead of re-creating
         * it (defaults to `false`).
         * 
         * @return builder
         * 
         */
        public Builder migrate(@Nullable Output<Boolean> migrate) {
            $.migrate = migrate;
            return this;
        }

        /**
         * @param migrate Migrate the VM on node change instead of re-creating
         * it (defaults to `false`).
         * 
         * @return builder
         * 
         */
        public Builder migrate(Boolean migrate) {
            return migrate(Output.of(migrate));
        }

        /**
         * @param name The virtual machine name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The virtual machine name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkDevices A network device (multiple blocks supported).
         * 
         * @return builder
         * 
         */
        public Builder networkDevices(@Nullable Output<List<VirtualMachineNetworkDeviceArgs>> networkDevices) {
            $.networkDevices = networkDevices;
            return this;
        }

        /**
         * @param networkDevices A network device (multiple blocks supported).
         * 
         * @return builder
         * 
         */
        public Builder networkDevices(List<VirtualMachineNetworkDeviceArgs> networkDevices) {
            return networkDevices(Output.of(networkDevices));
        }

        /**
         * @param networkDevices A network device (multiple blocks supported).
         * 
         * @return builder
         * 
         */
        public Builder networkDevices(VirtualMachineNetworkDeviceArgs... networkDevices) {
            return networkDevices(List.of(networkDevices));
        }

        /**
         * @param nodeName The name of the node to assign the virtual machine
         * to.
         * 
         * @return builder
         * 
         */
        public Builder nodeName(Output<String> nodeName) {
            $.nodeName = nodeName;
            return this;
        }

        /**
         * @param nodeName The name of the node to assign the virtual machine
         * to.
         * 
         * @return builder
         * 
         */
        public Builder nodeName(String nodeName) {
            return nodeName(Output.of(nodeName));
        }

        /**
         * @param onBoot Specifies whether a VM will be started during system
         * boot. (defaults to `true`)
         * 
         * @return builder
         * 
         */
        public Builder onBoot(@Nullable Output<Boolean> onBoot) {
            $.onBoot = onBoot;
            return this;
        }

        /**
         * @param onBoot Specifies whether a VM will be started during system
         * boot. (defaults to `true`)
         * 
         * @return builder
         * 
         */
        public Builder onBoot(Boolean onBoot) {
            return onBoot(Output.of(onBoot));
        }

        /**
         * @param operatingSystem The Operating System configuration.
         * 
         * @return builder
         * 
         */
        public Builder operatingSystem(@Nullable Output<VirtualMachineOperatingSystemArgs> operatingSystem) {
            $.operatingSystem = operatingSystem;
            return this;
        }

        /**
         * @param operatingSystem The Operating System configuration.
         * 
         * @return builder
         * 
         */
        public Builder operatingSystem(VirtualMachineOperatingSystemArgs operatingSystem) {
            return operatingSystem(Output.of(operatingSystem));
        }

        /**
         * @param poolId The identifier for a pool to assign the virtual machine
         * to.
         * 
         * @return builder
         * 
         */
        public Builder poolId(@Nullable Output<String> poolId) {
            $.poolId = poolId;
            return this;
        }

        /**
         * @param poolId The identifier for a pool to assign the virtual machine
         * to.
         * 
         * @return builder
         * 
         */
        public Builder poolId(String poolId) {
            return poolId(Output.of(poolId));
        }

        /**
         * @param reboot Reboot the VM after initial creation. (defaults
         * to `false`)
         * 
         * @return builder
         * 
         */
        public Builder reboot(@Nullable Output<Boolean> reboot) {
            $.reboot = reboot;
            return this;
        }

        /**
         * @param reboot Reboot the VM after initial creation. (defaults
         * to `false`)
         * 
         * @return builder
         * 
         */
        public Builder reboot(Boolean reboot) {
            return reboot(Output.of(reboot));
        }

        /**
         * @param scsiHardware The SCSI hardware type (defaults to
         * `virtio-scsi-pci`).
         * 
         * @return builder
         * 
         */
        public Builder scsiHardware(@Nullable Output<String> scsiHardware) {
            $.scsiHardware = scsiHardware;
            return this;
        }

        /**
         * @param scsiHardware The SCSI hardware type (defaults to
         * `virtio-scsi-pci`).
         * 
         * @return builder
         * 
         */
        public Builder scsiHardware(String scsiHardware) {
            return scsiHardware(Output.of(scsiHardware));
        }

        /**
         * @param serialDevices A serial device (multiple blocks supported).
         * 
         * @return builder
         * 
         */
        public Builder serialDevices(@Nullable Output<List<VirtualMachineSerialDeviceArgs>> serialDevices) {
            $.serialDevices = serialDevices;
            return this;
        }

        /**
         * @param serialDevices A serial device (multiple blocks supported).
         * 
         * @return builder
         * 
         */
        public Builder serialDevices(List<VirtualMachineSerialDeviceArgs> serialDevices) {
            return serialDevices(Output.of(serialDevices));
        }

        /**
         * @param serialDevices A serial device (multiple blocks supported).
         * 
         * @return builder
         * 
         */
        public Builder serialDevices(VirtualMachineSerialDeviceArgs... serialDevices) {
            return serialDevices(List.of(serialDevices));
        }

        /**
         * @param smbios The SMBIOS (type1) settings for the VM.
         * 
         * @return builder
         * 
         */
        public Builder smbios(@Nullable Output<VirtualMachineSmbiosArgs> smbios) {
            $.smbios = smbios;
            return this;
        }

        /**
         * @param smbios The SMBIOS (type1) settings for the VM.
         * 
         * @return builder
         * 
         */
        public Builder smbios(VirtualMachineSmbiosArgs smbios) {
            return smbios(Output.of(smbios));
        }

        /**
         * @param started Whether to start the virtual machine (defaults
         * to `true`).
         * 
         * @return builder
         * 
         */
        public Builder started(@Nullable Output<Boolean> started) {
            $.started = started;
            return this;
        }

        /**
         * @param started Whether to start the virtual machine (defaults
         * to `true`).
         * 
         * @return builder
         * 
         */
        public Builder started(Boolean started) {
            return started(Output.of(started));
        }

        /**
         * @param startup Defines startup and shutdown behavior of the VM.
         * 
         * @return builder
         * 
         */
        public Builder startup(@Nullable Output<VirtualMachineStartupArgs> startup) {
            $.startup = startup;
            return this;
        }

        /**
         * @param startup Defines startup and shutdown behavior of the VM.
         * 
         * @return builder
         * 
         */
        public Builder startup(VirtualMachineStartupArgs startup) {
            return startup(Output.of(startup));
        }

        /**
         * @param stopOnDestroy Whether to stop rather than shutdown on VM destroy (defaults to `false`)
         * 
         * @return builder
         * 
         */
        public Builder stopOnDestroy(@Nullable Output<Boolean> stopOnDestroy) {
            $.stopOnDestroy = stopOnDestroy;
            return this;
        }

        /**
         * @param stopOnDestroy Whether to stop rather than shutdown on VM destroy (defaults to `false`)
         * 
         * @return builder
         * 
         */
        public Builder stopOnDestroy(Boolean stopOnDestroy) {
            return stopOnDestroy(Output.of(stopOnDestroy));
        }

        /**
         * @param tabletDevice Whether to enable the USB tablet device (defaults
         * to `true`).
         * 
         * @return builder
         * 
         */
        public Builder tabletDevice(@Nullable Output<Boolean> tabletDevice) {
            $.tabletDevice = tabletDevice;
            return this;
        }

        /**
         * @param tabletDevice Whether to enable the USB tablet device (defaults
         * to `true`).
         * 
         * @return builder
         * 
         */
        public Builder tabletDevice(Boolean tabletDevice) {
            return tabletDevice(Output.of(tabletDevice));
        }

        /**
         * @param tags A list of tags of the VM. This is only meta information (
         * defaults to `[]`). Note: Proxmox always sorts the VM tags. If the list in
         * template is not sorted, then Proxmox will always report a difference on the
         * resource. You may use the `ignore_changes` lifecycle meta-argument to ignore
         * changes to this attribute.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A list of tags of the VM. This is only meta information (
         * defaults to `[]`). Note: Proxmox always sorts the VM tags. If the list in
         * template is not sorted, then Proxmox will always report a difference on the
         * resource. You may use the `ignore_changes` lifecycle meta-argument to ignore
         * changes to this attribute.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A list of tags of the VM. This is only meta information (
         * defaults to `[]`). Note: Proxmox always sorts the VM tags. If the list in
         * template is not sorted, then Proxmox will always report a difference on the
         * resource. You may use the `ignore_changes` lifecycle meta-argument to ignore
         * changes to this attribute.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param template Whether to create a template (defaults to `false`).
         * 
         * @return builder
         * 
         */
        public Builder template(@Nullable Output<Boolean> template) {
            $.template = template;
            return this;
        }

        /**
         * @param template Whether to create a template (defaults to `false`).
         * 
         * @return builder
         * 
         */
        public Builder template(Boolean template) {
            return template(Output.of(template));
        }

        /**
         * @param timeoutClone Timeout for cloning a VM in seconds (defaults to
         * 1800).
         * 
         * @return builder
         * 
         */
        public Builder timeoutClone(@Nullable Output<Integer> timeoutClone) {
            $.timeoutClone = timeoutClone;
            return this;
        }

        /**
         * @param timeoutClone Timeout for cloning a VM in seconds (defaults to
         * 1800).
         * 
         * @return builder
         * 
         */
        public Builder timeoutClone(Integer timeoutClone) {
            return timeoutClone(Output.of(timeoutClone));
        }

        /**
         * @param timeoutCreate Timeout for creating a VM in seconds (defaults to
         * 1800).
         * 
         * @return builder
         * 
         */
        public Builder timeoutCreate(@Nullable Output<Integer> timeoutCreate) {
            $.timeoutCreate = timeoutCreate;
            return this;
        }

        /**
         * @param timeoutCreate Timeout for creating a VM in seconds (defaults to
         * 1800).
         * 
         * @return builder
         * 
         */
        public Builder timeoutCreate(Integer timeoutCreate) {
            return timeoutCreate(Output.of(timeoutCreate));
        }

        /**
         * @param timeoutMigrate Timeout for migrating the VM (defaults to
         * 1800).
         * 
         * @return builder
         * 
         */
        public Builder timeoutMigrate(@Nullable Output<Integer> timeoutMigrate) {
            $.timeoutMigrate = timeoutMigrate;
            return this;
        }

        /**
         * @param timeoutMigrate Timeout for migrating the VM (defaults to
         * 1800).
         * 
         * @return builder
         * 
         */
        public Builder timeoutMigrate(Integer timeoutMigrate) {
            return timeoutMigrate(Output.of(timeoutMigrate));
        }

        /**
         * @param timeoutMoveDisk Timeout for moving the disk of a VM in
         * seconds (defaults to 1800).
         * 
         * @return builder
         * 
         */
        public Builder timeoutMoveDisk(@Nullable Output<Integer> timeoutMoveDisk) {
            $.timeoutMoveDisk = timeoutMoveDisk;
            return this;
        }

        /**
         * @param timeoutMoveDisk Timeout for moving the disk of a VM in
         * seconds (defaults to 1800).
         * 
         * @return builder
         * 
         */
        public Builder timeoutMoveDisk(Integer timeoutMoveDisk) {
            return timeoutMoveDisk(Output.of(timeoutMoveDisk));
        }

        /**
         * @param timeoutReboot Timeout for rebooting a VM in seconds (defaults
         * to 1800).
         * 
         * @return builder
         * 
         */
        public Builder timeoutReboot(@Nullable Output<Integer> timeoutReboot) {
            $.timeoutReboot = timeoutReboot;
            return this;
        }

        /**
         * @param timeoutReboot Timeout for rebooting a VM in seconds (defaults
         * to 1800).
         * 
         * @return builder
         * 
         */
        public Builder timeoutReboot(Integer timeoutReboot) {
            return timeoutReboot(Output.of(timeoutReboot));
        }

        /**
         * @param timeoutShutdownVm Timeout for shutting down a VM in seconds (
         * defaults to 1800).
         * 
         * @return builder
         * 
         */
        public Builder timeoutShutdownVm(@Nullable Output<Integer> timeoutShutdownVm) {
            $.timeoutShutdownVm = timeoutShutdownVm;
            return this;
        }

        /**
         * @param timeoutShutdownVm Timeout for shutting down a VM in seconds (
         * defaults to 1800).
         * 
         * @return builder
         * 
         */
        public Builder timeoutShutdownVm(Integer timeoutShutdownVm) {
            return timeoutShutdownVm(Output.of(timeoutShutdownVm));
        }

        /**
         * @param timeoutStartVm Timeout for starting a VM in seconds (defaults
         * to 1800).
         * 
         * @return builder
         * 
         */
        public Builder timeoutStartVm(@Nullable Output<Integer> timeoutStartVm) {
            $.timeoutStartVm = timeoutStartVm;
            return this;
        }

        /**
         * @param timeoutStartVm Timeout for starting a VM in seconds (defaults
         * to 1800).
         * 
         * @return builder
         * 
         */
        public Builder timeoutStartVm(Integer timeoutStartVm) {
            return timeoutStartVm(Output.of(timeoutStartVm));
        }

        /**
         * @param timeoutStopVm Timeout for stopping a VM in seconds (defaults
         * to 300).
         * 
         * @return builder
         * 
         */
        public Builder timeoutStopVm(@Nullable Output<Integer> timeoutStopVm) {
            $.timeoutStopVm = timeoutStopVm;
            return this;
        }

        /**
         * @param timeoutStopVm Timeout for stopping a VM in seconds (defaults
         * to 300).
         * 
         * @return builder
         * 
         */
        public Builder timeoutStopVm(Integer timeoutStopVm) {
            return timeoutStopVm(Output.of(timeoutStopVm));
        }

        /**
         * @param tpmState The TPM state device.
         * 
         * @return builder
         * 
         */
        public Builder tpmState(@Nullable Output<VirtualMachineTpmStateArgs> tpmState) {
            $.tpmState = tpmState;
            return this;
        }

        /**
         * @param tpmState The TPM state device.
         * 
         * @return builder
         * 
         */
        public Builder tpmState(VirtualMachineTpmStateArgs tpmState) {
            return tpmState(Output.of(tpmState));
        }

        /**
         * @param usbs A host USB device mapping (multiple blocks supported).
         * 
         * @return builder
         * 
         */
        public Builder usbs(@Nullable Output<List<VirtualMachineUsbArgs>> usbs) {
            $.usbs = usbs;
            return this;
        }

        /**
         * @param usbs A host USB device mapping (multiple blocks supported).
         * 
         * @return builder
         * 
         */
        public Builder usbs(List<VirtualMachineUsbArgs> usbs) {
            return usbs(Output.of(usbs));
        }

        /**
         * @param usbs A host USB device mapping (multiple blocks supported).
         * 
         * @return builder
         * 
         */
        public Builder usbs(VirtualMachineUsbArgs... usbs) {
            return usbs(List.of(usbs));
        }

        /**
         * @param vga The VGA configuration.
         * 
         * @return builder
         * 
         */
        public Builder vga(@Nullable Output<VirtualMachineVgaArgs> vga) {
            $.vga = vga;
            return this;
        }

        /**
         * @param vga The VGA configuration.
         * 
         * @return builder
         * 
         */
        public Builder vga(VirtualMachineVgaArgs vga) {
            return vga(Output.of(vga));
        }

        /**
         * @param vmId The VM identifier.
         * 
         * @return builder
         * 
         */
        public Builder vmId(@Nullable Output<Integer> vmId) {
            $.vmId = vmId;
            return this;
        }

        /**
         * @param vmId The VM identifier.
         * 
         * @return builder
         * 
         */
        public Builder vmId(Integer vmId) {
            return vmId(Output.of(vmId));
        }

        public VirtualMachineArgs build() {
            if ($.nodeName == null) {
                throw new MissingRequiredPropertyException("VirtualMachineArgs", "nodeName");
            }
            return $;
        }
    }

}

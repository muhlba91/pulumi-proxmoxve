// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.SDNZone.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetVxlanResult {
    /**
     * @return DNS API server address.
     * 
     */
    private String dns;
    /**
     * @return DNS domain name. Used to register hostnames, such as `&lt;hostname&gt;.&lt;domain&gt;`. The DNS zone must already exist on the DNS server.
     * 
     */
    private String dnsZone;
    /**
     * @return The unique identifier of the SDN zone.
     * 
     */
    private String id;
    /**
     * @return IP Address Management system.
     * 
     */
    private String ipam;
    /**
     * @return MTU value for the zone.
     * 
     */
    private Integer mtu;
    /**
     * @return The Proxmox nodes which the zone and associated VNets are deployed on
     * 
     */
    private List<String> nodes;
    /**
     * @return A list of IP addresses of each node in the VXLAN zone. This can be external nodes reachable at this IP address. All nodes in the cluster need to be mentioned here
     * 
     */
    private List<String> peers;
    /**
     * @return Indicates if the zone has pending configuration changes that need to be applied.
     * 
     */
    private Boolean pending;
    /**
     * @return Reverse DNS API server address.
     * 
     */
    private String reverseDns;
    /**
     * @return Indicates the current state of the zone.
     * 
     */
    private String state;

    private GetVxlanResult() {}
    /**
     * @return DNS API server address.
     * 
     */
    public String dns() {
        return this.dns;
    }
    /**
     * @return DNS domain name. Used to register hostnames, such as `&lt;hostname&gt;.&lt;domain&gt;`. The DNS zone must already exist on the DNS server.
     * 
     */
    public String dnsZone() {
        return this.dnsZone;
    }
    /**
     * @return The unique identifier of the SDN zone.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return IP Address Management system.
     * 
     */
    public String ipam() {
        return this.ipam;
    }
    /**
     * @return MTU value for the zone.
     * 
     */
    public Integer mtu() {
        return this.mtu;
    }
    /**
     * @return The Proxmox nodes which the zone and associated VNets are deployed on
     * 
     */
    public List<String> nodes() {
        return this.nodes;
    }
    /**
     * @return A list of IP addresses of each node in the VXLAN zone. This can be external nodes reachable at this IP address. All nodes in the cluster need to be mentioned here
     * 
     */
    public List<String> peers() {
        return this.peers;
    }
    /**
     * @return Indicates if the zone has pending configuration changes that need to be applied.
     * 
     */
    public Boolean pending() {
        return this.pending;
    }
    /**
     * @return Reverse DNS API server address.
     * 
     */
    public String reverseDns() {
        return this.reverseDns;
    }
    /**
     * @return Indicates the current state of the zone.
     * 
     */
    public String state() {
        return this.state;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVxlanResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String dns;
        private String dnsZone;
        private String id;
        private String ipam;
        private Integer mtu;
        private List<String> nodes;
        private List<String> peers;
        private Boolean pending;
        private String reverseDns;
        private String state;
        public Builder() {}
        public Builder(GetVxlanResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dns = defaults.dns;
    	      this.dnsZone = defaults.dnsZone;
    	      this.id = defaults.id;
    	      this.ipam = defaults.ipam;
    	      this.mtu = defaults.mtu;
    	      this.nodes = defaults.nodes;
    	      this.peers = defaults.peers;
    	      this.pending = defaults.pending;
    	      this.reverseDns = defaults.reverseDns;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder dns(String dns) {
            if (dns == null) {
              throw new MissingRequiredPropertyException("GetVxlanResult", "dns");
            }
            this.dns = dns;
            return this;
        }
        @CustomType.Setter
        public Builder dnsZone(String dnsZone) {
            if (dnsZone == null) {
              throw new MissingRequiredPropertyException("GetVxlanResult", "dnsZone");
            }
            this.dnsZone = dnsZone;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetVxlanResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipam(String ipam) {
            if (ipam == null) {
              throw new MissingRequiredPropertyException("GetVxlanResult", "ipam");
            }
            this.ipam = ipam;
            return this;
        }
        @CustomType.Setter
        public Builder mtu(Integer mtu) {
            if (mtu == null) {
              throw new MissingRequiredPropertyException("GetVxlanResult", "mtu");
            }
            this.mtu = mtu;
            return this;
        }
        @CustomType.Setter
        public Builder nodes(List<String> nodes) {
            if (nodes == null) {
              throw new MissingRequiredPropertyException("GetVxlanResult", "nodes");
            }
            this.nodes = nodes;
            return this;
        }
        public Builder nodes(String... nodes) {
            return nodes(List.of(nodes));
        }
        @CustomType.Setter
        public Builder peers(List<String> peers) {
            if (peers == null) {
              throw new MissingRequiredPropertyException("GetVxlanResult", "peers");
            }
            this.peers = peers;
            return this;
        }
        public Builder peers(String... peers) {
            return peers(List.of(peers));
        }
        @CustomType.Setter
        public Builder pending(Boolean pending) {
            if (pending == null) {
              throw new MissingRequiredPropertyException("GetVxlanResult", "pending");
            }
            this.pending = pending;
            return this;
        }
        @CustomType.Setter
        public Builder reverseDns(String reverseDns) {
            if (reverseDns == null) {
              throw new MissingRequiredPropertyException("GetVxlanResult", "reverseDns");
            }
            this.reverseDns = reverseDns;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetVxlanResult", "state");
            }
            this.state = state;
            return this;
        }
        public GetVxlanResult build() {
            final var _resultValue = new GetVxlanResult();
            _resultValue.dns = dns;
            _resultValue.dnsZone = dnsZone;
            _resultValue.id = id;
            _resultValue.ipam = ipam;
            _resultValue.mtu = mtu;
            _resultValue.nodes = nodes;
            _resultValue.peers = peers;
            _resultValue.pending = pending;
            _resultValue.reverseDns = reverseDns;
            _resultValue.state = state;
            return _resultValue;
        }
    }
}

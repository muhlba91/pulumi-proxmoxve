// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.VM.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualMachineUsbArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualMachineUsbArgs Empty = new VirtualMachineUsbArgs();

    /**
     * The USB device ID. Use either this or `mapping`.
     * 
     */
    @Import(name="host", required=true)
    private Output<String> host;

    /**
     * @return The USB device ID. Use either this or `mapping`.
     * 
     */
    public Output<String> host() {
        return this.host;
    }

    /**
     * The resource mapping name of the device, for
     * example usbdevice. Use either this or `id`.
     * 
     */
    @Import(name="mapping")
    private @Nullable Output<String> mapping;

    /**
     * @return The resource mapping name of the device, for
     * example usbdevice. Use either this or `id`.
     * 
     */
    public Optional<Output<String>> mapping() {
        return Optional.ofNullable(this.mapping);
    }

    /**
     * Makes the USB device a USB3 device for the VM
     * (defaults to `false`).
     * 
     */
    @Import(name="usb3")
    private @Nullable Output<Boolean> usb3;

    /**
     * @return Makes the USB device a USB3 device for the VM
     * (defaults to `false`).
     * 
     */
    public Optional<Output<Boolean>> usb3() {
        return Optional.ofNullable(this.usb3);
    }

    private VirtualMachineUsbArgs() {}

    private VirtualMachineUsbArgs(VirtualMachineUsbArgs $) {
        this.host = $.host;
        this.mapping = $.mapping;
        this.usb3 = $.usb3;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualMachineUsbArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualMachineUsbArgs $;

        public Builder() {
            $ = new VirtualMachineUsbArgs();
        }

        public Builder(VirtualMachineUsbArgs defaults) {
            $ = new VirtualMachineUsbArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param host The USB device ID. Use either this or `mapping`.
         * 
         * @return builder
         * 
         */
        public Builder host(Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host The USB device ID. Use either this or `mapping`.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param mapping The resource mapping name of the device, for
         * example usbdevice. Use either this or `id`.
         * 
         * @return builder
         * 
         */
        public Builder mapping(@Nullable Output<String> mapping) {
            $.mapping = mapping;
            return this;
        }

        /**
         * @param mapping The resource mapping name of the device, for
         * example usbdevice. Use either this or `id`.
         * 
         * @return builder
         * 
         */
        public Builder mapping(String mapping) {
            return mapping(Output.of(mapping));
        }

        /**
         * @param usb3 Makes the USB device a USB3 device for the VM
         * (defaults to `false`).
         * 
         * @return builder
         * 
         */
        public Builder usb3(@Nullable Output<Boolean> usb3) {
            $.usb3 = usb3;
            return this;
        }

        /**
         * @param usb3 Makes the USB device a USB3 device for the VM
         * (defaults to `false`).
         * 
         * @return builder
         * 
         */
        public Builder usb3(Boolean usb3) {
            return usb3(Output.of(usb3));
        }

        public VirtualMachineUsbArgs build() {
            if ($.host == null) {
                throw new MissingRequiredPropertyException("VirtualMachineUsbArgs", "host");
            }
            return $;
        }
    }

}

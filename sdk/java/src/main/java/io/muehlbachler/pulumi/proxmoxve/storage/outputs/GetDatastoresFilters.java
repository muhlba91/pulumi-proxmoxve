// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.Storage.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDatastoresFilters {
    /**
     * @return Only list stores with the given content types.
     * 
     */
    private @Nullable List<String> contentTypes;
    /**
     * @return Only list stores with the given ID.
     * 
     */
    private @Nullable String id;
    /**
     * @return If `target` is different to `node_name`, then only lists shared stores which content is accessible on this node and the specified `target` node.
     * 
     */
    private @Nullable String target;

    private GetDatastoresFilters() {}
    /**
     * @return Only list stores with the given content types.
     * 
     */
    public List<String> contentTypes() {
        return this.contentTypes == null ? List.of() : this.contentTypes;
    }
    /**
     * @return Only list stores with the given ID.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return If `target` is different to `node_name`, then only lists shared stores which content is accessible on this node and the specified `target` node.
     * 
     */
    public Optional<String> target() {
        return Optional.ofNullable(this.target);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatastoresFilters defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> contentTypes;
        private @Nullable String id;
        private @Nullable String target;
        public Builder() {}
        public Builder(GetDatastoresFilters defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.contentTypes = defaults.contentTypes;
    	      this.id = defaults.id;
    	      this.target = defaults.target;
        }

        @CustomType.Setter
        public Builder contentTypes(@Nullable List<String> contentTypes) {

            this.contentTypes = contentTypes;
            return this;
        }
        public Builder contentTypes(String... contentTypes) {
            return contentTypes(List.of(contentTypes));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder target(@Nullable String target) {

            this.target = target;
            return this;
        }
        public GetDatastoresFilters build() {
            final var _resultValue = new GetDatastoresFilters();
            _resultValue.contentTypes = contentTypes;
            _resultValue.id = id;
            _resultValue.target = target;
            return _resultValue;
        }
    }
}

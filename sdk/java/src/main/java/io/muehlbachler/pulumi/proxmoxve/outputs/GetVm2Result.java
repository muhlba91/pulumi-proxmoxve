// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import io.muehlbachler.pulumi.proxmoxve.outputs.GetVm2Clone;
import io.muehlbachler.pulumi.proxmoxve.outputs.GetVm2Cpu;
import io.muehlbachler.pulumi.proxmoxve.outputs.GetVm2Rng;
import io.muehlbachler.pulumi.proxmoxve.outputs.GetVm2Timeouts;
import io.muehlbachler.pulumi.proxmoxve.outputs.GetVm2Vga;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetVm2Result {
    /**
     * @return The cloning configuration.
     * 
     */
    private @Nullable GetVm2Clone clone;
    /**
     * @return The CPU configuration.
     * 
     */
    private GetVm2Cpu cpu;
    /**
     * @return The description of the VM.
     * 
     */
    private @Nullable String description;
    /**
     * @return The unique identifier of the VM in the Proxmox cluster.
     * 
     */
    private Integer id;
    /**
     * @return The name of the VM.
     * 
     */
    private @Nullable String name;
    /**
     * @return The name of the node where the VM is provisioned.
     * 
     */
    private String nodeName;
    /**
     * @return The RNG (Random Number Generator) configuration.
     * 
     */
    private GetVm2Rng rng;
    /**
     * @return The tags assigned to the VM.
     * 
     */
    private List<String> tags;
    /**
     * @return Whether the VM is a template.
     * 
     */
    private @Nullable Boolean template;
    private @Nullable GetVm2Timeouts timeouts;
    /**
     * @return The VGA configuration.
     * 
     */
    private GetVm2Vga vga;

    private GetVm2Result() {}
    /**
     * @return The cloning configuration.
     * 
     */
    public Optional<GetVm2Clone> clone_() {
        return Optional.ofNullable(this.clone);
    }
    /**
     * @return The CPU configuration.
     * 
     */
    public GetVm2Cpu cpu() {
        return this.cpu;
    }
    /**
     * @return The description of the VM.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The unique identifier of the VM in the Proxmox cluster.
     * 
     */
    public Integer id() {
        return this.id;
    }
    /**
     * @return The name of the VM.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The name of the node where the VM is provisioned.
     * 
     */
    public String nodeName() {
        return this.nodeName;
    }
    /**
     * @return The RNG (Random Number Generator) configuration.
     * 
     */
    public GetVm2Rng rng() {
        return this.rng;
    }
    /**
     * @return The tags assigned to the VM.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    /**
     * @return Whether the VM is a template.
     * 
     */
    public Optional<Boolean> template() {
        return Optional.ofNullable(this.template);
    }
    public Optional<GetVm2Timeouts> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }
    /**
     * @return The VGA configuration.
     * 
     */
    public GetVm2Vga vga() {
        return this.vga;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVm2Result defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable GetVm2Clone clone;
        private GetVm2Cpu cpu;
        private @Nullable String description;
        private Integer id;
        private @Nullable String name;
        private String nodeName;
        private GetVm2Rng rng;
        private List<String> tags;
        private @Nullable Boolean template;
        private @Nullable GetVm2Timeouts timeouts;
        private GetVm2Vga vga;
        public Builder() {}
        public Builder(GetVm2Result defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clone = defaults.clone;
    	      this.cpu = defaults.cpu;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.nodeName = defaults.nodeName;
    	      this.rng = defaults.rng;
    	      this.tags = defaults.tags;
    	      this.template = defaults.template;
    	      this.timeouts = defaults.timeouts;
    	      this.vga = defaults.vga;
        }

        @CustomType.Setter("clone")
        public Builder clone_(@Nullable GetVm2Clone clone) {

            this.clone = clone;
            return this;
        }
        @CustomType.Setter
        public Builder cpu(GetVm2Cpu cpu) {
            if (cpu == null) {
              throw new MissingRequiredPropertyException("GetVm2Result", "cpu");
            }
            this.cpu = cpu;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(Integer id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetVm2Result", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nodeName(String nodeName) {
            if (nodeName == null) {
              throw new MissingRequiredPropertyException("GetVm2Result", "nodeName");
            }
            this.nodeName = nodeName;
            return this;
        }
        @CustomType.Setter
        public Builder rng(GetVm2Rng rng) {
            if (rng == null) {
              throw new MissingRequiredPropertyException("GetVm2Result", "rng");
            }
            this.rng = rng;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetVm2Result", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder template(@Nullable Boolean template) {

            this.template = template;
            return this;
        }
        @CustomType.Setter
        public Builder timeouts(@Nullable GetVm2Timeouts timeouts) {

            this.timeouts = timeouts;
            return this;
        }
        @CustomType.Setter
        public Builder vga(GetVm2Vga vga) {
            if (vga == null) {
              throw new MissingRequiredPropertyException("GetVm2Result", "vga");
            }
            this.vga = vga;
            return this;
        }
        public GetVm2Result build() {
            final var _resultValue = new GetVm2Result();
            _resultValue.clone = clone;
            _resultValue.cpu = cpu;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.nodeName = nodeName;
            _resultValue.rng = rng;
            _resultValue.tags = tags;
            _resultValue.template = template;
            _resultValue.timeouts = timeouts;
            _resultValue.vga = vga;
            return _resultValue;
        }
    }
}

// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.Permission.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserAclArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserAclArgs Empty = new UserAclArgs();

    /**
     * The path.
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    /**
     * @return The path.
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    /**
     * Whether to propagate to child paths.
     * 
     */
    @Import(name="propagate")
    private @Nullable Output<Boolean> propagate;

    /**
     * @return Whether to propagate to child paths.
     * 
     */
    public Optional<Output<Boolean>> propagate() {
        return Optional.ofNullable(this.propagate);
    }

    /**
     * The role identifier.
     * 
     */
    @Import(name="roleId", required=true)
    private Output<String> roleId;

    /**
     * @return The role identifier.
     * 
     */
    public Output<String> roleId() {
        return this.roleId;
    }

    private UserAclArgs() {}

    private UserAclArgs(UserAclArgs $) {
        this.path = $.path;
        this.propagate = $.propagate;
        this.roleId = $.roleId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserAclArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserAclArgs $;

        public Builder() {
            $ = new UserAclArgs();
        }

        public Builder(UserAclArgs defaults) {
            $ = new UserAclArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param path The path.
         * 
         * @return builder
         * 
         */
        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The path.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param propagate Whether to propagate to child paths.
         * 
         * @return builder
         * 
         */
        public Builder propagate(@Nullable Output<Boolean> propagate) {
            $.propagate = propagate;
            return this;
        }

        /**
         * @param propagate Whether to propagate to child paths.
         * 
         * @return builder
         * 
         */
        public Builder propagate(Boolean propagate) {
            return propagate(Output.of(propagate));
        }

        /**
         * @param roleId The role identifier.
         * 
         * @return builder
         * 
         */
        public Builder roleId(Output<String> roleId) {
            $.roleId = roleId;
            return this;
        }

        /**
         * @param roleId The role identifier.
         * 
         * @return builder
         * 
         */
        public Builder roleId(String roleId) {
            return roleId(Output.of(roleId));
        }

        public UserAclArgs build() {
            $.path = Objects.requireNonNull($.path, "expected parameter 'path' to be non-null");
            $.roleId = Objects.requireNonNull($.roleId, "expected parameter 'roleId' to be non-null");
            return $;
        }
    }

}

// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.Storage.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import io.muehlbachler.pulumi.proxmoxve.Storage.outputs.GetDatastoresDatastore;
import io.muehlbachler.pulumi.proxmoxve.Storage.outputs.GetDatastoresFilters;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDatastoresResult {
    /**
     * @return The list of datastores.
     * 
     */
    private @Nullable List<GetDatastoresDatastore> datastores;
    /**
     * @return The filters to apply to the stores.
     * 
     */
    private @Nullable GetDatastoresFilters filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The name of the node to retrieve the stores from.
     * 
     */
    private String nodeName;

    private GetDatastoresResult() {}
    /**
     * @return The list of datastores.
     * 
     */
    public List<GetDatastoresDatastore> datastores() {
        return this.datastores == null ? List.of() : this.datastores;
    }
    /**
     * @return The filters to apply to the stores.
     * 
     */
    public Optional<GetDatastoresFilters> filters() {
        return Optional.ofNullable(this.filters);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name of the node to retrieve the stores from.
     * 
     */
    public String nodeName() {
        return this.nodeName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatastoresResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetDatastoresDatastore> datastores;
        private @Nullable GetDatastoresFilters filters;
        private String id;
        private String nodeName;
        public Builder() {}
        public Builder(GetDatastoresResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.datastores = defaults.datastores;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.nodeName = defaults.nodeName;
        }

        @CustomType.Setter
        public Builder datastores(@Nullable List<GetDatastoresDatastore> datastores) {

            this.datastores = datastores;
            return this;
        }
        public Builder datastores(GetDatastoresDatastore... datastores) {
            return datastores(List.of(datastores));
        }
        @CustomType.Setter
        public Builder filters(@Nullable GetDatastoresFilters filters) {

            this.filters = filters;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDatastoresResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder nodeName(String nodeName) {
            if (nodeName == null) {
              throw new MissingRequiredPropertyException("GetDatastoresResult", "nodeName");
            }
            this.nodeName = nodeName;
            return this;
        }
        public GetDatastoresResult build() {
            final var _resultValue = new GetDatastoresResult();
            _resultValue.datastores = datastores;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.nodeName = nodeName;
            return _resultValue;
        }
    }
}

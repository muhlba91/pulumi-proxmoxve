// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import io.muehlbachler.pulumi.proxmoxve.inputs.HostsEntryArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HostsState extends com.pulumi.resources.ResourceArgs {

    public static final HostsState Empty = new HostsState();

    /**
     * The IP addresses.
     * 
     */
    @Import(name="addresses")
    private @Nullable Output<List<String>> addresses;

    /**
     * @return The IP addresses.
     * 
     */
    public Optional<Output<List<String>>> addresses() {
        return Optional.ofNullable(this.addresses);
    }

    /**
     * The SHA1 digest.
     * 
     */
    @Import(name="digest")
    private @Nullable Output<String> digest;

    /**
     * @return The SHA1 digest.
     * 
     */
    public Optional<Output<String>> digest() {
        return Optional.ofNullable(this.digest);
    }

    /**
     * The host entries (conversion of `addresses` and `hostnames` into
     * objects).
     * 
     */
    @Import(name="entries")
    private @Nullable Output<List<HostsEntryArgs>> entries;

    /**
     * @return The host entries (conversion of `addresses` and `hostnames` into
     * objects).
     * 
     */
    public Optional<Output<List<HostsEntryArgs>>> entries() {
        return Optional.ofNullable(this.entries);
    }

    /**
     * A host entry (multiple blocks supported).
     * 
     */
    @Import(name="entry")
    private @Nullable Output<List<HostsEntryArgs>> entry;

    /**
     * @return A host entry (multiple blocks supported).
     * 
     */
    public Optional<Output<List<HostsEntryArgs>>> entry() {
        return Optional.ofNullable(this.entry);
    }

    /**
     * The hostnames.
     * 
     */
    @Import(name="hostnames")
    private @Nullable Output<List<List<String>>> hostnames;

    /**
     * @return The hostnames.
     * 
     */
    public Optional<Output<List<List<String>>>> hostnames() {
        return Optional.ofNullable(this.hostnames);
    }

    /**
     * A node name.
     * 
     */
    @Import(name="nodeName")
    private @Nullable Output<String> nodeName;

    /**
     * @return A node name.
     * 
     */
    public Optional<Output<String>> nodeName() {
        return Optional.ofNullable(this.nodeName);
    }

    private HostsState() {}

    private HostsState(HostsState $) {
        this.addresses = $.addresses;
        this.digest = $.digest;
        this.entries = $.entries;
        this.entry = $.entry;
        this.hostnames = $.hostnames;
        this.nodeName = $.nodeName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HostsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HostsState $;

        public Builder() {
            $ = new HostsState();
        }

        public Builder(HostsState defaults) {
            $ = new HostsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param addresses The IP addresses.
         * 
         * @return builder
         * 
         */
        public Builder addresses(@Nullable Output<List<String>> addresses) {
            $.addresses = addresses;
            return this;
        }

        /**
         * @param addresses The IP addresses.
         * 
         * @return builder
         * 
         */
        public Builder addresses(List<String> addresses) {
            return addresses(Output.of(addresses));
        }

        /**
         * @param addresses The IP addresses.
         * 
         * @return builder
         * 
         */
        public Builder addresses(String... addresses) {
            return addresses(List.of(addresses));
        }

        /**
         * @param digest The SHA1 digest.
         * 
         * @return builder
         * 
         */
        public Builder digest(@Nullable Output<String> digest) {
            $.digest = digest;
            return this;
        }

        /**
         * @param digest The SHA1 digest.
         * 
         * @return builder
         * 
         */
        public Builder digest(String digest) {
            return digest(Output.of(digest));
        }

        /**
         * @param entries The host entries (conversion of `addresses` and `hostnames` into
         * objects).
         * 
         * @return builder
         * 
         */
        public Builder entries(@Nullable Output<List<HostsEntryArgs>> entries) {
            $.entries = entries;
            return this;
        }

        /**
         * @param entries The host entries (conversion of `addresses` and `hostnames` into
         * objects).
         * 
         * @return builder
         * 
         */
        public Builder entries(List<HostsEntryArgs> entries) {
            return entries(Output.of(entries));
        }

        /**
         * @param entries The host entries (conversion of `addresses` and `hostnames` into
         * objects).
         * 
         * @return builder
         * 
         */
        public Builder entries(HostsEntryArgs... entries) {
            return entries(List.of(entries));
        }

        /**
         * @param entry A host entry (multiple blocks supported).
         * 
         * @return builder
         * 
         */
        public Builder entry(@Nullable Output<List<HostsEntryArgs>> entry) {
            $.entry = entry;
            return this;
        }

        /**
         * @param entry A host entry (multiple blocks supported).
         * 
         * @return builder
         * 
         */
        public Builder entry(List<HostsEntryArgs> entry) {
            return entry(Output.of(entry));
        }

        /**
         * @param entry A host entry (multiple blocks supported).
         * 
         * @return builder
         * 
         */
        public Builder entry(HostsEntryArgs... entry) {
            return entry(List.of(entry));
        }

        /**
         * @param hostnames The hostnames.
         * 
         * @return builder
         * 
         */
        public Builder hostnames(@Nullable Output<List<List<String>>> hostnames) {
            $.hostnames = hostnames;
            return this;
        }

        /**
         * @param hostnames The hostnames.
         * 
         * @return builder
         * 
         */
        public Builder hostnames(List<List<String>> hostnames) {
            return hostnames(Output.of(hostnames));
        }

        /**
         * @param hostnames The hostnames.
         * 
         * @return builder
         * 
         */
        public Builder hostnames(List<String>... hostnames) {
            return hostnames(List.of(hostnames));
        }

        /**
         * @param nodeName A node name.
         * 
         * @return builder
         * 
         */
        public Builder nodeName(@Nullable Output<String> nodeName) {
            $.nodeName = nodeName;
            return this;
        }

        /**
         * @param nodeName A node name.
         * 
         * @return builder
         * 
         */
        public Builder nodeName(String nodeName) {
            return nodeName(Output.of(nodeName));
        }

        public HostsState build() {
            return $;
        }
    }

}

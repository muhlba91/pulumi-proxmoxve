// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.SDNZone.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VxlanState extends com.pulumi.resources.ResourceArgs {

    public static final VxlanState Empty = new VxlanState();

    /**
     * DNS API server address.
     * 
     */
    @Import(name="dns")
    private @Nullable Output<String> dns;

    /**
     * @return DNS API server address.
     * 
     */
    public Optional<Output<String>> dns() {
        return Optional.ofNullable(this.dns);
    }

    /**
     * DNS domain name. Used to register hostnames, such as `&lt;hostname&gt;.&lt;domain&gt;`. The DNS zone must already exist on the DNS server.
     * 
     */
    @Import(name="dnsZone")
    private @Nullable Output<String> dnsZone;

    /**
     * @return DNS domain name. Used to register hostnames, such as `&lt;hostname&gt;.&lt;domain&gt;`. The DNS zone must already exist on the DNS server.
     * 
     */
    public Optional<Output<String>> dnsZone() {
        return Optional.ofNullable(this.dnsZone);
    }

    /**
     * IP Address Management system.
     * 
     */
    @Import(name="ipam")
    private @Nullable Output<String> ipam;

    /**
     * @return IP Address Management system.
     * 
     */
    public Optional<Output<String>> ipam() {
        return Optional.ofNullable(this.ipam);
    }

    /**
     * MTU value for the zone.
     * 
     */
    @Import(name="mtu")
    private @Nullable Output<Integer> mtu;

    /**
     * @return MTU value for the zone.
     * 
     */
    public Optional<Output<Integer>> mtu() {
        return Optional.ofNullable(this.mtu);
    }

    /**
     * The Proxmox nodes which the zone and associated VNets should be deployed on
     * 
     */
    @Import(name="nodes")
    private @Nullable Output<List<String>> nodes;

    /**
     * @return The Proxmox nodes which the zone and associated VNets should be deployed on
     * 
     */
    public Optional<Output<List<String>>> nodes() {
        return Optional.ofNullable(this.nodes);
    }

    /**
     * A list of IP addresses of each node in the VXLAN zone. This can be external nodes reachable at this IP address. All nodes in the cluster need to be mentioned here
     * 
     */
    @Import(name="peers")
    private @Nullable Output<List<String>> peers;

    /**
     * @return A list of IP addresses of each node in the VXLAN zone. This can be external nodes reachable at this IP address. All nodes in the cluster need to be mentioned here
     * 
     */
    public Optional<Output<List<String>>> peers() {
        return Optional.ofNullable(this.peers);
    }

    /**
     * Indicates if the zone has pending configuration changes that need to be applied.
     * 
     */
    @Import(name="pending")
    private @Nullable Output<Boolean> pending;

    /**
     * @return Indicates if the zone has pending configuration changes that need to be applied.
     * 
     */
    public Optional<Output<Boolean>> pending() {
        return Optional.ofNullable(this.pending);
    }

    /**
     * Reverse DNS API server address.
     * 
     */
    @Import(name="reverseDns")
    private @Nullable Output<String> reverseDns;

    /**
     * @return Reverse DNS API server address.
     * 
     */
    public Optional<Output<String>> reverseDns() {
        return Optional.ofNullable(this.reverseDns);
    }

    /**
     * Indicates the current state of the zone.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Indicates the current state of the zone.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The unique identifier of the SDN zone.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return The unique identifier of the SDN zone.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private VxlanState() {}

    private VxlanState(VxlanState $) {
        this.dns = $.dns;
        this.dnsZone = $.dnsZone;
        this.ipam = $.ipam;
        this.mtu = $.mtu;
        this.nodes = $.nodes;
        this.peers = $.peers;
        this.pending = $.pending;
        this.reverseDns = $.reverseDns;
        this.state = $.state;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VxlanState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VxlanState $;

        public Builder() {
            $ = new VxlanState();
        }

        public Builder(VxlanState defaults) {
            $ = new VxlanState(Objects.requireNonNull(defaults));
        }

        /**
         * @param dns DNS API server address.
         * 
         * @return builder
         * 
         */
        public Builder dns(@Nullable Output<String> dns) {
            $.dns = dns;
            return this;
        }

        /**
         * @param dns DNS API server address.
         * 
         * @return builder
         * 
         */
        public Builder dns(String dns) {
            return dns(Output.of(dns));
        }

        /**
         * @param dnsZone DNS domain name. Used to register hostnames, such as `&lt;hostname&gt;.&lt;domain&gt;`. The DNS zone must already exist on the DNS server.
         * 
         * @return builder
         * 
         */
        public Builder dnsZone(@Nullable Output<String> dnsZone) {
            $.dnsZone = dnsZone;
            return this;
        }

        /**
         * @param dnsZone DNS domain name. Used to register hostnames, such as `&lt;hostname&gt;.&lt;domain&gt;`. The DNS zone must already exist on the DNS server.
         * 
         * @return builder
         * 
         */
        public Builder dnsZone(String dnsZone) {
            return dnsZone(Output.of(dnsZone));
        }

        /**
         * @param ipam IP Address Management system.
         * 
         * @return builder
         * 
         */
        public Builder ipam(@Nullable Output<String> ipam) {
            $.ipam = ipam;
            return this;
        }

        /**
         * @param ipam IP Address Management system.
         * 
         * @return builder
         * 
         */
        public Builder ipam(String ipam) {
            return ipam(Output.of(ipam));
        }

        /**
         * @param mtu MTU value for the zone.
         * 
         * @return builder
         * 
         */
        public Builder mtu(@Nullable Output<Integer> mtu) {
            $.mtu = mtu;
            return this;
        }

        /**
         * @param mtu MTU value for the zone.
         * 
         * @return builder
         * 
         */
        public Builder mtu(Integer mtu) {
            return mtu(Output.of(mtu));
        }

        /**
         * @param nodes The Proxmox nodes which the zone and associated VNets should be deployed on
         * 
         * @return builder
         * 
         */
        public Builder nodes(@Nullable Output<List<String>> nodes) {
            $.nodes = nodes;
            return this;
        }

        /**
         * @param nodes The Proxmox nodes which the zone and associated VNets should be deployed on
         * 
         * @return builder
         * 
         */
        public Builder nodes(List<String> nodes) {
            return nodes(Output.of(nodes));
        }

        /**
         * @param nodes The Proxmox nodes which the zone and associated VNets should be deployed on
         * 
         * @return builder
         * 
         */
        public Builder nodes(String... nodes) {
            return nodes(List.of(nodes));
        }

        /**
         * @param peers A list of IP addresses of each node in the VXLAN zone. This can be external nodes reachable at this IP address. All nodes in the cluster need to be mentioned here
         * 
         * @return builder
         * 
         */
        public Builder peers(@Nullable Output<List<String>> peers) {
            $.peers = peers;
            return this;
        }

        /**
         * @param peers A list of IP addresses of each node in the VXLAN zone. This can be external nodes reachable at this IP address. All nodes in the cluster need to be mentioned here
         * 
         * @return builder
         * 
         */
        public Builder peers(List<String> peers) {
            return peers(Output.of(peers));
        }

        /**
         * @param peers A list of IP addresses of each node in the VXLAN zone. This can be external nodes reachable at this IP address. All nodes in the cluster need to be mentioned here
         * 
         * @return builder
         * 
         */
        public Builder peers(String... peers) {
            return peers(List.of(peers));
        }

        /**
         * @param pending Indicates if the zone has pending configuration changes that need to be applied.
         * 
         * @return builder
         * 
         */
        public Builder pending(@Nullable Output<Boolean> pending) {
            $.pending = pending;
            return this;
        }

        /**
         * @param pending Indicates if the zone has pending configuration changes that need to be applied.
         * 
         * @return builder
         * 
         */
        public Builder pending(Boolean pending) {
            return pending(Output.of(pending));
        }

        /**
         * @param reverseDns Reverse DNS API server address.
         * 
         * @return builder
         * 
         */
        public Builder reverseDns(@Nullable Output<String> reverseDns) {
            $.reverseDns = reverseDns;
            return this;
        }

        /**
         * @param reverseDns Reverse DNS API server address.
         * 
         * @return builder
         * 
         */
        public Builder reverseDns(String reverseDns) {
            return reverseDns(Output.of(reverseDns));
        }

        /**
         * @param state Indicates the current state of the zone.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Indicates the current state of the zone.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param zoneId The unique identifier of the SDN zone.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The unique identifier of the SDN zone.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public VxlanState build() {
            return $;
        }
    }

}

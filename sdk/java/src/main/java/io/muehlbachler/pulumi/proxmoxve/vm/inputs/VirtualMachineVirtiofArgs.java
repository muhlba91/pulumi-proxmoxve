// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.VM.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualMachineVirtiofArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualMachineVirtiofArgs Empty = new VirtualMachineVirtiofArgs();

    /**
     * The caching mode
     * 
     */
    @Import(name="cache")
    private @Nullable Output<String> cache;

    /**
     * @return The caching mode
     * 
     */
    public Optional<Output<String>> cache() {
        return Optional.ofNullable(this.cache);
    }

    /**
     * Whether to allow direct io
     * 
     */
    @Import(name="directIo")
    private @Nullable Output<Boolean> directIo;

    /**
     * @return Whether to allow direct io
     * 
     */
    public Optional<Output<Boolean>> directIo() {
        return Optional.ofNullable(this.directIo);
    }

    /**
     * Enable POSIX ACLs, implies xattr support
     * 
     */
    @Import(name="exposeAcl")
    private @Nullable Output<Boolean> exposeAcl;

    /**
     * @return Enable POSIX ACLs, implies xattr support
     * 
     */
    public Optional<Output<Boolean>> exposeAcl() {
        return Optional.ofNullable(this.exposeAcl);
    }

    /**
     * Enable support for extended attributes
     * 
     */
    @Import(name="exposeXattr")
    private @Nullable Output<Boolean> exposeXattr;

    /**
     * @return Enable support for extended attributes
     * 
     */
    public Optional<Output<Boolean>> exposeXattr() {
        return Optional.ofNullable(this.exposeXattr);
    }

    /**
     * Identifier of the directory mapping
     * 
     */
    @Import(name="mapping", required=true)
    private Output<String> mapping;

    /**
     * @return Identifier of the directory mapping
     * 
     */
    public Output<String> mapping() {
        return this.mapping;
    }

    private VirtualMachineVirtiofArgs() {}

    private VirtualMachineVirtiofArgs(VirtualMachineVirtiofArgs $) {
        this.cache = $.cache;
        this.directIo = $.directIo;
        this.exposeAcl = $.exposeAcl;
        this.exposeXattr = $.exposeXattr;
        this.mapping = $.mapping;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualMachineVirtiofArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualMachineVirtiofArgs $;

        public Builder() {
            $ = new VirtualMachineVirtiofArgs();
        }

        public Builder(VirtualMachineVirtiofArgs defaults) {
            $ = new VirtualMachineVirtiofArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cache The caching mode
         * 
         * @return builder
         * 
         */
        public Builder cache(@Nullable Output<String> cache) {
            $.cache = cache;
            return this;
        }

        /**
         * @param cache The caching mode
         * 
         * @return builder
         * 
         */
        public Builder cache(String cache) {
            return cache(Output.of(cache));
        }

        /**
         * @param directIo Whether to allow direct io
         * 
         * @return builder
         * 
         */
        public Builder directIo(@Nullable Output<Boolean> directIo) {
            $.directIo = directIo;
            return this;
        }

        /**
         * @param directIo Whether to allow direct io
         * 
         * @return builder
         * 
         */
        public Builder directIo(Boolean directIo) {
            return directIo(Output.of(directIo));
        }

        /**
         * @param exposeAcl Enable POSIX ACLs, implies xattr support
         * 
         * @return builder
         * 
         */
        public Builder exposeAcl(@Nullable Output<Boolean> exposeAcl) {
            $.exposeAcl = exposeAcl;
            return this;
        }

        /**
         * @param exposeAcl Enable POSIX ACLs, implies xattr support
         * 
         * @return builder
         * 
         */
        public Builder exposeAcl(Boolean exposeAcl) {
            return exposeAcl(Output.of(exposeAcl));
        }

        /**
         * @param exposeXattr Enable support for extended attributes
         * 
         * @return builder
         * 
         */
        public Builder exposeXattr(@Nullable Output<Boolean> exposeXattr) {
            $.exposeXattr = exposeXattr;
            return this;
        }

        /**
         * @param exposeXattr Enable support for extended attributes
         * 
         * @return builder
         * 
         */
        public Builder exposeXattr(Boolean exposeXattr) {
            return exposeXattr(Output.of(exposeXattr));
        }

        /**
         * @param mapping Identifier of the directory mapping
         * 
         * @return builder
         * 
         */
        public Builder mapping(Output<String> mapping) {
            $.mapping = mapping;
            return this;
        }

        /**
         * @param mapping Identifier of the directory mapping
         * 
         * @return builder
         * 
         */
        public Builder mapping(String mapping) {
            return mapping(Output.of(mapping));
        }

        public VirtualMachineVirtiofArgs build() {
            if ($.mapping == null) {
                throw new MissingRequiredPropertyException("VirtualMachineVirtiofArgs", "mapping");
            }
            return $;
        }
    }

}

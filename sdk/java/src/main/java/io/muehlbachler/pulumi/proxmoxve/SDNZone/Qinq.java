// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.SDNZone;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import io.muehlbachler.pulumi.proxmoxve.SDNZone.QinqArgs;
import io.muehlbachler.pulumi.proxmoxve.SDNZone.inputs.QinqState;
import io.muehlbachler.pulumi.proxmoxve.Utilities;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * QinQ Zone in Proxmox SDN. QinQ also known as VLAN stacking, that uses multiple layers of VLAN tags for isolation. The QinQ zone defines the outer VLAN tag (the Service VLAN) whereas the inner VLAN tag is defined by the VNet. Your physical network switches must support stacked VLANs for this configuration. Due to the double stacking of tags, you need 4 more bytes for QinQ VLANs. For example, you must reduce the MTU to 1496 if you physical interface MTU is 1500.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import io.muehlbachler.pulumi.proxmoxve.SDNZone.Qinq;
 * import io.muehlbachler.pulumi.proxmoxve.SDNZone.QinqArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Qinq("example", QinqArgs.builder()
 *             .bridge("vmbr0")
 *             .dns("1.1.1.1")
 *             .dnsZone("example.com")
 *             .zoneId("qinq1")
 *             .ipam("pve")
 *             .mtu(1496)
 *             .nodes("pve")
 *             .reverseDns("1.1.1.1")
 *             .serviceVlan(100)
 *             .serviceVlanProtocol("802.1ad")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * #!/usr/bin/env sh
 * 
 * QinQ SDN zone can be imported using its unique identifier (zone ID)
 * 
 * ```sh
 * $ pulumi import proxmoxve:SDNZone/qinq:Qinq example qinq1
 * ```
 * 
 */
@ResourceType(type="proxmoxve:SDNZone/qinq:Qinq")
public class Qinq extends com.pulumi.resources.CustomResource {
    /**
     * A local, VLAN-aware bridge that is already configured on each local node
     * 
     */
    @Export(name="bridge", refs={String.class}, tree="[0]")
    private Output<String> bridge;

    /**
     * @return A local, VLAN-aware bridge that is already configured on each local node
     * 
     */
    public Output<String> bridge() {
        return this.bridge;
    }
    /**
     * DNS API server address.
     * 
     */
    @Export(name="dns", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> dns;

    /**
     * @return DNS API server address.
     * 
     */
    public Output<Optional<String>> dns() {
        return Codegen.optional(this.dns);
    }
    /**
     * DNS domain name. Used to register hostnames, such as `&lt;hostname&gt;.&lt;domain&gt;`. The DNS zone must already exist on the DNS server.
     * 
     */
    @Export(name="dnsZone", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> dnsZone;

    /**
     * @return DNS domain name. Used to register hostnames, such as `&lt;hostname&gt;.&lt;domain&gt;`. The DNS zone must already exist on the DNS server.
     * 
     */
    public Output<Optional<String>> dnsZone() {
        return Codegen.optional(this.dnsZone);
    }
    /**
     * IP Address Management system.
     * 
     */
    @Export(name="ipam", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipam;

    /**
     * @return IP Address Management system.
     * 
     */
    public Output<Optional<String>> ipam() {
        return Codegen.optional(this.ipam);
    }
    /**
     * MTU value for the zone.
     * 
     */
    @Export(name="mtu", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> mtu;

    /**
     * @return MTU value for the zone.
     * 
     */
    public Output<Optional<Integer>> mtu() {
        return Codegen.optional(this.mtu);
    }
    /**
     * The Proxmox nodes which the zone and associated VNets should be deployed on
     * 
     */
    @Export(name="nodes", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> nodes;

    /**
     * @return The Proxmox nodes which the zone and associated VNets should be deployed on
     * 
     */
    public Output<List<String>> nodes() {
        return this.nodes;
    }
    /**
     * Indicates if the zone has pending configuration changes that need to be applied.
     * 
     */
    @Export(name="pending", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> pending;

    /**
     * @return Indicates if the zone has pending configuration changes that need to be applied.
     * 
     */
    public Output<Boolean> pending() {
        return this.pending;
    }
    /**
     * Reverse DNS API server address.
     * 
     */
    @Export(name="reverseDns", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> reverseDns;

    /**
     * @return Reverse DNS API server address.
     * 
     */
    public Output<Optional<String>> reverseDns() {
        return Codegen.optional(this.reverseDns);
    }
    /**
     * Service VLAN tag for QinQ. The tag must be between `1` and `4094`.
     * 
     */
    @Export(name="serviceVlan", refs={Integer.class}, tree="[0]")
    private Output<Integer> serviceVlan;

    /**
     * @return Service VLAN tag for QinQ. The tag must be between `1` and `4094`.
     * 
     */
    public Output<Integer> serviceVlan() {
        return this.serviceVlan;
    }
    /**
     * Service VLAN protocol for QinQ. The protocol must be `802.1ad` or `802.1q`.
     * 
     */
    @Export(name="serviceVlanProtocol", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> serviceVlanProtocol;

    /**
     * @return Service VLAN protocol for QinQ. The protocol must be `802.1ad` or `802.1q`.
     * 
     */
    public Output<Optional<String>> serviceVlanProtocol() {
        return Codegen.optional(this.serviceVlanProtocol);
    }
    /**
     * Indicates the current state of the zone.
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return Indicates the current state of the zone.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * The unique identifier of the SDN zone.
     * 
     */
    @Export(name="zoneId", refs={String.class}, tree="[0]")
    private Output<String> zoneId;

    /**
     * @return The unique identifier of the SDN zone.
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Qinq(java.lang.String name) {
        this(name, QinqArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Qinq(java.lang.String name, QinqArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Qinq(java.lang.String name, QinqArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("proxmoxve:SDNZone/qinq:Qinq", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Qinq(java.lang.String name, Output<java.lang.String> id, @Nullable QinqState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("proxmoxve:SDNZone/qinq:Qinq", name, state, makeResourceOptions(options, id), false);
    }

    private static QinqArgs makeArgs(QinqArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? QinqArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/muhlba91/pulumi-proxmoxve")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Qinq get(java.lang.String name, Output<java.lang.String> id, @Nullable QinqState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Qinq(name, id, state, options);
    }
}

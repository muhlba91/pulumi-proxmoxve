// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetFileResult {
    /**
     * @return The content type of the file.
     * 
     */
    private String contentType;
    /**
     * @return The identifier of the datastore.
     * 
     */
    private String datastoreId;
    /**
     * @return The format of the file.
     * 
     */
    private String fileFormat;
    /**
     * @return The name of the file.
     * 
     */
    private String fileName;
    /**
     * @return The size of the file in bytes.
     * 
     */
    private Integer fileSize;
    /**
     * @return The unique identifier of the file (volume ID).
     * 
     */
    private String id;
    /**
     * @return The name of the node.
     * 
     */
    private String nodeName;
    /**
     * @return The VM ID associated with the file (if applicable).
     * 
     */
    private Integer vmid;

    private GetFileResult() {}
    /**
     * @return The content type of the file.
     * 
     */
    public String contentType() {
        return this.contentType;
    }
    /**
     * @return The identifier of the datastore.
     * 
     */
    public String datastoreId() {
        return this.datastoreId;
    }
    /**
     * @return The format of the file.
     * 
     */
    public String fileFormat() {
        return this.fileFormat;
    }
    /**
     * @return The name of the file.
     * 
     */
    public String fileName() {
        return this.fileName;
    }
    /**
     * @return The size of the file in bytes.
     * 
     */
    public Integer fileSize() {
        return this.fileSize;
    }
    /**
     * @return The unique identifier of the file (volume ID).
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name of the node.
     * 
     */
    public String nodeName() {
        return this.nodeName;
    }
    /**
     * @return The VM ID associated with the file (if applicable).
     * 
     */
    public Integer vmid() {
        return this.vmid;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFileResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String contentType;
        private String datastoreId;
        private String fileFormat;
        private String fileName;
        private Integer fileSize;
        private String id;
        private String nodeName;
        private Integer vmid;
        public Builder() {}
        public Builder(GetFileResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.contentType = defaults.contentType;
    	      this.datastoreId = defaults.datastoreId;
    	      this.fileFormat = defaults.fileFormat;
    	      this.fileName = defaults.fileName;
    	      this.fileSize = defaults.fileSize;
    	      this.id = defaults.id;
    	      this.nodeName = defaults.nodeName;
    	      this.vmid = defaults.vmid;
        }

        @CustomType.Setter
        public Builder contentType(String contentType) {
            if (contentType == null) {
              throw new MissingRequiredPropertyException("GetFileResult", "contentType");
            }
            this.contentType = contentType;
            return this;
        }
        @CustomType.Setter
        public Builder datastoreId(String datastoreId) {
            if (datastoreId == null) {
              throw new MissingRequiredPropertyException("GetFileResult", "datastoreId");
            }
            this.datastoreId = datastoreId;
            return this;
        }
        @CustomType.Setter
        public Builder fileFormat(String fileFormat) {
            if (fileFormat == null) {
              throw new MissingRequiredPropertyException("GetFileResult", "fileFormat");
            }
            this.fileFormat = fileFormat;
            return this;
        }
        @CustomType.Setter
        public Builder fileName(String fileName) {
            if (fileName == null) {
              throw new MissingRequiredPropertyException("GetFileResult", "fileName");
            }
            this.fileName = fileName;
            return this;
        }
        @CustomType.Setter
        public Builder fileSize(Integer fileSize) {
            if (fileSize == null) {
              throw new MissingRequiredPropertyException("GetFileResult", "fileSize");
            }
            this.fileSize = fileSize;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetFileResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder nodeName(String nodeName) {
            if (nodeName == null) {
              throw new MissingRequiredPropertyException("GetFileResult", "nodeName");
            }
            this.nodeName = nodeName;
            return this;
        }
        @CustomType.Setter
        public Builder vmid(Integer vmid) {
            if (vmid == null) {
              throw new MissingRequiredPropertyException("GetFileResult", "vmid");
            }
            this.vmid = vmid;
            return this;
        }
        public GetFileResult build() {
            final var _resultValue = new GetFileResult();
            _resultValue.contentType = contentType;
            _resultValue.datastoreId = datastoreId;
            _resultValue.fileFormat = fileFormat;
            _resultValue.fileName = fileName;
            _resultValue.fileSize = fileSize;
            _resultValue.id = id;
            _resultValue.nodeName = nodeName;
            _resultValue.vmid = vmid;
            return _resultValue;
        }
    }
}

// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CertifiState extends com.pulumi.resources.ResourceArgs {

    public static final CertifiState Empty = new CertifiState();

    /**
     * The PEM encoded certificate.
     * 
     */
    @Import(name="certificate")
    private @Nullable Output<String> certificate;

    /**
     * @return The PEM encoded certificate.
     * 
     */
    public Optional<Output<String>> certificate() {
        return Optional.ofNullable(this.certificate);
    }

    /**
     * The PEM encoded certificate chain.
     * 
     */
    @Import(name="certificateChain")
    private @Nullable Output<String> certificateChain;

    /**
     * @return The PEM encoded certificate chain.
     * 
     */
    public Optional<Output<String>> certificateChain() {
        return Optional.ofNullable(this.certificateChain);
    }

    /**
     * The expiration date (RFC 3339).
     * 
     */
    @Import(name="expirationDate")
    private @Nullable Output<String> expirationDate;

    /**
     * @return The expiration date (RFC 3339).
     * 
     */
    public Optional<Output<String>> expirationDate() {
        return Optional.ofNullable(this.expirationDate);
    }

    /**
     * The file name.
     * 
     */
    @Import(name="fileName")
    private @Nullable Output<String> fileName;

    /**
     * @return The file name.
     * 
     */
    public Optional<Output<String>> fileName() {
        return Optional.ofNullable(this.fileName);
    }

    /**
     * The issuer.
     * 
     */
    @Import(name="issuer")
    private @Nullable Output<String> issuer;

    /**
     * @return The issuer.
     * 
     */
    public Optional<Output<String>> issuer() {
        return Optional.ofNullable(this.issuer);
    }

    /**
     * A node name.
     * 
     */
    @Import(name="nodeName")
    private @Nullable Output<String> nodeName;

    /**
     * @return A node name.
     * 
     */
    public Optional<Output<String>> nodeName() {
        return Optional.ofNullable(this.nodeName);
    }

    /**
     * Whether to overwrite an existing certificate
     * 
     */
    @Import(name="overwrite")
    private @Nullable Output<Boolean> overwrite;

    /**
     * @return Whether to overwrite an existing certificate
     * 
     */
    public Optional<Output<Boolean>> overwrite() {
        return Optional.ofNullable(this.overwrite);
    }

    /**
     * The PEM encoded private key.
     * 
     */
    @Import(name="privateKey")
    private @Nullable Output<String> privateKey;

    /**
     * @return The PEM encoded private key.
     * 
     */
    public Optional<Output<String>> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }

    /**
     * The public key size.
     * 
     */
    @Import(name="publicKeySize")
    private @Nullable Output<Integer> publicKeySize;

    /**
     * @return The public key size.
     * 
     */
    public Optional<Output<Integer>> publicKeySize() {
        return Optional.ofNullable(this.publicKeySize);
    }

    /**
     * The public key type.
     * 
     */
    @Import(name="publicKeyType")
    private @Nullable Output<String> publicKeyType;

    /**
     * @return The public key type.
     * 
     */
    public Optional<Output<String>> publicKeyType() {
        return Optional.ofNullable(this.publicKeyType);
    }

    /**
     * The SSL fingerprint.
     * 
     */
    @Import(name="sslFingerprint")
    private @Nullable Output<String> sslFingerprint;

    /**
     * @return The SSL fingerprint.
     * 
     */
    public Optional<Output<String>> sslFingerprint() {
        return Optional.ofNullable(this.sslFingerprint);
    }

    /**
     * The start date (RFC 3339).
     * 
     */
    @Import(name="startDate")
    private @Nullable Output<String> startDate;

    /**
     * @return The start date (RFC 3339).
     * 
     */
    public Optional<Output<String>> startDate() {
        return Optional.ofNullable(this.startDate);
    }

    /**
     * The subject.
     * 
     */
    @Import(name="subject")
    private @Nullable Output<String> subject;

    /**
     * @return The subject.
     * 
     */
    public Optional<Output<String>> subject() {
        return Optional.ofNullable(this.subject);
    }

    /**
     * The subject alternative names.
     * 
     */
    @Import(name="subjectAlternativeNames")
    private @Nullable Output<List<String>> subjectAlternativeNames;

    /**
     * @return The subject alternative names.
     * 
     */
    public Optional<Output<List<String>>> subjectAlternativeNames() {
        return Optional.ofNullable(this.subjectAlternativeNames);
    }

    private CertifiState() {}

    private CertifiState(CertifiState $) {
        this.certificate = $.certificate;
        this.certificateChain = $.certificateChain;
        this.expirationDate = $.expirationDate;
        this.fileName = $.fileName;
        this.issuer = $.issuer;
        this.nodeName = $.nodeName;
        this.overwrite = $.overwrite;
        this.privateKey = $.privateKey;
        this.publicKeySize = $.publicKeySize;
        this.publicKeyType = $.publicKeyType;
        this.sslFingerprint = $.sslFingerprint;
        this.startDate = $.startDate;
        this.subject = $.subject;
        this.subjectAlternativeNames = $.subjectAlternativeNames;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertifiState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertifiState $;

        public Builder() {
            $ = new CertifiState();
        }

        public Builder(CertifiState defaults) {
            $ = new CertifiState(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificate The PEM encoded certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificate(@Nullable Output<String> certificate) {
            $.certificate = certificate;
            return this;
        }

        /**
         * @param certificate The PEM encoded certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificate(String certificate) {
            return certificate(Output.of(certificate));
        }

        /**
         * @param certificateChain The PEM encoded certificate chain.
         * 
         * @return builder
         * 
         */
        public Builder certificateChain(@Nullable Output<String> certificateChain) {
            $.certificateChain = certificateChain;
            return this;
        }

        /**
         * @param certificateChain The PEM encoded certificate chain.
         * 
         * @return builder
         * 
         */
        public Builder certificateChain(String certificateChain) {
            return certificateChain(Output.of(certificateChain));
        }

        /**
         * @param expirationDate The expiration date (RFC 3339).
         * 
         * @return builder
         * 
         */
        public Builder expirationDate(@Nullable Output<String> expirationDate) {
            $.expirationDate = expirationDate;
            return this;
        }

        /**
         * @param expirationDate The expiration date (RFC 3339).
         * 
         * @return builder
         * 
         */
        public Builder expirationDate(String expirationDate) {
            return expirationDate(Output.of(expirationDate));
        }

        /**
         * @param fileName The file name.
         * 
         * @return builder
         * 
         */
        public Builder fileName(@Nullable Output<String> fileName) {
            $.fileName = fileName;
            return this;
        }

        /**
         * @param fileName The file name.
         * 
         * @return builder
         * 
         */
        public Builder fileName(String fileName) {
            return fileName(Output.of(fileName));
        }

        /**
         * @param issuer The issuer.
         * 
         * @return builder
         * 
         */
        public Builder issuer(@Nullable Output<String> issuer) {
            $.issuer = issuer;
            return this;
        }

        /**
         * @param issuer The issuer.
         * 
         * @return builder
         * 
         */
        public Builder issuer(String issuer) {
            return issuer(Output.of(issuer));
        }

        /**
         * @param nodeName A node name.
         * 
         * @return builder
         * 
         */
        public Builder nodeName(@Nullable Output<String> nodeName) {
            $.nodeName = nodeName;
            return this;
        }

        /**
         * @param nodeName A node name.
         * 
         * @return builder
         * 
         */
        public Builder nodeName(String nodeName) {
            return nodeName(Output.of(nodeName));
        }

        /**
         * @param overwrite Whether to overwrite an existing certificate
         * 
         * @return builder
         * 
         */
        public Builder overwrite(@Nullable Output<Boolean> overwrite) {
            $.overwrite = overwrite;
            return this;
        }

        /**
         * @param overwrite Whether to overwrite an existing certificate
         * 
         * @return builder
         * 
         */
        public Builder overwrite(Boolean overwrite) {
            return overwrite(Output.of(overwrite));
        }

        /**
         * @param privateKey The PEM encoded private key.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(@Nullable Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param privateKey The PEM encoded private key.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        /**
         * @param publicKeySize The public key size.
         * 
         * @return builder
         * 
         */
        public Builder publicKeySize(@Nullable Output<Integer> publicKeySize) {
            $.publicKeySize = publicKeySize;
            return this;
        }

        /**
         * @param publicKeySize The public key size.
         * 
         * @return builder
         * 
         */
        public Builder publicKeySize(Integer publicKeySize) {
            return publicKeySize(Output.of(publicKeySize));
        }

        /**
         * @param publicKeyType The public key type.
         * 
         * @return builder
         * 
         */
        public Builder publicKeyType(@Nullable Output<String> publicKeyType) {
            $.publicKeyType = publicKeyType;
            return this;
        }

        /**
         * @param publicKeyType The public key type.
         * 
         * @return builder
         * 
         */
        public Builder publicKeyType(String publicKeyType) {
            return publicKeyType(Output.of(publicKeyType));
        }

        /**
         * @param sslFingerprint The SSL fingerprint.
         * 
         * @return builder
         * 
         */
        public Builder sslFingerprint(@Nullable Output<String> sslFingerprint) {
            $.sslFingerprint = sslFingerprint;
            return this;
        }

        /**
         * @param sslFingerprint The SSL fingerprint.
         * 
         * @return builder
         * 
         */
        public Builder sslFingerprint(String sslFingerprint) {
            return sslFingerprint(Output.of(sslFingerprint));
        }

        /**
         * @param startDate The start date (RFC 3339).
         * 
         * @return builder
         * 
         */
        public Builder startDate(@Nullable Output<String> startDate) {
            $.startDate = startDate;
            return this;
        }

        /**
         * @param startDate The start date (RFC 3339).
         * 
         * @return builder
         * 
         */
        public Builder startDate(String startDate) {
            return startDate(Output.of(startDate));
        }

        /**
         * @param subject The subject.
         * 
         * @return builder
         * 
         */
        public Builder subject(@Nullable Output<String> subject) {
            $.subject = subject;
            return this;
        }

        /**
         * @param subject The subject.
         * 
         * @return builder
         * 
         */
        public Builder subject(String subject) {
            return subject(Output.of(subject));
        }

        /**
         * @param subjectAlternativeNames The subject alternative names.
         * 
         * @return builder
         * 
         */
        public Builder subjectAlternativeNames(@Nullable Output<List<String>> subjectAlternativeNames) {
            $.subjectAlternativeNames = subjectAlternativeNames;
            return this;
        }

        /**
         * @param subjectAlternativeNames The subject alternative names.
         * 
         * @return builder
         * 
         */
        public Builder subjectAlternativeNames(List<String> subjectAlternativeNames) {
            return subjectAlternativeNames(Output.of(subjectAlternativeNames));
        }

        /**
         * @param subjectAlternativeNames The subject alternative names.
         * 
         * @return builder
         * 
         */
        public Builder subjectAlternativeNames(String... subjectAlternativeNames) {
            return subjectAlternativeNames(List.of(subjectAlternativeNames));
        }

        public CertifiState build() {
            return $;
        }
    }

}

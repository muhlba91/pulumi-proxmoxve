// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.Storage.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import io.muehlbachler.pulumi.proxmoxve.Storage.inputs.GetDatastoresDatastoreArgs;
import io.muehlbachler.pulumi.proxmoxve.Storage.inputs.GetDatastoresFiltersArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDatastoresArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDatastoresArgs Empty = new GetDatastoresArgs();

    /**
     * The list of datastores.
     * 
     */
    @Import(name="datastores")
    private @Nullable Output<List<GetDatastoresDatastoreArgs>> datastores;

    /**
     * @return The list of datastores.
     * 
     */
    public Optional<Output<List<GetDatastoresDatastoreArgs>>> datastores() {
        return Optional.ofNullable(this.datastores);
    }

    /**
     * The filters to apply to the stores.
     * 
     */
    @Import(name="filters")
    private @Nullable Output<GetDatastoresFiltersArgs> filters;

    /**
     * @return The filters to apply to the stores.
     * 
     */
    public Optional<Output<GetDatastoresFiltersArgs>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The name of the node to retrieve the stores from.
     * 
     */
    @Import(name="nodeName", required=true)
    private Output<String> nodeName;

    /**
     * @return The name of the node to retrieve the stores from.
     * 
     */
    public Output<String> nodeName() {
        return this.nodeName;
    }

    private GetDatastoresArgs() {}

    private GetDatastoresArgs(GetDatastoresArgs $) {
        this.datastores = $.datastores;
        this.filters = $.filters;
        this.nodeName = $.nodeName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDatastoresArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDatastoresArgs $;

        public Builder() {
            $ = new GetDatastoresArgs();
        }

        public Builder(GetDatastoresArgs defaults) {
            $ = new GetDatastoresArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param datastores The list of datastores.
         * 
         * @return builder
         * 
         */
        public Builder datastores(@Nullable Output<List<GetDatastoresDatastoreArgs>> datastores) {
            $.datastores = datastores;
            return this;
        }

        /**
         * @param datastores The list of datastores.
         * 
         * @return builder
         * 
         */
        public Builder datastores(List<GetDatastoresDatastoreArgs> datastores) {
            return datastores(Output.of(datastores));
        }

        /**
         * @param datastores The list of datastores.
         * 
         * @return builder
         * 
         */
        public Builder datastores(GetDatastoresDatastoreArgs... datastores) {
            return datastores(List.of(datastores));
        }

        /**
         * @param filters The filters to apply to the stores.
         * 
         * @return builder
         * 
         */
        public Builder filters(@Nullable Output<GetDatastoresFiltersArgs> filters) {
            $.filters = filters;
            return this;
        }

        /**
         * @param filters The filters to apply to the stores.
         * 
         * @return builder
         * 
         */
        public Builder filters(GetDatastoresFiltersArgs filters) {
            return filters(Output.of(filters));
        }

        /**
         * @param nodeName The name of the node to retrieve the stores from.
         * 
         * @return builder
         * 
         */
        public Builder nodeName(Output<String> nodeName) {
            $.nodeName = nodeName;
            return this;
        }

        /**
         * @param nodeName The name of the node to retrieve the stores from.
         * 
         * @return builder
         * 
         */
        public Builder nodeName(String nodeName) {
            return nodeName(Output.of(nodeName));
        }

        public GetDatastoresArgs build() {
            if ($.nodeName == null) {
                throw new MissingRequiredPropertyException("GetDatastoresArgs", "nodeName");
            }
            return $;
        }
    }

}

// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.Sdn.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetZonesZone {
    private Boolean advertiseSubnets;
    private String bridge;
    private String controller;
    private Boolean disableArpNdSuppression;
    private String dns;
    private String dnsZone;
    private List<String> exitNodes;
    private Boolean exitNodesLocalRouting;
    private String id;
    private String ipam;
    private Integer mtu;
    private List<String> nodes;
    private List<String> peers;
    private String primaryExitNode;
    private String reverseDns;
    private String rtImport;
    private Integer serviceVlan;
    private String serviceVlanProtocol;
    private String type;
    private Integer vrfVxlan;

    private GetZonesZone() {}
    public Boolean advertiseSubnets() {
        return this.advertiseSubnets;
    }
    public String bridge() {
        return this.bridge;
    }
    public String controller() {
        return this.controller;
    }
    public Boolean disableArpNdSuppression() {
        return this.disableArpNdSuppression;
    }
    public String dns() {
        return this.dns;
    }
    public String dnsZone() {
        return this.dnsZone;
    }
    public List<String> exitNodes() {
        return this.exitNodes;
    }
    public Boolean exitNodesLocalRouting() {
        return this.exitNodesLocalRouting;
    }
    public String id() {
        return this.id;
    }
    public String ipam() {
        return this.ipam;
    }
    public Integer mtu() {
        return this.mtu;
    }
    public List<String> nodes() {
        return this.nodes;
    }
    public List<String> peers() {
        return this.peers;
    }
    public String primaryExitNode() {
        return this.primaryExitNode;
    }
    public String reverseDns() {
        return this.reverseDns;
    }
    public String rtImport() {
        return this.rtImport;
    }
    public Integer serviceVlan() {
        return this.serviceVlan;
    }
    public String serviceVlanProtocol() {
        return this.serviceVlanProtocol;
    }
    public String type() {
        return this.type;
    }
    public Integer vrfVxlan() {
        return this.vrfVxlan;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetZonesZone defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean advertiseSubnets;
        private String bridge;
        private String controller;
        private Boolean disableArpNdSuppression;
        private String dns;
        private String dnsZone;
        private List<String> exitNodes;
        private Boolean exitNodesLocalRouting;
        private String id;
        private String ipam;
        private Integer mtu;
        private List<String> nodes;
        private List<String> peers;
        private String primaryExitNode;
        private String reverseDns;
        private String rtImport;
        private Integer serviceVlan;
        private String serviceVlanProtocol;
        private String type;
        private Integer vrfVxlan;
        public Builder() {}
        public Builder(GetZonesZone defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.advertiseSubnets = defaults.advertiseSubnets;
    	      this.bridge = defaults.bridge;
    	      this.controller = defaults.controller;
    	      this.disableArpNdSuppression = defaults.disableArpNdSuppression;
    	      this.dns = defaults.dns;
    	      this.dnsZone = defaults.dnsZone;
    	      this.exitNodes = defaults.exitNodes;
    	      this.exitNodesLocalRouting = defaults.exitNodesLocalRouting;
    	      this.id = defaults.id;
    	      this.ipam = defaults.ipam;
    	      this.mtu = defaults.mtu;
    	      this.nodes = defaults.nodes;
    	      this.peers = defaults.peers;
    	      this.primaryExitNode = defaults.primaryExitNode;
    	      this.reverseDns = defaults.reverseDns;
    	      this.rtImport = defaults.rtImport;
    	      this.serviceVlan = defaults.serviceVlan;
    	      this.serviceVlanProtocol = defaults.serviceVlanProtocol;
    	      this.type = defaults.type;
    	      this.vrfVxlan = defaults.vrfVxlan;
        }

        @CustomType.Setter
        public Builder advertiseSubnets(Boolean advertiseSubnets) {
            if (advertiseSubnets == null) {
              throw new MissingRequiredPropertyException("GetZonesZone", "advertiseSubnets");
            }
            this.advertiseSubnets = advertiseSubnets;
            return this;
        }
        @CustomType.Setter
        public Builder bridge(String bridge) {
            if (bridge == null) {
              throw new MissingRequiredPropertyException("GetZonesZone", "bridge");
            }
            this.bridge = bridge;
            return this;
        }
        @CustomType.Setter
        public Builder controller(String controller) {
            if (controller == null) {
              throw new MissingRequiredPropertyException("GetZonesZone", "controller");
            }
            this.controller = controller;
            return this;
        }
        @CustomType.Setter
        public Builder disableArpNdSuppression(Boolean disableArpNdSuppression) {
            if (disableArpNdSuppression == null) {
              throw new MissingRequiredPropertyException("GetZonesZone", "disableArpNdSuppression");
            }
            this.disableArpNdSuppression = disableArpNdSuppression;
            return this;
        }
        @CustomType.Setter
        public Builder dns(String dns) {
            if (dns == null) {
              throw new MissingRequiredPropertyException("GetZonesZone", "dns");
            }
            this.dns = dns;
            return this;
        }
        @CustomType.Setter
        public Builder dnsZone(String dnsZone) {
            if (dnsZone == null) {
              throw new MissingRequiredPropertyException("GetZonesZone", "dnsZone");
            }
            this.dnsZone = dnsZone;
            return this;
        }
        @CustomType.Setter
        public Builder exitNodes(List<String> exitNodes) {
            if (exitNodes == null) {
              throw new MissingRequiredPropertyException("GetZonesZone", "exitNodes");
            }
            this.exitNodes = exitNodes;
            return this;
        }
        public Builder exitNodes(String... exitNodes) {
            return exitNodes(List.of(exitNodes));
        }
        @CustomType.Setter
        public Builder exitNodesLocalRouting(Boolean exitNodesLocalRouting) {
            if (exitNodesLocalRouting == null) {
              throw new MissingRequiredPropertyException("GetZonesZone", "exitNodesLocalRouting");
            }
            this.exitNodesLocalRouting = exitNodesLocalRouting;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetZonesZone", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipam(String ipam) {
            if (ipam == null) {
              throw new MissingRequiredPropertyException("GetZonesZone", "ipam");
            }
            this.ipam = ipam;
            return this;
        }
        @CustomType.Setter
        public Builder mtu(Integer mtu) {
            if (mtu == null) {
              throw new MissingRequiredPropertyException("GetZonesZone", "mtu");
            }
            this.mtu = mtu;
            return this;
        }
        @CustomType.Setter
        public Builder nodes(List<String> nodes) {
            if (nodes == null) {
              throw new MissingRequiredPropertyException("GetZonesZone", "nodes");
            }
            this.nodes = nodes;
            return this;
        }
        public Builder nodes(String... nodes) {
            return nodes(List.of(nodes));
        }
        @CustomType.Setter
        public Builder peers(List<String> peers) {
            if (peers == null) {
              throw new MissingRequiredPropertyException("GetZonesZone", "peers");
            }
            this.peers = peers;
            return this;
        }
        public Builder peers(String... peers) {
            return peers(List.of(peers));
        }
        @CustomType.Setter
        public Builder primaryExitNode(String primaryExitNode) {
            if (primaryExitNode == null) {
              throw new MissingRequiredPropertyException("GetZonesZone", "primaryExitNode");
            }
            this.primaryExitNode = primaryExitNode;
            return this;
        }
        @CustomType.Setter
        public Builder reverseDns(String reverseDns) {
            if (reverseDns == null) {
              throw new MissingRequiredPropertyException("GetZonesZone", "reverseDns");
            }
            this.reverseDns = reverseDns;
            return this;
        }
        @CustomType.Setter
        public Builder rtImport(String rtImport) {
            if (rtImport == null) {
              throw new MissingRequiredPropertyException("GetZonesZone", "rtImport");
            }
            this.rtImport = rtImport;
            return this;
        }
        @CustomType.Setter
        public Builder serviceVlan(Integer serviceVlan) {
            if (serviceVlan == null) {
              throw new MissingRequiredPropertyException("GetZonesZone", "serviceVlan");
            }
            this.serviceVlan = serviceVlan;
            return this;
        }
        @CustomType.Setter
        public Builder serviceVlanProtocol(String serviceVlanProtocol) {
            if (serviceVlanProtocol == null) {
              throw new MissingRequiredPropertyException("GetZonesZone", "serviceVlanProtocol");
            }
            this.serviceVlanProtocol = serviceVlanProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetZonesZone", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder vrfVxlan(Integer vrfVxlan) {
            if (vrfVxlan == null) {
              throw new MissingRequiredPropertyException("GetZonesZone", "vrfVxlan");
            }
            this.vrfVxlan = vrfVxlan;
            return this;
        }
        public GetZonesZone build() {
            final var _resultValue = new GetZonesZone();
            _resultValue.advertiseSubnets = advertiseSubnets;
            _resultValue.bridge = bridge;
            _resultValue.controller = controller;
            _resultValue.disableArpNdSuppression = disableArpNdSuppression;
            _resultValue.dns = dns;
            _resultValue.dnsZone = dnsZone;
            _resultValue.exitNodes = exitNodes;
            _resultValue.exitNodesLocalRouting = exitNodesLocalRouting;
            _resultValue.id = id;
            _resultValue.ipam = ipam;
            _resultValue.mtu = mtu;
            _resultValue.nodes = nodes;
            _resultValue.peers = peers;
            _resultValue.primaryExitNode = primaryExitNode;
            _resultValue.reverseDns = reverseDns;
            _resultValue.rtImport = rtImport;
            _resultValue.serviceVlan = serviceVlan;
            _resultValue.serviceVlanProtocol = serviceVlanProtocol;
            _resultValue.type = type;
            _resultValue.vrfVxlan = vrfVxlan;
            return _resultValue;
        }
    }
}

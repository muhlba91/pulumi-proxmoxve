// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.CT.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContainerDiskArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContainerDiskArgs Empty = new ContainerDiskArgs();

    /**
     * The identifier for the datastore to create the
     * disk in (defaults to `local`).
     * 
     */
    @Import(name="datastoreId")
    private @Nullable Output<String> datastoreId;

    /**
     * @return The identifier for the datastore to create the
     * disk in (defaults to `local`).
     * 
     */
    public Optional<Output<String>> datastoreId() {
        return Optional.ofNullable(this.datastoreId);
    }

    /**
     * Volume size (only for volume mount points).
     * Can be specified with a unit suffix (e.g. `10G`).
     * 
     */
    @Import(name="size")
    private @Nullable Output<Integer> size;

    /**
     * @return Volume size (only for volume mount points).
     * Can be specified with a unit suffix (e.g. `10G`).
     * 
     */
    public Optional<Output<Integer>> size() {
        return Optional.ofNullable(this.size);
    }

    private ContainerDiskArgs() {}

    private ContainerDiskArgs(ContainerDiskArgs $) {
        this.datastoreId = $.datastoreId;
        this.size = $.size;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerDiskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerDiskArgs $;

        public Builder() {
            $ = new ContainerDiskArgs();
        }

        public Builder(ContainerDiskArgs defaults) {
            $ = new ContainerDiskArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param datastoreId The identifier for the datastore to create the
         * disk in (defaults to `local`).
         * 
         * @return builder
         * 
         */
        public Builder datastoreId(@Nullable Output<String> datastoreId) {
            $.datastoreId = datastoreId;
            return this;
        }

        /**
         * @param datastoreId The identifier for the datastore to create the
         * disk in (defaults to `local`).
         * 
         * @return builder
         * 
         */
        public Builder datastoreId(String datastoreId) {
            return datastoreId(Output.of(datastoreId));
        }

        /**
         * @param size Volume size (only for volume mount points).
         * Can be specified with a unit suffix (e.g. `10G`).
         * 
         * @return builder
         * 
         */
        public Builder size(@Nullable Output<Integer> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size Volume size (only for volume mount points).
         * Can be specified with a unit suffix (e.g. `10G`).
         * 
         * @return builder
         * 
         */
        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        public ContainerDiskArgs build() {
            return $;
        }
    }

}

// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.Network;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkVlanArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkVlanArgs Empty = new NetworkVlanArgs();

    /**
     * The interface IPv4/CIDR address.
     * 
     */
    @Import(name="address")
    private @Nullable Output<String> address;

    /**
     * @return The interface IPv4/CIDR address.
     * 
     */
    public Optional<Output<String>> address() {
        return Optional.ofNullable(this.address);
    }

    /**
     * The interface IPv6/CIDR address.
     * 
     */
    @Import(name="address6")
    private @Nullable Output<String> address6;

    /**
     * @return The interface IPv6/CIDR address.
     * 
     */
    public Optional<Output<String>> address6() {
        return Optional.ofNullable(this.address6);
    }

    /**
     * Automatically start interface on boot (defaults to `true`).
     * 
     */
    @Import(name="autostart")
    private @Nullable Output<Boolean> autostart;

    /**
     * @return Automatically start interface on boot (defaults to `true`).
     * 
     */
    public Optional<Output<Boolean>> autostart() {
        return Optional.ofNullable(this.autostart);
    }

    /**
     * Comment for the interface.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return Comment for the interface.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * Default gateway address.
     * 
     */
    @Import(name="gateway")
    private @Nullable Output<String> gateway;

    /**
     * @return Default gateway address.
     * 
     */
    public Optional<Output<String>> gateway() {
        return Optional.ofNullable(this.gateway);
    }

    /**
     * Default IPv6 gateway address.
     * 
     */
    @Import(name="gateway6")
    private @Nullable Output<String> gateway6;

    /**
     * @return Default IPv6 gateway address.
     * 
     */
    public Optional<Output<String>> gateway6() {
        return Optional.ofNullable(this.gateway6);
    }

    /**
     * The VLAN raw device. See also `name`.
     * 
     */
    @Import(name="interface")
    private @Nullable Output<String> interface_;

    /**
     * @return The VLAN raw device. See also `name`.
     * 
     */
    public Optional<Output<String>> interface_() {
        return Optional.ofNullable(this.interface_);
    }

    /**
     * The interface MTU.
     * 
     */
    @Import(name="mtu")
    private @Nullable Output<Integer> mtu;

    /**
     * @return The interface MTU.
     * 
     */
    public Optional<Output<Integer>> mtu() {
        return Optional.ofNullable(this.mtu);
    }

    /**
     * The interface name. Either add the VLAN tag number to an existing interface name, e.g. `ens18.21` (and do not set `interface` and `vlan`), or use custom name, e.g. `vlan_lab` (`interface` and `vlan` are then required).
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The interface name. Either add the VLAN tag number to an existing interface name, e.g. `ens18.21` (and do not set `interface` and `vlan`), or use custom name, e.g. `vlan_lab` (`interface` and `vlan` are then required).
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The name of the node.
     * 
     */
    @Import(name="nodeName", required=true)
    private Output<String> nodeName;

    /**
     * @return The name of the node.
     * 
     */
    public Output<String> nodeName() {
        return this.nodeName;
    }

    /**
     * The VLAN tag. See also `name`.
     * 
     */
    @Import(name="vlan")
    private @Nullable Output<Integer> vlan;

    /**
     * @return The VLAN tag. See also `name`.
     * 
     */
    public Optional<Output<Integer>> vlan() {
        return Optional.ofNullable(this.vlan);
    }

    private NetworkVlanArgs() {}

    private NetworkVlanArgs(NetworkVlanArgs $) {
        this.address = $.address;
        this.address6 = $.address6;
        this.autostart = $.autostart;
        this.comment = $.comment;
        this.gateway = $.gateway;
        this.gateway6 = $.gateway6;
        this.interface_ = $.interface_;
        this.mtu = $.mtu;
        this.name = $.name;
        this.nodeName = $.nodeName;
        this.vlan = $.vlan;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkVlanArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkVlanArgs $;

        public Builder() {
            $ = new NetworkVlanArgs();
        }

        public Builder(NetworkVlanArgs defaults) {
            $ = new NetworkVlanArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param address The interface IPv4/CIDR address.
         * 
         * @return builder
         * 
         */
        public Builder address(@Nullable Output<String> address) {
            $.address = address;
            return this;
        }

        /**
         * @param address The interface IPv4/CIDR address.
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            return address(Output.of(address));
        }

        /**
         * @param address6 The interface IPv6/CIDR address.
         * 
         * @return builder
         * 
         */
        public Builder address6(@Nullable Output<String> address6) {
            $.address6 = address6;
            return this;
        }

        /**
         * @param address6 The interface IPv6/CIDR address.
         * 
         * @return builder
         * 
         */
        public Builder address6(String address6) {
            return address6(Output.of(address6));
        }

        /**
         * @param autostart Automatically start interface on boot (defaults to `true`).
         * 
         * @return builder
         * 
         */
        public Builder autostart(@Nullable Output<Boolean> autostart) {
            $.autostart = autostart;
            return this;
        }

        /**
         * @param autostart Automatically start interface on boot (defaults to `true`).
         * 
         * @return builder
         * 
         */
        public Builder autostart(Boolean autostart) {
            return autostart(Output.of(autostart));
        }

        /**
         * @param comment Comment for the interface.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment Comment for the interface.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param gateway Default gateway address.
         * 
         * @return builder
         * 
         */
        public Builder gateway(@Nullable Output<String> gateway) {
            $.gateway = gateway;
            return this;
        }

        /**
         * @param gateway Default gateway address.
         * 
         * @return builder
         * 
         */
        public Builder gateway(String gateway) {
            return gateway(Output.of(gateway));
        }

        /**
         * @param gateway6 Default IPv6 gateway address.
         * 
         * @return builder
         * 
         */
        public Builder gateway6(@Nullable Output<String> gateway6) {
            $.gateway6 = gateway6;
            return this;
        }

        /**
         * @param gateway6 Default IPv6 gateway address.
         * 
         * @return builder
         * 
         */
        public Builder gateway6(String gateway6) {
            return gateway6(Output.of(gateway6));
        }

        /**
         * @param interface_ The VLAN raw device. See also `name`.
         * 
         * @return builder
         * 
         */
        public Builder interface_(@Nullable Output<String> interface_) {
            $.interface_ = interface_;
            return this;
        }

        /**
         * @param interface_ The VLAN raw device. See also `name`.
         * 
         * @return builder
         * 
         */
        public Builder interface_(String interface_) {
            return interface_(Output.of(interface_));
        }

        /**
         * @param mtu The interface MTU.
         * 
         * @return builder
         * 
         */
        public Builder mtu(@Nullable Output<Integer> mtu) {
            $.mtu = mtu;
            return this;
        }

        /**
         * @param mtu The interface MTU.
         * 
         * @return builder
         * 
         */
        public Builder mtu(Integer mtu) {
            return mtu(Output.of(mtu));
        }

        /**
         * @param name The interface name. Either add the VLAN tag number to an existing interface name, e.g. `ens18.21` (and do not set `interface` and `vlan`), or use custom name, e.g. `vlan_lab` (`interface` and `vlan` are then required).
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The interface name. Either add the VLAN tag number to an existing interface name, e.g. `ens18.21` (and do not set `interface` and `vlan`), or use custom name, e.g. `vlan_lab` (`interface` and `vlan` are then required).
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nodeName The name of the node.
         * 
         * @return builder
         * 
         */
        public Builder nodeName(Output<String> nodeName) {
            $.nodeName = nodeName;
            return this;
        }

        /**
         * @param nodeName The name of the node.
         * 
         * @return builder
         * 
         */
        public Builder nodeName(String nodeName) {
            return nodeName(Output.of(nodeName));
        }

        /**
         * @param vlan The VLAN tag. See also `name`.
         * 
         * @return builder
         * 
         */
        public Builder vlan(@Nullable Output<Integer> vlan) {
            $.vlan = vlan;
            return this;
        }

        /**
         * @param vlan The VLAN tag. See also `name`.
         * 
         * @return builder
         * 
         */
        public Builder vlan(Integer vlan) {
            return vlan(Output.of(vlan));
        }

        public NetworkVlanArgs build() {
            if ($.nodeName == null) {
                throw new MissingRequiredPropertyException("NetworkVlanArgs", "nodeName");
            }
            return $;
        }
    }

}

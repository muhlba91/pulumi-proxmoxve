// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.VM.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualMachineRngArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualMachineRngArgs Empty = new VirtualMachineRngArgs();

    /**
     * Maximum bytes of entropy allowed to get injected into the guest every `period` milliseconds (defaults to `1024`). Prefer a lower value when using `/dev/random` as source.
     * 
     */
    @Import(name="maxBytes")
    private @Nullable Output<Integer> maxBytes;

    /**
     * @return Maximum bytes of entropy allowed to get injected into the guest every `period` milliseconds (defaults to `1024`). Prefer a lower value when using `/dev/random` as source.
     * 
     */
    public Optional<Output<Integer>> maxBytes() {
        return Optional.ofNullable(this.maxBytes);
    }

    /**
     * Every `period` milliseconds the entropy-injection quota is reset, allowing the guest to retrieve another `max_bytes` of entropy (defaults to `1000`).
     * 
     */
    @Import(name="period")
    private @Nullable Output<Integer> period;

    /**
     * @return Every `period` milliseconds the entropy-injection quota is reset, allowing the guest to retrieve another `max_bytes` of entropy (defaults to `1000`).
     * 
     */
    public Optional<Output<Integer>> period() {
        return Optional.ofNullable(this.period);
    }

    /**
     * The file on the host to gather entropy from. In most cases, `/dev/urandom` should be preferred over `/dev/random` to avoid entropy-starvation issues on the host.
     * 
     */
    @Import(name="source", required=true)
    private Output<String> source;

    /**
     * @return The file on the host to gather entropy from. In most cases, `/dev/urandom` should be preferred over `/dev/random` to avoid entropy-starvation issues on the host.
     * 
     */
    public Output<String> source() {
        return this.source;
    }

    private VirtualMachineRngArgs() {}

    private VirtualMachineRngArgs(VirtualMachineRngArgs $) {
        this.maxBytes = $.maxBytes;
        this.period = $.period;
        this.source = $.source;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualMachineRngArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualMachineRngArgs $;

        public Builder() {
            $ = new VirtualMachineRngArgs();
        }

        public Builder(VirtualMachineRngArgs defaults) {
            $ = new VirtualMachineRngArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param maxBytes Maximum bytes of entropy allowed to get injected into the guest every `period` milliseconds (defaults to `1024`). Prefer a lower value when using `/dev/random` as source.
         * 
         * @return builder
         * 
         */
        public Builder maxBytes(@Nullable Output<Integer> maxBytes) {
            $.maxBytes = maxBytes;
            return this;
        }

        /**
         * @param maxBytes Maximum bytes of entropy allowed to get injected into the guest every `period` milliseconds (defaults to `1024`). Prefer a lower value when using `/dev/random` as source.
         * 
         * @return builder
         * 
         */
        public Builder maxBytes(Integer maxBytes) {
            return maxBytes(Output.of(maxBytes));
        }

        /**
         * @param period Every `period` milliseconds the entropy-injection quota is reset, allowing the guest to retrieve another `max_bytes` of entropy (defaults to `1000`).
         * 
         * @return builder
         * 
         */
        public Builder period(@Nullable Output<Integer> period) {
            $.period = period;
            return this;
        }

        /**
         * @param period Every `period` milliseconds the entropy-injection quota is reset, allowing the guest to retrieve another `max_bytes` of entropy (defaults to `1000`).
         * 
         * @return builder
         * 
         */
        public Builder period(Integer period) {
            return period(Output.of(period));
        }

        /**
         * @param source The file on the host to gather entropy from. In most cases, `/dev/urandom` should be preferred over `/dev/random` to avoid entropy-starvation issues on the host.
         * 
         * @return builder
         * 
         */
        public Builder source(Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source The file on the host to gather entropy from. In most cases, `/dev/urandom` should be preferred over `/dev/random` to avoid entropy-starvation issues on the host.
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        public VirtualMachineRngArgs build() {
            if ($.source == null) {
                throw new MissingRequiredPropertyException("VirtualMachineRngArgs", "source");
            }
            return $;
        }
    }

}

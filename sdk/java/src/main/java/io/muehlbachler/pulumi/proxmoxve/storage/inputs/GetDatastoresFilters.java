// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.Storage.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDatastoresFilters extends com.pulumi.resources.InvokeArgs {

    public static final GetDatastoresFilters Empty = new GetDatastoresFilters();

    /**
     * Only list stores with the given content types.
     * 
     */
    @Import(name="contentTypes")
    private @Nullable List<String> contentTypes;

    /**
     * @return Only list stores with the given content types.
     * 
     */
    public Optional<List<String>> contentTypes() {
        return Optional.ofNullable(this.contentTypes);
    }

    /**
     * Only list stores with the given ID.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    /**
     * @return Only list stores with the given ID.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * If `target` is different to `node_name`, then only lists shared stores which content is accessible on this node and the specified `target` node.
     * 
     */
    @Import(name="target")
    private @Nullable String target;

    /**
     * @return If `target` is different to `node_name`, then only lists shared stores which content is accessible on this node and the specified `target` node.
     * 
     */
    public Optional<String> target() {
        return Optional.ofNullable(this.target);
    }

    private GetDatastoresFilters() {}

    private GetDatastoresFilters(GetDatastoresFilters $) {
        this.contentTypes = $.contentTypes;
        this.id = $.id;
        this.target = $.target;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDatastoresFilters defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDatastoresFilters $;

        public Builder() {
            $ = new GetDatastoresFilters();
        }

        public Builder(GetDatastoresFilters defaults) {
            $ = new GetDatastoresFilters(Objects.requireNonNull(defaults));
        }

        /**
         * @param contentTypes Only list stores with the given content types.
         * 
         * @return builder
         * 
         */
        public Builder contentTypes(@Nullable List<String> contentTypes) {
            $.contentTypes = contentTypes;
            return this;
        }

        /**
         * @param contentTypes Only list stores with the given content types.
         * 
         * @return builder
         * 
         */
        public Builder contentTypes(String... contentTypes) {
            return contentTypes(List.of(contentTypes));
        }

        /**
         * @param id Only list stores with the given ID.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        /**
         * @param target If `target` is different to `node_name`, then only lists shared stores which content is accessible on this node and the specified `target` node.
         * 
         * @return builder
         * 
         */
        public Builder target(@Nullable String target) {
            $.target = target;
            return this;
        }

        public GetDatastoresFilters build() {
            return $;
        }
    }

}

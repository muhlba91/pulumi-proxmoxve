// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.Storage;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import io.muehlbachler.pulumi.proxmoxve.Storage.inputs.FileSourceFileArgs;
import io.muehlbachler.pulumi.proxmoxve.Storage.inputs.FileSourceRawArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FileArgs extends com.pulumi.resources.ResourceArgs {

    public static final FileArgs Empty = new FileArgs();

    /**
     * The content type
     * 
     */
    @Import(name="contentType")
    private @Nullable Output<String> contentType;

    /**
     * @return The content type
     * 
     */
    public Optional<Output<String>> contentType() {
        return Optional.ofNullable(this.contentType);
    }

    /**
     * The datastore id
     * 
     */
    @Import(name="datastoreId", required=true)
    private Output<String> datastoreId;

    /**
     * @return The datastore id
     * 
     */
    public Output<String> datastoreId() {
        return this.datastoreId;
    }

    /**
     * The node name
     * 
     */
    @Import(name="nodeName", required=true)
    private Output<String> nodeName;

    /**
     * @return The node name
     * 
     */
    public Output<String> nodeName() {
        return this.nodeName;
    }

    /**
     * The source file
     * 
     */
    @Import(name="sourceFile")
    private @Nullable Output<FileSourceFileArgs> sourceFile;

    /**
     * @return The source file
     * 
     */
    public Optional<Output<FileSourceFileArgs>> sourceFile() {
        return Optional.ofNullable(this.sourceFile);
    }

    /**
     * The raw source
     * 
     */
    @Import(name="sourceRaw")
    private @Nullable Output<FileSourceRawArgs> sourceRaw;

    /**
     * @return The raw source
     * 
     */
    public Optional<Output<FileSourceRawArgs>> sourceRaw() {
        return Optional.ofNullable(this.sourceRaw);
    }

    private FileArgs() {}

    private FileArgs(FileArgs $) {
        this.contentType = $.contentType;
        this.datastoreId = $.datastoreId;
        this.nodeName = $.nodeName;
        this.sourceFile = $.sourceFile;
        this.sourceRaw = $.sourceRaw;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FileArgs $;

        public Builder() {
            $ = new FileArgs();
        }

        public Builder(FileArgs defaults) {
            $ = new FileArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param contentType The content type
         * 
         * @return builder
         * 
         */
        public Builder contentType(@Nullable Output<String> contentType) {
            $.contentType = contentType;
            return this;
        }

        /**
         * @param contentType The content type
         * 
         * @return builder
         * 
         */
        public Builder contentType(String contentType) {
            return contentType(Output.of(contentType));
        }

        /**
         * @param datastoreId The datastore id
         * 
         * @return builder
         * 
         */
        public Builder datastoreId(Output<String> datastoreId) {
            $.datastoreId = datastoreId;
            return this;
        }

        /**
         * @param datastoreId The datastore id
         * 
         * @return builder
         * 
         */
        public Builder datastoreId(String datastoreId) {
            return datastoreId(Output.of(datastoreId));
        }

        /**
         * @param nodeName The node name
         * 
         * @return builder
         * 
         */
        public Builder nodeName(Output<String> nodeName) {
            $.nodeName = nodeName;
            return this;
        }

        /**
         * @param nodeName The node name
         * 
         * @return builder
         * 
         */
        public Builder nodeName(String nodeName) {
            return nodeName(Output.of(nodeName));
        }

        /**
         * @param sourceFile The source file
         * 
         * @return builder
         * 
         */
        public Builder sourceFile(@Nullable Output<FileSourceFileArgs> sourceFile) {
            $.sourceFile = sourceFile;
            return this;
        }

        /**
         * @param sourceFile The source file
         * 
         * @return builder
         * 
         */
        public Builder sourceFile(FileSourceFileArgs sourceFile) {
            return sourceFile(Output.of(sourceFile));
        }

        /**
         * @param sourceRaw The raw source
         * 
         * @return builder
         * 
         */
        public Builder sourceRaw(@Nullable Output<FileSourceRawArgs> sourceRaw) {
            $.sourceRaw = sourceRaw;
            return this;
        }

        /**
         * @param sourceRaw The raw source
         * 
         * @return builder
         * 
         */
        public Builder sourceRaw(FileSourceRawArgs sourceRaw) {
            return sourceRaw(Output.of(sourceRaw));
        }

        public FileArgs build() {
            $.datastoreId = Objects.requireNonNull($.datastoreId, "expected parameter 'datastoreId' to be non-null");
            $.nodeName = Objects.requireNonNull($.nodeName, "expected parameter 'nodeName' to be non-null");
            return $;
        }
    }

}

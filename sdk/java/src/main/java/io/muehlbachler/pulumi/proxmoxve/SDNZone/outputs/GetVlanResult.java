// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.SDNZone.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetVlanResult {
    /**
     * @return The local bridge or OVS switch, already configured on *each* node that allows node-to-node connection.
     * 
     */
    private String bridge;
    /**
     * @return DNS API server address.
     * 
     */
    private String dns;
    /**
     * @return DNS domain name. Used to register hostnames, such as `&lt;hostname&gt;.&lt;domain&gt;`. The DNS zone must already exist on the DNS server.
     * 
     */
    private String dnsZone;
    /**
     * @return The unique identifier of the SDN zone.
     * 
     */
    private String id;
    /**
     * @return IP Address Management system.
     * 
     */
    private String ipam;
    /**
     * @return MTU value for the zone.
     * 
     */
    private Integer mtu;
    /**
     * @return The Proxmox nodes which the zone and associated VNets are deployed on
     * 
     */
    private List<String> nodes;
    /**
     * @return Reverse DNS API server address.
     * 
     */
    private String reverseDns;

    private GetVlanResult() {}
    /**
     * @return The local bridge or OVS switch, already configured on *each* node that allows node-to-node connection.
     * 
     */
    public String bridge() {
        return this.bridge;
    }
    /**
     * @return DNS API server address.
     * 
     */
    public String dns() {
        return this.dns;
    }
    /**
     * @return DNS domain name. Used to register hostnames, such as `&lt;hostname&gt;.&lt;domain&gt;`. The DNS zone must already exist on the DNS server.
     * 
     */
    public String dnsZone() {
        return this.dnsZone;
    }
    /**
     * @return The unique identifier of the SDN zone.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return IP Address Management system.
     * 
     */
    public String ipam() {
        return this.ipam;
    }
    /**
     * @return MTU value for the zone.
     * 
     */
    public Integer mtu() {
        return this.mtu;
    }
    /**
     * @return The Proxmox nodes which the zone and associated VNets are deployed on
     * 
     */
    public List<String> nodes() {
        return this.nodes;
    }
    /**
     * @return Reverse DNS API server address.
     * 
     */
    public String reverseDns() {
        return this.reverseDns;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVlanResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String bridge;
        private String dns;
        private String dnsZone;
        private String id;
        private String ipam;
        private Integer mtu;
        private List<String> nodes;
        private String reverseDns;
        public Builder() {}
        public Builder(GetVlanResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bridge = defaults.bridge;
    	      this.dns = defaults.dns;
    	      this.dnsZone = defaults.dnsZone;
    	      this.id = defaults.id;
    	      this.ipam = defaults.ipam;
    	      this.mtu = defaults.mtu;
    	      this.nodes = defaults.nodes;
    	      this.reverseDns = defaults.reverseDns;
        }

        @CustomType.Setter
        public Builder bridge(String bridge) {
            if (bridge == null) {
              throw new MissingRequiredPropertyException("GetVlanResult", "bridge");
            }
            this.bridge = bridge;
            return this;
        }
        @CustomType.Setter
        public Builder dns(String dns) {
            if (dns == null) {
              throw new MissingRequiredPropertyException("GetVlanResult", "dns");
            }
            this.dns = dns;
            return this;
        }
        @CustomType.Setter
        public Builder dnsZone(String dnsZone) {
            if (dnsZone == null) {
              throw new MissingRequiredPropertyException("GetVlanResult", "dnsZone");
            }
            this.dnsZone = dnsZone;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetVlanResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipam(String ipam) {
            if (ipam == null) {
              throw new MissingRequiredPropertyException("GetVlanResult", "ipam");
            }
            this.ipam = ipam;
            return this;
        }
        @CustomType.Setter
        public Builder mtu(Integer mtu) {
            if (mtu == null) {
              throw new MissingRequiredPropertyException("GetVlanResult", "mtu");
            }
            this.mtu = mtu;
            return this;
        }
        @CustomType.Setter
        public Builder nodes(List<String> nodes) {
            if (nodes == null) {
              throw new MissingRequiredPropertyException("GetVlanResult", "nodes");
            }
            this.nodes = nodes;
            return this;
        }
        public Builder nodes(String... nodes) {
            return nodes(List.of(nodes));
        }
        @CustomType.Setter
        public Builder reverseDns(String reverseDns) {
            if (reverseDns == null) {
              throw new MissingRequiredPropertyException("GetVlanResult", "reverseDns");
            }
            this.reverseDns = reverseDns;
            return this;
        }
        public GetVlanResult build() {
            final var _resultValue = new GetVlanResult();
            _resultValue.bridge = bridge;
            _resultValue.dns = dns;
            _resultValue.dnsZone = dnsZone;
            _resultValue.id = id;
            _resultValue.ipam = ipam;
            _resultValue.mtu = mtu;
            _resultValue.nodes = nodes;
            _resultValue.reverseDns = reverseDns;
            return _resultValue;
        }
    }
}

// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.VM.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VirtualMachineCpu {
    /**
     * @return The CPU architecture (defaults to `x86_64`).
     * 
     */
    private @Nullable String architecture;
    /**
     * @return The number of CPU cores (defaults to `1`).
     * 
     */
    private @Nullable Integer cores;
    /**
     * @return The CPU flags.
     * - `+aes`/`-aes` - Activate AES instruction set for HW acceleration.
     * - `+amd-no-ssb`/`-amd-no-ssb` - Notifies guest OS that host is not
     *   vulnerable for Spectre on AMD CPUs.
     * - `+amd-ssbd`/`-amd-ssbd` - Improves Spectre mitigation performance with
     *   AMD CPUs, best used with &#34;virt-ssbd&#34;.
     * - `+hv-evmcs`/`-hv-evmcs` - Improve performance for nested
     *   virtualization (only supported on Intel CPUs).
     * - `+hv-tlbflush`/`-hv-tlbflush` - Improve performance in overcommitted
     *   Windows guests (may lead to guest BSOD on old CPUs).
     * - `+ibpb`/`-ibpb` - Allows improved Spectre mitigation on AMD CPUs.
     * - `+md-clear`/`-md-clear` - Required to let the guest OS know if MDS is
     *   mitigated correctly.
     * - `+pcid`/`-pcid` - Meltdown fix cost reduction on Westmere, Sandy- and
     *   Ivy Bridge Intel CPUs.
     * - `+pdpe1gb`/`-pdpe1gb` - Allows guest OS to use 1 GB size pages, if
     *   host HW supports it.
     * - `+spec-ctrl`/`-spec-ctrl` - Allows improved Spectre mitigation with
     *   Intel CPUs.
     * - `+ssbd`/`-ssbd` - Protection for &#34;Speculative Store Bypass&#34; for Intel
     *   models.
     * - `+virt-ssbd`/`-virt-ssbd` - Basis for &#34;Speculative Store Bypass&#34;
     *   protection for AMD models.
     * 
     */
    private @Nullable List<String> flags;
    /**
     * @return The number of hotplugged vCPUs (defaults
     * to `0`).
     * 
     */
    private @Nullable Integer hotplugged;
    /**
     * @return Limit of CPU usage, `0...128`. (defaults to `0` -- no limit).
     * 
     */
    private @Nullable Integer limit;
    /**
     * @return Enable/disable NUMA. (default to `false`)
     * 
     */
    private @Nullable Boolean numa;
    /**
     * @return The number of CPU sockets (defaults to `1`).
     * 
     */
    private @Nullable Integer sockets;
    /**
     * @return The VGA type (defaults to `std`).
     * 
     */
    private @Nullable String type;
    /**
     * @return The CPU units (defaults to `1024`).
     * 
     */
    private @Nullable Integer units;

    private VirtualMachineCpu() {}
    /**
     * @return The CPU architecture (defaults to `x86_64`).
     * 
     */
    public Optional<String> architecture() {
        return Optional.ofNullable(this.architecture);
    }
    /**
     * @return The number of CPU cores (defaults to `1`).
     * 
     */
    public Optional<Integer> cores() {
        return Optional.ofNullable(this.cores);
    }
    /**
     * @return The CPU flags.
     * - `+aes`/`-aes` - Activate AES instruction set for HW acceleration.
     * - `+amd-no-ssb`/`-amd-no-ssb` - Notifies guest OS that host is not
     *   vulnerable for Spectre on AMD CPUs.
     * - `+amd-ssbd`/`-amd-ssbd` - Improves Spectre mitigation performance with
     *   AMD CPUs, best used with &#34;virt-ssbd&#34;.
     * - `+hv-evmcs`/`-hv-evmcs` - Improve performance for nested
     *   virtualization (only supported on Intel CPUs).
     * - `+hv-tlbflush`/`-hv-tlbflush` - Improve performance in overcommitted
     *   Windows guests (may lead to guest BSOD on old CPUs).
     * - `+ibpb`/`-ibpb` - Allows improved Spectre mitigation on AMD CPUs.
     * - `+md-clear`/`-md-clear` - Required to let the guest OS know if MDS is
     *   mitigated correctly.
     * - `+pcid`/`-pcid` - Meltdown fix cost reduction on Westmere, Sandy- and
     *   Ivy Bridge Intel CPUs.
     * - `+pdpe1gb`/`-pdpe1gb` - Allows guest OS to use 1 GB size pages, if
     *   host HW supports it.
     * - `+spec-ctrl`/`-spec-ctrl` - Allows improved Spectre mitigation with
     *   Intel CPUs.
     * - `+ssbd`/`-ssbd` - Protection for &#34;Speculative Store Bypass&#34; for Intel
     *   models.
     * - `+virt-ssbd`/`-virt-ssbd` - Basis for &#34;Speculative Store Bypass&#34;
     *   protection for AMD models.
     * 
     */
    public List<String> flags() {
        return this.flags == null ? List.of() : this.flags;
    }
    /**
     * @return The number of hotplugged vCPUs (defaults
     * to `0`).
     * 
     */
    public Optional<Integer> hotplugged() {
        return Optional.ofNullable(this.hotplugged);
    }
    /**
     * @return Limit of CPU usage, `0...128`. (defaults to `0` -- no limit).
     * 
     */
    public Optional<Integer> limit() {
        return Optional.ofNullable(this.limit);
    }
    /**
     * @return Enable/disable NUMA. (default to `false`)
     * 
     */
    public Optional<Boolean> numa() {
        return Optional.ofNullable(this.numa);
    }
    /**
     * @return The number of CPU sockets (defaults to `1`).
     * 
     */
    public Optional<Integer> sockets() {
        return Optional.ofNullable(this.sockets);
    }
    /**
     * @return The VGA type (defaults to `std`).
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }
    /**
     * @return The CPU units (defaults to `1024`).
     * 
     */
    public Optional<Integer> units() {
        return Optional.ofNullable(this.units);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualMachineCpu defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String architecture;
        private @Nullable Integer cores;
        private @Nullable List<String> flags;
        private @Nullable Integer hotplugged;
        private @Nullable Integer limit;
        private @Nullable Boolean numa;
        private @Nullable Integer sockets;
        private @Nullable String type;
        private @Nullable Integer units;
        public Builder() {}
        public Builder(VirtualMachineCpu defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.architecture = defaults.architecture;
    	      this.cores = defaults.cores;
    	      this.flags = defaults.flags;
    	      this.hotplugged = defaults.hotplugged;
    	      this.limit = defaults.limit;
    	      this.numa = defaults.numa;
    	      this.sockets = defaults.sockets;
    	      this.type = defaults.type;
    	      this.units = defaults.units;
        }

        @CustomType.Setter
        public Builder architecture(@Nullable String architecture) {

            this.architecture = architecture;
            return this;
        }
        @CustomType.Setter
        public Builder cores(@Nullable Integer cores) {

            this.cores = cores;
            return this;
        }
        @CustomType.Setter
        public Builder flags(@Nullable List<String> flags) {

            this.flags = flags;
            return this;
        }
        public Builder flags(String... flags) {
            return flags(List.of(flags));
        }
        @CustomType.Setter
        public Builder hotplugged(@Nullable Integer hotplugged) {

            this.hotplugged = hotplugged;
            return this;
        }
        @CustomType.Setter
        public Builder limit(@Nullable Integer limit) {

            this.limit = limit;
            return this;
        }
        @CustomType.Setter
        public Builder numa(@Nullable Boolean numa) {

            this.numa = numa;
            return this;
        }
        @CustomType.Setter
        public Builder sockets(@Nullable Integer sockets) {

            this.sockets = sockets;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {

            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder units(@Nullable Integer units) {

            this.units = units;
            return this;
        }
        public VirtualMachineCpu build() {
            final var _resultValue = new VirtualMachineCpu();
            _resultValue.architecture = architecture;
            _resultValue.cores = cores;
            _resultValue.flags = flags;
            _resultValue.hotplugged = hotplugged;
            _resultValue.limit = limit;
            _resultValue.numa = numa;
            _resultValue.sockets = sockets;
            _resultValue.type = type;
            _resultValue.units = units;
            return _resultValue;
        }
    }
}

// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import io.muehlbachler.pulumi.proxmoxve.CertifiArgs;
import io.muehlbachler.pulumi.proxmoxve.Utilities;
import io.muehlbachler.pulumi.proxmoxve.inputs.CertifiState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages the custom SSL/TLS certificate for a specific node.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 */
@ResourceType(type="proxmoxve:index/certifi:Certifi")
public class Certifi extends com.pulumi.resources.CustomResource {
    /**
     * The PEM encoded certificate.
     * 
     */
    @Export(name="certificate", refs={String.class}, tree="[0]")
    private Output<String> certificate;

    /**
     * @return The PEM encoded certificate.
     * 
     */
    public Output<String> certificate() {
        return this.certificate;
    }
    /**
     * The PEM encoded certificate chain.
     * 
     */
    @Export(name="certificateChain", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> certificateChain;

    /**
     * @return The PEM encoded certificate chain.
     * 
     */
    public Output<Optional<String>> certificateChain() {
        return Codegen.optional(this.certificateChain);
    }
    /**
     * The expiration date (RFC 3339).
     * 
     */
    @Export(name="expirationDate", refs={String.class}, tree="[0]")
    private Output<String> expirationDate;

    /**
     * @return The expiration date (RFC 3339).
     * 
     */
    public Output<String> expirationDate() {
        return this.expirationDate;
    }
    /**
     * The file name.
     * 
     */
    @Export(name="fileName", refs={String.class}, tree="[0]")
    private Output<String> fileName;

    /**
     * @return The file name.
     * 
     */
    public Output<String> fileName() {
        return this.fileName;
    }
    /**
     * The issuer.
     * 
     */
    @Export(name="issuer", refs={String.class}, tree="[0]")
    private Output<String> issuer;

    /**
     * @return The issuer.
     * 
     */
    public Output<String> issuer() {
        return this.issuer;
    }
    /**
     * A node name.
     * 
     */
    @Export(name="nodeName", refs={String.class}, tree="[0]")
    private Output<String> nodeName;

    /**
     * @return A node name.
     * 
     */
    public Output<String> nodeName() {
        return this.nodeName;
    }
    /**
     * Whether to overwrite an existing certificate
     * 
     */
    @Export(name="overwrite", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> overwrite;

    /**
     * @return Whether to overwrite an existing certificate
     * 
     */
    public Output<Optional<Boolean>> overwrite() {
        return Codegen.optional(this.overwrite);
    }
    /**
     * The PEM encoded private key.
     * 
     */
    @Export(name="privateKey", refs={String.class}, tree="[0]")
    private Output<String> privateKey;

    /**
     * @return The PEM encoded private key.
     * 
     */
    public Output<String> privateKey() {
        return this.privateKey;
    }
    /**
     * The public key size.
     * 
     */
    @Export(name="publicKeySize", refs={Integer.class}, tree="[0]")
    private Output<Integer> publicKeySize;

    /**
     * @return The public key size.
     * 
     */
    public Output<Integer> publicKeySize() {
        return this.publicKeySize;
    }
    /**
     * The public key type.
     * 
     */
    @Export(name="publicKeyType", refs={String.class}, tree="[0]")
    private Output<String> publicKeyType;

    /**
     * @return The public key type.
     * 
     */
    public Output<String> publicKeyType() {
        return this.publicKeyType;
    }
    /**
     * The SSL fingerprint.
     * 
     */
    @Export(name="sslFingerprint", refs={String.class}, tree="[0]")
    private Output<String> sslFingerprint;

    /**
     * @return The SSL fingerprint.
     * 
     */
    public Output<String> sslFingerprint() {
        return this.sslFingerprint;
    }
    /**
     * The start date (RFC 3339).
     * 
     */
    @Export(name="startDate", refs={String.class}, tree="[0]")
    private Output<String> startDate;

    /**
     * @return The start date (RFC 3339).
     * 
     */
    public Output<String> startDate() {
        return this.startDate;
    }
    /**
     * The subject.
     * 
     */
    @Export(name="subject", refs={String.class}, tree="[0]")
    private Output<String> subject;

    /**
     * @return The subject.
     * 
     */
    public Output<String> subject() {
        return this.subject;
    }
    /**
     * The subject alternative names.
     * 
     */
    @Export(name="subjectAlternativeNames", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> subjectAlternativeNames;

    /**
     * @return The subject alternative names.
     * 
     */
    public Output<List<String>> subjectAlternativeNames() {
        return this.subjectAlternativeNames;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Certifi(java.lang.String name) {
        this(name, CertifiArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Certifi(java.lang.String name, CertifiArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Certifi(java.lang.String name, CertifiArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("proxmoxve:index/certifi:Certifi", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Certifi(java.lang.String name, Output<java.lang.String> id, @Nullable CertifiState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("proxmoxve:index/certifi:Certifi", name, state, makeResourceOptions(options, id), false);
    }

    private static CertifiArgs makeArgs(CertifiArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? CertifiArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "privateKey"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Certifi get(java.lang.String name, Output<java.lang.String> id, @Nullable CertifiState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Certifi(name, id, state, options);
    }
}

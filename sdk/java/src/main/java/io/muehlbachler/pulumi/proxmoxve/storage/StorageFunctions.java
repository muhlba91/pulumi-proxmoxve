// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.Storage;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import io.muehlbachler.pulumi.proxmoxve.Storage.inputs.GetDatastoresArgs;
import io.muehlbachler.pulumi.proxmoxve.Storage.inputs.GetDatastoresPlainArgs;
import io.muehlbachler.pulumi.proxmoxve.Storage.outputs.GetDatastoresResult;
import io.muehlbachler.pulumi.proxmoxve.Utilities;
import java.util.concurrent.CompletableFuture;

public final class StorageFunctions {
    /**
     * Retrieves information about all the datastores available to a specific node.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.proxmoxve.Storage.StorageFunctions;
     * import com.pulumi.proxmoxve.Storage.inputs.GetDatastoresArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var firstNode = StorageFunctions.getDatastores(GetDatastoresArgs.builder()
     *             .nodeName(&#34;first-node&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDatastoresResult> getDatastores(GetDatastoresArgs args) {
        return getDatastores(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves information about all the datastores available to a specific node.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.proxmoxve.Storage.StorageFunctions;
     * import com.pulumi.proxmoxve.Storage.inputs.GetDatastoresArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var firstNode = StorageFunctions.getDatastores(GetDatastoresArgs.builder()
     *             .nodeName(&#34;first-node&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDatastoresResult> getDatastoresPlain(GetDatastoresPlainArgs args) {
        return getDatastoresPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves information about all the datastores available to a specific node.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.proxmoxve.Storage.StorageFunctions;
     * import com.pulumi.proxmoxve.Storage.inputs.GetDatastoresArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var firstNode = StorageFunctions.getDatastores(GetDatastoresArgs.builder()
     *             .nodeName(&#34;first-node&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDatastoresResult> getDatastores(GetDatastoresArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("proxmoxve:Storage/getDatastores:getDatastores", TypeShape.of(GetDatastoresResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves information about all the datastores available to a specific node.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.proxmoxve.Storage.StorageFunctions;
     * import com.pulumi.proxmoxve.Storage.inputs.GetDatastoresArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var firstNode = StorageFunctions.getDatastores(GetDatastoresArgs.builder()
     *             .nodeName(&#34;first-node&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDatastoresResult> getDatastoresPlain(GetDatastoresPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("proxmoxve:Storage/getDatastores:getDatastores", TypeShape.of(GetDatastoresResult.class), args, Utilities.withVersion(options));
    }
}

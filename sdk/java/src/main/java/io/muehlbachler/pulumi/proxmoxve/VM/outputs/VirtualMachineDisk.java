// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.VM.outputs;

import com.pulumi.core.annotations.CustomType;
import io.muehlbachler.pulumi.proxmoxve.VM.outputs.VirtualMachineDiskSpeed;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VirtualMachineDisk {
    private @Nullable String cache;
    private @Nullable String datastoreId;
    private @Nullable String discard;
    private @Nullable String fileFormat;
    private @Nullable String fileId;
    private String interface_;
    private @Nullable Boolean iothread;
    private @Nullable Integer size;
    private @Nullable VirtualMachineDiskSpeed speed;
    private @Nullable Boolean ssd;

    private VirtualMachineDisk() {}
    public Optional<String> cache() {
        return Optional.ofNullable(this.cache);
    }
    public Optional<String> datastoreId() {
        return Optional.ofNullable(this.datastoreId);
    }
    public Optional<String> discard() {
        return Optional.ofNullable(this.discard);
    }
    public Optional<String> fileFormat() {
        return Optional.ofNullable(this.fileFormat);
    }
    public Optional<String> fileId() {
        return Optional.ofNullable(this.fileId);
    }
    public String interface_() {
        return this.interface_;
    }
    public Optional<Boolean> iothread() {
        return Optional.ofNullable(this.iothread);
    }
    public Optional<Integer> size() {
        return Optional.ofNullable(this.size);
    }
    public Optional<VirtualMachineDiskSpeed> speed() {
        return Optional.ofNullable(this.speed);
    }
    public Optional<Boolean> ssd() {
        return Optional.ofNullable(this.ssd);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualMachineDisk defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String cache;
        private @Nullable String datastoreId;
        private @Nullable String discard;
        private @Nullable String fileFormat;
        private @Nullable String fileId;
        private String interface_;
        private @Nullable Boolean iothread;
        private @Nullable Integer size;
        private @Nullable VirtualMachineDiskSpeed speed;
        private @Nullable Boolean ssd;
        public Builder() {}
        public Builder(VirtualMachineDisk defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cache = defaults.cache;
    	      this.datastoreId = defaults.datastoreId;
    	      this.discard = defaults.discard;
    	      this.fileFormat = defaults.fileFormat;
    	      this.fileId = defaults.fileId;
    	      this.interface_ = defaults.interface_;
    	      this.iothread = defaults.iothread;
    	      this.size = defaults.size;
    	      this.speed = defaults.speed;
    	      this.ssd = defaults.ssd;
        }

        @CustomType.Setter
        public Builder cache(@Nullable String cache) {
            this.cache = cache;
            return this;
        }
        @CustomType.Setter
        public Builder datastoreId(@Nullable String datastoreId) {
            this.datastoreId = datastoreId;
            return this;
        }
        @CustomType.Setter
        public Builder discard(@Nullable String discard) {
            this.discard = discard;
            return this;
        }
        @CustomType.Setter
        public Builder fileFormat(@Nullable String fileFormat) {
            this.fileFormat = fileFormat;
            return this;
        }
        @CustomType.Setter
        public Builder fileId(@Nullable String fileId) {
            this.fileId = fileId;
            return this;
        }
        @CustomType.Setter("interface")
        public Builder interface_(String interface_) {
            this.interface_ = Objects.requireNonNull(interface_);
            return this;
        }
        @CustomType.Setter
        public Builder iothread(@Nullable Boolean iothread) {
            this.iothread = iothread;
            return this;
        }
        @CustomType.Setter
        public Builder size(@Nullable Integer size) {
            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder speed(@Nullable VirtualMachineDiskSpeed speed) {
            this.speed = speed;
            return this;
        }
        @CustomType.Setter
        public Builder ssd(@Nullable Boolean ssd) {
            this.ssd = ssd;
            return this;
        }
        public VirtualMachineDisk build() {
            final var o = new VirtualMachineDisk();
            o.cache = cache;
            o.datastoreId = datastoreId;
            o.discard = discard;
            o.fileFormat = fileFormat;
            o.fileId = fileId;
            o.interface_ = interface_;
            o.iothread = iothread;
            o.size = size;
            o.speed = speed;
            o.ssd = ssd;
            return o;
        }
    }
}

// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.Permission.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import io.muehlbachler.pulumi.proxmoxve.Permission.inputs.GroupAclArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GroupState extends com.pulumi.resources.ResourceArgs {

    public static final GroupState Empty = new GroupState();

    /**
     * The access control list (multiple blocks supported).
     * 
     */
    @Import(name="acls")
    private @Nullable Output<List<GroupAclArgs>> acls;

    /**
     * @return The access control list (multiple blocks supported).
     * 
     */
    public Optional<Output<List<GroupAclArgs>>> acls() {
        return Optional.ofNullable(this.acls);
    }

    /**
     * The group comment.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return The group comment.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * The group identifier.
     * 
     */
    @Import(name="groupId")
    private @Nullable Output<String> groupId;

    /**
     * @return The group identifier.
     * 
     */
    public Optional<Output<String>> groupId() {
        return Optional.ofNullable(this.groupId);
    }

    /**
     * The group members as a list of `username@realm` entries
     * 
     */
    @Import(name="members")
    private @Nullable Output<List<String>> members;

    /**
     * @return The group members as a list of `username@realm` entries
     * 
     */
    public Optional<Output<List<String>>> members() {
        return Optional.ofNullable(this.members);
    }

    private GroupState() {}

    private GroupState(GroupState $) {
        this.acls = $.acls;
        this.comment = $.comment;
        this.groupId = $.groupId;
        this.members = $.members;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GroupState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GroupState $;

        public Builder() {
            $ = new GroupState();
        }

        public Builder(GroupState defaults) {
            $ = new GroupState(Objects.requireNonNull(defaults));
        }

        /**
         * @param acls The access control list (multiple blocks supported).
         * 
         * @return builder
         * 
         */
        public Builder acls(@Nullable Output<List<GroupAclArgs>> acls) {
            $.acls = acls;
            return this;
        }

        /**
         * @param acls The access control list (multiple blocks supported).
         * 
         * @return builder
         * 
         */
        public Builder acls(List<GroupAclArgs> acls) {
            return acls(Output.of(acls));
        }

        /**
         * @param acls The access control list (multiple blocks supported).
         * 
         * @return builder
         * 
         */
        public Builder acls(GroupAclArgs... acls) {
            return acls(List.of(acls));
        }

        /**
         * @param comment The group comment.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment The group comment.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param groupId The group identifier.
         * 
         * @return builder
         * 
         */
        public Builder groupId(@Nullable Output<String> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId The group identifier.
         * 
         * @return builder
         * 
         */
        public Builder groupId(String groupId) {
            return groupId(Output.of(groupId));
        }

        /**
         * @param members The group members as a list of `username@realm` entries
         * 
         * @return builder
         * 
         */
        public Builder members(@Nullable Output<List<String>> members) {
            $.members = members;
            return this;
        }

        /**
         * @param members The group members as a list of `username@realm` entries
         * 
         * @return builder
         * 
         */
        public Builder members(List<String> members) {
            return members(Output.of(members));
        }

        /**
         * @param members The group members as a list of `username@realm` entries
         * 
         * @return builder
         * 
         */
        public Builder members(String... members) {
            return members(List.of(members));
        }

        public GroupState build() {
            return $;
        }
    }

}

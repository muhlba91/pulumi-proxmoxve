// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.Cluster;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import io.muehlbachler.pulumi.proxmoxve.Cluster.OptionsArgs;
import io.muehlbachler.pulumi.proxmoxve.Cluster.inputs.OptionsState;
import io.muehlbachler.pulumi.proxmoxve.Cluster.outputs.OptionsNextId;
import io.muehlbachler.pulumi.proxmoxve.Cluster.outputs.OptionsNotify;
import io.muehlbachler.pulumi.proxmoxve.Utilities;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages Proxmox VE Cluster Datacenter options.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.proxmoxve.Cluster.Options;
 * import com.pulumi.proxmoxve.Cluster.OptionsArgs;
 * import com.pulumi.proxmoxve.Cluster.inputs.OptionsNextIdArgs;
 * import com.pulumi.proxmoxve.Cluster.inputs.OptionsNotifyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var options = new Options("options", OptionsArgs.builder()
 *             .bandwidthLimitDefault(666666)
 *             .bandwidthLimitMigration(555555)
 *             .emailFrom("ged}{@literal @}{@code gont.earthsea")
 *             .keyboard("pl")
 *             .language("en")
 *             .maxWorkers(5)
 *             .migrationCidr("10.0.0.0/8")
 *             .migrationType("secure")
 *             .nextId(OptionsNextIdArgs.builder()
 *                 .lower(100)
 *                 .upper(999999999)
 *                 .build())
 *             .notify(OptionsNotifyArgs.builder()
 *                 .ha_fencing_mode("never")
 *                 .ha_fencing_target("default-matcher")
 *                 .package_replication("always")
 *                 .package_replication_target("default-matcher")
 *                 .package_updates("always")
 *                 .package_updates_target("default-matcher")
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * #!/usr/bin/env sh
 * 
 * Cluster options are global and can be imported using e.g.:
 * 
 * ```sh
 * $ pulumi import proxmoxve:Cluster/options:Options options cluster
 * ```
 * 
 */
@ResourceType(type="proxmoxve:Cluster/options:Options")
public class Options extends com.pulumi.resources.CustomResource {
    /**
     * Clone I/O bandwidth limit in KiB/s.
     * 
     */
    @Export(name="bandwidthLimitClone", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> bandwidthLimitClone;

    /**
     * @return Clone I/O bandwidth limit in KiB/s.
     * 
     */
    public Output<Optional<Integer>> bandwidthLimitClone() {
        return Codegen.optional(this.bandwidthLimitClone);
    }
    /**
     * Default I/O bandwidth limit in KiB/s.
     * 
     */
    @Export(name="bandwidthLimitDefault", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> bandwidthLimitDefault;

    /**
     * @return Default I/O bandwidth limit in KiB/s.
     * 
     */
    public Output<Optional<Integer>> bandwidthLimitDefault() {
        return Codegen.optional(this.bandwidthLimitDefault);
    }
    /**
     * Migration I/O bandwidth limit in KiB/s.
     * 
     */
    @Export(name="bandwidthLimitMigration", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> bandwidthLimitMigration;

    /**
     * @return Migration I/O bandwidth limit in KiB/s.
     * 
     */
    public Output<Optional<Integer>> bandwidthLimitMigration() {
        return Codegen.optional(this.bandwidthLimitMigration);
    }
    /**
     * Move I/O bandwidth limit in KiB/s.
     * 
     */
    @Export(name="bandwidthLimitMove", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> bandwidthLimitMove;

    /**
     * @return Move I/O bandwidth limit in KiB/s.
     * 
     */
    public Output<Optional<Integer>> bandwidthLimitMove() {
        return Codegen.optional(this.bandwidthLimitMove);
    }
    /**
     * Restore I/O bandwidth limit in KiB/s.
     * 
     */
    @Export(name="bandwidthLimitRestore", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> bandwidthLimitRestore;

    /**
     * @return Restore I/O bandwidth limit in KiB/s.
     * 
     */
    public Output<Optional<Integer>> bandwidthLimitRestore() {
        return Codegen.optional(this.bandwidthLimitRestore);
    }
    /**
     * Select the default Console viewer. Must be `applet` | `vv`| `html5` | `xtermjs`. You can either use the builtin java applet (VNC; deprecated and maps to html5), an external virt-viewer compatible application (SPICE), an HTML5 based vnc viewer (noVNC), or an HTML5 based console client (xtermjs). If the selected viewer is not available (e.g. SPICE not activated for the VM), the fallback is noVNC.
     * 
     */
    @Export(name="console", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> console;

    /**
     * @return Select the default Console viewer. Must be `applet` | `vv`| `html5` | `xtermjs`. You can either use the builtin java applet (VNC; deprecated and maps to html5), an external virt-viewer compatible application (SPICE), an HTML5 based vnc viewer (noVNC), or an HTML5 based console client (xtermjs). If the selected viewer is not available (e.g. SPICE not activated for the VM), the fallback is noVNC.
     * 
     */
    public Output<Optional<String>> console() {
        return Codegen.optional(this.console);
    }
    /**
     * Cluster resource scheduling setting for HA. Must be `static` | `basic` (default is `basic`).
     * 
     */
    @Export(name="crsHa", refs={String.class}, tree="[0]")
    private Output<String> crsHa;

    /**
     * @return Cluster resource scheduling setting for HA. Must be `static` | `basic` (default is `basic`).
     * 
     */
    public Output<String> crsHa() {
        return this.crsHa;
    }
    /**
     * Cluster resource scheduling setting for HA rebalance on start.
     * 
     */
    @Export(name="crsHaRebalanceOnStart", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> crsHaRebalanceOnStart;

    /**
     * @return Cluster resource scheduling setting for HA rebalance on start.
     * 
     */
    public Output<Optional<Boolean>> crsHaRebalanceOnStart() {
        return Codegen.optional(this.crsHaRebalanceOnStart);
    }
    /**
     * Datacenter description. Shown in the web-interface datacenter notes panel. This is saved as comment inside the configuration file.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Datacenter description. Shown in the web-interface datacenter notes panel. This is saved as comment inside the configuration file.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * email address to send notification from (default is root{@literal @}$hostname).
     * 
     */
    @Export(name="emailFrom", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> emailFrom;

    /**
     * @return email address to send notification from (default is root{@literal @}$hostname).
     * 
     */
    public Output<Optional<String>> emailFrom() {
        return Codegen.optional(this.emailFrom);
    }
    /**
     * Cluster wide HA shutdown policy (). Must be `freeze` | `failover` | `migrate` | `conditional` (default is `conditional`).
     * 
     */
    @Export(name="haShutdownPolicy", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> haShutdownPolicy;

    /**
     * @return Cluster wide HA shutdown policy (). Must be `freeze` | `failover` | `migrate` | `conditional` (default is `conditional`).
     * 
     */
    public Output<Optional<String>> haShutdownPolicy() {
        return Codegen.optional(this.haShutdownPolicy);
    }
    /**
     * Specify external http proxy which is used for downloads (example: `http://username:password{@literal @}host:port/`).
     * 
     */
    @Export(name="httpProxy", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> httpProxy;

    /**
     * @return Specify external http proxy which is used for downloads (example: `http://username:password{@literal @}host:port/`).
     * 
     */
    public Output<Optional<String>> httpProxy() {
        return Codegen.optional(this.httpProxy);
    }
    /**
     * Default keyboard layout for vnc server. Must be `de` | `de-ch` | `da` | `en-gb` | `en-us` | `es` | `fi` | `fr` | `fr-be` | `fr-ca` | `fr-ch` | `hu` | `is` | `it` | `ja` | `lt` | `mk` | `nl` | `no` | `pl` | `pt` | `pt-br` | `sv` | `sl` | `tr`.
     * 
     */
    @Export(name="keyboard", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> keyboard;

    /**
     * @return Default keyboard layout for vnc server. Must be `de` | `de-ch` | `da` | `en-gb` | `en-us` | `es` | `fi` | `fr` | `fr-be` | `fr-ca` | `fr-ch` | `hu` | `is` | `it` | `ja` | `lt` | `mk` | `nl` | `no` | `pl` | `pt` | `pt-br` | `sv` | `sl` | `tr`.
     * 
     */
    public Output<Optional<String>> keyboard() {
        return Codegen.optional(this.keyboard);
    }
    /**
     * Default GUI language. Must be `ca` | `da` | `de` | `en` | `es` | `eu` | `fa` | `fr` | `he` | `it` | `ja` | `nb` | `nn` | `pl` | `pt_BR` | `ru` | `sl` | `sv` | `tr` | `zh_CN` | `zh_TW`.
     * 
     */
    @Export(name="language", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> language;

    /**
     * @return Default GUI language. Must be `ca` | `da` | `de` | `en` | `es` | `eu` | `fa` | `fr` | `he` | `it` | `ja` | `nb` | `nn` | `pl` | `pt_BR` | `ru` | `sl` | `sv` | `tr` | `zh_CN` | `zh_TW`.
     * 
     */
    public Output<Optional<String>> language() {
        return Codegen.optional(this.language);
    }
    /**
     * Prefix for autogenerated MAC addresses.
     * 
     */
    @Export(name="macPrefix", refs={String.class}, tree="[0]")
    private Output<String> macPrefix;

    /**
     * @return Prefix for autogenerated MAC addresses.
     * 
     */
    public Output<String> macPrefix() {
        return this.macPrefix;
    }
    /**
     * Defines how many workers (per node) are maximal started on actions like &#39;stopall VMs&#39; or task from the ha-manager.
     * 
     */
    @Export(name="maxWorkers", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> maxWorkers;

    /**
     * @return Defines how many workers (per node) are maximal started on actions like &#39;stopall VMs&#39; or task from the ha-manager.
     * 
     */
    public Output<Optional<Integer>> maxWorkers() {
        return Codegen.optional(this.maxWorkers);
    }
    /**
     * Cluster wide migration network CIDR.
     * 
     */
    @Export(name="migrationCidr", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> migrationCidr;

    /**
     * @return Cluster wide migration network CIDR.
     * 
     */
    public Output<Optional<String>> migrationCidr() {
        return Codegen.optional(this.migrationCidr);
    }
    /**
     * Cluster wide migration type. Must be `secure` | `unsecure` (default is `secure`).
     * 
     */
    @Export(name="migrationType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> migrationType;

    /**
     * @return Cluster wide migration type. Must be `secure` | `unsecure` (default is `secure`).
     * 
     */
    public Output<Optional<String>> migrationType() {
        return Codegen.optional(this.migrationType);
    }
    /**
     * The ranges for the next free VM ID auto-selection pool.
     * 
     */
    @Export(name="nextId", refs={OptionsNextId.class}, tree="[0]")
    private Output</* @Nullable */ OptionsNextId> nextId;

    /**
     * @return The ranges for the next free VM ID auto-selection pool.
     * 
     */
    public Output<Optional<OptionsNextId>> nextId() {
        return Codegen.optional(this.nextId);
    }
    /**
     * Cluster-wide notification settings.
     * 
     */
    @Export(name="notify", refs={OptionsNotify.class}, tree="[0]")
    private Output</* @Nullable */ OptionsNotify> notify;

    /**
     * @return Cluster-wide notification settings.
     * 
     */
    public Output<Optional<OptionsNotify>> notify_() {
        return Codegen.optional(this.notify);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Options(java.lang.String name) {
        this(name, OptionsArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Options(java.lang.String name, @Nullable OptionsArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Options(java.lang.String name, @Nullable OptionsArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("proxmoxve:Cluster/options:Options", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Options(java.lang.String name, Output<java.lang.String> id, @Nullable OptionsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("proxmoxve:Cluster/options:Options", name, state, makeResourceOptions(options, id), false);
    }

    private static OptionsArgs makeArgs(@Nullable OptionsArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? OptionsArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Options get(java.lang.String name, Output<java.lang.String> id, @Nullable OptionsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Options(name, id, state, options);
    }
}

// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.Download;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import io.muehlbachler.pulumi.proxmoxve.Download.FileArgs;
import io.muehlbachler.pulumi.proxmoxve.Download.inputs.FileState;
import io.muehlbachler.pulumi.proxmoxve.Utilities;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages files upload using PVE download-url API. It can be fully compatible and faster replacement for image files created using `proxmoxve.Storage.File`. Supports images for VMs (ISO images) and LXC (CT Templates).
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.proxmoxve.Download.File;
 * import com.pulumi.proxmoxve.Download.FileArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var release20231228Debian12BookwormQcow2Img = new File(&#34;release20231228Debian12BookwormQcow2Img&#34;, FileArgs.builder()        
 *             .checksum(&#34;d2fbcf11fb28795842e91364d8c7b69f1870db09ff299eb94e4fbbfa510eb78d141e74c1f4bf6dfa0b7e33d0c3b66e6751886feadb4e9916f778bab1776bdf1b&#34;)
 *             .checksumAlgorithm(&#34;sha512&#34;)
 *             .contentType(&#34;iso&#34;)
 *             .datastoreId(&#34;local&#34;)
 *             .fileName(&#34;debian-12-generic-amd64-20231228-1609.img&#34;)
 *             .nodeName(&#34;pve&#34;)
 *             .url(&#34;https://cloud.debian.org/images/cloud/bookworm/20231228-1609/debian-12-generic-amd64-20231228-1609.qcow2&#34;)
 *             .build());
 * 
 *         var latestDebian12BookwormQcow2Img = new File(&#34;latestDebian12BookwormQcow2Img&#34;, FileArgs.builder()        
 *             .contentType(&#34;iso&#34;)
 *             .datastoreId(&#34;local&#34;)
 *             .fileName(&#34;debian-12-generic-amd64.qcow2.img&#34;)
 *             .nodeName(&#34;pve&#34;)
 *             .url(&#34;https://cloud.debian.org/images/cloud/bookworm/latest/debian-12-generic-amd64.qcow2&#34;)
 *             .build());
 * 
 *         var latestUbuntu22JammyQcow2Img = new File(&#34;latestUbuntu22JammyQcow2Img&#34;, FileArgs.builder()        
 *             .contentType(&#34;iso&#34;)
 *             .datastoreId(&#34;local&#34;)
 *             .nodeName(&#34;pve&#34;)
 *             .url(&#34;https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.img&#34;)
 *             .build());
 * 
 *         var latestStaticUbuntu24NobleQcow2Img = new File(&#34;latestStaticUbuntu24NobleQcow2Img&#34;, FileArgs.builder()        
 *             .contentType(&#34;iso&#34;)
 *             .datastoreId(&#34;local&#34;)
 *             .nodeName(&#34;pve&#34;)
 *             .overwrite(false)
 *             .url(&#34;https://cloud-images.ubuntu.com/noble/current/noble-server-cloudimg-amd64.img&#34;)
 *             .build());
 * 
 *         var release20231211Ubuntu22JammyLxcImg = new File(&#34;release20231211Ubuntu22JammyLxcImg&#34;, FileArgs.builder()        
 *             .checksum(&#34;c9997dcfea5d826fd04871f960c513665f2e87dd7450bba99f68a97e60e4586e&#34;)
 *             .checksumAlgorithm(&#34;sha256&#34;)
 *             .contentType(&#34;vztmpl&#34;)
 *             .datastoreId(&#34;local&#34;)
 *             .nodeName(&#34;pve&#34;)
 *             .uploadTimeout(4444)
 *             .url(&#34;https://cloud-images.ubuntu.com/releases/22.04/release-20231211/ubuntu-22.04-server-cloudimg-amd64-root.tar.xz&#34;)
 *             .build());
 * 
 *         var latestUbuntu22JammyLxcImg = new File(&#34;latestUbuntu22JammyLxcImg&#34;, FileArgs.builder()        
 *             .contentType(&#34;vztmpl&#34;)
 *             .datastoreId(&#34;local&#34;)
 *             .nodeName(&#34;pve&#34;)
 *             .url(&#34;https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.tar.gz&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 */
@ResourceType(type="proxmoxve:Download/file:File")
public class File extends com.pulumi.resources.CustomResource {
    /**
     * The expected checksum of the file.
     * 
     */
    @Export(name="checksum", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> checksum;

    /**
     * @return The expected checksum of the file.
     * 
     */
    public Output<Optional<String>> checksum() {
        return Codegen.optional(this.checksum);
    }
    /**
     * The algorithm to calculate the checksum of the file. Must be `md5` | `sha1` | `sha224` | `sha256` | `sha384` | `sha512`.
     * 
     */
    @Export(name="checksumAlgorithm", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> checksumAlgorithm;

    /**
     * @return The algorithm to calculate the checksum of the file. Must be `md5` | `sha1` | `sha224` | `sha256` | `sha384` | `sha512`.
     * 
     */
    public Output<Optional<String>> checksumAlgorithm() {
        return Codegen.optional(this.checksumAlgorithm);
    }
    /**
     * The file content type. Must be `iso` for VM images or `vztmpl` for LXC images.
     * 
     */
    @Export(name="contentType", refs={String.class}, tree="[0]")
    private Output<String> contentType;

    /**
     * @return The file content type. Must be `iso` for VM images or `vztmpl` for LXC images.
     * 
     */
    public Output<String> contentType() {
        return this.contentType;
    }
    /**
     * The identifier for the target datastore.
     * 
     */
    @Export(name="datastoreId", refs={String.class}, tree="[0]")
    private Output<String> datastoreId;

    /**
     * @return The identifier for the target datastore.
     * 
     */
    public Output<String> datastoreId() {
        return this.datastoreId;
    }
    /**
     * Decompress the downloaded file using the specified compression algorithm. Must be one of `gz` | `lzo` | `zst`.
     * 
     */
    @Export(name="decompressionAlgorithm", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> decompressionAlgorithm;

    /**
     * @return Decompress the downloaded file using the specified compression algorithm. Must be one of `gz` | `lzo` | `zst`.
     * 
     */
    public Output<Optional<String>> decompressionAlgorithm() {
        return Codegen.optional(this.decompressionAlgorithm);
    }
    /**
     * The file name. If not provided, it is calculated using `url`. PVE will raise &#39;wrong file extension&#39; error for some popular extensions file `.raw` or `.qcow2`. Workaround is to use e.g. `.img` instead.
     * 
     */
    @Export(name="fileName", refs={String.class}, tree="[0]")
    private Output<String> fileName;

    /**
     * @return The file name. If not provided, it is calculated using `url`. PVE will raise &#39;wrong file extension&#39; error for some popular extensions file `.raw` or `.qcow2`. Workaround is to use e.g. `.img` instead.
     * 
     */
    public Output<String> fileName() {
        return this.fileName;
    }
    /**
     * The node name.
     * 
     */
    @Export(name="nodeName", refs={String.class}, tree="[0]")
    private Output<String> nodeName;

    /**
     * @return The node name.
     * 
     */
    public Output<String> nodeName() {
        return this.nodeName;
    }
    /**
     * If `true` and size of uploaded file is different, than size from `url` Content-Length header, file will be downloaded again. If `false`, there will be no checks.
     * 
     */
    @Export(name="overwrite", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> overwrite;

    /**
     * @return If `true` and size of uploaded file is different, than size from `url` Content-Length header, file will be downloaded again. If `false`, there will be no checks.
     * 
     */
    public Output<Boolean> overwrite() {
        return this.overwrite;
    }
    /**
     * If `true` and a file with the same name already exists in the datastore, it will be deleted and the new file will be downloaded. If `false` and the file already exists, an error will be returned.
     * 
     */
    @Export(name="overwriteUnmanaged", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> overwriteUnmanaged;

    /**
     * @return If `true` and a file with the same name already exists in the datastore, it will be deleted and the new file will be downloaded. If `false` and the file already exists, an error will be returned.
     * 
     */
    public Output<Boolean> overwriteUnmanaged() {
        return this.overwriteUnmanaged;
    }
    /**
     * The file size.
     * 
     */
    @Export(name="size", refs={Integer.class}, tree="[0]")
    private Output<Integer> size;

    /**
     * @return The file size.
     * 
     */
    public Output<Integer> size() {
        return this.size;
    }
    /**
     * The file download timeout seconds. Default is 600 (10min).
     * 
     */
    @Export(name="uploadTimeout", refs={Integer.class}, tree="[0]")
    private Output<Integer> uploadTimeout;

    /**
     * @return The file download timeout seconds. Default is 600 (10min).
     * 
     */
    public Output<Integer> uploadTimeout() {
        return this.uploadTimeout;
    }
    /**
     * The URL to download the file from. Format `https?://.*`.
     * 
     */
    @Export(name="url", refs={String.class}, tree="[0]")
    private Output<String> url;

    /**
     * @return The URL to download the file from. Format `https?://.*`.
     * 
     */
    public Output<String> url() {
        return this.url;
    }
    /**
     * By default `true`. If `false`, no SSL/TLS certificates will be verified.
     * 
     */
    @Export(name="verify", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> verify;

    /**
     * @return By default `true`. If `false`, no SSL/TLS certificates will be verified.
     * 
     */
    public Output<Boolean> verify() {
        return this.verify;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public File(String name) {
        this(name, FileArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public File(String name, FileArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public File(String name, FileArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("proxmoxve:Download/file:File", name, args == null ? FileArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private File(String name, Output<String> id, @Nullable FileState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("proxmoxve:Download/file:File", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static File get(String name, Output<String> id, @Nullable FileState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new File(name, id, state, options);
    }
}

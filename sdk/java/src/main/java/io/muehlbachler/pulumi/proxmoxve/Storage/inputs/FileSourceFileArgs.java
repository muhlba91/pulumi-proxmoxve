// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.Storage.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FileSourceFileArgs extends com.pulumi.resources.ResourceArgs {

    public static final FileSourceFileArgs Empty = new FileSourceFileArgs();

    /**
     * Whether the source file has changed since the last run
     * 
     */
    @Import(name="changed")
    private @Nullable Output<Boolean> changed;

    /**
     * @return Whether the source file has changed since the last run
     * 
     */
    public Optional<Output<Boolean>> changed() {
        return Optional.ofNullable(this.changed);
    }

    /**
     * The SHA256 checksum of the source file.
     * 
     */
    @Import(name="checksum")
    private @Nullable Output<String> checksum;

    /**
     * @return The SHA256 checksum of the source file.
     * 
     */
    public Optional<Output<String>> checksum() {
        return Optional.ofNullable(this.checksum);
    }

    /**
     * The file name.
     * 
     */
    @Import(name="fileName")
    private @Nullable Output<String> fileName;

    /**
     * @return The file name.
     * 
     */
    public Optional<Output<String>> fileName() {
        return Optional.ofNullable(this.fileName);
    }

    /**
     * Whether to skip the TLS verification step for
     * HTTPS sources (defaults to `false`).
     * 
     */
    @Import(name="insecure")
    private @Nullable Output<Boolean> insecure;

    /**
     * @return Whether to skip the TLS verification step for
     * HTTPS sources (defaults to `false`).
     * 
     */
    public Optional<Output<Boolean>> insecure() {
        return Optional.ofNullable(this.insecure);
    }

    /**
     * The minimum required TLS version for HTTPS
     * sources. &#34;Supported values: `1.0|1.1|1.2|1.3` (defaults to `1.3`).
     * 
     */
    @Import(name="minTls")
    private @Nullable Output<String> minTls;

    /**
     * @return The minimum required TLS version for HTTPS
     * sources. &#34;Supported values: `1.0|1.1|1.2|1.3` (defaults to `1.3`).
     * 
     */
    public Optional<Output<String>> minTls() {
        return Optional.ofNullable(this.minTls);
    }

    /**
     * A path to a local file or a URL.
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    /**
     * @return A path to a local file or a URL.
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    private FileSourceFileArgs() {}

    private FileSourceFileArgs(FileSourceFileArgs $) {
        this.changed = $.changed;
        this.checksum = $.checksum;
        this.fileName = $.fileName;
        this.insecure = $.insecure;
        this.minTls = $.minTls;
        this.path = $.path;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FileSourceFileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FileSourceFileArgs $;

        public Builder() {
            $ = new FileSourceFileArgs();
        }

        public Builder(FileSourceFileArgs defaults) {
            $ = new FileSourceFileArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param changed Whether the source file has changed since the last run
         * 
         * @return builder
         * 
         */
        public Builder changed(@Nullable Output<Boolean> changed) {
            $.changed = changed;
            return this;
        }

        /**
         * @param changed Whether the source file has changed since the last run
         * 
         * @return builder
         * 
         */
        public Builder changed(Boolean changed) {
            return changed(Output.of(changed));
        }

        /**
         * @param checksum The SHA256 checksum of the source file.
         * 
         * @return builder
         * 
         */
        public Builder checksum(@Nullable Output<String> checksum) {
            $.checksum = checksum;
            return this;
        }

        /**
         * @param checksum The SHA256 checksum of the source file.
         * 
         * @return builder
         * 
         */
        public Builder checksum(String checksum) {
            return checksum(Output.of(checksum));
        }

        /**
         * @param fileName The file name.
         * 
         * @return builder
         * 
         */
        public Builder fileName(@Nullable Output<String> fileName) {
            $.fileName = fileName;
            return this;
        }

        /**
         * @param fileName The file name.
         * 
         * @return builder
         * 
         */
        public Builder fileName(String fileName) {
            return fileName(Output.of(fileName));
        }

        /**
         * @param insecure Whether to skip the TLS verification step for
         * HTTPS sources (defaults to `false`).
         * 
         * @return builder
         * 
         */
        public Builder insecure(@Nullable Output<Boolean> insecure) {
            $.insecure = insecure;
            return this;
        }

        /**
         * @param insecure Whether to skip the TLS verification step for
         * HTTPS sources (defaults to `false`).
         * 
         * @return builder
         * 
         */
        public Builder insecure(Boolean insecure) {
            return insecure(Output.of(insecure));
        }

        /**
         * @param minTls The minimum required TLS version for HTTPS
         * sources. &#34;Supported values: `1.0|1.1|1.2|1.3` (defaults to `1.3`).
         * 
         * @return builder
         * 
         */
        public Builder minTls(@Nullable Output<String> minTls) {
            $.minTls = minTls;
            return this;
        }

        /**
         * @param minTls The minimum required TLS version for HTTPS
         * sources. &#34;Supported values: `1.0|1.1|1.2|1.3` (defaults to `1.3`).
         * 
         * @return builder
         * 
         */
        public Builder minTls(String minTls) {
            return minTls(Output.of(minTls));
        }

        /**
         * @param path A path to a local file or a URL.
         * 
         * @return builder
         * 
         */
        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path A path to a local file or a URL.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        public FileSourceFileArgs build() {
            $.path = Objects.requireNonNull($.path, "expected parameter 'path' to be non-null");
            return $;
        }
    }

}

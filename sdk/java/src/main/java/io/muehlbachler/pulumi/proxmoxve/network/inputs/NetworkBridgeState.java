// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.Network.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkBridgeState extends com.pulumi.resources.ResourceArgs {

    public static final NetworkBridgeState Empty = new NetworkBridgeState();

    /**
     * The interface IPv4/CIDR address.
     * 
     */
    @Import(name="address")
    private @Nullable Output<String> address;

    /**
     * @return The interface IPv4/CIDR address.
     * 
     */
    public Optional<Output<String>> address() {
        return Optional.ofNullable(this.address);
    }

    /**
     * The interface IPv6/CIDR address.
     * 
     */
    @Import(name="address6")
    private @Nullable Output<String> address6;

    /**
     * @return The interface IPv6/CIDR address.
     * 
     */
    public Optional<Output<String>> address6() {
        return Optional.ofNullable(this.address6);
    }

    /**
     * Automatically start interface on boot (defaults to `true`).
     * 
     */
    @Import(name="autostart")
    private @Nullable Output<Boolean> autostart;

    /**
     * @return Automatically start interface on boot (defaults to `true`).
     * 
     */
    public Optional<Output<Boolean>> autostart() {
        return Optional.ofNullable(this.autostart);
    }

    /**
     * Comment for the interface.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return Comment for the interface.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * Default gateway address.
     * 
     */
    @Import(name="gateway")
    private @Nullable Output<String> gateway;

    /**
     * @return Default gateway address.
     * 
     */
    public Optional<Output<String>> gateway() {
        return Optional.ofNullable(this.gateway);
    }

    /**
     * Default IPv6 gateway address.
     * 
     */
    @Import(name="gateway6")
    private @Nullable Output<String> gateway6;

    /**
     * @return Default IPv6 gateway address.
     * 
     */
    public Optional<Output<String>> gateway6() {
        return Optional.ofNullable(this.gateway6);
    }

    /**
     * The interface MTU.
     * 
     */
    @Import(name="mtu")
    private @Nullable Output<Integer> mtu;

    /**
     * @return The interface MTU.
     * 
     */
    public Optional<Output<Integer>> mtu() {
        return Optional.ofNullable(this.mtu);
    }

    /**
     * The interface name. Must be `vmbrN`, where N is a number between 0 and 9999.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The interface name. Must be `vmbrN`, where N is a number between 0 and 9999.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The name of the node.
     * 
     */
    @Import(name="nodeName")
    private @Nullable Output<String> nodeName;

    /**
     * @return The name of the node.
     * 
     */
    public Optional<Output<String>> nodeName() {
        return Optional.ofNullable(this.nodeName);
    }

    /**
     * The interface bridge ports.
     * 
     */
    @Import(name="ports")
    private @Nullable Output<List<String>> ports;

    /**
     * @return The interface bridge ports.
     * 
     */
    public Optional<Output<List<String>>> ports() {
        return Optional.ofNullable(this.ports);
    }

    /**
     * Whether the interface bridge is VLAN aware (defaults to `false`).
     * 
     */
    @Import(name="vlanAware")
    private @Nullable Output<Boolean> vlanAware;

    /**
     * @return Whether the interface bridge is VLAN aware (defaults to `false`).
     * 
     */
    public Optional<Output<Boolean>> vlanAware() {
        return Optional.ofNullable(this.vlanAware);
    }

    private NetworkBridgeState() {}

    private NetworkBridgeState(NetworkBridgeState $) {
        this.address = $.address;
        this.address6 = $.address6;
        this.autostart = $.autostart;
        this.comment = $.comment;
        this.gateway = $.gateway;
        this.gateway6 = $.gateway6;
        this.mtu = $.mtu;
        this.name = $.name;
        this.nodeName = $.nodeName;
        this.ports = $.ports;
        this.vlanAware = $.vlanAware;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkBridgeState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkBridgeState $;

        public Builder() {
            $ = new NetworkBridgeState();
        }

        public Builder(NetworkBridgeState defaults) {
            $ = new NetworkBridgeState(Objects.requireNonNull(defaults));
        }

        /**
         * @param address The interface IPv4/CIDR address.
         * 
         * @return builder
         * 
         */
        public Builder address(@Nullable Output<String> address) {
            $.address = address;
            return this;
        }

        /**
         * @param address The interface IPv4/CIDR address.
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            return address(Output.of(address));
        }

        /**
         * @param address6 The interface IPv6/CIDR address.
         * 
         * @return builder
         * 
         */
        public Builder address6(@Nullable Output<String> address6) {
            $.address6 = address6;
            return this;
        }

        /**
         * @param address6 The interface IPv6/CIDR address.
         * 
         * @return builder
         * 
         */
        public Builder address6(String address6) {
            return address6(Output.of(address6));
        }

        /**
         * @param autostart Automatically start interface on boot (defaults to `true`).
         * 
         * @return builder
         * 
         */
        public Builder autostart(@Nullable Output<Boolean> autostart) {
            $.autostart = autostart;
            return this;
        }

        /**
         * @param autostart Automatically start interface on boot (defaults to `true`).
         * 
         * @return builder
         * 
         */
        public Builder autostart(Boolean autostart) {
            return autostart(Output.of(autostart));
        }

        /**
         * @param comment Comment for the interface.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment Comment for the interface.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param gateway Default gateway address.
         * 
         * @return builder
         * 
         */
        public Builder gateway(@Nullable Output<String> gateway) {
            $.gateway = gateway;
            return this;
        }

        /**
         * @param gateway Default gateway address.
         * 
         * @return builder
         * 
         */
        public Builder gateway(String gateway) {
            return gateway(Output.of(gateway));
        }

        /**
         * @param gateway6 Default IPv6 gateway address.
         * 
         * @return builder
         * 
         */
        public Builder gateway6(@Nullable Output<String> gateway6) {
            $.gateway6 = gateway6;
            return this;
        }

        /**
         * @param gateway6 Default IPv6 gateway address.
         * 
         * @return builder
         * 
         */
        public Builder gateway6(String gateway6) {
            return gateway6(Output.of(gateway6));
        }

        /**
         * @param mtu The interface MTU.
         * 
         * @return builder
         * 
         */
        public Builder mtu(@Nullable Output<Integer> mtu) {
            $.mtu = mtu;
            return this;
        }

        /**
         * @param mtu The interface MTU.
         * 
         * @return builder
         * 
         */
        public Builder mtu(Integer mtu) {
            return mtu(Output.of(mtu));
        }

        /**
         * @param name The interface name. Must be `vmbrN`, where N is a number between 0 and 9999.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The interface name. Must be `vmbrN`, where N is a number between 0 and 9999.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nodeName The name of the node.
         * 
         * @return builder
         * 
         */
        public Builder nodeName(@Nullable Output<String> nodeName) {
            $.nodeName = nodeName;
            return this;
        }

        /**
         * @param nodeName The name of the node.
         * 
         * @return builder
         * 
         */
        public Builder nodeName(String nodeName) {
            return nodeName(Output.of(nodeName));
        }

        /**
         * @param ports The interface bridge ports.
         * 
         * @return builder
         * 
         */
        public Builder ports(@Nullable Output<List<String>> ports) {
            $.ports = ports;
            return this;
        }

        /**
         * @param ports The interface bridge ports.
         * 
         * @return builder
         * 
         */
        public Builder ports(List<String> ports) {
            return ports(Output.of(ports));
        }

        /**
         * @param ports The interface bridge ports.
         * 
         * @return builder
         * 
         */
        public Builder ports(String... ports) {
            return ports(List.of(ports));
        }

        /**
         * @param vlanAware Whether the interface bridge is VLAN aware (defaults to `false`).
         * 
         * @return builder
         * 
         */
        public Builder vlanAware(@Nullable Output<Boolean> vlanAware) {
            $.vlanAware = vlanAware;
            return this;
        }

        /**
         * @param vlanAware Whether the interface bridge is VLAN aware (defaults to `false`).
         * 
         * @return builder
         * 
         */
        public Builder vlanAware(Boolean vlanAware) {
            return vlanAware(Output.of(vlanAware));
        }

        public NetworkBridgeState build() {
            return $;
        }
    }

}

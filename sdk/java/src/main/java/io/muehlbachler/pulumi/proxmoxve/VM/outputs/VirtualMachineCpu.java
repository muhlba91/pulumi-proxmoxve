// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.VM.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VirtualMachineCpu {
    private @Nullable String architecture;
    private @Nullable Integer cores;
    private @Nullable List<String> flags;
    private @Nullable Integer hotplugged;
    private @Nullable Boolean numa;
    private @Nullable Integer sockets;
    private @Nullable String type;
    private @Nullable Integer units;

    private VirtualMachineCpu() {}
    public Optional<String> architecture() {
        return Optional.ofNullable(this.architecture);
    }
    public Optional<Integer> cores() {
        return Optional.ofNullable(this.cores);
    }
    public List<String> flags() {
        return this.flags == null ? List.of() : this.flags;
    }
    public Optional<Integer> hotplugged() {
        return Optional.ofNullable(this.hotplugged);
    }
    public Optional<Boolean> numa() {
        return Optional.ofNullable(this.numa);
    }
    public Optional<Integer> sockets() {
        return Optional.ofNullable(this.sockets);
    }
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }
    public Optional<Integer> units() {
        return Optional.ofNullable(this.units);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualMachineCpu defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String architecture;
        private @Nullable Integer cores;
        private @Nullable List<String> flags;
        private @Nullable Integer hotplugged;
        private @Nullable Boolean numa;
        private @Nullable Integer sockets;
        private @Nullable String type;
        private @Nullable Integer units;
        public Builder() {}
        public Builder(VirtualMachineCpu defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.architecture = defaults.architecture;
    	      this.cores = defaults.cores;
    	      this.flags = defaults.flags;
    	      this.hotplugged = defaults.hotplugged;
    	      this.numa = defaults.numa;
    	      this.sockets = defaults.sockets;
    	      this.type = defaults.type;
    	      this.units = defaults.units;
        }

        @CustomType.Setter
        public Builder architecture(@Nullable String architecture) {
            this.architecture = architecture;
            return this;
        }
        @CustomType.Setter
        public Builder cores(@Nullable Integer cores) {
            this.cores = cores;
            return this;
        }
        @CustomType.Setter
        public Builder flags(@Nullable List<String> flags) {
            this.flags = flags;
            return this;
        }
        public Builder flags(String... flags) {
            return flags(List.of(flags));
        }
        @CustomType.Setter
        public Builder hotplugged(@Nullable Integer hotplugged) {
            this.hotplugged = hotplugged;
            return this;
        }
        @CustomType.Setter
        public Builder numa(@Nullable Boolean numa) {
            this.numa = numa;
            return this;
        }
        @CustomType.Setter
        public Builder sockets(@Nullable Integer sockets) {
            this.sockets = sockets;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder units(@Nullable Integer units) {
            this.units = units;
            return this;
        }
        public VirtualMachineCpu build() {
            final var o = new VirtualMachineCpu();
            o.architecture = architecture;
            o.cores = cores;
            o.flags = flags;
            o.hotplugged = hotplugged;
            o.numa = numa;
            o.sockets = sockets;
            o.type = type;
            o.units = units;
            return o;
        }
    }
}

// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.CT;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import io.muehlbachler.pulumi.proxmoxve.CT.ContainerArgs;
import io.muehlbachler.pulumi.proxmoxve.CT.inputs.ContainerState;
import io.muehlbachler.pulumi.proxmoxve.CT.outputs.ContainerClone;
import io.muehlbachler.pulumi.proxmoxve.CT.outputs.ContainerConsole;
import io.muehlbachler.pulumi.proxmoxve.CT.outputs.ContainerCpu;
import io.muehlbachler.pulumi.proxmoxve.CT.outputs.ContainerDisk;
import io.muehlbachler.pulumi.proxmoxve.CT.outputs.ContainerFeatures;
import io.muehlbachler.pulumi.proxmoxve.CT.outputs.ContainerInitialization;
import io.muehlbachler.pulumi.proxmoxve.CT.outputs.ContainerMemory;
import io.muehlbachler.pulumi.proxmoxve.CT.outputs.ContainerMountPoint;
import io.muehlbachler.pulumi.proxmoxve.CT.outputs.ContainerNetworkInterface;
import io.muehlbachler.pulumi.proxmoxve.CT.outputs.ContainerOperatingSystem;
import io.muehlbachler.pulumi.proxmoxve.Utilities;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="proxmoxve:CT/container:Container")
public class Container extends com.pulumi.resources.CustomResource {
    /**
     * The cloning configuration
     * 
     */
    @Export(name="clone", refs={ContainerClone.class}, tree="[0]")
    private Output</* @Nullable */ ContainerClone> clone;

    /**
     * @return The cloning configuration
     * 
     */
    public Output<Optional<ContainerClone>> clone_() {
        return Codegen.optional(this.clone);
    }
    /**
     * The console configuration
     * 
     */
    @Export(name="console", refs={ContainerConsole.class}, tree="[0]")
    private Output</* @Nullable */ ContainerConsole> console;

    /**
     * @return The console configuration
     * 
     */
    public Output<Optional<ContainerConsole>> console() {
        return Codegen.optional(this.console);
    }
    /**
     * The CPU allocation
     * 
     */
    @Export(name="cpu", refs={ContainerCpu.class}, tree="[0]")
    private Output</* @Nullable */ ContainerCpu> cpu;

    /**
     * @return The CPU allocation
     * 
     */
    public Output<Optional<ContainerCpu>> cpu() {
        return Codegen.optional(this.cpu);
    }
    /**
     * The description
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return The description
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * The disks
     * 
     */
    @Export(name="disk", refs={ContainerDisk.class}, tree="[0]")
    private Output</* @Nullable */ ContainerDisk> disk;

    /**
     * @return The disks
     * 
     */
    public Output<Optional<ContainerDisk>> disk() {
        return Codegen.optional(this.disk);
    }
    /**
     * Features
     * 
     */
    @Export(name="features", refs={ContainerFeatures.class}, tree="[0]")
    private Output</* @Nullable */ ContainerFeatures> features;

    /**
     * @return Features
     * 
     */
    public Output<Optional<ContainerFeatures>> features() {
        return Codegen.optional(this.features);
    }
    /**
     * The initialization configuration
     * 
     */
    @Export(name="initialization", refs={ContainerInitialization.class}, tree="[0]")
    private Output</* @Nullable */ ContainerInitialization> initialization;

    /**
     * @return The initialization configuration
     * 
     */
    public Output<Optional<ContainerInitialization>> initialization() {
        return Codegen.optional(this.initialization);
    }
    /**
     * The memory allocation
     * 
     */
    @Export(name="memory", refs={ContainerMemory.class}, tree="[0]")
    private Output</* @Nullable */ ContainerMemory> memory;

    /**
     * @return The memory allocation
     * 
     */
    public Output<Optional<ContainerMemory>> memory() {
        return Codegen.optional(this.memory);
    }
    /**
     * A mount point
     * 
     */
    @Export(name="mountPoints", refs={List.class,ContainerMountPoint.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ContainerMountPoint>> mountPoints;

    /**
     * @return A mount point
     * 
     */
    public Output<Optional<List<ContainerMountPoint>>> mountPoints() {
        return Codegen.optional(this.mountPoints);
    }
    /**
     * The network interfaces
     * 
     */
    @Export(name="networkInterfaces", refs={List.class,ContainerNetworkInterface.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ContainerNetworkInterface>> networkInterfaces;

    /**
     * @return The network interfaces
     * 
     */
    public Output<Optional<List<ContainerNetworkInterface>>> networkInterfaces() {
        return Codegen.optional(this.networkInterfaces);
    }
    /**
     * The node name
     * 
     */
    @Export(name="nodeName", refs={String.class}, tree="[0]")
    private Output<String> nodeName;

    /**
     * @return The node name
     * 
     */
    public Output<String> nodeName() {
        return this.nodeName;
    }
    /**
     * The operating system configuration
     * 
     */
    @Export(name="operatingSystem", refs={ContainerOperatingSystem.class}, tree="[0]")
    private Output</* @Nullable */ ContainerOperatingSystem> operatingSystem;

    /**
     * @return The operating system configuration
     * 
     */
    public Output<Optional<ContainerOperatingSystem>> operatingSystem() {
        return Codegen.optional(this.operatingSystem);
    }
    /**
     * The ID of the pool to assign the container to
     * 
     */
    @Export(name="poolId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> poolId;

    /**
     * @return The ID of the pool to assign the container to
     * 
     */
    public Output<Optional<String>> poolId() {
        return Codegen.optional(this.poolId);
    }
    /**
     * Whether to start the container
     * 
     */
    @Export(name="started", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> started;

    /**
     * @return Whether to start the container
     * 
     */
    public Output<Optional<Boolean>> started() {
        return Codegen.optional(this.started);
    }
    /**
     * Tags of the container. This is only meta information.
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return Tags of the container. This is only meta information.
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * Whether to create a template
     * 
     */
    @Export(name="template", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> template;

    /**
     * @return Whether to create a template
     * 
     */
    public Output<Optional<Boolean>> template() {
        return Codegen.optional(this.template);
    }
    /**
     * Whether the container runs as unprivileged on the host
     * 
     */
    @Export(name="unprivileged", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> unprivileged;

    /**
     * @return Whether the container runs as unprivileged on the host
     * 
     */
    public Output<Optional<Boolean>> unprivileged() {
        return Codegen.optional(this.unprivileged);
    }
    /**
     * The VM identifier
     * 
     */
    @Export(name="vmId", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> vmId;

    /**
     * @return The VM identifier
     * 
     */
    public Output<Optional<Integer>> vmId() {
        return Codegen.optional(this.vmId);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Container(String name) {
        this(name, ContainerArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Container(String name, ContainerArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Container(String name, ContainerArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("proxmoxve:CT/container:Container", name, args == null ? ContainerArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Container(String name, Output<String> id, @Nullable ContainerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("proxmoxve:CT/container:Container", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Container get(String name, Output<String> id, @Nullable ContainerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Container(name, id, state, options);
    }
}

// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.VM.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualMachineStartupArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualMachineStartupArgs Empty = new VirtualMachineStartupArgs();

    /**
     * A non-negative number defining the delay in
     * seconds before the next VM is shut down.
     * 
     */
    @Import(name="downDelay")
    private @Nullable Output<Integer> downDelay;

    /**
     * @return A non-negative number defining the delay in
     * seconds before the next VM is shut down.
     * 
     */
    public Optional<Output<Integer>> downDelay() {
        return Optional.ofNullable(this.downDelay);
    }

    /**
     * A non-negative number defining the general startup
     * order.
     * 
     */
    @Import(name="order")
    private @Nullable Output<Integer> order;

    /**
     * @return A non-negative number defining the general startup
     * order.
     * 
     */
    public Optional<Output<Integer>> order() {
        return Optional.ofNullable(this.order);
    }

    /**
     * A non-negative number defining the delay in
     * seconds before the next VM is started.
     * 
     */
    @Import(name="upDelay")
    private @Nullable Output<Integer> upDelay;

    /**
     * @return A non-negative number defining the delay in
     * seconds before the next VM is started.
     * 
     */
    public Optional<Output<Integer>> upDelay() {
        return Optional.ofNullable(this.upDelay);
    }

    private VirtualMachineStartupArgs() {}

    private VirtualMachineStartupArgs(VirtualMachineStartupArgs $) {
        this.downDelay = $.downDelay;
        this.order = $.order;
        this.upDelay = $.upDelay;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualMachineStartupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualMachineStartupArgs $;

        public Builder() {
            $ = new VirtualMachineStartupArgs();
        }

        public Builder(VirtualMachineStartupArgs defaults) {
            $ = new VirtualMachineStartupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param downDelay A non-negative number defining the delay in
         * seconds before the next VM is shut down.
         * 
         * @return builder
         * 
         */
        public Builder downDelay(@Nullable Output<Integer> downDelay) {
            $.downDelay = downDelay;
            return this;
        }

        /**
         * @param downDelay A non-negative number defining the delay in
         * seconds before the next VM is shut down.
         * 
         * @return builder
         * 
         */
        public Builder downDelay(Integer downDelay) {
            return downDelay(Output.of(downDelay));
        }

        /**
         * @param order A non-negative number defining the general startup
         * order.
         * 
         * @return builder
         * 
         */
        public Builder order(@Nullable Output<Integer> order) {
            $.order = order;
            return this;
        }

        /**
         * @param order A non-negative number defining the general startup
         * order.
         * 
         * @return builder
         * 
         */
        public Builder order(Integer order) {
            return order(Output.of(order));
        }

        /**
         * @param upDelay A non-negative number defining the delay in
         * seconds before the next VM is started.
         * 
         * @return builder
         * 
         */
        public Builder upDelay(@Nullable Output<Integer> upDelay) {
            $.upDelay = upDelay;
            return this;
        }

        /**
         * @param upDelay A non-negative number defining the delay in
         * seconds before the next VM is started.
         * 
         * @return builder
         * 
         */
        public Builder upDelay(Integer upDelay) {
            return upDelay(Output.of(upDelay));
        }

        public VirtualMachineStartupArgs build() {
            return $;
        }
    }

}

// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.Storage.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FileSourceRawArgs extends com.pulumi.resources.ResourceArgs {

    public static final FileSourceRawArgs Empty = new FileSourceRawArgs();

    /**
     * The raw data.
     * 
     */
    @Import(name="data", required=true)
    private Output<String> data;

    /**
     * @return The raw data.
     * 
     */
    public Output<String> data() {
        return this.data;
    }

    /**
     * The file name.
     * 
     */
    @Import(name="fileName", required=true)
    private Output<String> fileName;

    /**
     * @return The file name.
     * 
     */
    public Output<String> fileName() {
        return this.fileName;
    }

    /**
     * The number of bytes to resize the file to.
     * 
     */
    @Import(name="resize")
    private @Nullable Output<Integer> resize;

    /**
     * @return The number of bytes to resize the file to.
     * 
     */
    public Optional<Output<Integer>> resize() {
        return Optional.ofNullable(this.resize);
    }

    private FileSourceRawArgs() {}

    private FileSourceRawArgs(FileSourceRawArgs $) {
        this.data = $.data;
        this.fileName = $.fileName;
        this.resize = $.resize;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FileSourceRawArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FileSourceRawArgs $;

        public Builder() {
            $ = new FileSourceRawArgs();
        }

        public Builder(FileSourceRawArgs defaults) {
            $ = new FileSourceRawArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param data The raw data.
         * 
         * @return builder
         * 
         */
        public Builder data(Output<String> data) {
            $.data = data;
            return this;
        }

        /**
         * @param data The raw data.
         * 
         * @return builder
         * 
         */
        public Builder data(String data) {
            return data(Output.of(data));
        }

        /**
         * @param fileName The file name.
         * 
         * @return builder
         * 
         */
        public Builder fileName(Output<String> fileName) {
            $.fileName = fileName;
            return this;
        }

        /**
         * @param fileName The file name.
         * 
         * @return builder
         * 
         */
        public Builder fileName(String fileName) {
            return fileName(Output.of(fileName));
        }

        /**
         * @param resize The number of bytes to resize the file to.
         * 
         * @return builder
         * 
         */
        public Builder resize(@Nullable Output<Integer> resize) {
            $.resize = resize;
            return this;
        }

        /**
         * @param resize The number of bytes to resize the file to.
         * 
         * @return builder
         * 
         */
        public Builder resize(Integer resize) {
            return resize(Output.of(resize));
        }

        public FileSourceRawArgs build() {
            if ($.data == null) {
                throw new MissingRequiredPropertyException("FileSourceRawArgs", "data");
            }
            if ($.fileName == null) {
                throw new MissingRequiredPropertyException("FileSourceRawArgs", "fileName");
            }
            return $;
        }
    }

}

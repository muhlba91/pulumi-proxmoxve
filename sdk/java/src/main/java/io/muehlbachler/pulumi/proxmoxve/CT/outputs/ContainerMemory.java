// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.CT.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ContainerMemory {
    /**
     * @return The dedicated memory in megabytes (defaults
     * to `512`).
     * 
     */
    private @Nullable Integer dedicated;
    /**
     * @return The swap size in megabytes (defaults to `0`).
     * 
     */
    private @Nullable Integer swap;

    private ContainerMemory() {}
    /**
     * @return The dedicated memory in megabytes (defaults
     * to `512`).
     * 
     */
    public Optional<Integer> dedicated() {
        return Optional.ofNullable(this.dedicated);
    }
    /**
     * @return The swap size in megabytes (defaults to `0`).
     * 
     */
    public Optional<Integer> swap() {
        return Optional.ofNullable(this.swap);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContainerMemory defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer dedicated;
        private @Nullable Integer swap;
        public Builder() {}
        public Builder(ContainerMemory defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dedicated = defaults.dedicated;
    	      this.swap = defaults.swap;
        }

        @CustomType.Setter
        public Builder dedicated(@Nullable Integer dedicated) {

            this.dedicated = dedicated;
            return this;
        }
        @CustomType.Setter
        public Builder swap(@Nullable Integer swap) {

            this.swap = swap;
            return this;
        }
        public ContainerMemory build() {
            final var _resultValue = new ContainerMemory();
            _resultValue.dedicated = dedicated;
            _resultValue.swap = swap;
            return _resultValue;
        }
    }
}

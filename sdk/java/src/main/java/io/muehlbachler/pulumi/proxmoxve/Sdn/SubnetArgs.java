// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.Sdn;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import io.muehlbachler.pulumi.proxmoxve.Sdn.inputs.SubnetDhcpRangeArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SubnetArgs extends com.pulumi.resources.ResourceArgs {

    public static final SubnetArgs Empty = new SubnetArgs();

    /**
     * A CIDR network address, for example 10.0.0.0/8
     * 
     */
    @Import(name="cidr", required=true)
    private Output<String> cidr;

    /**
     * @return A CIDR network address, for example 10.0.0.0/8
     * 
     */
    public Output<String> cidr() {
        return this.cidr;
    }

    /**
     * The DNS server used for DHCP.
     * 
     */
    @Import(name="dhcpDnsServer")
    private @Nullable Output<String> dhcpDnsServer;

    /**
     * @return The DNS server used for DHCP.
     * 
     */
    public Optional<Output<String>> dhcpDnsServer() {
        return Optional.ofNullable(this.dhcpDnsServer);
    }

    /**
     * DHCP range (start and end IPs).
     * 
     */
    @Import(name="dhcpRange")
    private @Nullable Output<SubnetDhcpRangeArgs> dhcpRange;

    /**
     * @return DHCP range (start and end IPs).
     * 
     */
    public Optional<Output<SubnetDhcpRangeArgs>> dhcpRange() {
        return Optional.ofNullable(this.dhcpRange);
    }

    /**
     * Prefix used for DNS zone delegation.
     * 
     */
    @Import(name="dnsZonePrefix")
    private @Nullable Output<String> dnsZonePrefix;

    /**
     * @return Prefix used for DNS zone delegation.
     * 
     */
    public Optional<Output<String>> dnsZonePrefix() {
        return Optional.ofNullable(this.dnsZonePrefix);
    }

    /**
     * The gateway address for the subnet.
     * 
     */
    @Import(name="gateway")
    private @Nullable Output<String> gateway;

    /**
     * @return The gateway address for the subnet.
     * 
     */
    public Optional<Output<String>> gateway() {
        return Optional.ofNullable(this.gateway);
    }

    /**
     * Whether SNAT is enabled for the subnet.
     * 
     */
    @Import(name="snat")
    private @Nullable Output<Boolean> snat;

    /**
     * @return Whether SNAT is enabled for the subnet.
     * 
     */
    public Optional<Output<Boolean>> snat() {
        return Optional.ofNullable(this.snat);
    }

    /**
     * The VNet to which this subnet belongs.
     * 
     */
    @Import(name="vnet", required=true)
    private Output<String> vnet;

    /**
     * @return The VNet to which this subnet belongs.
     * 
     */
    public Output<String> vnet() {
        return this.vnet;
    }

    private SubnetArgs() {}

    private SubnetArgs(SubnetArgs $) {
        this.cidr = $.cidr;
        this.dhcpDnsServer = $.dhcpDnsServer;
        this.dhcpRange = $.dhcpRange;
        this.dnsZonePrefix = $.dnsZonePrefix;
        this.gateway = $.gateway;
        this.snat = $.snat;
        this.vnet = $.vnet;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SubnetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SubnetArgs $;

        public Builder() {
            $ = new SubnetArgs();
        }

        public Builder(SubnetArgs defaults) {
            $ = new SubnetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cidr A CIDR network address, for example 10.0.0.0/8
         * 
         * @return builder
         * 
         */
        public Builder cidr(Output<String> cidr) {
            $.cidr = cidr;
            return this;
        }

        /**
         * @param cidr A CIDR network address, for example 10.0.0.0/8
         * 
         * @return builder
         * 
         */
        public Builder cidr(String cidr) {
            return cidr(Output.of(cidr));
        }

        /**
         * @param dhcpDnsServer The DNS server used for DHCP.
         * 
         * @return builder
         * 
         */
        public Builder dhcpDnsServer(@Nullable Output<String> dhcpDnsServer) {
            $.dhcpDnsServer = dhcpDnsServer;
            return this;
        }

        /**
         * @param dhcpDnsServer The DNS server used for DHCP.
         * 
         * @return builder
         * 
         */
        public Builder dhcpDnsServer(String dhcpDnsServer) {
            return dhcpDnsServer(Output.of(dhcpDnsServer));
        }

        /**
         * @param dhcpRange DHCP range (start and end IPs).
         * 
         * @return builder
         * 
         */
        public Builder dhcpRange(@Nullable Output<SubnetDhcpRangeArgs> dhcpRange) {
            $.dhcpRange = dhcpRange;
            return this;
        }

        /**
         * @param dhcpRange DHCP range (start and end IPs).
         * 
         * @return builder
         * 
         */
        public Builder dhcpRange(SubnetDhcpRangeArgs dhcpRange) {
            return dhcpRange(Output.of(dhcpRange));
        }

        /**
         * @param dnsZonePrefix Prefix used for DNS zone delegation.
         * 
         * @return builder
         * 
         */
        public Builder dnsZonePrefix(@Nullable Output<String> dnsZonePrefix) {
            $.dnsZonePrefix = dnsZonePrefix;
            return this;
        }

        /**
         * @param dnsZonePrefix Prefix used for DNS zone delegation.
         * 
         * @return builder
         * 
         */
        public Builder dnsZonePrefix(String dnsZonePrefix) {
            return dnsZonePrefix(Output.of(dnsZonePrefix));
        }

        /**
         * @param gateway The gateway address for the subnet.
         * 
         * @return builder
         * 
         */
        public Builder gateway(@Nullable Output<String> gateway) {
            $.gateway = gateway;
            return this;
        }

        /**
         * @param gateway The gateway address for the subnet.
         * 
         * @return builder
         * 
         */
        public Builder gateway(String gateway) {
            return gateway(Output.of(gateway));
        }

        /**
         * @param snat Whether SNAT is enabled for the subnet.
         * 
         * @return builder
         * 
         */
        public Builder snat(@Nullable Output<Boolean> snat) {
            $.snat = snat;
            return this;
        }

        /**
         * @param snat Whether SNAT is enabled for the subnet.
         * 
         * @return builder
         * 
         */
        public Builder snat(Boolean snat) {
            return snat(Output.of(snat));
        }

        /**
         * @param vnet The VNet to which this subnet belongs.
         * 
         * @return builder
         * 
         */
        public Builder vnet(Output<String> vnet) {
            $.vnet = vnet;
            return this;
        }

        /**
         * @param vnet The VNet to which this subnet belongs.
         * 
         * @return builder
         * 
         */
        public Builder vnet(String vnet) {
            return vnet(Output.of(vnet));
        }

        public SubnetArgs build() {
            if ($.cidr == null) {
                throw new MissingRequiredPropertyException("SubnetArgs", "cidr");
            }
            if ($.vnet == null) {
                throw new MissingRequiredPropertyException("SubnetArgs", "vnet");
            }
            return $;
        }
    }

}

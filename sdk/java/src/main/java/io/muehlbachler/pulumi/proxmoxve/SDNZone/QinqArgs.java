// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.SDNZone;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class QinqArgs extends com.pulumi.resources.ResourceArgs {

    public static final QinqArgs Empty = new QinqArgs();

    /**
     * A local, VLAN-aware bridge that is already configured on each local node
     * 
     */
    @Import(name="bridge", required=true)
    private Output<String> bridge;

    /**
     * @return A local, VLAN-aware bridge that is already configured on each local node
     * 
     */
    public Output<String> bridge() {
        return this.bridge;
    }

    /**
     * DNS API server address.
     * 
     */
    @Import(name="dns")
    private @Nullable Output<String> dns;

    /**
     * @return DNS API server address.
     * 
     */
    public Optional<Output<String>> dns() {
        return Optional.ofNullable(this.dns);
    }

    /**
     * DNS domain name. Used to register hostnames, such as `&lt;hostname&gt;.&lt;domain&gt;`. The DNS zone must already exist on the DNS server.
     * 
     */
    @Import(name="dnsZone")
    private @Nullable Output<String> dnsZone;

    /**
     * @return DNS domain name. Used to register hostnames, such as `&lt;hostname&gt;.&lt;domain&gt;`. The DNS zone must already exist on the DNS server.
     * 
     */
    public Optional<Output<String>> dnsZone() {
        return Optional.ofNullable(this.dnsZone);
    }

    /**
     * IP Address Management system.
     * 
     */
    @Import(name="ipam")
    private @Nullable Output<String> ipam;

    /**
     * @return IP Address Management system.
     * 
     */
    public Optional<Output<String>> ipam() {
        return Optional.ofNullable(this.ipam);
    }

    /**
     * MTU value for the zone.
     * 
     */
    @Import(name="mtu")
    private @Nullable Output<Integer> mtu;

    /**
     * @return MTU value for the zone.
     * 
     */
    public Optional<Output<Integer>> mtu() {
        return Optional.ofNullable(this.mtu);
    }

    /**
     * The Proxmox nodes which the zone and associated VNets should be deployed on
     * 
     */
    @Import(name="nodes", required=true)
    private Output<List<String>> nodes;

    /**
     * @return The Proxmox nodes which the zone and associated VNets should be deployed on
     * 
     */
    public Output<List<String>> nodes() {
        return this.nodes;
    }

    /**
     * Reverse DNS API server address.
     * 
     */
    @Import(name="reverseDns")
    private @Nullable Output<String> reverseDns;

    /**
     * @return Reverse DNS API server address.
     * 
     */
    public Optional<Output<String>> reverseDns() {
        return Optional.ofNullable(this.reverseDns);
    }

    /**
     * Service VLAN tag for QinQ. The tag must be between `1` and `4094`.
     * 
     */
    @Import(name="serviceVlan", required=true)
    private Output<Integer> serviceVlan;

    /**
     * @return Service VLAN tag for QinQ. The tag must be between `1` and `4094`.
     * 
     */
    public Output<Integer> serviceVlan() {
        return this.serviceVlan;
    }

    /**
     * Service VLAN protocol for QinQ. The protocol must be `802.1ad` or `802.1q`.
     * 
     */
    @Import(name="serviceVlanProtocol")
    private @Nullable Output<String> serviceVlanProtocol;

    /**
     * @return Service VLAN protocol for QinQ. The protocol must be `802.1ad` or `802.1q`.
     * 
     */
    public Optional<Output<String>> serviceVlanProtocol() {
        return Optional.ofNullable(this.serviceVlanProtocol);
    }

    /**
     * The unique identifier of the SDN zone.
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return The unique identifier of the SDN zone.
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private QinqArgs() {}

    private QinqArgs(QinqArgs $) {
        this.bridge = $.bridge;
        this.dns = $.dns;
        this.dnsZone = $.dnsZone;
        this.ipam = $.ipam;
        this.mtu = $.mtu;
        this.nodes = $.nodes;
        this.reverseDns = $.reverseDns;
        this.serviceVlan = $.serviceVlan;
        this.serviceVlanProtocol = $.serviceVlanProtocol;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(QinqArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private QinqArgs $;

        public Builder() {
            $ = new QinqArgs();
        }

        public Builder(QinqArgs defaults) {
            $ = new QinqArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bridge A local, VLAN-aware bridge that is already configured on each local node
         * 
         * @return builder
         * 
         */
        public Builder bridge(Output<String> bridge) {
            $.bridge = bridge;
            return this;
        }

        /**
         * @param bridge A local, VLAN-aware bridge that is already configured on each local node
         * 
         * @return builder
         * 
         */
        public Builder bridge(String bridge) {
            return bridge(Output.of(bridge));
        }

        /**
         * @param dns DNS API server address.
         * 
         * @return builder
         * 
         */
        public Builder dns(@Nullable Output<String> dns) {
            $.dns = dns;
            return this;
        }

        /**
         * @param dns DNS API server address.
         * 
         * @return builder
         * 
         */
        public Builder dns(String dns) {
            return dns(Output.of(dns));
        }

        /**
         * @param dnsZone DNS domain name. Used to register hostnames, such as `&lt;hostname&gt;.&lt;domain&gt;`. The DNS zone must already exist on the DNS server.
         * 
         * @return builder
         * 
         */
        public Builder dnsZone(@Nullable Output<String> dnsZone) {
            $.dnsZone = dnsZone;
            return this;
        }

        /**
         * @param dnsZone DNS domain name. Used to register hostnames, such as `&lt;hostname&gt;.&lt;domain&gt;`. The DNS zone must already exist on the DNS server.
         * 
         * @return builder
         * 
         */
        public Builder dnsZone(String dnsZone) {
            return dnsZone(Output.of(dnsZone));
        }

        /**
         * @param ipam IP Address Management system.
         * 
         * @return builder
         * 
         */
        public Builder ipam(@Nullable Output<String> ipam) {
            $.ipam = ipam;
            return this;
        }

        /**
         * @param ipam IP Address Management system.
         * 
         * @return builder
         * 
         */
        public Builder ipam(String ipam) {
            return ipam(Output.of(ipam));
        }

        /**
         * @param mtu MTU value for the zone.
         * 
         * @return builder
         * 
         */
        public Builder mtu(@Nullable Output<Integer> mtu) {
            $.mtu = mtu;
            return this;
        }

        /**
         * @param mtu MTU value for the zone.
         * 
         * @return builder
         * 
         */
        public Builder mtu(Integer mtu) {
            return mtu(Output.of(mtu));
        }

        /**
         * @param nodes The Proxmox nodes which the zone and associated VNets should be deployed on
         * 
         * @return builder
         * 
         */
        public Builder nodes(Output<List<String>> nodes) {
            $.nodes = nodes;
            return this;
        }

        /**
         * @param nodes The Proxmox nodes which the zone and associated VNets should be deployed on
         * 
         * @return builder
         * 
         */
        public Builder nodes(List<String> nodes) {
            return nodes(Output.of(nodes));
        }

        /**
         * @param nodes The Proxmox nodes which the zone and associated VNets should be deployed on
         * 
         * @return builder
         * 
         */
        public Builder nodes(String... nodes) {
            return nodes(List.of(nodes));
        }

        /**
         * @param reverseDns Reverse DNS API server address.
         * 
         * @return builder
         * 
         */
        public Builder reverseDns(@Nullable Output<String> reverseDns) {
            $.reverseDns = reverseDns;
            return this;
        }

        /**
         * @param reverseDns Reverse DNS API server address.
         * 
         * @return builder
         * 
         */
        public Builder reverseDns(String reverseDns) {
            return reverseDns(Output.of(reverseDns));
        }

        /**
         * @param serviceVlan Service VLAN tag for QinQ. The tag must be between `1` and `4094`.
         * 
         * @return builder
         * 
         */
        public Builder serviceVlan(Output<Integer> serviceVlan) {
            $.serviceVlan = serviceVlan;
            return this;
        }

        /**
         * @param serviceVlan Service VLAN tag for QinQ. The tag must be between `1` and `4094`.
         * 
         * @return builder
         * 
         */
        public Builder serviceVlan(Integer serviceVlan) {
            return serviceVlan(Output.of(serviceVlan));
        }

        /**
         * @param serviceVlanProtocol Service VLAN protocol for QinQ. The protocol must be `802.1ad` or `802.1q`.
         * 
         * @return builder
         * 
         */
        public Builder serviceVlanProtocol(@Nullable Output<String> serviceVlanProtocol) {
            $.serviceVlanProtocol = serviceVlanProtocol;
            return this;
        }

        /**
         * @param serviceVlanProtocol Service VLAN protocol for QinQ. The protocol must be `802.1ad` or `802.1q`.
         * 
         * @return builder
         * 
         */
        public Builder serviceVlanProtocol(String serviceVlanProtocol) {
            return serviceVlanProtocol(Output.of(serviceVlanProtocol));
        }

        /**
         * @param zoneId The unique identifier of the SDN zone.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The unique identifier of the SDN zone.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public QinqArgs build() {
            if ($.bridge == null) {
                throw new MissingRequiredPropertyException("QinqArgs", "bridge");
            }
            if ($.nodes == null) {
                throw new MissingRequiredPropertyException("QinqArgs", "nodes");
            }
            if ($.serviceVlan == null) {
                throw new MissingRequiredPropertyException("QinqArgs", "serviceVlan");
            }
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("QinqArgs", "zoneId");
            }
            return $;
        }
    }

}

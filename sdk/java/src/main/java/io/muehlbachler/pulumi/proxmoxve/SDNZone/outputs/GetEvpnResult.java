// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.SDNZone.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetEvpnResult {
    /**
     * @return Enable subnet advertisement for EVPN.
     * 
     */
    private Boolean advertiseSubnets;
    /**
     * @return EVPN controller address.
     * 
     */
    private String controller;
    /**
     * @return Disable ARP/ND suppression for EVPN.
     * 
     */
    private Boolean disableArpNdSuppression;
    /**
     * @return DNS API server address.
     * 
     */
    private String dns;
    /**
     * @return DNS domain name. Used to register hostnames, such as `&lt;hostname&gt;.&lt;domain&gt;`. The DNS zone must already exist on the DNS server.
     * 
     */
    private String dnsZone;
    /**
     * @return List of exit nodes for EVPN.
     * 
     */
    private List<String> exitNodes;
    /**
     * @return Enable local routing for EVPN exit nodes.
     * 
     */
    private Boolean exitNodesLocalRouting;
    /**
     * @return The unique identifier of the SDN zone.
     * 
     */
    private String id;
    /**
     * @return IP Address Management system.
     * 
     */
    private String ipam;
    /**
     * @return MTU value for the zone.
     * 
     */
    private Integer mtu;
    /**
     * @return The Proxmox nodes which the zone and associated VNets are deployed on
     * 
     */
    private List<String> nodes;
    /**
     * @return Indicates if the zone has pending configuration changes that need to be applied.
     * 
     */
    private Boolean pending;
    /**
     * @return Primary exit node for EVPN.
     * 
     */
    private String primaryExitNode;
    /**
     * @return Reverse DNS API server address.
     * 
     */
    private String reverseDns;
    /**
     * @return Route target import for EVPN. Must be in the format &#39;\n\n:\n\n&#39; (e.g., &#39;65000:65000&#39;).
     * 
     */
    private String rtImport;
    /**
     * @return Indicates the current state of the zone.
     * 
     */
    private String state;
    /**
     * @return VRF VXLAN-ID used for dedicated routing interconnect between VNets. It must be different than the VXLAN-ID of the VNets.
     * 
     */
    private Integer vrfVxlan;

    private GetEvpnResult() {}
    /**
     * @return Enable subnet advertisement for EVPN.
     * 
     */
    public Boolean advertiseSubnets() {
        return this.advertiseSubnets;
    }
    /**
     * @return EVPN controller address.
     * 
     */
    public String controller() {
        return this.controller;
    }
    /**
     * @return Disable ARP/ND suppression for EVPN.
     * 
     */
    public Boolean disableArpNdSuppression() {
        return this.disableArpNdSuppression;
    }
    /**
     * @return DNS API server address.
     * 
     */
    public String dns() {
        return this.dns;
    }
    /**
     * @return DNS domain name. Used to register hostnames, such as `&lt;hostname&gt;.&lt;domain&gt;`. The DNS zone must already exist on the DNS server.
     * 
     */
    public String dnsZone() {
        return this.dnsZone;
    }
    /**
     * @return List of exit nodes for EVPN.
     * 
     */
    public List<String> exitNodes() {
        return this.exitNodes;
    }
    /**
     * @return Enable local routing for EVPN exit nodes.
     * 
     */
    public Boolean exitNodesLocalRouting() {
        return this.exitNodesLocalRouting;
    }
    /**
     * @return The unique identifier of the SDN zone.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return IP Address Management system.
     * 
     */
    public String ipam() {
        return this.ipam;
    }
    /**
     * @return MTU value for the zone.
     * 
     */
    public Integer mtu() {
        return this.mtu;
    }
    /**
     * @return The Proxmox nodes which the zone and associated VNets are deployed on
     * 
     */
    public List<String> nodes() {
        return this.nodes;
    }
    /**
     * @return Indicates if the zone has pending configuration changes that need to be applied.
     * 
     */
    public Boolean pending() {
        return this.pending;
    }
    /**
     * @return Primary exit node for EVPN.
     * 
     */
    public String primaryExitNode() {
        return this.primaryExitNode;
    }
    /**
     * @return Reverse DNS API server address.
     * 
     */
    public String reverseDns() {
        return this.reverseDns;
    }
    /**
     * @return Route target import for EVPN. Must be in the format &#39;\n\n:\n\n&#39; (e.g., &#39;65000:65000&#39;).
     * 
     */
    public String rtImport() {
        return this.rtImport;
    }
    /**
     * @return Indicates the current state of the zone.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return VRF VXLAN-ID used for dedicated routing interconnect between VNets. It must be different than the VXLAN-ID of the VNets.
     * 
     */
    public Integer vrfVxlan() {
        return this.vrfVxlan;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEvpnResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean advertiseSubnets;
        private String controller;
        private Boolean disableArpNdSuppression;
        private String dns;
        private String dnsZone;
        private List<String> exitNodes;
        private Boolean exitNodesLocalRouting;
        private String id;
        private String ipam;
        private Integer mtu;
        private List<String> nodes;
        private Boolean pending;
        private String primaryExitNode;
        private String reverseDns;
        private String rtImport;
        private String state;
        private Integer vrfVxlan;
        public Builder() {}
        public Builder(GetEvpnResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.advertiseSubnets = defaults.advertiseSubnets;
    	      this.controller = defaults.controller;
    	      this.disableArpNdSuppression = defaults.disableArpNdSuppression;
    	      this.dns = defaults.dns;
    	      this.dnsZone = defaults.dnsZone;
    	      this.exitNodes = defaults.exitNodes;
    	      this.exitNodesLocalRouting = defaults.exitNodesLocalRouting;
    	      this.id = defaults.id;
    	      this.ipam = defaults.ipam;
    	      this.mtu = defaults.mtu;
    	      this.nodes = defaults.nodes;
    	      this.pending = defaults.pending;
    	      this.primaryExitNode = defaults.primaryExitNode;
    	      this.reverseDns = defaults.reverseDns;
    	      this.rtImport = defaults.rtImport;
    	      this.state = defaults.state;
    	      this.vrfVxlan = defaults.vrfVxlan;
        }

        @CustomType.Setter
        public Builder advertiseSubnets(Boolean advertiseSubnets) {
            if (advertiseSubnets == null) {
              throw new MissingRequiredPropertyException("GetEvpnResult", "advertiseSubnets");
            }
            this.advertiseSubnets = advertiseSubnets;
            return this;
        }
        @CustomType.Setter
        public Builder controller(String controller) {
            if (controller == null) {
              throw new MissingRequiredPropertyException("GetEvpnResult", "controller");
            }
            this.controller = controller;
            return this;
        }
        @CustomType.Setter
        public Builder disableArpNdSuppression(Boolean disableArpNdSuppression) {
            if (disableArpNdSuppression == null) {
              throw new MissingRequiredPropertyException("GetEvpnResult", "disableArpNdSuppression");
            }
            this.disableArpNdSuppression = disableArpNdSuppression;
            return this;
        }
        @CustomType.Setter
        public Builder dns(String dns) {
            if (dns == null) {
              throw new MissingRequiredPropertyException("GetEvpnResult", "dns");
            }
            this.dns = dns;
            return this;
        }
        @CustomType.Setter
        public Builder dnsZone(String dnsZone) {
            if (dnsZone == null) {
              throw new MissingRequiredPropertyException("GetEvpnResult", "dnsZone");
            }
            this.dnsZone = dnsZone;
            return this;
        }
        @CustomType.Setter
        public Builder exitNodes(List<String> exitNodes) {
            if (exitNodes == null) {
              throw new MissingRequiredPropertyException("GetEvpnResult", "exitNodes");
            }
            this.exitNodes = exitNodes;
            return this;
        }
        public Builder exitNodes(String... exitNodes) {
            return exitNodes(List.of(exitNodes));
        }
        @CustomType.Setter
        public Builder exitNodesLocalRouting(Boolean exitNodesLocalRouting) {
            if (exitNodesLocalRouting == null) {
              throw new MissingRequiredPropertyException("GetEvpnResult", "exitNodesLocalRouting");
            }
            this.exitNodesLocalRouting = exitNodesLocalRouting;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetEvpnResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipam(String ipam) {
            if (ipam == null) {
              throw new MissingRequiredPropertyException("GetEvpnResult", "ipam");
            }
            this.ipam = ipam;
            return this;
        }
        @CustomType.Setter
        public Builder mtu(Integer mtu) {
            if (mtu == null) {
              throw new MissingRequiredPropertyException("GetEvpnResult", "mtu");
            }
            this.mtu = mtu;
            return this;
        }
        @CustomType.Setter
        public Builder nodes(List<String> nodes) {
            if (nodes == null) {
              throw new MissingRequiredPropertyException("GetEvpnResult", "nodes");
            }
            this.nodes = nodes;
            return this;
        }
        public Builder nodes(String... nodes) {
            return nodes(List.of(nodes));
        }
        @CustomType.Setter
        public Builder pending(Boolean pending) {
            if (pending == null) {
              throw new MissingRequiredPropertyException("GetEvpnResult", "pending");
            }
            this.pending = pending;
            return this;
        }
        @CustomType.Setter
        public Builder primaryExitNode(String primaryExitNode) {
            if (primaryExitNode == null) {
              throw new MissingRequiredPropertyException("GetEvpnResult", "primaryExitNode");
            }
            this.primaryExitNode = primaryExitNode;
            return this;
        }
        @CustomType.Setter
        public Builder reverseDns(String reverseDns) {
            if (reverseDns == null) {
              throw new MissingRequiredPropertyException("GetEvpnResult", "reverseDns");
            }
            this.reverseDns = reverseDns;
            return this;
        }
        @CustomType.Setter
        public Builder rtImport(String rtImport) {
            if (rtImport == null) {
              throw new MissingRequiredPropertyException("GetEvpnResult", "rtImport");
            }
            this.rtImport = rtImport;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetEvpnResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder vrfVxlan(Integer vrfVxlan) {
            if (vrfVxlan == null) {
              throw new MissingRequiredPropertyException("GetEvpnResult", "vrfVxlan");
            }
            this.vrfVxlan = vrfVxlan;
            return this;
        }
        public GetEvpnResult build() {
            final var _resultValue = new GetEvpnResult();
            _resultValue.advertiseSubnets = advertiseSubnets;
            _resultValue.controller = controller;
            _resultValue.disableArpNdSuppression = disableArpNdSuppression;
            _resultValue.dns = dns;
            _resultValue.dnsZone = dnsZone;
            _resultValue.exitNodes = exitNodes;
            _resultValue.exitNodesLocalRouting = exitNodesLocalRouting;
            _resultValue.id = id;
            _resultValue.ipam = ipam;
            _resultValue.mtu = mtu;
            _resultValue.nodes = nodes;
            _resultValue.pending = pending;
            _resultValue.primaryExitNode = primaryExitNode;
            _resultValue.reverseDns = reverseDns;
            _resultValue.rtImport = rtImport;
            _resultValue.state = state;
            _resultValue.vrfVxlan = vrfVxlan;
            return _resultValue;
        }
    }
}

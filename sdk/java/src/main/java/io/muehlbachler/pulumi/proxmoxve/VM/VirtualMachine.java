// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.VM;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import io.muehlbachler.pulumi.proxmoxve.Utilities;
import io.muehlbachler.pulumi.proxmoxve.VM.VirtualMachineArgs;
import io.muehlbachler.pulumi.proxmoxve.VM.inputs.VirtualMachineState;
import io.muehlbachler.pulumi.proxmoxve.VM.outputs.VirtualMachineAgent;
import io.muehlbachler.pulumi.proxmoxve.VM.outputs.VirtualMachineAudioDevice;
import io.muehlbachler.pulumi.proxmoxve.VM.outputs.VirtualMachineCdrom;
import io.muehlbachler.pulumi.proxmoxve.VM.outputs.VirtualMachineClone;
import io.muehlbachler.pulumi.proxmoxve.VM.outputs.VirtualMachineCpu;
import io.muehlbachler.pulumi.proxmoxve.VM.outputs.VirtualMachineDisk;
import io.muehlbachler.pulumi.proxmoxve.VM.outputs.VirtualMachineEfiDisk;
import io.muehlbachler.pulumi.proxmoxve.VM.outputs.VirtualMachineHostpci;
import io.muehlbachler.pulumi.proxmoxve.VM.outputs.VirtualMachineInitialization;
import io.muehlbachler.pulumi.proxmoxve.VM.outputs.VirtualMachineMemory;
import io.muehlbachler.pulumi.proxmoxve.VM.outputs.VirtualMachineNetworkDevice;
import io.muehlbachler.pulumi.proxmoxve.VM.outputs.VirtualMachineOperatingSystem;
import io.muehlbachler.pulumi.proxmoxve.VM.outputs.VirtualMachineSerialDevice;
import io.muehlbachler.pulumi.proxmoxve.VM.outputs.VirtualMachineVga;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="proxmoxve:VM/virtualMachine:VirtualMachine")
public class VirtualMachine extends com.pulumi.resources.CustomResource {
    /**
     * Whether to enable ACPI
     * 
     */
    @Export(name="acpi", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> acpi;

    /**
     * @return Whether to enable ACPI
     * 
     */
    public Output<Optional<Boolean>> acpi() {
        return Codegen.optional(this.acpi);
    }
    /**
     * The QEMU agent configuration
     * 
     */
    @Export(name="agent", refs={VirtualMachineAgent.class}, tree="[0]")
    private Output</* @Nullable */ VirtualMachineAgent> agent;

    /**
     * @return The QEMU agent configuration
     * 
     */
    public Output<Optional<VirtualMachineAgent>> agent() {
        return Codegen.optional(this.agent);
    }
    /**
     * The audio devices
     * 
     */
    @Export(name="audioDevice", refs={VirtualMachineAudioDevice.class}, tree="[0]")
    private Output</* @Nullable */ VirtualMachineAudioDevice> audioDevice;

    /**
     * @return The audio devices
     * 
     */
    public Output<Optional<VirtualMachineAudioDevice>> audioDevice() {
        return Codegen.optional(this.audioDevice);
    }
    /**
     * The BIOS implementation
     * 
     */
    @Export(name="bios", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> bios;

    /**
     * @return The BIOS implementation
     * 
     */
    public Output<Optional<String>> bios() {
        return Codegen.optional(this.bios);
    }
    /**
     * The guest will attempt to boot from devices in the order they appear here
     * 
     */
    @Export(name="bootOrders", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> bootOrders;

    /**
     * @return The guest will attempt to boot from devices in the order they appear here
     * 
     */
    public Output<Optional<List<String>>> bootOrders() {
        return Codegen.optional(this.bootOrders);
    }
    /**
     * The CDROM drive
     * 
     */
    @Export(name="cdrom", refs={VirtualMachineCdrom.class}, tree="[0]")
    private Output</* @Nullable */ VirtualMachineCdrom> cdrom;

    /**
     * @return The CDROM drive
     * 
     */
    public Output<Optional<VirtualMachineCdrom>> cdrom() {
        return Codegen.optional(this.cdrom);
    }
    /**
     * The cloning configuration
     * 
     */
    @Export(name="clone", refs={VirtualMachineClone.class}, tree="[0]")
    private Output</* @Nullable */ VirtualMachineClone> clone;

    /**
     * @return The cloning configuration
     * 
     */
    public Output<Optional<VirtualMachineClone>> clone_() {
        return Codegen.optional(this.clone);
    }
    /**
     * The CPU allocation
     * 
     */
    @Export(name="cpu", refs={VirtualMachineCpu.class}, tree="[0]")
    private Output</* @Nullable */ VirtualMachineCpu> cpu;

    /**
     * @return The CPU allocation
     * 
     */
    public Output<Optional<VirtualMachineCpu>> cpu() {
        return Codegen.optional(this.cpu);
    }
    /**
     * The description
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return The description
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * The disk devices
     * 
     */
    @Export(name="disks", refs={List.class,VirtualMachineDisk.class}, tree="[0,1]")
    private Output</* @Nullable */ List<VirtualMachineDisk>> disks;

    /**
     * @return The disk devices
     * 
     */
    public Output<Optional<List<VirtualMachineDisk>>> disks() {
        return Codegen.optional(this.disks);
    }
    /**
     * The efidisk device
     * 
     */
    @Export(name="efiDisk", refs={VirtualMachineEfiDisk.class}, tree="[0]")
    private Output</* @Nullable */ VirtualMachineEfiDisk> efiDisk;

    /**
     * @return The efidisk device
     * 
     */
    public Output<Optional<VirtualMachineEfiDisk>> efiDisk() {
        return Codegen.optional(this.efiDisk);
    }
    /**
     * The Host PCI devices mapped to the VM
     * 
     */
    @Export(name="hostpcis", refs={List.class,VirtualMachineHostpci.class}, tree="[0,1]")
    private Output</* @Nullable */ List<VirtualMachineHostpci>> hostpcis;

    /**
     * @return The Host PCI devices mapped to the VM
     * 
     */
    public Output<Optional<List<VirtualMachineHostpci>>> hostpcis() {
        return Codegen.optional(this.hostpcis);
    }
    /**
     * The cloud-init configuration
     * 
     */
    @Export(name="initialization", refs={VirtualMachineInitialization.class}, tree="[0]")
    private Output</* @Nullable */ VirtualMachineInitialization> initialization;

    /**
     * @return The cloud-init configuration
     * 
     */
    public Output<Optional<VirtualMachineInitialization>> initialization() {
        return Codegen.optional(this.initialization);
    }
    /**
     * The IPv4 addresses published by the QEMU agent
     * 
     */
    @Export(name="ipv4Addresses", refs={List.class,String.class}, tree="[0,[0,1]]")
    private Output<List<List<String>>> ipv4Addresses;

    /**
     * @return The IPv4 addresses published by the QEMU agent
     * 
     */
    public Output<List<List<String>>> ipv4Addresses() {
        return this.ipv4Addresses;
    }
    /**
     * The IPv6 addresses published by the QEMU agent
     * 
     */
    @Export(name="ipv6Addresses", refs={List.class,String.class}, tree="[0,[0,1]]")
    private Output<List<List<String>>> ipv6Addresses;

    /**
     * @return The IPv6 addresses published by the QEMU agent
     * 
     */
    public Output<List<List<String>>> ipv6Addresses() {
        return this.ipv6Addresses;
    }
    /**
     * The keyboard layout
     * 
     */
    @Export(name="keyboardLayout", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> keyboardLayout;

    /**
     * @return The keyboard layout
     * 
     */
    public Output<Optional<String>> keyboardLayout() {
        return Codegen.optional(this.keyboardLayout);
    }
    /**
     * The args implementation
     * 
     */
    @Export(name="kvmArguments", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> kvmArguments;

    /**
     * @return The args implementation
     * 
     */
    public Output<Optional<String>> kvmArguments() {
        return Codegen.optional(this.kvmArguments);
    }
    /**
     * The MAC addresses for the network interfaces
     * 
     */
    @Export(name="macAddresses", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> macAddresses;

    /**
     * @return The MAC addresses for the network interfaces
     * 
     */
    public Output<List<String>> macAddresses() {
        return this.macAddresses;
    }
    /**
     * The VM machine type, either default i440fx or q35
     * 
     */
    @Export(name="machine", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> machine;

    /**
     * @return The VM machine type, either default i440fx or q35
     * 
     */
    public Output<Optional<String>> machine() {
        return Codegen.optional(this.machine);
    }
    /**
     * The memory allocation
     * 
     */
    @Export(name="memory", refs={VirtualMachineMemory.class}, tree="[0]")
    private Output</* @Nullable */ VirtualMachineMemory> memory;

    /**
     * @return The memory allocation
     * 
     */
    public Output<Optional<VirtualMachineMemory>> memory() {
        return Codegen.optional(this.memory);
    }
    /**
     * The name
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The network devices
     * 
     */
    @Export(name="networkDevices", refs={List.class,VirtualMachineNetworkDevice.class}, tree="[0,1]")
    private Output</* @Nullable */ List<VirtualMachineNetworkDevice>> networkDevices;

    /**
     * @return The network devices
     * 
     */
    public Output<Optional<List<VirtualMachineNetworkDevice>>> networkDevices() {
        return Codegen.optional(this.networkDevices);
    }
    /**
     * The network interface names published by the QEMU agent
     * 
     */
    @Export(name="networkInterfaceNames", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> networkInterfaceNames;

    /**
     * @return The network interface names published by the QEMU agent
     * 
     */
    public Output<List<String>> networkInterfaceNames() {
        return this.networkInterfaceNames;
    }
    /**
     * The node name
     * 
     */
    @Export(name="nodeName", refs={String.class}, tree="[0]")
    private Output<String> nodeName;

    /**
     * @return The node name
     * 
     */
    public Output<String> nodeName() {
        return this.nodeName;
    }
    /**
     * Start VM on Node boot
     * 
     */
    @Export(name="onBoot", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> onBoot;

    /**
     * @return Start VM on Node boot
     * 
     */
    public Output<Optional<Boolean>> onBoot() {
        return Codegen.optional(this.onBoot);
    }
    /**
     * The operating system configuration
     * 
     */
    @Export(name="operatingSystem", refs={VirtualMachineOperatingSystem.class}, tree="[0]")
    private Output</* @Nullable */ VirtualMachineOperatingSystem> operatingSystem;

    /**
     * @return The operating system configuration
     * 
     */
    public Output<Optional<VirtualMachineOperatingSystem>> operatingSystem() {
        return Codegen.optional(this.operatingSystem);
    }
    /**
     * The ID of the pool to assign the virtual machine to
     * 
     */
    @Export(name="poolId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> poolId;

    /**
     * @return The ID of the pool to assign the virtual machine to
     * 
     */
    public Output<Optional<String>> poolId() {
        return Codegen.optional(this.poolId);
    }
    /**
     * Whether to reboot vm after creation
     * 
     */
    @Export(name="reboot", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> reboot;

    /**
     * @return Whether to reboot vm after creation
     * 
     */
    public Output<Optional<Boolean>> reboot() {
        return Codegen.optional(this.reboot);
    }
    /**
     * The SCSI hardware type
     * 
     */
    @Export(name="scsiHardware", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> scsiHardware;

    /**
     * @return The SCSI hardware type
     * 
     */
    public Output<Optional<String>> scsiHardware() {
        return Codegen.optional(this.scsiHardware);
    }
    /**
     * The serial devices
     * 
     */
    @Export(name="serialDevices", refs={List.class,VirtualMachineSerialDevice.class}, tree="[0,1]")
    private Output</* @Nullable */ List<VirtualMachineSerialDevice>> serialDevices;

    /**
     * @return The serial devices
     * 
     */
    public Output<Optional<List<VirtualMachineSerialDevice>>> serialDevices() {
        return Codegen.optional(this.serialDevices);
    }
    /**
     * Whether to start the virtual machine
     * 
     */
    @Export(name="started", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> started;

    /**
     * @return Whether to start the virtual machine
     * 
     */
    public Output<Optional<Boolean>> started() {
        return Codegen.optional(this.started);
    }
    /**
     * Whether to enable the USB tablet device
     * 
     */
    @Export(name="tabletDevice", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tabletDevice;

    /**
     * @return Whether to enable the USB tablet device
     * 
     */
    public Output<Optional<Boolean>> tabletDevice() {
        return Codegen.optional(this.tabletDevice);
    }
    /**
     * Tags of the virtual machine. This is only meta information.
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return Tags of the virtual machine. This is only meta information.
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * Whether to create a template
     * 
     */
    @Export(name="template", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> template;

    /**
     * @return Whether to create a template
     * 
     */
    public Output<Optional<Boolean>> template() {
        return Codegen.optional(this.template);
    }
    /**
     * Clone VM timeout
     * 
     */
    @Export(name="timeoutClone", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> timeoutClone;

    /**
     * @return Clone VM timeout
     * 
     */
    public Output<Optional<Integer>> timeoutClone() {
        return Codegen.optional(this.timeoutClone);
    }
    /**
     * MoveDisk timeout
     * 
     */
    @Export(name="timeoutMoveDisk", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> timeoutMoveDisk;

    /**
     * @return MoveDisk timeout
     * 
     */
    public Output<Optional<Integer>> timeoutMoveDisk() {
        return Codegen.optional(this.timeoutMoveDisk);
    }
    /**
     * Reboot timeout
     * 
     */
    @Export(name="timeoutReboot", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> timeoutReboot;

    /**
     * @return Reboot timeout
     * 
     */
    public Output<Optional<Integer>> timeoutReboot() {
        return Codegen.optional(this.timeoutReboot);
    }
    /**
     * Shutdown timeout
     * 
     */
    @Export(name="timeoutShutdownVm", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> timeoutShutdownVm;

    /**
     * @return Shutdown timeout
     * 
     */
    public Output<Optional<Integer>> timeoutShutdownVm() {
        return Codegen.optional(this.timeoutShutdownVm);
    }
    /**
     * Start VM timeout
     * 
     */
    @Export(name="timeoutStartVm", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> timeoutStartVm;

    /**
     * @return Start VM timeout
     * 
     */
    public Output<Optional<Integer>> timeoutStartVm() {
        return Codegen.optional(this.timeoutStartVm);
    }
    /**
     * Stop VM timeout
     * 
     */
    @Export(name="timeoutStopVm", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> timeoutStopVm;

    /**
     * @return Stop VM timeout
     * 
     */
    public Output<Optional<Integer>> timeoutStopVm() {
        return Codegen.optional(this.timeoutStopVm);
    }
    /**
     * The VGA configuration
     * 
     */
    @Export(name="vga", refs={VirtualMachineVga.class}, tree="[0]")
    private Output</* @Nullable */ VirtualMachineVga> vga;

    /**
     * @return The VGA configuration
     * 
     */
    public Output<Optional<VirtualMachineVga>> vga() {
        return Codegen.optional(this.vga);
    }
    /**
     * The VM identifier
     * 
     */
    @Export(name="vmId", refs={Integer.class}, tree="[0]")
    private Output<Integer> vmId;

    /**
     * @return The VM identifier
     * 
     */
    public Output<Integer> vmId() {
        return this.vmId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public VirtualMachine(String name) {
        this(name, VirtualMachineArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public VirtualMachine(String name, VirtualMachineArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public VirtualMachine(String name, VirtualMachineArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("proxmoxve:VM/virtualMachine:VirtualMachine", name, args == null ? VirtualMachineArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private VirtualMachine(String name, Output<String> id, @Nullable VirtualMachineState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("proxmoxve:VM/virtualMachine:VirtualMachine", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static VirtualMachine get(String name, Output<String> id, @Nullable VirtualMachineState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new VirtualMachine(name, id, state, options);
    }
}

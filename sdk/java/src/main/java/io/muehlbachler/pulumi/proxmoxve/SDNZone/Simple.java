// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.SDNZone;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import io.muehlbachler.pulumi.proxmoxve.SDNZone.SimpleArgs;
import io.muehlbachler.pulumi.proxmoxve.SDNZone.inputs.SimpleState;
import io.muehlbachler.pulumi.proxmoxve.Utilities;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Simple Zone in Proxmox SDN. It will create an isolated VNet bridge. This bridge is not linked to a physical interface, and VM traffic is only local on each the node. It can be used in NAT or routed setups.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import io.muehlbachler.pulumi.proxmoxve.SDNZone.Simple;
 * import io.muehlbachler.pulumi.proxmoxve.SDNZone.SimpleArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Simple("example", SimpleArgs.builder()
 *             .dns("1.1.1.1")
 *             .dnsZone("example.com")
 *             .zoneId("simple1")
 *             .ipam("pve")
 *             .mtu(1500)
 *             .nodes("pve")
 *             .reverseDns("1.1.1.1")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * #!/usr/bin/env sh
 * 
 * Simple SDN zone can be imported using its unique identifier (zone ID)
 * 
 * ```sh
 * $ pulumi import proxmoxve:SDNZone/simple:Simple example simple1
 * ```
 * 
 */
@ResourceType(type="proxmoxve:SDNZone/simple:Simple")
public class Simple extends com.pulumi.resources.CustomResource {
    /**
     * DNS API server address.
     * 
     */
    @Export(name="dns", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> dns;

    /**
     * @return DNS API server address.
     * 
     */
    public Output<Optional<String>> dns() {
        return Codegen.optional(this.dns);
    }
    /**
     * DNS domain name. Used to register hostnames, such as `&lt;hostname&gt;.&lt;domain&gt;`. The DNS zone must already exist on the DNS server.
     * 
     */
    @Export(name="dnsZone", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> dnsZone;

    /**
     * @return DNS domain name. Used to register hostnames, such as `&lt;hostname&gt;.&lt;domain&gt;`. The DNS zone must already exist on the DNS server.
     * 
     */
    public Output<Optional<String>> dnsZone() {
        return Codegen.optional(this.dnsZone);
    }
    /**
     * IP Address Management system.
     * 
     */
    @Export(name="ipam", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipam;

    /**
     * @return IP Address Management system.
     * 
     */
    public Output<Optional<String>> ipam() {
        return Codegen.optional(this.ipam);
    }
    /**
     * MTU value for the zone.
     * 
     */
    @Export(name="mtu", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> mtu;

    /**
     * @return MTU value for the zone.
     * 
     */
    public Output<Optional<Integer>> mtu() {
        return Codegen.optional(this.mtu);
    }
    /**
     * The Proxmox nodes which the zone and associated VNets should be deployed on
     * 
     */
    @Export(name="nodes", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> nodes;

    /**
     * @return The Proxmox nodes which the zone and associated VNets should be deployed on
     * 
     */
    public Output<List<String>> nodes() {
        return this.nodes;
    }
    /**
     * Reverse DNS API server address.
     * 
     */
    @Export(name="reverseDns", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> reverseDns;

    /**
     * @return Reverse DNS API server address.
     * 
     */
    public Output<Optional<String>> reverseDns() {
        return Codegen.optional(this.reverseDns);
    }
    /**
     * The unique identifier of the SDN zone.
     * 
     */
    @Export(name="zoneId", refs={String.class}, tree="[0]")
    private Output<String> zoneId;

    /**
     * @return The unique identifier of the SDN zone.
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Simple(java.lang.String name) {
        this(name, SimpleArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Simple(java.lang.String name, SimpleArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Simple(java.lang.String name, SimpleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("proxmoxve:SDNZone/simple:Simple", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Simple(java.lang.String name, Output<java.lang.String> id, @Nullable SimpleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("proxmoxve:SDNZone/simple:Simple", name, state, makeResourceOptions(options, id), false);
    }

    private static SimpleArgs makeArgs(SimpleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? SimpleArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/muhlba91/pulumi-proxmoxve")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Simple get(java.lang.String name, Output<java.lang.String> id, @Nullable SimpleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Simple(name, id, state, options);
    }
}

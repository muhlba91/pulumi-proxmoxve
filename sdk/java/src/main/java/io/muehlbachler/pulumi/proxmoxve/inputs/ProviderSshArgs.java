// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import io.muehlbachler.pulumi.proxmoxve.inputs.ProviderSshNodeArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProviderSshArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProviderSshArgs Empty = new ProviderSshArgs();

    /**
     * Whether to use the SSH agent for authentication. Takes precedence over the `private_key` and `password` fields. Defaults to the value of the `PROXMOX_VE_SSH_AGENT` environment variable, or `false` if not set.
     * 
     */
    @Import(name="agent")
    private @Nullable Output<Boolean> agent;

    /**
     * @return Whether to use the SSH agent for authentication. Takes precedence over the `private_key` and `password` fields. Defaults to the value of the `PROXMOX_VE_SSH_AGENT` environment variable, or `false` if not set.
     * 
     */
    public Optional<Output<Boolean>> agent() {
        return Optional.ofNullable(this.agent);
    }

    /**
     * Whether to enable SSH agent forwarding. Defaults to the value of the `PROXMOX_VE_SSH_AGENT_FORWARDING` environment variable, or `false` if not set.
     * 
     */
    @Import(name="agentForwarding")
    private @Nullable Output<Boolean> agentForwarding;

    /**
     * @return Whether to enable SSH agent forwarding. Defaults to the value of the `PROXMOX_VE_SSH_AGENT_FORWARDING` environment variable, or `false` if not set.
     * 
     */
    public Optional<Output<Boolean>> agentForwarding() {
        return Optional.ofNullable(this.agentForwarding);
    }

    /**
     * The path to the SSH agent socket. Defaults to the value of the `SSH_AUTH_SOCK` environment variable.
     * 
     */
    @Import(name="agentSocket")
    private @Nullable Output<String> agentSocket;

    /**
     * @return The path to the SSH agent socket. Defaults to the value of the `SSH_AUTH_SOCK` environment variable.
     * 
     */
    public Optional<Output<String>> agentSocket() {
        return Optional.ofNullable(this.agentSocket);
    }

    /**
     * Overrides for SSH connection configuration for a Proxmox VE node.
     * 
     */
    @Import(name="nodes")
    private @Nullable Output<List<ProviderSshNodeArgs>> nodes;

    /**
     * @return Overrides for SSH connection configuration for a Proxmox VE node.
     * 
     */
    public Optional<Output<List<ProviderSshNodeArgs>>> nodes() {
        return Optional.ofNullable(this.nodes);
    }

    /**
     * The password used for the SSH connection. Defaults to the value of the `password` field of the `provider` block.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The password used for the SSH connection. Defaults to the value of the `password` field of the `provider` block.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The unencrypted private key (in PEM format) used for the SSH connection. Defaults to the value of the `PROXMOX_VE_SSH_PRIVATE_KEY` environment variable.
     * 
     */
    @Import(name="privateKey")
    private @Nullable Output<String> privateKey;

    /**
     * @return The unencrypted private key (in PEM format) used for the SSH connection. Defaults to the value of the `PROXMOX_VE_SSH_PRIVATE_KEY` environment variable.
     * 
     */
    public Optional<Output<String>> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }

    /**
     * The password for the SOCKS5 proxy server. Defaults to the value of the `PROXMOX_VE_SSH_SOCKS5_PASSWORD` environment variable.
     * 
     */
    @Import(name="socks5Password")
    private @Nullable Output<String> socks5Password;

    /**
     * @return The password for the SOCKS5 proxy server. Defaults to the value of the `PROXMOX_VE_SSH_SOCKS5_PASSWORD` environment variable.
     * 
     */
    public Optional<Output<String>> socks5Password() {
        return Optional.ofNullable(this.socks5Password);
    }

    /**
     * The address:port of the SOCKS5 proxy server. Defaults to the value of the `PROXMOX_VE_SSH_SOCKS5_SERVER` environment variable.
     * 
     */
    @Import(name="socks5Server")
    private @Nullable Output<String> socks5Server;

    /**
     * @return The address:port of the SOCKS5 proxy server. Defaults to the value of the `PROXMOX_VE_SSH_SOCKS5_SERVER` environment variable.
     * 
     */
    public Optional<Output<String>> socks5Server() {
        return Optional.ofNullable(this.socks5Server);
    }

    /**
     * The username for the SOCKS5 proxy server. Defaults to the value of the `PROXMOX_VE_SSH_SOCKS5_USERNAME` environment variable.
     * 
     */
    @Import(name="socks5Username")
    private @Nullable Output<String> socks5Username;

    /**
     * @return The username for the SOCKS5 proxy server. Defaults to the value of the `PROXMOX_VE_SSH_SOCKS5_USERNAME` environment variable.
     * 
     */
    public Optional<Output<String>> socks5Username() {
        return Optional.ofNullable(this.socks5Username);
    }

    /**
     * The username used for the SSH connection. Defaults to the value of the `username` field of the `provider` block.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return The username used for the SSH connection. Defaults to the value of the `username` field of the `provider` block.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private ProviderSshArgs() {}

    private ProviderSshArgs(ProviderSshArgs $) {
        this.agent = $.agent;
        this.agentForwarding = $.agentForwarding;
        this.agentSocket = $.agentSocket;
        this.nodes = $.nodes;
        this.password = $.password;
        this.privateKey = $.privateKey;
        this.socks5Password = $.socks5Password;
        this.socks5Server = $.socks5Server;
        this.socks5Username = $.socks5Username;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProviderSshArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProviderSshArgs $;

        public Builder() {
            $ = new ProviderSshArgs();
        }

        public Builder(ProviderSshArgs defaults) {
            $ = new ProviderSshArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param agent Whether to use the SSH agent for authentication. Takes precedence over the `private_key` and `password` fields. Defaults to the value of the `PROXMOX_VE_SSH_AGENT` environment variable, or `false` if not set.
         * 
         * @return builder
         * 
         */
        public Builder agent(@Nullable Output<Boolean> agent) {
            $.agent = agent;
            return this;
        }

        /**
         * @param agent Whether to use the SSH agent for authentication. Takes precedence over the `private_key` and `password` fields. Defaults to the value of the `PROXMOX_VE_SSH_AGENT` environment variable, or `false` if not set.
         * 
         * @return builder
         * 
         */
        public Builder agent(Boolean agent) {
            return agent(Output.of(agent));
        }

        /**
         * @param agentForwarding Whether to enable SSH agent forwarding. Defaults to the value of the `PROXMOX_VE_SSH_AGENT_FORWARDING` environment variable, or `false` if not set.
         * 
         * @return builder
         * 
         */
        public Builder agentForwarding(@Nullable Output<Boolean> agentForwarding) {
            $.agentForwarding = agentForwarding;
            return this;
        }

        /**
         * @param agentForwarding Whether to enable SSH agent forwarding. Defaults to the value of the `PROXMOX_VE_SSH_AGENT_FORWARDING` environment variable, or `false` if not set.
         * 
         * @return builder
         * 
         */
        public Builder agentForwarding(Boolean agentForwarding) {
            return agentForwarding(Output.of(agentForwarding));
        }

        /**
         * @param agentSocket The path to the SSH agent socket. Defaults to the value of the `SSH_AUTH_SOCK` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder agentSocket(@Nullable Output<String> agentSocket) {
            $.agentSocket = agentSocket;
            return this;
        }

        /**
         * @param agentSocket The path to the SSH agent socket. Defaults to the value of the `SSH_AUTH_SOCK` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder agentSocket(String agentSocket) {
            return agentSocket(Output.of(agentSocket));
        }

        /**
         * @param nodes Overrides for SSH connection configuration for a Proxmox VE node.
         * 
         * @return builder
         * 
         */
        public Builder nodes(@Nullable Output<List<ProviderSshNodeArgs>> nodes) {
            $.nodes = nodes;
            return this;
        }

        /**
         * @param nodes Overrides for SSH connection configuration for a Proxmox VE node.
         * 
         * @return builder
         * 
         */
        public Builder nodes(List<ProviderSshNodeArgs> nodes) {
            return nodes(Output.of(nodes));
        }

        /**
         * @param nodes Overrides for SSH connection configuration for a Proxmox VE node.
         * 
         * @return builder
         * 
         */
        public Builder nodes(ProviderSshNodeArgs... nodes) {
            return nodes(List.of(nodes));
        }

        /**
         * @param password The password used for the SSH connection. Defaults to the value of the `password` field of the `provider` block.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password used for the SSH connection. Defaults to the value of the `password` field of the `provider` block.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param privateKey The unencrypted private key (in PEM format) used for the SSH connection. Defaults to the value of the `PROXMOX_VE_SSH_PRIVATE_KEY` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(@Nullable Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param privateKey The unencrypted private key (in PEM format) used for the SSH connection. Defaults to the value of the `PROXMOX_VE_SSH_PRIVATE_KEY` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        /**
         * @param socks5Password The password for the SOCKS5 proxy server. Defaults to the value of the `PROXMOX_VE_SSH_SOCKS5_PASSWORD` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder socks5Password(@Nullable Output<String> socks5Password) {
            $.socks5Password = socks5Password;
            return this;
        }

        /**
         * @param socks5Password The password for the SOCKS5 proxy server. Defaults to the value of the `PROXMOX_VE_SSH_SOCKS5_PASSWORD` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder socks5Password(String socks5Password) {
            return socks5Password(Output.of(socks5Password));
        }

        /**
         * @param socks5Server The address:port of the SOCKS5 proxy server. Defaults to the value of the `PROXMOX_VE_SSH_SOCKS5_SERVER` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder socks5Server(@Nullable Output<String> socks5Server) {
            $.socks5Server = socks5Server;
            return this;
        }

        /**
         * @param socks5Server The address:port of the SOCKS5 proxy server. Defaults to the value of the `PROXMOX_VE_SSH_SOCKS5_SERVER` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder socks5Server(String socks5Server) {
            return socks5Server(Output.of(socks5Server));
        }

        /**
         * @param socks5Username The username for the SOCKS5 proxy server. Defaults to the value of the `PROXMOX_VE_SSH_SOCKS5_USERNAME` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder socks5Username(@Nullable Output<String> socks5Username) {
            $.socks5Username = socks5Username;
            return this;
        }

        /**
         * @param socks5Username The username for the SOCKS5 proxy server. Defaults to the value of the `PROXMOX_VE_SSH_SOCKS5_USERNAME` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder socks5Username(String socks5Username) {
            return socks5Username(Output.of(socks5Username));
        }

        /**
         * @param username The username used for the SSH connection. Defaults to the value of the `username` field of the `provider` block.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The username used for the SSH connection. Defaults to the value of the `username` field of the `provider` block.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public ProviderSshArgs build() {
            return $;
        }
    }

}

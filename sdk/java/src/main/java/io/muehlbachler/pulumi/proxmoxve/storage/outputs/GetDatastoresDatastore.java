// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.Storage.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDatastoresDatastore {
    /**
     * @return Whether the store is active.
     * 
     */
    private @Nullable Boolean active;
    /**
     * @return Allowed store content types.
     * 
     */
    private List<String> contentTypes;
    /**
     * @return Whether the store is enabled.
     * 
     */
    private @Nullable Boolean enabled;
    /**
     * @return The ID of the store.
     * 
     */
    private String id;
    /**
     * @return The name of the node the store is on.
     * 
     */
    private String nodeName;
    /**
     * @return Shared flag from store configuration.
     * 
     */
    private @Nullable Boolean shared;
    /**
     * @return Available store space in bytes.
     * 
     */
    private @Nullable Integer spaceAvailable;
    /**
     * @return Total store space in bytes.
     * 
     */
    private @Nullable Integer spaceTotal;
    /**
     * @return Used store space in bytes.
     * 
     */
    private @Nullable Integer spaceUsed;
    /**
     * @return Used fraction (used/total).
     * 
     */
    private @Nullable Double spaceUsedFraction;
    /**
     * @return Store type.
     * 
     */
    private String type;

    private GetDatastoresDatastore() {}
    /**
     * @return Whether the store is active.
     * 
     */
    public Optional<Boolean> active() {
        return Optional.ofNullable(this.active);
    }
    /**
     * @return Allowed store content types.
     * 
     */
    public List<String> contentTypes() {
        return this.contentTypes;
    }
    /**
     * @return Whether the store is enabled.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return The ID of the store.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name of the node the store is on.
     * 
     */
    public String nodeName() {
        return this.nodeName;
    }
    /**
     * @return Shared flag from store configuration.
     * 
     */
    public Optional<Boolean> shared() {
        return Optional.ofNullable(this.shared);
    }
    /**
     * @return Available store space in bytes.
     * 
     */
    public Optional<Integer> spaceAvailable() {
        return Optional.ofNullable(this.spaceAvailable);
    }
    /**
     * @return Total store space in bytes.
     * 
     */
    public Optional<Integer> spaceTotal() {
        return Optional.ofNullable(this.spaceTotal);
    }
    /**
     * @return Used store space in bytes.
     * 
     */
    public Optional<Integer> spaceUsed() {
        return Optional.ofNullable(this.spaceUsed);
    }
    /**
     * @return Used fraction (used/total).
     * 
     */
    public Optional<Double> spaceUsedFraction() {
        return Optional.ofNullable(this.spaceUsedFraction);
    }
    /**
     * @return Store type.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatastoresDatastore defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean active;
        private List<String> contentTypes;
        private @Nullable Boolean enabled;
        private String id;
        private String nodeName;
        private @Nullable Boolean shared;
        private @Nullable Integer spaceAvailable;
        private @Nullable Integer spaceTotal;
        private @Nullable Integer spaceUsed;
        private @Nullable Double spaceUsedFraction;
        private String type;
        public Builder() {}
        public Builder(GetDatastoresDatastore defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.active = defaults.active;
    	      this.contentTypes = defaults.contentTypes;
    	      this.enabled = defaults.enabled;
    	      this.id = defaults.id;
    	      this.nodeName = defaults.nodeName;
    	      this.shared = defaults.shared;
    	      this.spaceAvailable = defaults.spaceAvailable;
    	      this.spaceTotal = defaults.spaceTotal;
    	      this.spaceUsed = defaults.spaceUsed;
    	      this.spaceUsedFraction = defaults.spaceUsedFraction;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder active(@Nullable Boolean active) {

            this.active = active;
            return this;
        }
        @CustomType.Setter
        public Builder contentTypes(List<String> contentTypes) {
            if (contentTypes == null) {
              throw new MissingRequiredPropertyException("GetDatastoresDatastore", "contentTypes");
            }
            this.contentTypes = contentTypes;
            return this;
        }
        public Builder contentTypes(String... contentTypes) {
            return contentTypes(List.of(contentTypes));
        }
        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {

            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDatastoresDatastore", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder nodeName(String nodeName) {
            if (nodeName == null) {
              throw new MissingRequiredPropertyException("GetDatastoresDatastore", "nodeName");
            }
            this.nodeName = nodeName;
            return this;
        }
        @CustomType.Setter
        public Builder shared(@Nullable Boolean shared) {

            this.shared = shared;
            return this;
        }
        @CustomType.Setter
        public Builder spaceAvailable(@Nullable Integer spaceAvailable) {

            this.spaceAvailable = spaceAvailable;
            return this;
        }
        @CustomType.Setter
        public Builder spaceTotal(@Nullable Integer spaceTotal) {

            this.spaceTotal = spaceTotal;
            return this;
        }
        @CustomType.Setter
        public Builder spaceUsed(@Nullable Integer spaceUsed) {

            this.spaceUsed = spaceUsed;
            return this;
        }
        @CustomType.Setter
        public Builder spaceUsedFraction(@Nullable Double spaceUsedFraction) {

            this.spaceUsedFraction = spaceUsedFraction;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetDatastoresDatastore", "type");
            }
            this.type = type;
            return this;
        }
        public GetDatastoresDatastore build() {
            final var _resultValue = new GetDatastoresDatastore();
            _resultValue.active = active;
            _resultValue.contentTypes = contentTypes;
            _resultValue.enabled = enabled;
            _resultValue.id = id;
            _resultValue.nodeName = nodeName;
            _resultValue.shared = shared;
            _resultValue.spaceAvailable = spaceAvailable;
            _resultValue.spaceTotal = spaceTotal;
            _resultValue.spaceUsed = spaceUsed;
            _resultValue.spaceUsedFraction = spaceUsedFraction;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}

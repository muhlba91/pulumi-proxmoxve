// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.Apt_standard;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import io.muehlbachler.pulumi.proxmoxve.Apt_standard.RepositoryArgs;
import io.muehlbachler.pulumi.proxmoxve.Apt_standard.inputs.RepositoryState;
import io.muehlbachler.pulumi.proxmoxve.Utilities;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Manages an APT standard repository of a Proxmox VE node.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.proxmoxve.Apt.Repository;
 * import com.pulumi.proxmoxve.Apt.RepositoryArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleRepository = new Repository("exampleRepository", RepositoryArgs.builder()
 *             .handle("no-subscription")
 *             .node("pve")
 *             .build());
 * 
 *         var exampleApt_repositoryRepository = new Repository("exampleApt/repositoryRepository", RepositoryArgs.builder()
 *             .enabled(true)
 *             .filePath(exampleRepository.filePath())
 *             .index(exampleRepository.index())
 *             .node(exampleRepository.node())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * #!/usr/bin/env sh
 * 
 * An APT standard repository can be imported using a comma-separated list consisting of the name of the Proxmox VE node,
 * 
 * and the standard repository handle in the exact same order, e.g.:
 * 
 * ```sh
 * $ pulumi import proxmoxve:Apt/standard/repository:Repository example pve,no-subscription
 * ```
 * 
 */
@ResourceType(type="proxmoxve:Apt/standard/repository:Repository")
public class Repository extends com.pulumi.resources.CustomResource {
    /**
     * The description of the APT standard repository.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return The description of the APT standard repository.
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * The absolute path of the source list file that contains this standard repository.
     * 
     */
    @Export(name="filePath", refs={String.class}, tree="[0]")
    private Output<String> filePath;

    /**
     * @return The absolute path of the source list file that contains this standard repository.
     * 
     */
    public Output<String> filePath() {
        return this.filePath;
    }
    /**
     * The handle of the APT standard repository. Must be `ceph-quincy-enterprise` | `ceph-quincy-no-subscription` | `ceph-quincy-test` | `ceph-reef-enterprise` | `ceph-reef-no-subscription` | `ceph-reef-test` | `enterprise` | `no-subscription` | `test`.
     * 
     */
    @Export(name="handle", refs={String.class}, tree="[0]")
    private Output<String> handle;

    /**
     * @return The handle of the APT standard repository. Must be `ceph-quincy-enterprise` | `ceph-quincy-no-subscription` | `ceph-quincy-test` | `ceph-reef-enterprise` | `ceph-reef-no-subscription` | `ceph-reef-test` | `enterprise` | `no-subscription` | `test`.
     * 
     */
    public Output<String> handle() {
        return this.handle;
    }
    /**
     * The index within the defining source list file.
     * 
     */
    @Export(name="index", refs={Integer.class}, tree="[0]")
    private Output<Integer> index;

    /**
     * @return The index within the defining source list file.
     * 
     */
    public Output<Integer> index() {
        return this.index;
    }
    /**
     * The name of the APT standard repository.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the APT standard repository.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The name of the target Proxmox VE node.
     * 
     */
    @Export(name="node", refs={String.class}, tree="[0]")
    private Output<String> node;

    /**
     * @return The name of the target Proxmox VE node.
     * 
     */
    public Output<String> node() {
        return this.node;
    }
    /**
     * Indicates the activation status.
     * 
     */
    @Export(name="status", refs={Integer.class}, tree="[0]")
    private Output<Integer> status;

    /**
     * @return Indicates the activation status.
     * 
     */
    public Output<Integer> status() {
        return this.status;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Repository(java.lang.String name) {
        this(name, RepositoryArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Repository(java.lang.String name, RepositoryArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Repository(java.lang.String name, RepositoryArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("proxmoxve:Apt/standard/repository:Repository", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Repository(java.lang.String name, Output<java.lang.String> id, @Nullable RepositoryState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("proxmoxve:Apt/standard/repository:Repository", name, state, makeResourceOptions(options, id), false);
    }

    private static RepositoryArgs makeArgs(RepositoryArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? RepositoryArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Repository get(java.lang.String name, Output<java.lang.String> id, @Nullable RepositoryState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Repository(name, id, state, options);
    }
}

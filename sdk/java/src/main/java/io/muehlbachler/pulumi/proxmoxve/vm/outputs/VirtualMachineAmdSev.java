// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.VM.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VirtualMachineAmdSev {
    /**
     * @return Sets policy bit to allow Simultaneous Multi Threading (SMT)
     * (Ignored unless for SEV-SNP) (defaults to `true`).
     * 
     */
    private @Nullable Boolean allowSmt;
    /**
     * @return Add kernel hashes to guest firmware for measured linux kernel launch (defaults to `false`).
     * 
     */
    private @Nullable Boolean kernelHashes;
    /**
     * @return Sets policy bit to disallow debugging of guest (defaults
     * to `false`).
     * 
     */
    private @Nullable Boolean noDebug;
    /**
     * @return Sets policy bit to disallow key sharing with other guests (Ignored for SEV-SNP) (defaults to `false`).
     * 
     * The `amd_sev` setting is only allowed for a `root{@literal @}pam` authenticated user.
     * 
     */
    private @Nullable Boolean noKeySharing;
    /**
     * @return Enable standard SEV with `std` or enable experimental SEV-ES with the `es` option or enable experimental SEV-SNP with the `snp` option (defaults to `std`).
     * 
     */
    private @Nullable String type;

    private VirtualMachineAmdSev() {}
    /**
     * @return Sets policy bit to allow Simultaneous Multi Threading (SMT)
     * (Ignored unless for SEV-SNP) (defaults to `true`).
     * 
     */
    public Optional<Boolean> allowSmt() {
        return Optional.ofNullable(this.allowSmt);
    }
    /**
     * @return Add kernel hashes to guest firmware for measured linux kernel launch (defaults to `false`).
     * 
     */
    public Optional<Boolean> kernelHashes() {
        return Optional.ofNullable(this.kernelHashes);
    }
    /**
     * @return Sets policy bit to disallow debugging of guest (defaults
     * to `false`).
     * 
     */
    public Optional<Boolean> noDebug() {
        return Optional.ofNullable(this.noDebug);
    }
    /**
     * @return Sets policy bit to disallow key sharing with other guests (Ignored for SEV-SNP) (defaults to `false`).
     * 
     * The `amd_sev` setting is only allowed for a `root{@literal @}pam` authenticated user.
     * 
     */
    public Optional<Boolean> noKeySharing() {
        return Optional.ofNullable(this.noKeySharing);
    }
    /**
     * @return Enable standard SEV with `std` or enable experimental SEV-ES with the `es` option or enable experimental SEV-SNP with the `snp` option (defaults to `std`).
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualMachineAmdSev defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean allowSmt;
        private @Nullable Boolean kernelHashes;
        private @Nullable Boolean noDebug;
        private @Nullable Boolean noKeySharing;
        private @Nullable String type;
        public Builder() {}
        public Builder(VirtualMachineAmdSev defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowSmt = defaults.allowSmt;
    	      this.kernelHashes = defaults.kernelHashes;
    	      this.noDebug = defaults.noDebug;
    	      this.noKeySharing = defaults.noKeySharing;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder allowSmt(@Nullable Boolean allowSmt) {

            this.allowSmt = allowSmt;
            return this;
        }
        @CustomType.Setter
        public Builder kernelHashes(@Nullable Boolean kernelHashes) {

            this.kernelHashes = kernelHashes;
            return this;
        }
        @CustomType.Setter
        public Builder noDebug(@Nullable Boolean noDebug) {

            this.noDebug = noDebug;
            return this;
        }
        @CustomType.Setter
        public Builder noKeySharing(@Nullable Boolean noKeySharing) {

            this.noKeySharing = noKeySharing;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {

            this.type = type;
            return this;
        }
        public VirtualMachineAmdSev build() {
            final var _resultValue = new VirtualMachineAmdSev();
            _resultValue.allowSmt = allowSmt;
            _resultValue.kernelHashes = kernelHashes;
            _resultValue.noDebug = noDebug;
            _resultValue.noKeySharing = noKeySharing;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}

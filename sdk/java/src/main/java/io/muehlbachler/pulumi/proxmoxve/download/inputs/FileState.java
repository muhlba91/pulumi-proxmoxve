// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.Download.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FileState extends com.pulumi.resources.ResourceArgs {

    public static final FileState Empty = new FileState();

    /**
     * The expected checksum of the file.
     * 
     */
    @Import(name="checksum")
    private @Nullable Output<String> checksum;

    /**
     * @return The expected checksum of the file.
     * 
     */
    public Optional<Output<String>> checksum() {
        return Optional.ofNullable(this.checksum);
    }

    /**
     * The algorithm to calculate the checksum of the file. Must be `md5` | `sha1` | `sha224` | `sha256` | `sha384` | `sha512`.
     * 
     */
    @Import(name="checksumAlgorithm")
    private @Nullable Output<String> checksumAlgorithm;

    /**
     * @return The algorithm to calculate the checksum of the file. Must be `md5` | `sha1` | `sha224` | `sha256` | `sha384` | `sha512`.
     * 
     */
    public Optional<Output<String>> checksumAlgorithm() {
        return Optional.ofNullable(this.checksumAlgorithm);
    }

    /**
     * The file content type. Must be `iso` for VM images or `vztmpl` for LXC images.
     * 
     */
    @Import(name="contentType")
    private @Nullable Output<String> contentType;

    /**
     * @return The file content type. Must be `iso` for VM images or `vztmpl` for LXC images.
     * 
     */
    public Optional<Output<String>> contentType() {
        return Optional.ofNullable(this.contentType);
    }

    /**
     * The identifier for the target datastore.
     * 
     */
    @Import(name="datastoreId")
    private @Nullable Output<String> datastoreId;

    /**
     * @return The identifier for the target datastore.
     * 
     */
    public Optional<Output<String>> datastoreId() {
        return Optional.ofNullable(this.datastoreId);
    }

    /**
     * Decompress the downloaded file using the specified compression algorithm. Must be one of `gz` | `lzo` | `zst`.
     * 
     */
    @Import(name="decompressionAlgorithm")
    private @Nullable Output<String> decompressionAlgorithm;

    /**
     * @return Decompress the downloaded file using the specified compression algorithm. Must be one of `gz` | `lzo` | `zst`.
     * 
     */
    public Optional<Output<String>> decompressionAlgorithm() {
        return Optional.ofNullable(this.decompressionAlgorithm);
    }

    /**
     * The file name. If not provided, it is calculated using `url`. PVE will raise &#39;wrong file extension&#39; error for some popular extensions file `.raw` or `.qcow2`. Workaround is to use e.g. `.img` instead.
     * 
     */
    @Import(name="fileName")
    private @Nullable Output<String> fileName;

    /**
     * @return The file name. If not provided, it is calculated using `url`. PVE will raise &#39;wrong file extension&#39; error for some popular extensions file `.raw` or `.qcow2`. Workaround is to use e.g. `.img` instead.
     * 
     */
    public Optional<Output<String>> fileName() {
        return Optional.ofNullable(this.fileName);
    }

    /**
     * The node name.
     * 
     */
    @Import(name="nodeName")
    private @Nullable Output<String> nodeName;

    /**
     * @return The node name.
     * 
     */
    public Optional<Output<String>> nodeName() {
        return Optional.ofNullable(this.nodeName);
    }

    /**
     * If `true` and size of uploaded file is different, than size from `url` Content-Length header, file will be downloaded again. If `false`, there will be no checks.
     * 
     */
    @Import(name="overwrite")
    private @Nullable Output<Boolean> overwrite;

    /**
     * @return If `true` and size of uploaded file is different, than size from `url` Content-Length header, file will be downloaded again. If `false`, there will be no checks.
     * 
     */
    public Optional<Output<Boolean>> overwrite() {
        return Optional.ofNullable(this.overwrite);
    }

    /**
     * If `true` and a file with the same name already exists in the datastore, it will be deleted and the new file will be downloaded. If `false` and the file already exists, an error will be returned.
     * 
     */
    @Import(name="overwriteUnmanaged")
    private @Nullable Output<Boolean> overwriteUnmanaged;

    /**
     * @return If `true` and a file with the same name already exists in the datastore, it will be deleted and the new file will be downloaded. If `false` and the file already exists, an error will be returned.
     * 
     */
    public Optional<Output<Boolean>> overwriteUnmanaged() {
        return Optional.ofNullable(this.overwriteUnmanaged);
    }

    /**
     * The file size.
     * 
     */
    @Import(name="size")
    private @Nullable Output<Integer> size;

    /**
     * @return The file size.
     * 
     */
    public Optional<Output<Integer>> size() {
        return Optional.ofNullable(this.size);
    }

    /**
     * The file download timeout seconds. Default is 600 (10min).
     * 
     */
    @Import(name="uploadTimeout")
    private @Nullable Output<Integer> uploadTimeout;

    /**
     * @return The file download timeout seconds. Default is 600 (10min).
     * 
     */
    public Optional<Output<Integer>> uploadTimeout() {
        return Optional.ofNullable(this.uploadTimeout);
    }

    /**
     * The URL to download the file from. Format `https?://.*`.
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return The URL to download the file from. Format `https?://.*`.
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    /**
     * By default `true`. If `false`, no SSL/TLS certificates will be verified.
     * 
     */
    @Import(name="verify")
    private @Nullable Output<Boolean> verify;

    /**
     * @return By default `true`. If `false`, no SSL/TLS certificates will be verified.
     * 
     */
    public Optional<Output<Boolean>> verify() {
        return Optional.ofNullable(this.verify);
    }

    private FileState() {}

    private FileState(FileState $) {
        this.checksum = $.checksum;
        this.checksumAlgorithm = $.checksumAlgorithm;
        this.contentType = $.contentType;
        this.datastoreId = $.datastoreId;
        this.decompressionAlgorithm = $.decompressionAlgorithm;
        this.fileName = $.fileName;
        this.nodeName = $.nodeName;
        this.overwrite = $.overwrite;
        this.overwriteUnmanaged = $.overwriteUnmanaged;
        this.size = $.size;
        this.uploadTimeout = $.uploadTimeout;
        this.url = $.url;
        this.verify = $.verify;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FileState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FileState $;

        public Builder() {
            $ = new FileState();
        }

        public Builder(FileState defaults) {
            $ = new FileState(Objects.requireNonNull(defaults));
        }

        /**
         * @param checksum The expected checksum of the file.
         * 
         * @return builder
         * 
         */
        public Builder checksum(@Nullable Output<String> checksum) {
            $.checksum = checksum;
            return this;
        }

        /**
         * @param checksum The expected checksum of the file.
         * 
         * @return builder
         * 
         */
        public Builder checksum(String checksum) {
            return checksum(Output.of(checksum));
        }

        /**
         * @param checksumAlgorithm The algorithm to calculate the checksum of the file. Must be `md5` | `sha1` | `sha224` | `sha256` | `sha384` | `sha512`.
         * 
         * @return builder
         * 
         */
        public Builder checksumAlgorithm(@Nullable Output<String> checksumAlgorithm) {
            $.checksumAlgorithm = checksumAlgorithm;
            return this;
        }

        /**
         * @param checksumAlgorithm The algorithm to calculate the checksum of the file. Must be `md5` | `sha1` | `sha224` | `sha256` | `sha384` | `sha512`.
         * 
         * @return builder
         * 
         */
        public Builder checksumAlgorithm(String checksumAlgorithm) {
            return checksumAlgorithm(Output.of(checksumAlgorithm));
        }

        /**
         * @param contentType The file content type. Must be `iso` for VM images or `vztmpl` for LXC images.
         * 
         * @return builder
         * 
         */
        public Builder contentType(@Nullable Output<String> contentType) {
            $.contentType = contentType;
            return this;
        }

        /**
         * @param contentType The file content type. Must be `iso` for VM images or `vztmpl` for LXC images.
         * 
         * @return builder
         * 
         */
        public Builder contentType(String contentType) {
            return contentType(Output.of(contentType));
        }

        /**
         * @param datastoreId The identifier for the target datastore.
         * 
         * @return builder
         * 
         */
        public Builder datastoreId(@Nullable Output<String> datastoreId) {
            $.datastoreId = datastoreId;
            return this;
        }

        /**
         * @param datastoreId The identifier for the target datastore.
         * 
         * @return builder
         * 
         */
        public Builder datastoreId(String datastoreId) {
            return datastoreId(Output.of(datastoreId));
        }

        /**
         * @param decompressionAlgorithm Decompress the downloaded file using the specified compression algorithm. Must be one of `gz` | `lzo` | `zst`.
         * 
         * @return builder
         * 
         */
        public Builder decompressionAlgorithm(@Nullable Output<String> decompressionAlgorithm) {
            $.decompressionAlgorithm = decompressionAlgorithm;
            return this;
        }

        /**
         * @param decompressionAlgorithm Decompress the downloaded file using the specified compression algorithm. Must be one of `gz` | `lzo` | `zst`.
         * 
         * @return builder
         * 
         */
        public Builder decompressionAlgorithm(String decompressionAlgorithm) {
            return decompressionAlgorithm(Output.of(decompressionAlgorithm));
        }

        /**
         * @param fileName The file name. If not provided, it is calculated using `url`. PVE will raise &#39;wrong file extension&#39; error for some popular extensions file `.raw` or `.qcow2`. Workaround is to use e.g. `.img` instead.
         * 
         * @return builder
         * 
         */
        public Builder fileName(@Nullable Output<String> fileName) {
            $.fileName = fileName;
            return this;
        }

        /**
         * @param fileName The file name. If not provided, it is calculated using `url`. PVE will raise &#39;wrong file extension&#39; error for some popular extensions file `.raw` or `.qcow2`. Workaround is to use e.g. `.img` instead.
         * 
         * @return builder
         * 
         */
        public Builder fileName(String fileName) {
            return fileName(Output.of(fileName));
        }

        /**
         * @param nodeName The node name.
         * 
         * @return builder
         * 
         */
        public Builder nodeName(@Nullable Output<String> nodeName) {
            $.nodeName = nodeName;
            return this;
        }

        /**
         * @param nodeName The node name.
         * 
         * @return builder
         * 
         */
        public Builder nodeName(String nodeName) {
            return nodeName(Output.of(nodeName));
        }

        /**
         * @param overwrite If `true` and size of uploaded file is different, than size from `url` Content-Length header, file will be downloaded again. If `false`, there will be no checks.
         * 
         * @return builder
         * 
         */
        public Builder overwrite(@Nullable Output<Boolean> overwrite) {
            $.overwrite = overwrite;
            return this;
        }

        /**
         * @param overwrite If `true` and size of uploaded file is different, than size from `url` Content-Length header, file will be downloaded again. If `false`, there will be no checks.
         * 
         * @return builder
         * 
         */
        public Builder overwrite(Boolean overwrite) {
            return overwrite(Output.of(overwrite));
        }

        /**
         * @param overwriteUnmanaged If `true` and a file with the same name already exists in the datastore, it will be deleted and the new file will be downloaded. If `false` and the file already exists, an error will be returned.
         * 
         * @return builder
         * 
         */
        public Builder overwriteUnmanaged(@Nullable Output<Boolean> overwriteUnmanaged) {
            $.overwriteUnmanaged = overwriteUnmanaged;
            return this;
        }

        /**
         * @param overwriteUnmanaged If `true` and a file with the same name already exists in the datastore, it will be deleted and the new file will be downloaded. If `false` and the file already exists, an error will be returned.
         * 
         * @return builder
         * 
         */
        public Builder overwriteUnmanaged(Boolean overwriteUnmanaged) {
            return overwriteUnmanaged(Output.of(overwriteUnmanaged));
        }

        /**
         * @param size The file size.
         * 
         * @return builder
         * 
         */
        public Builder size(@Nullable Output<Integer> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size The file size.
         * 
         * @return builder
         * 
         */
        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        /**
         * @param uploadTimeout The file download timeout seconds. Default is 600 (10min).
         * 
         * @return builder
         * 
         */
        public Builder uploadTimeout(@Nullable Output<Integer> uploadTimeout) {
            $.uploadTimeout = uploadTimeout;
            return this;
        }

        /**
         * @param uploadTimeout The file download timeout seconds. Default is 600 (10min).
         * 
         * @return builder
         * 
         */
        public Builder uploadTimeout(Integer uploadTimeout) {
            return uploadTimeout(Output.of(uploadTimeout));
        }

        /**
         * @param url The URL to download the file from. Format `https?://.*`.
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The URL to download the file from. Format `https?://.*`.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        /**
         * @param verify By default `true`. If `false`, no SSL/TLS certificates will be verified.
         * 
         * @return builder
         * 
         */
        public Builder verify(@Nullable Output<Boolean> verify) {
            $.verify = verify;
            return this;
        }

        /**
         * @param verify By default `true`. If `false`, no SSL/TLS certificates will be verified.
         * 
         * @return builder
         * 
         */
        public Builder verify(Boolean verify) {
            return verify(Output.of(verify));
        }

        public FileState build() {
            return $;
        }
    }

}

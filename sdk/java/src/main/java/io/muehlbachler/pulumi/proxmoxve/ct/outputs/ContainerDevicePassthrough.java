// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.CT.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ContainerDevicePassthrough {
    /**
     * @return Deny the container to write to the device (defaults to `false`).
     * 
     */
    private @Nullable Boolean denyWrite;
    /**
     * @return Group ID to be assigned to the device node.
     * 
     */
    private @Nullable Integer gid;
    /**
     * @return Access mode to be set on the device node. Must be a
     * 4-digit octal number.
     * 
     */
    private @Nullable String mode;
    /**
     * @return Device to pass through to the container (e.g. `/dev/sda`).
     * 
     */
    private String path;
    /**
     * @return User ID to be assigned to the device node.
     * 
     */
    private @Nullable Integer uid;

    private ContainerDevicePassthrough() {}
    /**
     * @return Deny the container to write to the device (defaults to `false`).
     * 
     */
    public Optional<Boolean> denyWrite() {
        return Optional.ofNullable(this.denyWrite);
    }
    /**
     * @return Group ID to be assigned to the device node.
     * 
     */
    public Optional<Integer> gid() {
        return Optional.ofNullable(this.gid);
    }
    /**
     * @return Access mode to be set on the device node. Must be a
     * 4-digit octal number.
     * 
     */
    public Optional<String> mode() {
        return Optional.ofNullable(this.mode);
    }
    /**
     * @return Device to pass through to the container (e.g. `/dev/sda`).
     * 
     */
    public String path() {
        return this.path;
    }
    /**
     * @return User ID to be assigned to the device node.
     * 
     */
    public Optional<Integer> uid() {
        return Optional.ofNullable(this.uid);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContainerDevicePassthrough defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean denyWrite;
        private @Nullable Integer gid;
        private @Nullable String mode;
        private String path;
        private @Nullable Integer uid;
        public Builder() {}
        public Builder(ContainerDevicePassthrough defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.denyWrite = defaults.denyWrite;
    	      this.gid = defaults.gid;
    	      this.mode = defaults.mode;
    	      this.path = defaults.path;
    	      this.uid = defaults.uid;
        }

        @CustomType.Setter
        public Builder denyWrite(@Nullable Boolean denyWrite) {

            this.denyWrite = denyWrite;
            return this;
        }
        @CustomType.Setter
        public Builder gid(@Nullable Integer gid) {

            this.gid = gid;
            return this;
        }
        @CustomType.Setter
        public Builder mode(@Nullable String mode) {

            this.mode = mode;
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            if (path == null) {
              throw new MissingRequiredPropertyException("ContainerDevicePassthrough", "path");
            }
            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder uid(@Nullable Integer uid) {

            this.uid = uid;
            return this;
        }
        public ContainerDevicePassthrough build() {
            final var _resultValue = new ContainerDevicePassthrough();
            _resultValue.denyWrite = denyWrite;
            _resultValue.gid = gid;
            _resultValue.mode = mode;
            _resultValue.path = path;
            _resultValue.uid = uid;
            return _resultValue;
        }
    }
}

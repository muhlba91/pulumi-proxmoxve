// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetContainerPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetContainerPlainArgs Empty = new GetContainerPlainArgs();

    /**
     * The node name.
     * 
     */
    @Import(name="nodeName", required=true)
    private String nodeName;

    /**
     * @return The node name.
     * 
     */
    public String nodeName() {
        return this.nodeName;
    }

    /**
     * Status of the container
     * 
     */
    @Import(name="status")
    private @Nullable String status;

    /**
     * @return Status of the container
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Is container a template (true) or a regular container (false)
     * 
     */
    @Import(name="template")
    private @Nullable Boolean template;

    /**
     * @return Is container a template (true) or a regular container (false)
     * 
     */
    public Optional<Boolean> template() {
        return Optional.ofNullable(this.template);
    }

    /**
     * The container identifier.
     * 
     */
    @Import(name="vmId", required=true)
    private Integer vmId;

    /**
     * @return The container identifier.
     * 
     */
    public Integer vmId() {
        return this.vmId;
    }

    private GetContainerPlainArgs() {}

    private GetContainerPlainArgs(GetContainerPlainArgs $) {
        this.nodeName = $.nodeName;
        this.status = $.status;
        this.template = $.template;
        this.vmId = $.vmId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetContainerPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetContainerPlainArgs $;

        public Builder() {
            $ = new GetContainerPlainArgs();
        }

        public Builder(GetContainerPlainArgs defaults) {
            $ = new GetContainerPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param nodeName The node name.
         * 
         * @return builder
         * 
         */
        public Builder nodeName(String nodeName) {
            $.nodeName = nodeName;
            return this;
        }

        /**
         * @param status Status of the container
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable String status) {
            $.status = status;
            return this;
        }

        /**
         * @param template Is container a template (true) or a regular container (false)
         * 
         * @return builder
         * 
         */
        public Builder template(@Nullable Boolean template) {
            $.template = template;
            return this;
        }

        /**
         * @param vmId The container identifier.
         * 
         * @return builder
         * 
         */
        public Builder vmId(Integer vmId) {
            $.vmId = vmId;
            return this;
        }

        public GetContainerPlainArgs build() {
            if ($.nodeName == null) {
                throw new MissingRequiredPropertyException("GetContainerPlainArgs", "nodeName");
            }
            if ($.vmId == null) {
                throw new MissingRequiredPropertyException("GetContainerPlainArgs", "vmId");
            }
            return $;
        }
    }

}

// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.Storage;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import io.muehlbachler.pulumi.proxmoxve.Storage.FileArgs;
import io.muehlbachler.pulumi.proxmoxve.Storage.inputs.FileState;
import io.muehlbachler.pulumi.proxmoxve.Storage.outputs.FileSourceFile;
import io.muehlbachler.pulumi.proxmoxve.Storage.outputs.FileSourceRaw;
import io.muehlbachler.pulumi.proxmoxve.Utilities;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="proxmoxve:Storage/file:File")
public class File extends com.pulumi.resources.CustomResource {
    /**
     * The content type
     * 
     */
    @Export(name="contentType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> contentType;

    /**
     * @return The content type
     * 
     */
    public Output<Optional<String>> contentType() {
        return Codegen.optional(this.contentType);
    }
    /**
     * The datastore id
     * 
     */
    @Export(name="datastoreId", refs={String.class}, tree="[0]")
    private Output<String> datastoreId;

    /**
     * @return The datastore id
     * 
     */
    public Output<String> datastoreId() {
        return this.datastoreId;
    }
    /**
     * The file modification date
     * 
     */
    @Export(name="fileModificationDate", refs={String.class}, tree="[0]")
    private Output<String> fileModificationDate;

    /**
     * @return The file modification date
     * 
     */
    public Output<String> fileModificationDate() {
        return this.fileModificationDate;
    }
    /**
     * The file name
     * 
     */
    @Export(name="fileName", refs={String.class}, tree="[0]")
    private Output<String> fileName;

    /**
     * @return The file name
     * 
     */
    public Output<String> fileName() {
        return this.fileName;
    }
    /**
     * The file size in bytes
     * 
     */
    @Export(name="fileSize", refs={Integer.class}, tree="[0]")
    private Output<Integer> fileSize;

    /**
     * @return The file size in bytes
     * 
     */
    public Output<Integer> fileSize() {
        return this.fileSize;
    }
    /**
     * The file tag
     * 
     */
    @Export(name="fileTag", refs={String.class}, tree="[0]")
    private Output<String> fileTag;

    /**
     * @return The file tag
     * 
     */
    public Output<String> fileTag() {
        return this.fileTag;
    }
    /**
     * The node name
     * 
     */
    @Export(name="nodeName", refs={String.class}, tree="[0]")
    private Output<String> nodeName;

    /**
     * @return The node name
     * 
     */
    public Output<String> nodeName() {
        return this.nodeName;
    }
    /**
     * The source file
     * 
     */
    @Export(name="sourceFile", refs={FileSourceFile.class}, tree="[0]")
    private Output</* @Nullable */ FileSourceFile> sourceFile;

    /**
     * @return The source file
     * 
     */
    public Output<Optional<FileSourceFile>> sourceFile() {
        return Codegen.optional(this.sourceFile);
    }
    /**
     * The raw source
     * 
     */
    @Export(name="sourceRaw", refs={FileSourceRaw.class}, tree="[0]")
    private Output</* @Nullable */ FileSourceRaw> sourceRaw;

    /**
     * @return The raw source
     * 
     */
    public Output<Optional<FileSourceRaw>> sourceRaw() {
        return Codegen.optional(this.sourceRaw);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public File(String name) {
        this(name, FileArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public File(String name, FileArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public File(String name, FileArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("proxmoxve:Storage/file:File", name, args == null ? FileArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private File(String name, Output<String> id, @Nullable FileState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("proxmoxve:Storage/file:File", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static File get(String name, Output<String> id, @Nullable FileState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new File(name, id, state, options);
    }
}

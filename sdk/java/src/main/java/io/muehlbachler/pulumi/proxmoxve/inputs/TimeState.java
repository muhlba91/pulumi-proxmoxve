// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TimeState extends com.pulumi.resources.ResourceArgs {

    public static final TimeState Empty = new TimeState();

    /**
     * The node&#39;s local time.
     * 
     */
    @Import(name="localTime")
    private @Nullable Output<String> localTime;

    /**
     * @return The node&#39;s local time.
     * 
     */
    public Optional<Output<String>> localTime() {
        return Optional.ofNullable(this.localTime);
    }

    /**
     * A node name.
     * 
     */
    @Import(name="nodeName")
    private @Nullable Output<String> nodeName;

    /**
     * @return A node name.
     * 
     */
    public Optional<Output<String>> nodeName() {
        return Optional.ofNullable(this.nodeName);
    }

    /**
     * The node&#39;s time zone.
     * 
     */
    @Import(name="timeZone")
    private @Nullable Output<String> timeZone;

    /**
     * @return The node&#39;s time zone.
     * 
     */
    public Optional<Output<String>> timeZone() {
        return Optional.ofNullable(this.timeZone);
    }

    /**
     * The node&#39;s local time formatted as UTC.
     * 
     */
    @Import(name="utcTime")
    private @Nullable Output<String> utcTime;

    /**
     * @return The node&#39;s local time formatted as UTC.
     * 
     */
    public Optional<Output<String>> utcTime() {
        return Optional.ofNullable(this.utcTime);
    }

    private TimeState() {}

    private TimeState(TimeState $) {
        this.localTime = $.localTime;
        this.nodeName = $.nodeName;
        this.timeZone = $.timeZone;
        this.utcTime = $.utcTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TimeState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TimeState $;

        public Builder() {
            $ = new TimeState();
        }

        public Builder(TimeState defaults) {
            $ = new TimeState(Objects.requireNonNull(defaults));
        }

        /**
         * @param localTime The node&#39;s local time.
         * 
         * @return builder
         * 
         */
        public Builder localTime(@Nullable Output<String> localTime) {
            $.localTime = localTime;
            return this;
        }

        /**
         * @param localTime The node&#39;s local time.
         * 
         * @return builder
         * 
         */
        public Builder localTime(String localTime) {
            return localTime(Output.of(localTime));
        }

        /**
         * @param nodeName A node name.
         * 
         * @return builder
         * 
         */
        public Builder nodeName(@Nullable Output<String> nodeName) {
            $.nodeName = nodeName;
            return this;
        }

        /**
         * @param nodeName A node name.
         * 
         * @return builder
         * 
         */
        public Builder nodeName(String nodeName) {
            return nodeName(Output.of(nodeName));
        }

        /**
         * @param timeZone The node&#39;s time zone.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(@Nullable Output<String> timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        /**
         * @param timeZone The node&#39;s time zone.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(String timeZone) {
            return timeZone(Output.of(timeZone));
        }

        /**
         * @param utcTime The node&#39;s local time formatted as UTC.
         * 
         * @return builder
         * 
         */
        public Builder utcTime(@Nullable Output<String> utcTime) {
            $.utcTime = utcTime;
            return this;
        }

        /**
         * @param utcTime The node&#39;s local time formatted as UTC.
         * 
         * @return builder
         * 
         */
        public Builder utcTime(String utcTime) {
            return utcTime(Output.of(utcTime));
        }

        public TimeState build() {
            return $;
        }
    }

}

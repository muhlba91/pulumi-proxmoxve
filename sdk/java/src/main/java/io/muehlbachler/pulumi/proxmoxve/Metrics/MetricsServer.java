// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.Metrics;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import io.muehlbachler.pulumi.proxmoxve.Metrics.MetricsServerArgs;
import io.muehlbachler.pulumi.proxmoxve.Metrics.inputs.MetricsServerState;
import io.muehlbachler.pulumi.proxmoxve.Utilities;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages PVE metrics server.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import io.muehlbachler.pulumi.proxmoxve.Metrics.MetricsServer;
 * import io.muehlbachler.pulumi.proxmoxve.Metrics.MetricsServerArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var influxdbServer = new MetricsServer("influxdbServer", MetricsServerArgs.builder()
 *             .port(8089)
 *             .server("192.168.3.2")
 *             .type("influxdb")
 *             .build());
 * 
 *         var graphiteServer = new MetricsServer("graphiteServer", MetricsServerArgs.builder()
 *             .port(2003)
 *             .server("192.168.4.2")
 *             .type("graphite")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * #!/usr/bin/env sh
 * 
 * ```sh
 * $ pulumi import proxmoxve:Metrics/metricsServer:MetricsServer example example
 * ```
 * 
 */
@ResourceType(type="proxmoxve:Metrics/metricsServer:MetricsServer")
public class MetricsServer extends com.pulumi.resources.CustomResource {
    /**
     * Set this to `true` to disable this metric server.
     * 
     */
    @Export(name="disable", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> disable;

    /**
     * @return Set this to `true` to disable this metric server.
     * 
     */
    public Output<Optional<Boolean>> disable() {
        return Codegen.optional(this.disable);
    }
    /**
     * Root graphite path (ex: `proxmox.mycluster.mykey`).
     * 
     */
    @Export(name="graphitePath", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> graphitePath;

    /**
     * @return Root graphite path (ex: `proxmox.mycluster.mykey`).
     * 
     */
    public Output<Optional<String>> graphitePath() {
        return Codegen.optional(this.graphitePath);
    }
    /**
     * Protocol to send graphite data. Choice is between `udp` | `tcp`. If not set, PVE default is `udp`.
     * 
     */
    @Export(name="graphiteProto", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> graphiteProto;

    /**
     * @return Protocol to send graphite data. Choice is between `udp` | `tcp`. If not set, PVE default is `udp`.
     * 
     */
    public Output<Optional<String>> graphiteProto() {
        return Codegen.optional(this.graphiteProto);
    }
    /**
     * An API path prefix inserted between `&lt;host&gt;:&lt;port&gt;/` and `/api2/`. Can be useful if the InfluxDB service runs behind a reverse proxy.
     * 
     */
    @Export(name="influxApiPathPrefix", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> influxApiPathPrefix;

    /**
     * @return An API path prefix inserted between `&lt;host&gt;:&lt;port&gt;/` and `/api2/`. Can be useful if the InfluxDB service runs behind a reverse proxy.
     * 
     */
    public Output<Optional<String>> influxApiPathPrefix() {
        return Codegen.optional(this.influxApiPathPrefix);
    }
    /**
     * The InfluxDB bucket/db. Only necessary when using the http v2 api.
     * 
     */
    @Export(name="influxBucket", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> influxBucket;

    /**
     * @return The InfluxDB bucket/db. Only necessary when using the http v2 api.
     * 
     */
    public Output<Optional<String>> influxBucket() {
        return Codegen.optional(this.influxBucket);
    }
    /**
     * Protocol for InfluxDB. Choice is between `udp` | `http` | `https`. If not set, PVE default is `udp`.
     * 
     */
    @Export(name="influxDbProto", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> influxDbProto;

    /**
     * @return Protocol for InfluxDB. Choice is between `udp` | `http` | `https`. If not set, PVE default is `udp`.
     * 
     */
    public Output<Optional<String>> influxDbProto() {
        return Codegen.optional(this.influxDbProto);
    }
    /**
     * InfluxDB max-body-size in bytes. Requests are batched up to this size. If not set, PVE default is `25000000`.
     * 
     */
    @Export(name="influxMaxBodySize", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> influxMaxBodySize;

    /**
     * @return InfluxDB max-body-size in bytes. Requests are batched up to this size. If not set, PVE default is `25000000`.
     * 
     */
    public Output<Optional<Integer>> influxMaxBodySize() {
        return Codegen.optional(this.influxMaxBodySize);
    }
    /**
     * The InfluxDB organization. Only necessary when using the http v2 api. Has no meaning when using v2 compatibility api.
     * 
     */
    @Export(name="influxOrganization", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> influxOrganization;

    /**
     * @return The InfluxDB organization. Only necessary when using the http v2 api. Has no meaning when using v2 compatibility api.
     * 
     */
    public Output<Optional<String>> influxOrganization() {
        return Codegen.optional(this.influxOrganization);
    }
    /**
     * The InfluxDB access token. Only necessary when using the http v2 api. If the v2 compatibility api is used, use `user:password` instead.
     * 
     */
    @Export(name="influxToken", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> influxToken;

    /**
     * @return The InfluxDB access token. Only necessary when using the http v2 api. If the v2 compatibility api is used, use `user:password` instead.
     * 
     */
    public Output<Optional<String>> influxToken() {
        return Codegen.optional(this.influxToken);
    }
    /**
     * Set to `false` to disable certificate verification for https endpoints.
     * 
     */
    @Export(name="influxVerify", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> influxVerify;

    /**
     * @return Set to `false` to disable certificate verification for https endpoints.
     * 
     */
    public Output<Optional<Boolean>> influxVerify() {
        return Codegen.optional(this.influxVerify);
    }
    /**
     * MTU (maximum transmission unit) for metrics transmission over UDP. If not set, PVE default is `1500` (allowed `512` - `65536`).
     * 
     */
    @Export(name="mtu", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> mtu;

    /**
     * @return MTU (maximum transmission unit) for metrics transmission over UDP. If not set, PVE default is `1500` (allowed `512` - `65536`).
     * 
     */
    public Output<Optional<Integer>> mtu() {
        return Codegen.optional(this.mtu);
    }
    /**
     * Unique name that will be ID of this metric server in PVE.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Unique name that will be ID of this metric server in PVE.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Server network port.
     * 
     */
    @Export(name="port", refs={Integer.class}, tree="[0]")
    private Output<Integer> port;

    /**
     * @return Server network port.
     * 
     */
    public Output<Integer> port() {
        return this.port;
    }
    /**
     * Server dns name or IP address.
     * 
     */
    @Export(name="server", refs={String.class}, tree="[0]")
    private Output<String> server;

    /**
     * @return Server dns name or IP address.
     * 
     */
    public Output<String> server() {
        return this.server;
    }
    /**
     * TCP socket timeout in seconds. If not set, PVE default is `1`.
     * 
     */
    @Export(name="timeout", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> timeout;

    /**
     * @return TCP socket timeout in seconds. If not set, PVE default is `1`.
     * 
     */
    public Output<Optional<Integer>> timeout() {
        return Codegen.optional(this.timeout);
    }
    /**
     * Plugin type. Choice is between `graphite` | `influxdb`.
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return Plugin type. Choice is between `graphite` | `influxdb`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public MetricsServer(java.lang.String name) {
        this(name, MetricsServerArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public MetricsServer(java.lang.String name, MetricsServerArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public MetricsServer(java.lang.String name, MetricsServerArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("proxmoxve:Metrics/metricsServer:MetricsServer", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private MetricsServer(java.lang.String name, Output<java.lang.String> id, @Nullable MetricsServerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("proxmoxve:Metrics/metricsServer:MetricsServer", name, state, makeResourceOptions(options, id), false);
    }

    private static MetricsServerArgs makeArgs(MetricsServerArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? MetricsServerArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/muhlba91/pulumi-proxmoxve")
            .additionalSecretOutputs(List.of(
                "influxToken"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static MetricsServer get(java.lang.String name, Output<java.lang.String> id, @Nullable MetricsServerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new MetricsServer(name, id, state, options);
    }
}

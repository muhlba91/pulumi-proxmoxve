// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.HA;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HAGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final HAGroupArgs Empty = new HAGroupArgs();

    /**
     * The comment associated with this group
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return The comment associated with this group
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * The identifier of the High Availability group to manage.
     * 
     */
    @Import(name="group", required=true)
    private Output<String> group;

    /**
     * @return The identifier of the High Availability group to manage.
     * 
     */
    public Output<String> group() {
        return this.group;
    }

    /**
     * A flag that indicates that failing back to a higher priority node is disabled for this HA group. Defaults to `false`.
     * 
     */
    @Import(name="noFailback")
    private @Nullable Output<Boolean> noFailback;

    /**
     * @return A flag that indicates that failing back to a higher priority node is disabled for this HA group. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> noFailback() {
        return Optional.ofNullable(this.noFailback);
    }

    /**
     * The member nodes for this group. They are provided as a map, where the keys are the node names and the values represent their priority: integers for known priorities or `null` for unset priorities.
     * 
     */
    @Import(name="nodes", required=true)
    private Output<Map<String,Integer>> nodes;

    /**
     * @return The member nodes for this group. They are provided as a map, where the keys are the node names and the values represent their priority: integers for known priorities or `null` for unset priorities.
     * 
     */
    public Output<Map<String,Integer>> nodes() {
        return this.nodes;
    }

    /**
     * A flag that indicates that other nodes may not be used to run resources associated to this HA group. Defaults to `false`.
     * 
     */
    @Import(name="restricted")
    private @Nullable Output<Boolean> restricted;

    /**
     * @return A flag that indicates that other nodes may not be used to run resources associated to this HA group. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> restricted() {
        return Optional.ofNullable(this.restricted);
    }

    private HAGroupArgs() {}

    private HAGroupArgs(HAGroupArgs $) {
        this.comment = $.comment;
        this.group = $.group;
        this.noFailback = $.noFailback;
        this.nodes = $.nodes;
        this.restricted = $.restricted;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HAGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HAGroupArgs $;

        public Builder() {
            $ = new HAGroupArgs();
        }

        public Builder(HAGroupArgs defaults) {
            $ = new HAGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param comment The comment associated with this group
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment The comment associated with this group
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param group The identifier of the High Availability group to manage.
         * 
         * @return builder
         * 
         */
        public Builder group(Output<String> group) {
            $.group = group;
            return this;
        }

        /**
         * @param group The identifier of the High Availability group to manage.
         * 
         * @return builder
         * 
         */
        public Builder group(String group) {
            return group(Output.of(group));
        }

        /**
         * @param noFailback A flag that indicates that failing back to a higher priority node is disabled for this HA group. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder noFailback(@Nullable Output<Boolean> noFailback) {
            $.noFailback = noFailback;
            return this;
        }

        /**
         * @param noFailback A flag that indicates that failing back to a higher priority node is disabled for this HA group. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder noFailback(Boolean noFailback) {
            return noFailback(Output.of(noFailback));
        }

        /**
         * @param nodes The member nodes for this group. They are provided as a map, where the keys are the node names and the values represent their priority: integers for known priorities or `null` for unset priorities.
         * 
         * @return builder
         * 
         */
        public Builder nodes(Output<Map<String,Integer>> nodes) {
            $.nodes = nodes;
            return this;
        }

        /**
         * @param nodes The member nodes for this group. They are provided as a map, where the keys are the node names and the values represent their priority: integers for known priorities or `null` for unset priorities.
         * 
         * @return builder
         * 
         */
        public Builder nodes(Map<String,Integer> nodes) {
            return nodes(Output.of(nodes));
        }

        /**
         * @param restricted A flag that indicates that other nodes may not be used to run resources associated to this HA group. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder restricted(@Nullable Output<Boolean> restricted) {
            $.restricted = restricted;
            return this;
        }

        /**
         * @param restricted A flag that indicates that other nodes may not be used to run resources associated to this HA group. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder restricted(Boolean restricted) {
            return restricted(Output.of(restricted));
        }

        public HAGroupArgs build() {
            if ($.group == null) {
                throw new MissingRequiredPropertyException("HAGroupArgs", "group");
            }
            if ($.nodes == null) {
                throw new MissingRequiredPropertyException("HAGroupArgs", "nodes");
            }
            return $;
        }
    }

}

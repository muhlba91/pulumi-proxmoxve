// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.Sdn.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import io.muehlbachler.pulumi.proxmoxve.Sdn.inputs.GetSubnetDhcpRangeArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSubnetArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSubnetArgs Empty = new GetSubnetArgs();

    /**
     * A CIDR network address, for example 10.0.0.0/8
     * 
     */
    @Import(name="cidr", required=true)
    private Output<String> cidr;

    /**
     * @return A CIDR network address, for example 10.0.0.0/8
     * 
     */
    public Output<String> cidr() {
        return this.cidr;
    }

    /**
     * DHCP range (start and end IPs).
     * 
     */
    @Import(name="dhcpRange")
    private @Nullable Output<GetSubnetDhcpRangeArgs> dhcpRange;

    /**
     * @return DHCP range (start and end IPs).
     * 
     */
    public Optional<Output<GetSubnetDhcpRangeArgs>> dhcpRange() {
        return Optional.ofNullable(this.dhcpRange);
    }

    /**
     * The VNet this subnet belongs to.
     * 
     */
    @Import(name="vnet", required=true)
    private Output<String> vnet;

    /**
     * @return The VNet this subnet belongs to.
     * 
     */
    public Output<String> vnet() {
        return this.vnet;
    }

    private GetSubnetArgs() {}

    private GetSubnetArgs(GetSubnetArgs $) {
        this.cidr = $.cidr;
        this.dhcpRange = $.dhcpRange;
        this.vnet = $.vnet;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSubnetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSubnetArgs $;

        public Builder() {
            $ = new GetSubnetArgs();
        }

        public Builder(GetSubnetArgs defaults) {
            $ = new GetSubnetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cidr A CIDR network address, for example 10.0.0.0/8
         * 
         * @return builder
         * 
         */
        public Builder cidr(Output<String> cidr) {
            $.cidr = cidr;
            return this;
        }

        /**
         * @param cidr A CIDR network address, for example 10.0.0.0/8
         * 
         * @return builder
         * 
         */
        public Builder cidr(String cidr) {
            return cidr(Output.of(cidr));
        }

        /**
         * @param dhcpRange DHCP range (start and end IPs).
         * 
         * @return builder
         * 
         */
        public Builder dhcpRange(@Nullable Output<GetSubnetDhcpRangeArgs> dhcpRange) {
            $.dhcpRange = dhcpRange;
            return this;
        }

        /**
         * @param dhcpRange DHCP range (start and end IPs).
         * 
         * @return builder
         * 
         */
        public Builder dhcpRange(GetSubnetDhcpRangeArgs dhcpRange) {
            return dhcpRange(Output.of(dhcpRange));
        }

        /**
         * @param vnet The VNet this subnet belongs to.
         * 
         * @return builder
         * 
         */
        public Builder vnet(Output<String> vnet) {
            $.vnet = vnet;
            return this;
        }

        /**
         * @param vnet The VNet this subnet belongs to.
         * 
         * @return builder
         * 
         */
        public Builder vnet(String vnet) {
            return vnet(Output.of(vnet));
        }

        public GetSubnetArgs build() {
            if ($.cidr == null) {
                throw new MissingRequiredPropertyException("GetSubnetArgs", "cidr");
            }
            if ($.vnet == null) {
                throw new MissingRequiredPropertyException("GetSubnetArgs", "vnet");
            }
            return $;
        }
    }

}

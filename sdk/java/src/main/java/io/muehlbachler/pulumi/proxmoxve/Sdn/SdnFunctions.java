// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.Sdn;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.deployment.InvokeOutputOptions;
import io.muehlbachler.pulumi.proxmoxve.Sdn.inputs.GetZonesArgs;
import io.muehlbachler.pulumi.proxmoxve.Sdn.inputs.GetZonesPlainArgs;
import io.muehlbachler.pulumi.proxmoxve.Sdn.outputs.GetZonesResult;
import io.muehlbachler.pulumi.proxmoxve.Utilities;
import java.util.concurrent.CompletableFuture;

public final class SdnFunctions {
    /**
     * Retrieves information about all SDN Zones in Proxmox. This data source can optionally filter zones by type.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.proxmoxve.Sdn.SdnFunctions;
     * import com.pulumi.proxmoxve.Sdn.inputs.GetZonesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = SdnFunctions.getZones(GetZonesArgs.builder()
     *             .build());
     * 
     *         final var evpnOnly = SdnFunctions.getZones(GetZonesArgs.builder()
     *             .type("evpn")
     *             .build());
     * 
     *         final var simpleOnly = SdnFunctions.getZones(GetZonesArgs.builder()
     *             .type("simple")
     *             .build());
     * 
     *         ctx.export("dataProxmoxVirtualEnvironmentSdnZonesAll", Map.of("zones", all.zones()));
     *         ctx.export("dataProxmoxVirtualEnvironmentSdnZonesFiltered", Map.ofEntries(
     *             Map.entry("evpn_zones", evpnOnly.zones()),
     *             Map.entry("simple_zones", simpleOnly.zones())
     *         ));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetZonesResult> getZones() {
        return getZones(GetZonesArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieves information about all SDN Zones in Proxmox. This data source can optionally filter zones by type.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.proxmoxve.Sdn.SdnFunctions;
     * import com.pulumi.proxmoxve.Sdn.inputs.GetZonesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = SdnFunctions.getZones(GetZonesArgs.builder()
     *             .build());
     * 
     *         final var evpnOnly = SdnFunctions.getZones(GetZonesArgs.builder()
     *             .type("evpn")
     *             .build());
     * 
     *         final var simpleOnly = SdnFunctions.getZones(GetZonesArgs.builder()
     *             .type("simple")
     *             .build());
     * 
     *         ctx.export("dataProxmoxVirtualEnvironmentSdnZonesAll", Map.of("zones", all.zones()));
     *         ctx.export("dataProxmoxVirtualEnvironmentSdnZonesFiltered", Map.ofEntries(
     *             Map.entry("evpn_zones", evpnOnly.zones()),
     *             Map.entry("simple_zones", simpleOnly.zones())
     *         ));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetZonesResult> getZonesPlain() {
        return getZonesPlain(GetZonesPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieves information about all SDN Zones in Proxmox. This data source can optionally filter zones by type.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.proxmoxve.Sdn.SdnFunctions;
     * import com.pulumi.proxmoxve.Sdn.inputs.GetZonesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = SdnFunctions.getZones(GetZonesArgs.builder()
     *             .build());
     * 
     *         final var evpnOnly = SdnFunctions.getZones(GetZonesArgs.builder()
     *             .type("evpn")
     *             .build());
     * 
     *         final var simpleOnly = SdnFunctions.getZones(GetZonesArgs.builder()
     *             .type("simple")
     *             .build());
     * 
     *         ctx.export("dataProxmoxVirtualEnvironmentSdnZonesAll", Map.of("zones", all.zones()));
     *         ctx.export("dataProxmoxVirtualEnvironmentSdnZonesFiltered", Map.ofEntries(
     *             Map.entry("evpn_zones", evpnOnly.zones()),
     *             Map.entry("simple_zones", simpleOnly.zones())
     *         ));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetZonesResult> getZones(GetZonesArgs args) {
        return getZones(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves information about all SDN Zones in Proxmox. This data source can optionally filter zones by type.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.proxmoxve.Sdn.SdnFunctions;
     * import com.pulumi.proxmoxve.Sdn.inputs.GetZonesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = SdnFunctions.getZones(GetZonesArgs.builder()
     *             .build());
     * 
     *         final var evpnOnly = SdnFunctions.getZones(GetZonesArgs.builder()
     *             .type("evpn")
     *             .build());
     * 
     *         final var simpleOnly = SdnFunctions.getZones(GetZonesArgs.builder()
     *             .type("simple")
     *             .build());
     * 
     *         ctx.export("dataProxmoxVirtualEnvironmentSdnZonesAll", Map.of("zones", all.zones()));
     *         ctx.export("dataProxmoxVirtualEnvironmentSdnZonesFiltered", Map.ofEntries(
     *             Map.entry("evpn_zones", evpnOnly.zones()),
     *             Map.entry("simple_zones", simpleOnly.zones())
     *         ));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetZonesResult> getZonesPlain(GetZonesPlainArgs args) {
        return getZonesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves information about all SDN Zones in Proxmox. This data source can optionally filter zones by type.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.proxmoxve.Sdn.SdnFunctions;
     * import com.pulumi.proxmoxve.Sdn.inputs.GetZonesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = SdnFunctions.getZones(GetZonesArgs.builder()
     *             .build());
     * 
     *         final var evpnOnly = SdnFunctions.getZones(GetZonesArgs.builder()
     *             .type("evpn")
     *             .build());
     * 
     *         final var simpleOnly = SdnFunctions.getZones(GetZonesArgs.builder()
     *             .type("simple")
     *             .build());
     * 
     *         ctx.export("dataProxmoxVirtualEnvironmentSdnZonesAll", Map.of("zones", all.zones()));
     *         ctx.export("dataProxmoxVirtualEnvironmentSdnZonesFiltered", Map.ofEntries(
     *             Map.entry("evpn_zones", evpnOnly.zones()),
     *             Map.entry("simple_zones", simpleOnly.zones())
     *         ));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetZonesResult> getZones(GetZonesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("proxmoxve:Sdn/getZones:getZones", TypeShape.of(GetZonesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves information about all SDN Zones in Proxmox. This data source can optionally filter zones by type.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.proxmoxve.Sdn.SdnFunctions;
     * import com.pulumi.proxmoxve.Sdn.inputs.GetZonesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = SdnFunctions.getZones(GetZonesArgs.builder()
     *             .build());
     * 
     *         final var evpnOnly = SdnFunctions.getZones(GetZonesArgs.builder()
     *             .type("evpn")
     *             .build());
     * 
     *         final var simpleOnly = SdnFunctions.getZones(GetZonesArgs.builder()
     *             .type("simple")
     *             .build());
     * 
     *         ctx.export("dataProxmoxVirtualEnvironmentSdnZonesAll", Map.of("zones", all.zones()));
     *         ctx.export("dataProxmoxVirtualEnvironmentSdnZonesFiltered", Map.ofEntries(
     *             Map.entry("evpn_zones", evpnOnly.zones()),
     *             Map.entry("simple_zones", simpleOnly.zones())
     *         ));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetZonesResult> getZones(GetZonesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("proxmoxve:Sdn/getZones:getZones", TypeShape.of(GetZonesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves information about all SDN Zones in Proxmox. This data source can optionally filter zones by type.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.proxmoxve.Sdn.SdnFunctions;
     * import com.pulumi.proxmoxve.Sdn.inputs.GetZonesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = SdnFunctions.getZones(GetZonesArgs.builder()
     *             .build());
     * 
     *         final var evpnOnly = SdnFunctions.getZones(GetZonesArgs.builder()
     *             .type("evpn")
     *             .build());
     * 
     *         final var simpleOnly = SdnFunctions.getZones(GetZonesArgs.builder()
     *             .type("simple")
     *             .build());
     * 
     *         ctx.export("dataProxmoxVirtualEnvironmentSdnZonesAll", Map.of("zones", all.zones()));
     *         ctx.export("dataProxmoxVirtualEnvironmentSdnZonesFiltered", Map.ofEntries(
     *             Map.entry("evpn_zones", evpnOnly.zones()),
     *             Map.entry("simple_zones", simpleOnly.zones())
     *         ));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetZonesResult> getZonesPlain(GetZonesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("proxmoxve:Sdn/getZones:getZones", TypeShape.of(GetZonesResult.class), args, Utilities.withVersion(options));
    }
}

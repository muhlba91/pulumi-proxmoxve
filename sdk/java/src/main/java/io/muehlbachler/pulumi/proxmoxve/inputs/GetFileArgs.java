// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class GetFileArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetFileArgs Empty = new GetFileArgs();

    /**
     * The content type of the file.
     * 
     */
    @Import(name="contentType", required=true)
    private Output<String> contentType;

    /**
     * @return The content type of the file.
     * 
     */
    public Output<String> contentType() {
        return this.contentType;
    }

    /**
     * The identifier of the datastore.
     * 
     */
    @Import(name="datastoreId", required=true)
    private Output<String> datastoreId;

    /**
     * @return The identifier of the datastore.
     * 
     */
    public Output<String> datastoreId() {
        return this.datastoreId;
    }

    /**
     * The name of the file.
     * 
     */
    @Import(name="fileName", required=true)
    private Output<String> fileName;

    /**
     * @return The name of the file.
     * 
     */
    public Output<String> fileName() {
        return this.fileName;
    }

    /**
     * The name of the node.
     * 
     */
    @Import(name="nodeName", required=true)
    private Output<String> nodeName;

    /**
     * @return The name of the node.
     * 
     */
    public Output<String> nodeName() {
        return this.nodeName;
    }

    private GetFileArgs() {}

    private GetFileArgs(GetFileArgs $) {
        this.contentType = $.contentType;
        this.datastoreId = $.datastoreId;
        this.fileName = $.fileName;
        this.nodeName = $.nodeName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetFileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetFileArgs $;

        public Builder() {
            $ = new GetFileArgs();
        }

        public Builder(GetFileArgs defaults) {
            $ = new GetFileArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param contentType The content type of the file.
         * 
         * @return builder
         * 
         */
        public Builder contentType(Output<String> contentType) {
            $.contentType = contentType;
            return this;
        }

        /**
         * @param contentType The content type of the file.
         * 
         * @return builder
         * 
         */
        public Builder contentType(String contentType) {
            return contentType(Output.of(contentType));
        }

        /**
         * @param datastoreId The identifier of the datastore.
         * 
         * @return builder
         * 
         */
        public Builder datastoreId(Output<String> datastoreId) {
            $.datastoreId = datastoreId;
            return this;
        }

        /**
         * @param datastoreId The identifier of the datastore.
         * 
         * @return builder
         * 
         */
        public Builder datastoreId(String datastoreId) {
            return datastoreId(Output.of(datastoreId));
        }

        /**
         * @param fileName The name of the file.
         * 
         * @return builder
         * 
         */
        public Builder fileName(Output<String> fileName) {
            $.fileName = fileName;
            return this;
        }

        /**
         * @param fileName The name of the file.
         * 
         * @return builder
         * 
         */
        public Builder fileName(String fileName) {
            return fileName(Output.of(fileName));
        }

        /**
         * @param nodeName The name of the node.
         * 
         * @return builder
         * 
         */
        public Builder nodeName(Output<String> nodeName) {
            $.nodeName = nodeName;
            return this;
        }

        /**
         * @param nodeName The name of the node.
         * 
         * @return builder
         * 
         */
        public Builder nodeName(String nodeName) {
            return nodeName(Output.of(nodeName));
        }

        public GetFileArgs build() {
            if ($.contentType == null) {
                throw new MissingRequiredPropertyException("GetFileArgs", "contentType");
            }
            if ($.datastoreId == null) {
                throw new MissingRequiredPropertyException("GetFileArgs", "datastoreId");
            }
            if ($.fileName == null) {
                throw new MissingRequiredPropertyException("GetFileArgs", "fileName");
            }
            if ($.nodeName == null) {
                throw new MissingRequiredPropertyException("GetFileArgs", "nodeName");
            }
            return $;
        }
    }

}

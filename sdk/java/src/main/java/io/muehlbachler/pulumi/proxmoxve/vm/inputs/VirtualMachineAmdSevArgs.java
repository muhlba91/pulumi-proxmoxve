// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.VM.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualMachineAmdSevArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualMachineAmdSevArgs Empty = new VirtualMachineAmdSevArgs();

    /**
     * Sets policy bit to allow Simultaneous Multi Threading (SMT)
     * (Ignored unless for SEV-SNP) (defaults to `true`).
     * 
     */
    @Import(name="allowSmt")
    private @Nullable Output<Boolean> allowSmt;

    /**
     * @return Sets policy bit to allow Simultaneous Multi Threading (SMT)
     * (Ignored unless for SEV-SNP) (defaults to `true`).
     * 
     */
    public Optional<Output<Boolean>> allowSmt() {
        return Optional.ofNullable(this.allowSmt);
    }

    /**
     * Add kernel hashes to guest firmware for measured linux kernel launch (defaults to `false`).
     * 
     */
    @Import(name="kernelHashes")
    private @Nullable Output<Boolean> kernelHashes;

    /**
     * @return Add kernel hashes to guest firmware for measured linux kernel launch (defaults to `false`).
     * 
     */
    public Optional<Output<Boolean>> kernelHashes() {
        return Optional.ofNullable(this.kernelHashes);
    }

    /**
     * Sets policy bit to disallow debugging of guest (defaults
     * to `false`).
     * 
     */
    @Import(name="noDebug")
    private @Nullable Output<Boolean> noDebug;

    /**
     * @return Sets policy bit to disallow debugging of guest (defaults
     * to `false`).
     * 
     */
    public Optional<Output<Boolean>> noDebug() {
        return Optional.ofNullable(this.noDebug);
    }

    /**
     * Sets policy bit to disallow key sharing with other guests (Ignored for SEV-SNP) (defaults to `false`).
     * 
     * The `amd_sev` setting is only allowed for a `root{@literal @}pam` authenticated user.
     * 
     */
    @Import(name="noKeySharing")
    private @Nullable Output<Boolean> noKeySharing;

    /**
     * @return Sets policy bit to disallow key sharing with other guests (Ignored for SEV-SNP) (defaults to `false`).
     * 
     * The `amd_sev` setting is only allowed for a `root{@literal @}pam` authenticated user.
     * 
     */
    public Optional<Output<Boolean>> noKeySharing() {
        return Optional.ofNullable(this.noKeySharing);
    }

    /**
     * Enable standard SEV with `std` or enable experimental SEV-ES with the `es` option or enable experimental SEV-SNP with the `snp` option (defaults to `std`).
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Enable standard SEV with `std` or enable experimental SEV-ES with the `es` option or enable experimental SEV-SNP with the `snp` option (defaults to `std`).
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private VirtualMachineAmdSevArgs() {}

    private VirtualMachineAmdSevArgs(VirtualMachineAmdSevArgs $) {
        this.allowSmt = $.allowSmt;
        this.kernelHashes = $.kernelHashes;
        this.noDebug = $.noDebug;
        this.noKeySharing = $.noKeySharing;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualMachineAmdSevArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualMachineAmdSevArgs $;

        public Builder() {
            $ = new VirtualMachineAmdSevArgs();
        }

        public Builder(VirtualMachineAmdSevArgs defaults) {
            $ = new VirtualMachineAmdSevArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowSmt Sets policy bit to allow Simultaneous Multi Threading (SMT)
         * (Ignored unless for SEV-SNP) (defaults to `true`).
         * 
         * @return builder
         * 
         */
        public Builder allowSmt(@Nullable Output<Boolean> allowSmt) {
            $.allowSmt = allowSmt;
            return this;
        }

        /**
         * @param allowSmt Sets policy bit to allow Simultaneous Multi Threading (SMT)
         * (Ignored unless for SEV-SNP) (defaults to `true`).
         * 
         * @return builder
         * 
         */
        public Builder allowSmt(Boolean allowSmt) {
            return allowSmt(Output.of(allowSmt));
        }

        /**
         * @param kernelHashes Add kernel hashes to guest firmware for measured linux kernel launch (defaults to `false`).
         * 
         * @return builder
         * 
         */
        public Builder kernelHashes(@Nullable Output<Boolean> kernelHashes) {
            $.kernelHashes = kernelHashes;
            return this;
        }

        /**
         * @param kernelHashes Add kernel hashes to guest firmware for measured linux kernel launch (defaults to `false`).
         * 
         * @return builder
         * 
         */
        public Builder kernelHashes(Boolean kernelHashes) {
            return kernelHashes(Output.of(kernelHashes));
        }

        /**
         * @param noDebug Sets policy bit to disallow debugging of guest (defaults
         * to `false`).
         * 
         * @return builder
         * 
         */
        public Builder noDebug(@Nullable Output<Boolean> noDebug) {
            $.noDebug = noDebug;
            return this;
        }

        /**
         * @param noDebug Sets policy bit to disallow debugging of guest (defaults
         * to `false`).
         * 
         * @return builder
         * 
         */
        public Builder noDebug(Boolean noDebug) {
            return noDebug(Output.of(noDebug));
        }

        /**
         * @param noKeySharing Sets policy bit to disallow key sharing with other guests (Ignored for SEV-SNP) (defaults to `false`).
         * 
         * The `amd_sev` setting is only allowed for a `root{@literal @}pam` authenticated user.
         * 
         * @return builder
         * 
         */
        public Builder noKeySharing(@Nullable Output<Boolean> noKeySharing) {
            $.noKeySharing = noKeySharing;
            return this;
        }

        /**
         * @param noKeySharing Sets policy bit to disallow key sharing with other guests (Ignored for SEV-SNP) (defaults to `false`).
         * 
         * The `amd_sev` setting is only allowed for a `root{@literal @}pam` authenticated user.
         * 
         * @return builder
         * 
         */
        public Builder noKeySharing(Boolean noKeySharing) {
            return noKeySharing(Output.of(noKeySharing));
        }

        /**
         * @param type Enable standard SEV with `std` or enable experimental SEV-ES with the `es` option or enable experimental SEV-SNP with the `snp` option (defaults to `std`).
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Enable standard SEV with `std` or enable experimental SEV-ES with the `es` option or enable experimental SEV-SNP with the `snp` option (defaults to `std`).
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public VirtualMachineAmdSevArgs build() {
            return $;
        }
    }

}

// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.muehlbachler.pulumi.proxmoxve.Hardware_mapping.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class DirMapArgs extends com.pulumi.resources.ResourceArgs {

    public static final DirMapArgs Empty = new DirMapArgs();

    /**
     * The node this mapping applies to.
     * 
     */
    @Import(name="node", required=true)
    private Output<String> node;

    /**
     * @return The node this mapping applies to.
     * 
     */
    public Output<String> node() {
        return this.node;
    }

    /**
     * The path of the map. For directory mappings the path is required and refers to the POSIX path of the directory as visible from the node.
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    /**
     * @return The path of the map. For directory mappings the path is required and refers to the POSIX path of the directory as visible from the node.
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    private DirMapArgs() {}

    private DirMapArgs(DirMapArgs $) {
        this.node = $.node;
        this.path = $.path;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DirMapArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DirMapArgs $;

        public Builder() {
            $ = new DirMapArgs();
        }

        public Builder(DirMapArgs defaults) {
            $ = new DirMapArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param node The node this mapping applies to.
         * 
         * @return builder
         * 
         */
        public Builder node(Output<String> node) {
            $.node = node;
            return this;
        }

        /**
         * @param node The node this mapping applies to.
         * 
         * @return builder
         * 
         */
        public Builder node(String node) {
            return node(Output.of(node));
        }

        /**
         * @param path The path of the map. For directory mappings the path is required and refers to the POSIX path of the directory as visible from the node.
         * 
         * @return builder
         * 
         */
        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The path of the map. For directory mappings the path is required and refers to the POSIX path of the directory as visible from the node.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        public DirMapArgs build() {
            if ($.node == null) {
                throw new MissingRequiredPropertyException("DirMapArgs", "node");
            }
            if ($.path == null) {
                throw new MissingRequiredPropertyException("DirMapArgs", "path");
            }
            return $;
        }
    }

}

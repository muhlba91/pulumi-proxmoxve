{
    "name": "proxmoxve",
    "displayName": "Proxmox Virtual Environment (Proxmox VE)",
    "description": "A Pulumi package for creating and managing Proxmox Virtual Environment cloud resources.",
    "keywords": [
        "pulumi",
        "proxmox",
        "proxmoxve"
    ],
    "homepage": "https://github.com/muhlba91/pulumi-proxmoxve",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`proxmox` Terraform Provider](https://github.com/bpg/terraform-provider-proxmox).",
    "repository": "https://github.com/muhlba91/pulumi-proxmoxve",
    "logoUrl": "https://raw.githubusercontent.com/muhlba91/pulumi-proxmoxve/main/assets/proxmox-logo.png",
    "pluginDownloadURL": "github://api.github.com/muhlba91/pulumi-proxmoxve",
    "publisher": "Daniel Muehlbachler-Pietrzykowski",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "namespaces": {
                "proxmoxve": "ProxmoxVE"
            },
            "compatibility": "tfbridge20"
        },
        "go": {
            "importBasePath": "github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "java": {
            "basePackage": "io.muehlbachler.pulumi",
            "buildFiles": "",
            "gradleNexusPublishPluginVersion": "",
            "gradleTest": ""
        },
        "nodejs": {
            "packageName": "@muhlba91/pulumi-proxmoxve",
            "packageDescription": "A Pulumi package for creating and managing Proxmox Virtual Environment cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/bpg/terraform-provider-proxmox)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-proxmoxve` repo](https://github.com/muhlba91/pulumi-proxmoxve/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-proxmox` repo](https://github.com/bpg/terraform-provider-proxmox/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "packageName": "pulumi_proxmoxve",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/bpg/terraform-provider-proxmox)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-proxmoxve` repo](https://github.com/muhlba91/pulumi-proxmoxve/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-proxmox` repo](https://github.com/bpg/terraform-provider-proxmox/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "apiToken": {
                "type": "string",
                "description": "The API token for the Proxmox VE API.\n",
                "secret": true
            },
            "endpoint": {
                "type": "string",
                "description": "The endpoint for the Proxmox VE API.\n"
            },
            "insecure": {
                "type": "boolean",
                "description": "Whether to skip the TLS verification step.\n"
            },
            "minTls": {
                "type": "string",
                "description": "The minimum required TLS version for API calls.Supported values: `1.0|1.1|1.2|1.3`. Defaults to `1.3`.\n"
            },
            "otp": {
                "type": "string",
                "description": "The one-time password for the Proxmox VE API.\n",
                "deprecationMessage": "The `otp` attribute is deprecated and will be removed in a future release. Please use the `api_token` attribute instead."
            },
            "password": {
                "type": "string",
                "description": "The password for the Proxmox VE API.\n",
                "secret": true
            },
            "ssh": {
                "$ref": "#/types/proxmoxve:config/ssh:ssh",
                "description": "The SSH configuration for the Proxmox nodes.\n"
            },
            "tmpDir": {
                "type": "string",
                "description": "The alternative temporary directory.\n"
            },
            "username": {
                "type": "string",
                "description": "The username for the Proxmox VE API.\n"
            }
        }
    },
    "types": {
        "proxmoxve:Acme/getAccountAccount:getAccountAccount": {
            "properties": {
                "contacts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of contact email addresses.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The timestamp of the account creation.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the account. Can be one of `valid`, `deactivated` or `revoked`.\n"
                }
            },
            "type": "object",
            "required": [
                "contacts",
                "createdAt",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "proxmoxve:Acme/getPluginsPlugin:getPluginsPlugin": {
            "properties": {
                "api": {
                    "type": "string",
                    "description": "API plugin name.\n"
                },
                "data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "DNS plugin data.\n"
                },
                "digest": {
                    "type": "string",
                    "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.\n"
                },
                "plugin": {
                    "type": "string",
                    "description": "ACME Plugin ID name.\n"
                },
                "type": {
                    "type": "string",
                    "description": "ACME challenge type (dns, standalone).\n"
                },
                "validationDelay": {
                    "type": "integer",
                    "description": "Extra delay in seconds to wait before requesting validation. Allows to cope with a long TTL of DNS records (0 - 172800).\n"
                }
            },
            "type": "object",
            "required": [
                "api",
                "data",
                "digest",
                "plugin",
                "type",
                "validationDelay"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "proxmoxve:CT/ContainerClone:ContainerClone": {
            "properties": {
                "datastoreId": {
                    "type": "string",
                    "description": "The identifier for the target datastore.\n",
                    "willReplaceOnChanges": true
                },
                "nodeName": {
                    "type": "string",
                    "description": "The name of the source node (leave blank, if\nequal to the `node_name` argument).\n",
                    "willReplaceOnChanges": true
                },
                "vmId": {
                    "type": "integer",
                    "description": "The identifier for the source container.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "vmId"
            ]
        },
        "proxmoxve:CT/ContainerConsole:ContainerConsole": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether to enable the console device (defaults\nto `true`).\n"
                },
                "ttyCount": {
                    "type": "integer",
                    "description": "The number of available TTY (defaults to `2`).\n"
                },
                "type": {
                    "type": "string",
                    "description": "The console mode (defaults to `tty`).\n"
                }
            },
            "type": "object"
        },
        "proxmoxve:CT/ContainerCpu:ContainerCpu": {
            "properties": {
                "architecture": {
                    "type": "string",
                    "description": "The CPU architecture (defaults to `amd64`).\n"
                },
                "cores": {
                    "type": "integer",
                    "description": "The number of CPU cores (defaults to `1`).\n"
                },
                "units": {
                    "type": "integer",
                    "description": "The CPU units (defaults to `1024`).\n"
                }
            },
            "type": "object"
        },
        "proxmoxve:CT/ContainerDisk:ContainerDisk": {
            "properties": {
                "datastoreId": {
                    "type": "string",
                    "description": "The identifier for the datastore to create the\ndisk in (defaults to `local`).\n",
                    "willReplaceOnChanges": true
                },
                "size": {
                    "type": "integer",
                    "description": "The size of the root filesystem in gigabytes (defaults\nto `4`). Requires `datastore_id` to be set.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "proxmoxve:CT/ContainerFeatures:ContainerFeatures": {
            "properties": {
                "fuse": {
                    "type": "boolean",
                    "description": "Whether the container supports FUSE mounts (defaults\nto `false`)\n"
                },
                "keyctl": {
                    "type": "boolean",
                    "description": "Whether the container supports `keyctl()` system\ncall (defaults to `false`)\n"
                },
                "mounts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of allowed mount types (`cifs` or `nfs`)\n"
                },
                "nesting": {
                    "type": "boolean",
                    "description": "Whether the container is nested (defaults\nto `false`)\n"
                }
            },
            "type": "object"
        },
        "proxmoxve:CT/ContainerInitialization:ContainerInitialization": {
            "properties": {
                "dns": {
                    "$ref": "#/types/proxmoxve:CT/ContainerInitializationDns:ContainerInitializationDns",
                    "description": "The DNS configuration.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname.\n"
                },
                "ipConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/proxmoxve:CT/ContainerInitializationIpConfig:ContainerInitializationIpConfig"
                    },
                    "description": "The IP configuration (one block per network\ndevice).\n"
                },
                "userAccount": {
                    "$ref": "#/types/proxmoxve:CT/ContainerInitializationUserAccount:ContainerInitializationUserAccount",
                    "description": "The user account configuration.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "proxmoxve:CT/ContainerInitializationDns:ContainerInitializationDns": {
            "properties": {
                "domain": {
                    "type": "string",
                    "description": "The DNS search domain.\n"
                },
                "server": {
                    "type": "string",
                    "description": "The DNS server. The `server` attribute is\ndeprecated and will be removed in a future release. Please use\nthe `servers` attribute instead.\n",
                    "deprecationMessage": "The `server` attribute is deprecated and will be removed in a future release. Please use the `servers` attribute instead."
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of DNS servers.\n"
                }
            },
            "type": "object"
        },
        "proxmoxve:CT/ContainerInitializationIpConfig:ContainerInitializationIpConfig": {
            "properties": {
                "ipv4": {
                    "$ref": "#/types/proxmoxve:CT/ContainerInitializationIpConfigIpv4:ContainerInitializationIpConfigIpv4",
                    "description": "The IPv4 configuration.\n"
                },
                "ipv6": {
                    "$ref": "#/types/proxmoxve:CT/ContainerInitializationIpConfigIpv6:ContainerInitializationIpConfigIpv6",
                    "description": "The IPv4 configuration.\n"
                }
            },
            "type": "object"
        },
        "proxmoxve:CT/ContainerInitializationIpConfigIpv4:ContainerInitializationIpConfigIpv4": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The IPv4 address (use `dhcp` for auto-discovery).\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "The IPv4 gateway (must be omitted\nwhen `dhcp` is used as the address).\n"
                }
            },
            "type": "object"
        },
        "proxmoxve:CT/ContainerInitializationIpConfigIpv6:ContainerInitializationIpConfigIpv6": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The IPv6 address (use `dhcp` for auto-discovery).\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "The IPv6 gateway (must be omitted\nwhen `dhcp` is used as the address).\n"
                }
            },
            "type": "object"
        },
        "proxmoxve:CT/ContainerInitializationUserAccount:ContainerInitializationUserAccount": {
            "properties": {
                "keys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The SSH keys for the root account.\n",
                    "willReplaceOnChanges": true
                },
                "password": {
                    "type": "string",
                    "description": "The password for the root account.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "proxmoxve:CT/ContainerMemory:ContainerMemory": {
            "properties": {
                "dedicated": {
                    "type": "integer",
                    "description": "The dedicated memory in megabytes (defaults\nto `512`).\n"
                },
                "swap": {
                    "type": "integer",
                    "description": "The swap size in megabytes (defaults to `0`).\n"
                }
            },
            "type": "object"
        },
        "proxmoxve:CT/ContainerMountPoint:ContainerMountPoint": {
            "properties": {
                "acl": {
                    "type": "boolean",
                    "description": "Explicitly enable or disable ACL support.\n"
                },
                "backup": {
                    "type": "boolean",
                    "description": "Whether to include the mount point in backups (only\nused for volume mount points, defaults to `false`).\n"
                },
                "mountOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of extra mount options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the mount point as seen from inside the\ncontainer.\n"
                },
                "quota": {
                    "type": "boolean",
                    "description": "Enable user quotas inside the container (not supported\nwith ZFS subvolumes).\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Read-only mount point.\n"
                },
                "replicate": {
                    "type": "boolean",
                    "description": "Will include this volume to a storage replica job.\n"
                },
                "shared": {
                    "type": "boolean",
                    "description": "Mark this non-volume mount point as available on all\nnodes.\n"
                },
                "size": {
                    "type": "string",
                    "description": "Volume size (only for volume mount points).\nCan be specified with a unit suffix (e.g. `10G`).\n"
                },
                "volume": {
                    "type": "string",
                    "description": "Volume, device or directory to mount into the\ncontainer.\n"
                }
            },
            "type": "object",
            "required": [
                "path",
                "volume"
            ]
        },
        "proxmoxve:CT/ContainerNetworkInterface:ContainerNetworkInterface": {
            "properties": {
                "bridge": {
                    "type": "string",
                    "description": "The name of the network bridge (defaults\nto `vmbr0`).\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether to enable the network device (defaults\nto `true`).\n"
                },
                "firewall": {
                    "type": "boolean",
                    "description": "Whether this interface's firewall rules should be\nused (defaults to `false`).\n"
                },
                "macAddress": {
                    "type": "string",
                    "description": "The MAC address.\n"
                },
                "mtu": {
                    "type": "integer",
                    "description": "Maximum transfer unit of the interface. Cannot be\nlarger than the bridge's MTU.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The network interface name.\n"
                },
                "rateLimit": {
                    "type": "number",
                    "description": "The rate limit in megabytes per second.\n"
                },
                "vlanId": {
                    "type": "integer",
                    "description": "The VLAN identifier.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "proxmoxve:CT/ContainerOperatingSystem:ContainerOperatingSystem": {
            "properties": {
                "templateFileId": {
                    "type": "string",
                    "description": "The identifier for an OS template file.\nThe ID format is `\u003cdatastore_id\u003e:\u003ccontent_type\u003e/\u003cfile_name\u003e`, for example `local:iso/jammy-server-cloudimg-amd64.tar.gz`.\nCan be also taken from `proxmoxve.Download.File` resource, or from the output of `pvesm list \u003cstorage\u003e`.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The type (defaults to `unmanaged`).\n"
                }
            },
            "type": "object",
            "required": [
                "templateFileId"
            ]
        },
        "proxmoxve:CT/ContainerStartup:ContainerStartup": {
            "properties": {
                "downDelay": {
                    "type": "integer",
                    "description": "A non-negative number defining the delay in\nseconds before the next container is shut down.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "A non-negative number defining the general startup\norder.\n"
                },
                "upDelay": {
                    "type": "integer",
                    "description": "A non-negative number defining the delay in\nseconds before the next container is started.\n"
                }
            },
            "type": "object"
        },
        "proxmoxve:Cluster/OptionsNextId:OptionsNextId": {
            "properties": {
                "lower": {
                    "type": "integer",
                    "description": "The minimum number for the next free VM ID. Must be higher or equal to 100\n"
                },
                "upper": {
                    "type": "integer",
                    "description": "The maximum number for the next free VM ID. Must be less or equal to 999999999\n"
                }
            },
            "type": "object"
        },
        "proxmoxve:Cluster/OptionsNotify:OptionsNotify": {
            "properties": {
                "haFencingMode": {
                    "type": "string",
                    "description": "Cluster-wide notification settings for the HA fencing mode. Must be `always` | `never`.\n"
                },
                "haFencingTarget": {
                    "type": "string",
                    "description": "Cluster-wide notification settings for the HA fencing target.\n"
                },
                "packageUpdates": {
                    "type": "string",
                    "description": "Cluster-wide notification settings for package updates. Must be `auto` | `always` | `never`.\n"
                },
                "packageUpdatesTarget": {
                    "type": "string",
                    "description": "Cluster-wide notification settings for the package updates target.\n"
                },
                "replication": {
                    "type": "string",
                    "description": "Cluster-wide notification settings for replication. Must be `always` | `never`.\n"
                },
                "replicationTarget": {
                    "type": "string",
                    "description": "Cluster-wide notification settings for the replication target.\n"
                }
            },
            "type": "object"
        },
        "proxmoxve:Hardware/getMappingsCheck:getMappingsCheck": {
            "properties": {
                "mappingId": {
                    "type": "string",
                    "description": "The corresponding hardware mapping ID of the node check diagnostic entry.\n"
                },
                "message": {
                    "type": "string",
                    "description": "The message of the node check diagnostic entry.\n"
                },
                "severity": {
                    "type": "string",
                    "description": "The severity of the node check diagnostic entry.\n"
                }
            },
            "type": "object",
            "required": [
                "mappingId",
                "message",
                "severity"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "proxmoxve:Hardware/mapping/PciMap:PciMap": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "The comment of the mapped PCI device.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the map.\n"
                },
                "iommuGroup": {
                    "type": "integer",
                    "description": "The IOMMU group of the map. Not mandatory for the Proxmox VE API call, but causes a PCI hardware mapping to be incomplete when not set\n"
                },
                "node": {
                    "type": "string",
                    "description": "The node name of the map.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path of the map.\n"
                },
                "subsystemId": {
                    "type": "string",
                    "description": "The subsystem ID group of the map. Not mandatory for the Proxmox VE API call, but causes a PCI hardware mapping to be incomplete when not set\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "node",
                "path"
            ]
        },
        "proxmoxve:Hardware/mapping/UsbMap:UsbMap": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "The comment of the mapped USB device.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the map.\n"
                },
                "node": {
                    "type": "string",
                    "description": "The node name of the map.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path of the map. For hardware mappings of type USB the path is optional and indicates that the device is mapped through the device ID instead of ports.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "node"
            ]
        },
        "proxmoxve:Hardware/mapping/getPciMap:getPciMap": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "The comment of the mapped PCI device.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID attribute of the map.\n"
                },
                "iommuGroup": {
                    "type": "integer",
                    "description": "The IOMMU group attribute of the map.\n"
                },
                "node": {
                    "type": "string",
                    "description": "The node name attribute of the map.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path attribute of the map.\n"
                },
                "subsystemId": {
                    "type": "string",
                    "description": "The subsystem ID attribute of the map.Not mandatory for the Proxmox VE API call, but causes a PCI hardware mapping to be incomplete when not set.\n"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "id",
                "iommuGroup",
                "node",
                "path",
                "subsystemId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "proxmoxve:Hardware/mapping/getUsbMap:getUsbMap": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "The comment of the mapped USB device.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID attribute of the map.\n"
                },
                "node": {
                    "type": "string",
                    "description": "The node name attribute of the map.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path attribute of the map.\n"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "id",
                "node",
                "path"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "proxmoxve:Network/FirewallIPSetCidr:FirewallIPSetCidr": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Arbitrary string annotation.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Network/IP specification in CIDR format.\n",
                    "willReplaceOnChanges": true
                },
                "nomatch": {
                    "type": "boolean",
                    "description": "Entries marked as `nomatch` are skipped as if those\nwere not added to the set.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "proxmoxve:Network/FirewallLogRatelimit:FirewallLogRatelimit": {
            "properties": {
                "burst": {
                    "type": "integer",
                    "description": "Initial burst of packages which will always get\nlogged before the rate is applied (defaults to `5`).\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable or disable the log rate limit.\n"
                },
                "rate": {
                    "type": "string",
                    "description": "Frequency with which the burst bucket gets refilled\n(defaults to `1/second`).\n"
                }
            },
            "type": "object"
        },
        "proxmoxve:Network/FirewallRulesRule:FirewallRulesRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Rule action (`ACCEPT`, `DROP`, `REJECT`).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Rule comment.\n"
                },
                "dest": {
                    "type": "string",
                    "description": "Restrict packet destination address. This can\nrefer to a single IP address, an IP set ('+ipsetname') or an IP\nalias definition. You can also specify an address range\nlike `20.34.101.207-201.3.9.99`, or a list of IP addresses and\nnetworks (entries are separated by comma). Please do not mix IPv4\nand IPv6 addresses inside such lists.\n"
                },
                "dport": {
                    "type": "string",
                    "description": "Restrict TCP/UDP destination port. You can use\nservice names or simple numbers (0-65535), as defined\nin `/etc/services`. Port ranges can be specified with '\\d+:\\d+', for\nexample `80:85`, and you can use comma separated list to match\nseveral ports or ranges.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable this rule. Defaults to `true`.\n"
                },
                "iface": {
                    "type": "string",
                    "description": "Network interface name. You have to use network\nconfiguration key names for VMs and containers ('net\\d+'). Host\nrelated rules can use arbitrary strings.\n"
                },
                "log": {
                    "type": "string",
                    "description": "Log level for this rule (`emerg`, `alert`, `crit`,\n`err`, `warning`, `notice`, `info`, `debug`, `nolog`).\n"
                },
                "macro": {
                    "type": "string",
                    "description": "Macro name. Use predefined standard macro\nfrom \u003chttps://pve.proxmox.com/pve-docs/pve-admin-guide.html#_firewall_macro_definitions\u003e\n"
                },
                "pos": {
                    "type": "integer",
                    "description": "Position of the rule in the list.\n"
                },
                "proto": {
                    "type": "string",
                    "description": "Restrict packet protocol. You can use protocol\nnames as defined in '/etc/protocols'.\n"
                },
                "securityGroup": {
                    "type": "string",
                    "description": "Security group name.\n",
                    "willReplaceOnChanges": true
                },
                "source": {
                    "type": "string",
                    "description": "Restrict packet source address. This can refer\nto a single IP address, an IP set ('+ipsetname') or an IP alias\ndefinition. You can also specify an address range\nlike `20.34.101.207-201.3.9.99`, or a list of IP addresses and\nnetworks (entries are separated by comma). Please do not mix IPv4\nand IPv6 addresses inside such lists.\n"
                },
                "sport": {
                    "type": "string",
                    "description": "Restrict TCP/UDP source port. You can use\nservice names or simple numbers (0-65535), as defined\nin `/etc/services`. Port ranges can be specified with '\\d+:\\d+', for\nexample `80:85`, and you can use comma separated list to match\nseveral ports or ranges.\n- a security group insertion block, which includes the following arguments:\n"
                },
                "type": {
                    "type": "string",
                    "description": "Rule type (`in`, `out`).\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "pos"
                    ]
                }
            }
        },
        "proxmoxve:Network/FirewallSecurityGroupRule:FirewallSecurityGroupRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Rule action (`ACCEPT`, `DROP`, `REJECT`).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Rule comment.\n"
                },
                "dest": {
                    "type": "string",
                    "description": "Restrict packet destination address. This can refer to\na single IP address, an IP set ('+ipsetname') or an IP alias\ndefinition. You can also specify an address range like\n`20.34.101.207-201.3.9.99`, or a list of IP addresses and networks\n(entries are separated by comma). Please do not mix IPv4 and IPv6\naddresses inside such lists.\n"
                },
                "dport": {
                    "type": "string",
                    "description": "Restrict TCP/UDP destination port. You can use\nservice names or simple numbers (0-65535), as defined in '/etc/\nservices'. Port ranges can be specified with '\\d+:\\d+', for example\n`80:85`, and you can use comma separated list to match several ports or\nranges.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable rule\n"
                },
                "iface": {
                    "type": "string",
                    "description": "Network interface name. You have to use network\nconfiguration key names for VMs and containers ('net\\d+'). Host related\nrules can use arbitrary strings.\n"
                },
                "log": {
                    "type": "string",
                    "description": "Log level for this rule (`emerg`, `alert`, `crit`,\n`err`, `warning`, `notice`, `info`, `debug`, `nolog`).\n"
                },
                "macro": {
                    "type": "string",
                    "description": "Macro name. Use predefined standard macro\nfrom \u003chttps://pve.proxmox.com/pve-docs/pve-admin-guide.html#_firewall_macro_definitions\u003e\n"
                },
                "pos": {
                    "type": "integer",
                    "description": "Position of the rule in the list.\n"
                },
                "proto": {
                    "type": "string",
                    "description": "Restrict packet protocol. You can use protocol names\nas defined in '/etc/protocols'.\n"
                },
                "securityGroup": {
                    "type": "string",
                    "description": "Security group name\n",
                    "willReplaceOnChanges": true
                },
                "source": {
                    "type": "string",
                    "description": "Restrict packet source address. This can refer\nto a single IP address, an IP set ('+ipsetname') or an IP alias\ndefinition. You can also specify an address range like\n`20.34.101.207-201.3.9.99`, or a list of IP addresses and networks (\nentries are separated by comma). Please do not mix IPv4 and IPv6\naddresses inside such lists.\n"
                },
                "sport": {
                    "type": "string",
                    "description": "Restrict TCP/UDP source port. You can use\nservice names or simple numbers (0-65535), as defined in '/etc/\nservices'. Port ranges can be specified with '\\d+:\\d+', for example\n`80:85`, and you can use comma separated list to match several ports or\nranges.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Rule type (`in`, `out`).\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "pos"
                    ]
                }
            }
        },
        "proxmoxve:Network/getHostsEntry:getHostsEntry": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address\n"
                },
                "hostnames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The hostnames associated with each of the IP addresses.\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "hostnames"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "proxmoxve:Permission/GroupAcl:GroupAcl": {
            "properties": {
                "path": {
                    "type": "string",
                    "description": "The path.\n"
                },
                "propagate": {
                    "type": "boolean",
                    "description": "Whether to propagate to child paths.\n"
                },
                "roleId": {
                    "type": "string",
                    "description": "The role identifier.\n"
                }
            },
            "type": "object",
            "required": [
                "path",
                "roleId"
            ]
        },
        "proxmoxve:Permission/PoolMember:PoolMember": {
            "properties": {
                "datastoreId": {
                    "type": "string",
                    "description": "The datastore identifier.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The member identifier.\n"
                },
                "nodeName": {
                    "type": "string",
                    "description": "The node name.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The member type.\n"
                },
                "vmId": {
                    "type": "integer",
                    "description": "The virtual machine identifier.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "datastoreId",
                        "id",
                        "nodeName",
                        "type",
                        "vmId"
                    ]
                }
            }
        },
        "proxmoxve:Permission/UserAcl:UserAcl": {
            "properties": {
                "path": {
                    "type": "string",
                    "description": "The path.\n"
                },
                "propagate": {
                    "type": "boolean",
                    "description": "Whether to propagate to child paths.\n"
                },
                "roleId": {
                    "type": "string",
                    "description": "The role identifier.\n"
                }
            },
            "type": "object",
            "required": [
                "path",
                "roleId"
            ]
        },
        "proxmoxve:Permission/getGroupAcl:getGroupAcl": {
            "properties": {
                "path": {
                    "type": "string",
                    "description": "The path.\n"
                },
                "propagate": {
                    "type": "boolean",
                    "description": "Whether to propagate to child paths.\n"
                },
                "roleId": {
                    "type": "string",
                    "description": "The role identifier.\n"
                }
            },
            "type": "object",
            "required": [
                "path",
                "propagate",
                "roleId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "proxmoxve:Permission/getPoolMember:getPoolMember": {
            "properties": {
                "datastoreId": {
                    "type": "string",
                    "description": "The datastore identifier.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The member identifier.\n"
                },
                "nodeName": {
                    "type": "string",
                    "description": "The node name.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The member type.\n"
                },
                "vmId": {
                    "type": "integer",
                    "description": "The virtual machine identifier.\n"
                }
            },
            "type": "object",
            "required": [
                "datastoreId",
                "id",
                "nodeName",
                "type",
                "vmId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "proxmoxve:Permission/getUserAcl:getUserAcl": {
            "properties": {
                "path": {
                    "type": "string",
                    "description": "The path.\n"
                },
                "propagate": {
                    "type": "boolean",
                    "description": "Whether to propagate to child paths.\n"
                },
                "roleId": {
                    "type": "string",
                    "description": "The role identifier.\n"
                }
            },
            "type": "object",
            "required": [
                "path",
                "propagate",
                "roleId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "proxmoxve:Storage/FileSourceFile:FileSourceFile": {
            "properties": {
                "changed": {
                    "type": "boolean",
                    "description": "Whether the source file has changed since the last run\n",
                    "willReplaceOnChanges": true
                },
                "checksum": {
                    "type": "string",
                    "description": "The SHA256 checksum of the source file.\n",
                    "willReplaceOnChanges": true
                },
                "fileName": {
                    "type": "string",
                    "description": "The file name to use instead of the source file\nname. Useful when the source file does not have a valid file extension,\nfor example when the source file is a URL referencing a `.qcow2` image.\n",
                    "willReplaceOnChanges": true
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Whether to skip the TLS verification step for\nHTTPS sources (defaults to `false`).\n",
                    "willReplaceOnChanges": true
                },
                "minTls": {
                    "type": "string",
                    "description": "The minimum required TLS version for HTTPS\nsources. \"Supported values: `1.0|1.1|1.2|1.3` (defaults to `1.3`).\n",
                    "willReplaceOnChanges": true
                },
                "path": {
                    "type": "string",
                    "description": "A path to a local file or a URL.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "path"
            ]
        },
        "proxmoxve:Storage/FileSourceRaw:FileSourceRaw": {
            "properties": {
                "data": {
                    "type": "string",
                    "description": "The raw data.\n",
                    "willReplaceOnChanges": true
                },
                "fileName": {
                    "type": "string",
                    "description": "The file name.\n",
                    "willReplaceOnChanges": true
                },
                "resize": {
                    "type": "integer",
                    "description": "The number of bytes to resize the file to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "data",
                "fileName"
            ]
        },
        "proxmoxve:VM/VirtualMachine2Cdrom:VirtualMachine2Cdrom": {
            "properties": {
                "fileId": {
                    "type": "string",
                    "description": "The file ID of the CD-ROM, or `cdrom|none`. Defaults to `none` to leave the CD-ROM empty. Use `cdrom` to connect to the physical drive.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "fileId"
                    ]
                }
            }
        },
        "proxmoxve:VM/VirtualMachine2Clone:VirtualMachine2Clone": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of the VM to clone.\n"
                },
                "retries": {
                    "type": "integer",
                    "description": "The number of retries to perform when cloning the VM (default: 3).\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "retries"
                    ]
                }
            }
        },
        "proxmoxve:VM/VirtualMachine2Cpu:VirtualMachine2Cpu": {
            "properties": {
                "affinity": {
                    "type": "string",
                    "description": "The CPU cores that are used to run the VM’s vCPU. The value is a list of CPU IDs, separated by commas. The CPU IDs are zero-based.  For example, `0,1,2,3` (which also can be shortened to `0-3`) means that the VM’s vCPUs are run on the first four CPU cores. Setting `affinity` is only allowed for `root@pam` authenticated user.\n"
                },
                "architecture": {
                    "type": "string",
                    "description": "The CPU architecture `\u003caarch64 | x86_64\u003e` (defaults to the host). Setting `affinity` is only allowed for `root@pam` authenticated user.\n"
                },
                "cores": {
                    "type": "integer",
                    "description": "The number of CPU cores per socket (defaults to `1`).\n"
                },
                "flags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of additional CPU flags. Use `+FLAG` to enable, `-FLAG` to disable a flag. Custom CPU models can specify any flag supported by QEMU/KVM, VM-specific flags must be from the following set for security reasons: `pcid`, `spec-ctrl`, `ibpb`, `ssbd`, `virt-ssbd`, `amd-ssbd`, `amd-no-ssb`, `pdpe1gb`, `md-clear`, `hv-tlbflush`, `hv-evmcs`, `aes`.\n"
                },
                "hotplugged": {
                    "type": "integer",
                    "description": "The number of hotplugged vCPUs (defaults to `0`).\n"
                },
                "limit": {
                    "type": "integer",
                    "description": "Limit of CPU usage (defaults to `0` which means no limit).\n"
                },
                "numa": {
                    "type": "boolean",
                    "description": "Enable NUMA (defaults to `false`).\n"
                },
                "sockets": {
                    "type": "integer",
                    "description": "The number of CPU sockets (defaults to `1`).\n"
                },
                "type": {
                    "type": "string",
                    "description": "Emulated CPU type, it's recommended to use `x86-64-v2-AES` or higher (defaults to `kvm64`). See https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm*virtual*machines_settings for more information.\n"
                },
                "units": {
                    "type": "integer",
                    "description": "CPU weight for a VM. Argument is used in the kernel fair scheduler. The larger the number is, the more CPU time this VM gets. Number is relative to weights of all the other running VMs.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "affinity",
                        "architecture",
                        "cores",
                        "flags",
                        "hotplugged",
                        "limit",
                        "numa",
                        "sockets",
                        "type",
                        "units"
                    ]
                }
            }
        },
        "proxmoxve:VM/VirtualMachine2Timeouts:VirtualMachine2Timeouts": {
            "properties": {
                "create": {
                    "type": "string",
                    "description": "A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as \"30s\" or \"2h45m\". Valid time units are \"s\" (seconds), \"m\" (minutes), \"h\" (hours).\n"
                },
                "delete": {
                    "type": "string",
                    "description": "A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as \"30s\" or \"2h45m\". Valid time units are \"s\" (seconds), \"m\" (minutes), \"h\" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.\n"
                },
                "read": {
                    "type": "string",
                    "description": "A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as \"30s\" or \"2h45m\". Valid time units are \"s\" (seconds), \"m\" (minutes), \"h\" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.\n"
                },
                "update": {
                    "type": "string",
                    "description": "A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as \"30s\" or \"2h45m\". Valid time units are \"s\" (seconds), \"m\" (minutes), \"h\" (hours).\n"
                }
            },
            "type": "object"
        },
        "proxmoxve:VM/VirtualMachine2Vga:VirtualMachine2Vga": {
            "properties": {
                "clipboard": {
                    "type": "string",
                    "description": "Enable a specific clipboard. If not set, depending on the display type the SPICE one will be added. Currently only `vnc` is available. Migration with VNC clipboard is not supported by Proxmox.\n"
                },
                "memory": {
                    "type": "integer",
                    "description": "The VGA memory in megabytes (4-512 MB). Has no effect with serial display.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The VGA type (defaults to `std`).\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clipboard",
                        "memory",
                        "type"
                    ]
                }
            }
        },
        "proxmoxve:VM/VirtualMachineAgent:VirtualMachineAgent": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether to enable the QEMU agent (defaults\nto `false`).\n"
                },
                "timeout": {
                    "type": "string",
                    "description": "The maximum amount of time to wait for data from\nthe QEMU agent to become available ( defaults to `15m`).\n"
                },
                "trim": {
                    "type": "boolean",
                    "description": "Whether to enable the FSTRIM feature in the QEMU agent\n(defaults to `false`).\n"
                },
                "type": {
                    "type": "string",
                    "description": "The QEMU agent interface type (defaults to `virtio`).\n"
                }
            },
            "type": "object"
        },
        "proxmoxve:VM/VirtualMachineAudioDevice:VirtualMachineAudioDevice": {
            "properties": {
                "device": {
                    "type": "string",
                    "description": "The device (defaults to `intel-hda`).\n- `AC97` - Intel 82801AA AC97 Audio.\n- `ich9-intel-hda` - Intel HD Audio Controller (ich9).\n- `intel-hda` - Intel HD Audio.\n"
                },
                "driver": {
                    "type": "string",
                    "description": "The driver (defaults to `spice`).\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether to enable the audio device (defaults\nto `true`).\n"
                }
            },
            "type": "object"
        },
        "proxmoxve:VM/VirtualMachineCdrom:VirtualMachineCdrom": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether to enable the CDROM drive (defaults\nto `false`).\n"
                },
                "fileId": {
                    "type": "string",
                    "description": "A file ID for an ISO file (defaults to `cdrom` as\nin the physical drive). Use `none` to leave the CDROM drive empty.\n"
                },
                "interface": {
                    "type": "string",
                    "description": "A hardware interface to connect CDROM drive to,\nmust be `ideN` (defaults to `ide3`). Note that `q35` machine type only\nsupports `ide0` and `ide2`.\n"
                }
            },
            "type": "object"
        },
        "proxmoxve:VM/VirtualMachineClone:VirtualMachineClone": {
            "properties": {
                "datastoreId": {
                    "type": "string",
                    "description": "The identifier for the target datastore.\n",
                    "willReplaceOnChanges": true
                },
                "full": {
                    "type": "boolean",
                    "description": "Full or linked clone (defaults to `true`).\n",
                    "willReplaceOnChanges": true
                },
                "nodeName": {
                    "type": "string",
                    "description": "The name of the source node (leave blank, if\nequal to the `node_name` argument).\n",
                    "willReplaceOnChanges": true
                },
                "retries": {
                    "type": "integer",
                    "description": "Number of retries in Proxmox for clone vm.\nSometimes Proxmox errors with timeout when creating multiple clones at\nonce.\n",
                    "willReplaceOnChanges": true
                },
                "vmId": {
                    "type": "integer",
                    "description": "The identifier for the source VM.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "vmId"
            ]
        },
        "proxmoxve:VM/VirtualMachineCpu:VirtualMachineCpu": {
            "properties": {
                "affinity": {
                    "type": "string",
                    "description": "The CPU cores that are used to run the VM’s vCPU. The\nvalue is a list of CPU IDs, separated by commas. The CPU IDs are zero-based.\nFor example, `0,1,2,3` (which also can be shortened to `0-3`) means that the VM’s vCPUs are run on the first four\nCPU cores. Setting `affinity` is only allowed for `root@pam` authenticated user.\n"
                },
                "architecture": {
                    "type": "string",
                    "description": "The CPU architecture (defaults to `x86_64`).\n"
                },
                "cores": {
                    "type": "integer",
                    "description": "The number of CPU cores (defaults to `1`).\n"
                },
                "flags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The CPU flags.\n- `+aes`/`-aes` - Activate AES instruction set for HW acceleration.\n- `+amd-no-ssb`/`-amd-no-ssb` - Notifies guest OS that host is not\nvulnerable for Spectre on AMD CPUs.\n- `+amd-ssbd`/`-amd-ssbd` - Improves Spectre mitigation performance with\nAMD CPUs, best used with \"virt-ssbd\".\n- `+hv-evmcs`/`-hv-evmcs` - Improve performance for nested\nvirtualization (only supported on Intel CPUs).\n- `+hv-tlbflush`/`-hv-tlbflush` - Improve performance in overcommitted\nWindows guests (may lead to guest BSOD on old CPUs).\n- `+ibpb`/`-ibpb` - Allows improved Spectre mitigation on AMD CPUs.\n- `+md-clear`/`-md-clear` - Required to let the guest OS know if MDS is\nmitigated correctly.\n- `+pcid`/`-pcid` - Meltdown fix cost reduction on Westmere, Sandy- and\nIvy Bridge Intel CPUs.\n- `+pdpe1gb`/`-pdpe1gb` - Allows guest OS to use 1 GB size pages, if\nhost HW supports it.\n- `+spec-ctrl`/`-spec-ctrl` - Allows improved Spectre mitigation with\nIntel CPUs.\n- `+ssbd`/`-ssbd` - Protection for \"Speculative Store Bypass\" for Intel\nmodels.\n- `+virt-ssbd`/`-virt-ssbd` - Basis for \"Speculative Store Bypass\"\nprotection for AMD models.\n"
                },
                "hotplugged": {
                    "type": "integer",
                    "description": "The number of hotplugged vCPUs (defaults\nto `0`).\n"
                },
                "limit": {
                    "type": "integer",
                    "description": "Limit of CPU usage, `0...128`. (defaults to `0` -- no limit).\n"
                },
                "numa": {
                    "type": "boolean",
                    "description": "Enable/disable NUMA. (default to `false`)\n"
                },
                "sockets": {
                    "type": "integer",
                    "description": "The number of CPU sockets (defaults to `1`).\n"
                },
                "type": {
                    "type": "string",
                    "description": "The emulated CPU type, it's recommended to\nuse `x86-64-v2-AES` (defaults to `qemu64`).\n"
                },
                "units": {
                    "type": "integer",
                    "description": "The CPU units (defaults to `1024`).\n"
                }
            },
            "type": "object"
        },
        "proxmoxve:VM/VirtualMachineDisk:VirtualMachineDisk": {
            "properties": {
                "aio": {
                    "type": "string",
                    "description": "The disk AIO mode (defaults to `io_uring`).\n"
                },
                "backup": {
                    "type": "boolean",
                    "description": "Whether the drive should be included when making backups (defaults to `true`).\n"
                },
                "cache": {
                    "type": "string",
                    "description": "The cache type (defaults to `none`).\n"
                },
                "datastoreId": {
                    "type": "string",
                    "description": "The identifier for the datastore to create\nthe disk in (defaults to `local-lvm`).\n"
                },
                "discard": {
                    "type": "string",
                    "description": "Whether to pass discard/trim requests to the\nunderlying storage. Supported values are `on`/`ignore` (defaults\nto `ignore`).\n"
                },
                "fileFormat": {
                    "type": "string",
                    "description": "The file format (defaults to `qcow2`).\n"
                },
                "fileId": {
                    "type": "string",
                    "description": "The file ID for a disk image. The ID format is\n`\u003cdatastore_id\u003e:\u003ccontent_type\u003e/\u003cfile_name\u003e`, for example `local:iso/centos8.img`. Can be also taken from\n`proxmoxve.Download.File` resource.\n",
                    "willReplaceOnChanges": true
                },
                "interface": {
                    "type": "string",
                    "description": "The disk interface for Proxmox, currently `scsi`,\n`sata` and `virtio` interfaces are supported. Append the disk index at\nthe end, for example, `virtio0` for the first virtio disk, `virtio1` for\nthe second, etc.\n"
                },
                "iothread": {
                    "type": "boolean",
                    "description": "Whether to use iothreads for this disk (defaults\nto `false`).\n"
                },
                "pathInDatastore": {
                    "type": "string",
                    "description": "The in-datastore path to the disk image.\n***Experimental.***Use to attach another VM's disks,\nor (as root only) host's filesystem paths (`datastore_id` empty string).\nSee \"*Example: Attached disks*\".\n"
                },
                "replicate": {
                    "type": "boolean",
                    "description": "Whether the drive should be considered for replication jobs (defaults to `true`).\n"
                },
                "serial": {
                    "type": "string",
                    "description": "The serial number of the disk, up to 20 bytes long.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The disk size in gigabytes (defaults to `8`).\n"
                },
                "speed": {
                    "$ref": "#/types/proxmoxve:VM/VirtualMachineDiskSpeed:VirtualMachineDiskSpeed",
                    "description": "The speed limits.\n"
                },
                "ssd": {
                    "type": "boolean",
                    "description": "Whether to use an SSD emulation option for this disk (\ndefaults to `false`). Note that SSD emulation is not supported on VirtIO\nBlock drives.\n"
                }
            },
            "type": "object",
            "required": [
                "interface"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "fileFormat",
                        "interface",
                        "pathInDatastore"
                    ]
                }
            }
        },
        "proxmoxve:VM/VirtualMachineDiskSpeed:VirtualMachineDiskSpeed": {
            "properties": {
                "iopsRead": {
                    "type": "integer",
                    "description": "The maximum read I/O in operations per second.\n"
                },
                "iopsReadBurstable": {
                    "type": "integer",
                    "description": "The maximum unthrottled read I/O pool in operations per second.\n"
                },
                "iopsWrite": {
                    "type": "integer",
                    "description": "The maximum write I/O in operations per second.\n"
                },
                "iopsWriteBurstable": {
                    "type": "integer",
                    "description": "The maximum unthrottled write I/O pool in operations per second.\n"
                },
                "read": {
                    "type": "integer",
                    "description": "The maximum read speed in megabytes per second.\n"
                },
                "readBurstable": {
                    "type": "integer",
                    "description": "The maximum burstable read speed in\nmegabytes per second.\n"
                },
                "write": {
                    "type": "integer",
                    "description": "The maximum write speed in megabytes per second.\n"
                },
                "writeBurstable": {
                    "type": "integer",
                    "description": "The maximum burstable write speed in\nmegabytes per second.\n"
                }
            },
            "type": "object"
        },
        "proxmoxve:VM/VirtualMachineEfiDisk:VirtualMachineEfiDisk": {
            "properties": {
                "datastoreId": {
                    "type": "string",
                    "description": "The identifier for the datastore to create\nthe disk in (defaults to `local-lvm`).\n"
                },
                "fileFormat": {
                    "type": "string",
                    "description": "The file format (defaults to `raw`).\n",
                    "willReplaceOnChanges": true
                },
                "preEnrolledKeys": {
                    "type": "boolean",
                    "description": "Use am EFI vars template with\ndistribution-specific and Microsoft Standard keys enrolled, if used with\nEFI type=`4m`. Ignored for VMs with cpu.architecture=`aarch64` (defaults\nto `false`).\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "Size and type of the OVMF EFI disk. `4m` is newer and\nrecommended, and required for Secure Boot. For backwards compatibility\nuse `2m`. Ignored for VMs with cpu.architecture=`aarch64` (defaults\nto `2m`).\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "fileFormat"
                    ]
                }
            }
        },
        "proxmoxve:VM/VirtualMachineHostpci:VirtualMachineHostpci": {
            "properties": {
                "device": {
                    "type": "string",
                    "description": "The PCI device name for Proxmox, in form\nof `hostpciX` where `X` is a sequential number from 0 to 15.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The PCI device ID. This parameter is not compatible\nwith `api_token` and requires the root `username` and `password`\nconfigured in the proxmox provider. Use either this or `mapping`.\n"
                },
                "mapping": {
                    "type": "string",
                    "description": "The resource mapping name of the device, for\nexample gpu. Use either this or `id`.\n"
                },
                "mdev": {
                    "type": "string",
                    "description": "The mediated device ID to use.\n"
                },
                "pcie": {
                    "type": "boolean",
                    "description": "Tells Proxmox to use a PCIe or PCI port. Some\nguests/device combination require PCIe rather than PCI. PCIe is only\navailable for q35 machine types.\n"
                },
                "romFile": {
                    "type": "string",
                    "description": "A path to a ROM file for the device to use. This\nis a relative path under `/usr/share/kvm/`.\n"
                },
                "rombar": {
                    "type": "boolean",
                    "description": "Makes the firmware ROM visible for the VM (defaults\nto `true`).\n"
                },
                "xvga": {
                    "type": "boolean",
                    "description": "Marks the PCI(e) device as the primary GPU of the VM.\nWith this enabled the `vga` configuration argument will be ignored.\n"
                }
            },
            "type": "object",
            "required": [
                "device"
            ]
        },
        "proxmoxve:VM/VirtualMachineInitialization:VirtualMachineInitialization": {
            "properties": {
                "datastoreId": {
                    "type": "string",
                    "description": "The identifier for the datastore to create the\ncloud-init disk in (defaults to `local-lvm`).\n"
                },
                "dns": {
                    "$ref": "#/types/proxmoxve:VM/VirtualMachineInitializationDns:VirtualMachineInitializationDns",
                    "description": "The DNS configuration.\n"
                },
                "interface": {
                    "type": "string",
                    "description": "The hardware interface to connect the cloud-init\nimage to. Must be one of `ide0..3`, `sata0..5`, `scsi0..30`. Will be\ndetected if the setting is missing but a cloud-init image is present,\notherwise defaults to `ide2`.\n"
                },
                "ipConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/proxmoxve:VM/VirtualMachineInitializationIpConfig:VirtualMachineInitializationIpConfig"
                    },
                    "description": "The IP configuration (one block per network\ndevice).\n"
                },
                "metaDataFileId": {
                    "type": "string",
                    "description": "The identifier for a file containing\nall meta data passed to the VM via cloud-init.\n",
                    "willReplaceOnChanges": true
                },
                "networkDataFileId": {
                    "type": "string",
                    "description": "The identifier for a file containing\nnetwork configuration data passed to the VM via cloud-init (conflicts\nwith `ip_config`).\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The cloud-init configuration format\n",
                    "willReplaceOnChanges": true
                },
                "upgrade": {
                    "type": "boolean",
                    "description": "Whether to do an automatic package upgrade after the first boot\n",
                    "deprecationMessage": "The `upgrade` attribute is deprecated and will be removed in a future release."
                },
                "userAccount": {
                    "$ref": "#/types/proxmoxve:VM/VirtualMachineInitializationUserAccount:VirtualMachineInitializationUserAccount",
                    "description": "The user account configuration (conflicts\nwith `user_data_file_id`).\n",
                    "willReplaceOnChanges": true
                },
                "userDataFileId": {
                    "type": "string",
                    "description": "The identifier for a file containing\ncustom user data (conflicts with `user_account`).\n",
                    "willReplaceOnChanges": true
                },
                "vendorDataFileId": {
                    "type": "string",
                    "description": "The identifier for a file containing\nall vendor data passed to the VM via cloud-init.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "upgrade"
                    ]
                }
            }
        },
        "proxmoxve:VM/VirtualMachineInitializationDns:VirtualMachineInitializationDns": {
            "properties": {
                "domain": {
                    "type": "string",
                    "description": "The DNS search domain.\n"
                },
                "server": {
                    "type": "string",
                    "description": "The DNS server. The `server` attribute is\ndeprecated and will be removed in a future release. Please use the\n`servers` attribute instead.\n",
                    "deprecationMessage": "The `server` attribute is deprecated and will be removed in a future release. Please use the `servers` attribute instead."
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of DNS servers.\n"
                }
            },
            "type": "object"
        },
        "proxmoxve:VM/VirtualMachineInitializationIpConfig:VirtualMachineInitializationIpConfig": {
            "properties": {
                "ipv4": {
                    "$ref": "#/types/proxmoxve:VM/VirtualMachineInitializationIpConfigIpv4:VirtualMachineInitializationIpConfigIpv4",
                    "description": "The IPv4 configuration.\n"
                },
                "ipv6": {
                    "$ref": "#/types/proxmoxve:VM/VirtualMachineInitializationIpConfigIpv6:VirtualMachineInitializationIpConfigIpv6",
                    "description": "The IPv6 configuration.\n"
                }
            },
            "type": "object"
        },
        "proxmoxve:VM/VirtualMachineInitializationIpConfigIpv4:VirtualMachineInitializationIpConfigIpv4": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The IPv4 address in CIDR notation\n(e.g. 192.168.2.2/24). Alternatively, set this to `dhcp` for\nautodiscovery.\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "The IPv4 gateway (must be omitted\nwhen `dhcp` is used as the address).\n"
                }
            },
            "type": "object"
        },
        "proxmoxve:VM/VirtualMachineInitializationIpConfigIpv6:VirtualMachineInitializationIpConfigIpv6": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The IPv6 address in CIDR notation\n(e.g. fd1c:000:0000::0000:000:7334/64). Alternatively, set this\nto `dhcp` for autodiscovery.\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "The IPv6 gateway (must be omitted\nwhen `dhcp` is used as the address).\n"
                }
            },
            "type": "object"
        },
        "proxmoxve:VM/VirtualMachineInitializationUserAccount:VirtualMachineInitializationUserAccount": {
            "properties": {
                "keys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The SSH keys.\n",
                    "willReplaceOnChanges": true
                },
                "password": {
                    "type": "string",
                    "description": "The SSH password.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "username": {
                    "type": "string",
                    "description": "The SSH username.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "proxmoxve:VM/VirtualMachineMemory:VirtualMachineMemory": {
            "properties": {
                "dedicated": {
                    "type": "integer",
                    "description": "The dedicated memory in megabytes (defaults\nto `512`).\n"
                },
                "floating": {
                    "type": "integer",
                    "description": "The floating memory in megabytes (defaults\nto `0`).\n"
                },
                "hugepages": {
                    "type": "string",
                    "description": "Enable/disable hugepages memory (defaults to disable).\n"
                },
                "keepHugepages": {
                    "type": "boolean",
                    "description": "Keep hugepages memory after the VM is stopped (defaults\nto `false`).\n\nSettings `hugepages` and `keep_hugepages` are only allowed for `root@pam` authenticated user.\nAnd required `cpu.numa` to be enabled.\n"
                },
                "shared": {
                    "type": "integer",
                    "description": "The shared memory in megabytes (defaults to `0`).\n"
                }
            },
            "type": "object"
        },
        "proxmoxve:VM/VirtualMachineNetworkDevice:VirtualMachineNetworkDevice": {
            "properties": {
                "bridge": {
                    "type": "string",
                    "description": "The name of the network bridge (defaults to `vmbr0`).\n"
                },
                "disconnected": {
                    "type": "boolean",
                    "description": "Whether to disconnect the network device from the network (defaults to `false`).\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether to enable the network device (defaults to `true`).\n"
                },
                "firewall": {
                    "type": "boolean",
                    "description": "Whether this interface's firewall rules should be used (defaults to `false`).\n"
                },
                "macAddress": {
                    "type": "string",
                    "description": "The MAC address.\n"
                },
                "model": {
                    "type": "string",
                    "description": "The network device model (defaults to `virtio`).\n"
                },
                "mtu": {
                    "type": "integer",
                    "description": "Force MTU, for VirtIO only. Set to 1 to use the bridge MTU. Cannot be larger than the bridge MTU.\n"
                },
                "queues": {
                    "type": "integer",
                    "description": "The number of queues for VirtIO (1..64).\n"
                },
                "rateLimit": {
                    "type": "number",
                    "description": "The rate limit in megabytes per second.\n"
                },
                "trunks": {
                    "type": "string",
                    "description": "String containing a `;` separated list of VLAN trunks\n(\"10;20;30\"). Note that the VLAN-aware feature need to be enabled on the PVE\nLinux Bridge to use trunks.\n"
                },
                "vlanId": {
                    "type": "integer",
                    "description": "The VLAN identifier.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "macAddress"
                    ]
                }
            }
        },
        "proxmoxve:VM/VirtualMachineNuma:VirtualMachineNuma": {
            "properties": {
                "cpus": {
                    "type": "string",
                    "description": "The CPU cores to assign to the NUMA node (format is `0-7;16-31`).\n"
                },
                "device": {
                    "type": "string",
                    "description": "The NUMA device name for Proxmox, in form\nof `numaX` where `X` is a sequential number from 0 to 7.\n"
                },
                "hostnodes": {
                    "type": "string",
                    "description": "The NUMA host nodes.\n"
                },
                "memory": {
                    "type": "integer",
                    "description": "The memory in megabytes to assign to the NUMA node.\n"
                },
                "policy": {
                    "type": "string",
                    "description": "The NUMA policy (defaults to `preferred`).\n"
                }
            },
            "type": "object",
            "required": [
                "cpus",
                "device",
                "memory"
            ]
        },
        "proxmoxve:VM/VirtualMachineOperatingSystem:VirtualMachineOperatingSystem": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "The type (defaults to `other`).\n"
                }
            },
            "type": "object"
        },
        "proxmoxve:VM/VirtualMachineSerialDevice:VirtualMachineSerialDevice": {
            "properties": {
                "device": {
                    "type": "string",
                    "description": "The device (defaults to `socket`).\n- `/dev/*` - A host serial device.\n"
                }
            },
            "type": "object"
        },
        "proxmoxve:VM/VirtualMachineSmbios:VirtualMachineSmbios": {
            "properties": {
                "family": {
                    "type": "string",
                    "description": "The family string.\n"
                },
                "manufacturer": {
                    "type": "string",
                    "description": "The manufacturer.\n"
                },
                "product": {
                    "type": "string",
                    "description": "The product ID.\n"
                },
                "serial": {
                    "type": "string",
                    "description": "The serial number.\n"
                },
                "sku": {
                    "type": "string",
                    "description": "The SKU number.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "The UUID (defaults to randomly generated UUID).\n"
                },
                "version": {
                    "type": "string",
                    "description": "The version.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "uuid"
                    ]
                }
            }
        },
        "proxmoxve:VM/VirtualMachineStartup:VirtualMachineStartup": {
            "properties": {
                "downDelay": {
                    "type": "integer",
                    "description": "A non-negative number defining the delay in\nseconds before the next VM is shut down.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "A non-negative number defining the general startup\norder.\n"
                },
                "upDelay": {
                    "type": "integer",
                    "description": "A non-negative number defining the delay in\nseconds before the next VM is started.\n"
                }
            },
            "type": "object"
        },
        "proxmoxve:VM/VirtualMachineTpmState:VirtualMachineTpmState": {
            "properties": {
                "datastoreId": {
                    "type": "string",
                    "description": "The identifier for the datastore to create\nthe disk in (defaults to `local-lvm`).\n"
                },
                "version": {
                    "type": "string",
                    "description": "TPM state device version. Can be `v1.2` or `v2.0`.\n(defaults to `v2.0`).\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "proxmoxve:VM/VirtualMachineUsb:VirtualMachineUsb": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "The Host USB device or port or the value `spice`. Use either this or `mapping`.\n"
                },
                "mapping": {
                    "type": "string",
                    "description": "The cluster-wide resource mapping name of the device, for example \"usbdevice\". Use either this or `host`.\n"
                },
                "usb3": {
                    "type": "boolean",
                    "description": "Makes the USB device a USB3 device for the VM\n(defaults to `false`).\n"
                }
            },
            "type": "object"
        },
        "proxmoxve:VM/VirtualMachineVga:VirtualMachineVga": {
            "properties": {
                "clipboard": {
                    "type": "string",
                    "description": "Enable VNC clipboard by setting to `vnc`. See the [Proxmox documentation](https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm_virtual_machines_settings) section 10.2.8 for more information.\n"
                },
                "memory": {
                    "type": "integer",
                    "description": "The VGA memory in megabytes (defaults to `16`).\n"
                },
                "type": {
                    "type": "string",
                    "description": "The VGA type (defaults to `std`).\n"
                }
            },
            "type": "object"
        },
        "proxmoxve:VM/getVirtualMachinesFilter:getVirtualMachinesFilter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the VM attribute to filter on. One of [`name`, `template`, `status`, `node_name`]\n"
                },
                "regex": {
                    "type": "boolean",
                    "description": "Treat values as regex patterns\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of values to pass the filter. VM's attribute should match at least one value in the list.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "proxmoxve:VM/getVirtualMachinesVm:getVirtualMachinesVm": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The virtual machine name.\n"
                },
                "nodeName": {
                    "type": "string",
                    "description": "The node name. All cluster nodes will be queried in case this is omitted\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the VM\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to filter the VMs. The VM must have all\nthe tags to be included in the result.\n"
                },
                "template": {
                    "type": "boolean",
                    "description": "Is VM a template (true) or a regular VM (false)\n"
                },
                "vmId": {
                    "type": "integer",
                    "description": "The VM identifier.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "nodeName",
                "tags",
                "vmId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "proxmoxve:config/ssh:ssh": {
            "properties": {
                "agent": {
                    "type": "boolean",
                    "description": "Whether to use the SSH agent for authentication. Takes precedence over the `private_key` and `password` fields. Defaults to the value of the `PROXMOX_VE_SSH_AGENT` environment variable, or `false` if not set.\n"
                },
                "agentSocket": {
                    "type": "string",
                    "description": "The path to the SSH agent socket. Defaults to the value of the `SSH_AUTH_SOCK` environment variable.\n"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/proxmoxve:config/sshNode:sshNode"
                    },
                    "description": "Overrides for SSH connection configuration for a Proxmox VE node.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password used for the SSH connection. Defaults to the value of the `password` field of the `provider` block.\n",
                    "secret": true
                },
                "privateKey": {
                    "type": "string",
                    "description": "The unencrypted private key (in PEM format) used for the SSH connection. Defaults to the value of the `PROXMOX_VE_SSH_PRIVATE_KEY` environment variable.\n",
                    "secret": true
                },
                "socks5Password": {
                    "type": "string",
                    "description": "The password for the SOCKS5 proxy server. Defaults to the value of the `PROXMOX_VE_SSH_SOCKS5_PASSWORD` environment variable.\n",
                    "secret": true
                },
                "socks5Server": {
                    "type": "string",
                    "description": "The address:port of the SOCKS5 proxy server. Defaults to the value of the `PROXMOX_VE_SSH_SOCKS5_SERVER` environment variable.\n"
                },
                "socks5Username": {
                    "type": "string",
                    "description": "The username for the SOCKS5 proxy server. Defaults to the value of the `PROXMOX_VE_SSH_SOCKS5_USERNAME` environment variable.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username used for the SSH connection. Defaults to the value of the `username` field of the `provider` block.\n"
                }
            },
            "type": "object"
        },
        "proxmoxve:config/sshNode:sshNode": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address of the Proxmox VE node.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Proxmox VE node.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port of the Proxmox VE node.\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "proxmoxve:index/HostsEntry:HostsEntry": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The IP address.\n"
                },
                "hostnames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The hostnames.\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "hostnames"
            ]
        },
        "proxmoxve:index/ProviderSsh:ProviderSsh": {
            "properties": {
                "agent": {
                    "type": "boolean",
                    "description": "Whether to use the SSH agent for authentication. Takes precedence over the `private_key` and `password` fields. Defaults to the value of the `PROXMOX_VE_SSH_AGENT` environment variable, or `false` if not set.\n"
                },
                "agentSocket": {
                    "type": "string",
                    "description": "The path to the SSH agent socket. Defaults to the value of the `SSH_AUTH_SOCK` environment variable.\n"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/proxmoxve:index/ProviderSshNode:ProviderSshNode"
                    },
                    "description": "Overrides for SSH connection configuration for a Proxmox VE node.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password used for the SSH connection. Defaults to the value of the `password` field of the `provider` block.\n",
                    "secret": true
                },
                "privateKey": {
                    "type": "string",
                    "description": "The unencrypted private key (in PEM format) used for the SSH connection. Defaults to the value of the `PROXMOX_VE_SSH_PRIVATE_KEY` environment variable.\n",
                    "secret": true
                },
                "socks5Password": {
                    "type": "string",
                    "description": "The password for the SOCKS5 proxy server. Defaults to the value of the `PROXMOX_VE_SSH_SOCKS5_PASSWORD` environment variable.\n",
                    "secret": true
                },
                "socks5Server": {
                    "type": "string",
                    "description": "The address:port of the SOCKS5 proxy server. Defaults to the value of the `PROXMOX_VE_SSH_SOCKS5_SERVER` environment variable.\n"
                },
                "socks5Username": {
                    "type": "string",
                    "description": "The username for the SOCKS5 proxy server. Defaults to the value of the `PROXMOX_VE_SSH_SOCKS5_USERNAME` environment variable.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username used for the SSH connection. Defaults to the value of the `username` field of the `provider` block.\n"
                }
            },
            "type": "object"
        },
        "proxmoxve:index/ProviderSshNode:ProviderSshNode": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address of the Proxmox VE node.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Proxmox VE node.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port of the Proxmox VE node.\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": []
                }
            }
        },
        "proxmoxve:index/Vm2Cdrom:Vm2Cdrom": {
            "properties": {
                "fileId": {
                    "type": "string",
                    "description": "The file ID of the CD-ROM, or `cdrom|none`. Defaults to `none` to leave the CD-ROM empty. Use `cdrom` to connect to the physical drive.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "fileId"
                    ]
                }
            }
        },
        "proxmoxve:index/Vm2Clone:Vm2Clone": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of the VM to clone.\n"
                },
                "retries": {
                    "type": "integer",
                    "description": "The number of retries to perform when cloning the VM (default: 3).\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "retries"
                    ]
                }
            }
        },
        "proxmoxve:index/Vm2Cpu:Vm2Cpu": {
            "properties": {
                "affinity": {
                    "type": "string",
                    "description": "The CPU cores that are used to run the VM’s vCPU. The value is a list of CPU IDs, separated by commas. The CPU IDs are zero-based.  For example, `0,1,2,3` (which also can be shortened to `0-3`) means that the VM’s vCPUs are run on the first four CPU cores. Setting `affinity` is only allowed for `root@pam` authenticated user.\n"
                },
                "architecture": {
                    "type": "string",
                    "description": "The CPU architecture `\u003caarch64 | x86_64\u003e` (defaults to the host). Setting `affinity` is only allowed for `root@pam` authenticated user.\n"
                },
                "cores": {
                    "type": "integer",
                    "description": "The number of CPU cores per socket (defaults to `1`).\n"
                },
                "flags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of additional CPU flags. Use `+FLAG` to enable, `-FLAG` to disable a flag. Custom CPU models can specify any flag supported by QEMU/KVM, VM-specific flags must be from the following set for security reasons: `pcid`, `spec-ctrl`, `ibpb`, `ssbd`, `virt-ssbd`, `amd-ssbd`, `amd-no-ssb`, `pdpe1gb`, `md-clear`, `hv-tlbflush`, `hv-evmcs`, `aes`.\n"
                },
                "hotplugged": {
                    "type": "integer",
                    "description": "The number of hotplugged vCPUs (defaults to `0`).\n"
                },
                "limit": {
                    "type": "integer",
                    "description": "Limit of CPU usage (defaults to `0` which means no limit).\n"
                },
                "numa": {
                    "type": "boolean",
                    "description": "Enable NUMA (defaults to `false`).\n"
                },
                "sockets": {
                    "type": "integer",
                    "description": "The number of CPU sockets (defaults to `1`).\n"
                },
                "type": {
                    "type": "string",
                    "description": "Emulated CPU type, it's recommended to use `x86-64-v2-AES` or higher (defaults to `kvm64`). See https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm*virtual*machines_settings for more information.\n"
                },
                "units": {
                    "type": "integer",
                    "description": "CPU weight for a VM. Argument is used in the kernel fair scheduler. The larger the number is, the more CPU time this VM gets. Number is relative to weights of all the other running VMs.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "affinity",
                        "architecture",
                        "cores",
                        "flags",
                        "hotplugged",
                        "limit",
                        "numa",
                        "sockets",
                        "type",
                        "units"
                    ]
                }
            }
        },
        "proxmoxve:index/Vm2Timeouts:Vm2Timeouts": {
            "properties": {
                "create": {
                    "type": "string",
                    "description": "A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as \"30s\" or \"2h45m\". Valid time units are \"s\" (seconds), \"m\" (minutes), \"h\" (hours).\n"
                },
                "delete": {
                    "type": "string",
                    "description": "A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as \"30s\" or \"2h45m\". Valid time units are \"s\" (seconds), \"m\" (minutes), \"h\" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.\n"
                },
                "read": {
                    "type": "string",
                    "description": "A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as \"30s\" or \"2h45m\". Valid time units are \"s\" (seconds), \"m\" (minutes), \"h\" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.\n"
                },
                "update": {
                    "type": "string",
                    "description": "A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as \"30s\" or \"2h45m\". Valid time units are \"s\" (seconds), \"m\" (minutes), \"h\" (hours).\n"
                }
            },
            "type": "object"
        },
        "proxmoxve:index/Vm2Vga:Vm2Vga": {
            "properties": {
                "clipboard": {
                    "type": "string",
                    "description": "Enable a specific clipboard. If not set, depending on the display type the SPICE one will be added. Currently only `vnc` is available. Migration with VNC clipboard is not supported by Proxmox.\n"
                },
                "memory": {
                    "type": "integer",
                    "description": "The VGA memory in megabytes (4-512 MB). Has no effect with serial display.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The VGA type (defaults to `std`).\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clipboard",
                        "memory",
                        "type"
                    ]
                }
            }
        },
        "proxmoxve:index/getVm2Clone:getVm2Clone": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of the VM to clone.\n"
                },
                "retries": {
                    "type": "integer",
                    "description": "The number of retries to perform when cloning the VM (default: 3).\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "retries"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": [
                        "id"
                    ]
                }
            }
        },
        "proxmoxve:index/getVm2Cpu:getVm2Cpu": {
            "properties": {
                "affinity": {
                    "type": "string",
                    "description": "List of host cores used to execute guest processes, for example: '0,5,8-11'\n"
                },
                "architecture": {
                    "type": "string",
                    "description": "The CPU architecture.\n"
                },
                "cores": {
                    "type": "integer",
                    "description": "The number of CPU cores per socket.\n"
                },
                "flags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of additional CPU flags.\n"
                },
                "hotplugged": {
                    "type": "integer",
                    "description": "The number of hotplugged vCPUs.\n"
                },
                "limit": {
                    "type": "integer",
                    "description": "Limit of CPU usage.\n"
                },
                "numa": {
                    "type": "boolean",
                    "description": "Enable NUMA.\n"
                },
                "sockets": {
                    "type": "integer",
                    "description": "The number of CPU sockets.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Emulated CPU type.\n"
                },
                "units": {
                    "type": "integer",
                    "description": "CPU weight for a VM\n"
                }
            },
            "type": "object",
            "required": [
                "affinity",
                "architecture",
                "cores",
                "flags",
                "hotplugged",
                "limit",
                "numa",
                "sockets",
                "type",
                "units"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "proxmoxve:index/getVm2Timeouts:getVm2Timeouts": {
            "properties": {
                "read": {
                    "type": "string",
                    "description": "A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as \"30s\" or \"2h45m\". Valid time units are \"s\" (seconds), \"m\" (minutes), \"h\" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.\n"
                }
            },
            "type": "object"
        },
        "proxmoxve:index/getVm2Vga:getVm2Vga": {
            "properties": {
                "clipboard": {
                    "type": "string",
                    "description": "Enable a specific clipboard.\n"
                },
                "memory": {
                    "type": "integer",
                    "description": "The VGA memory in megabytes (4-512 MB). Has no effect with serial display.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The VGA type.\n"
                }
            },
            "type": "object",
            "required": [
                "clipboard",
                "memory",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the proxmox package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "apiToken": {
                "type": "string",
                "description": "The API token for the Proxmox VE API.\n",
                "secret": true
            },
            "endpoint": {
                "type": "string",
                "description": "The endpoint for the Proxmox VE API.\n"
            },
            "insecure": {
                "type": "boolean",
                "description": "Whether to skip the TLS verification step.\n"
            },
            "minTls": {
                "type": "string",
                "description": "The minimum required TLS version for API calls.Supported values: `1.0|1.1|1.2|1.3`. Defaults to `1.3`.\n"
            },
            "otp": {
                "type": "string",
                "description": "The one-time password for the Proxmox VE API.\n",
                "deprecationMessage": "The `otp` attribute is deprecated and will be removed in a future release. Please use the `api_token` attribute instead."
            },
            "password": {
                "type": "string",
                "description": "The password for the Proxmox VE API.\n",
                "secret": true
            },
            "ssh": {
                "$ref": "#/types/proxmoxve:index/ProviderSsh:ProviderSsh",
                "description": "The SSH configuration for the Proxmox nodes.\n"
            },
            "tmpDir": {
                "type": "string",
                "description": "The alternative temporary directory.\n"
            },
            "username": {
                "type": "string",
                "description": "The username for the Proxmox VE API.\n"
            }
        },
        "inputProperties": {
            "apiToken": {
                "type": "string",
                "description": "The API token for the Proxmox VE API.\n",
                "secret": true
            },
            "endpoint": {
                "type": "string",
                "description": "The endpoint for the Proxmox VE API.\n"
            },
            "insecure": {
                "type": "boolean",
                "description": "Whether to skip the TLS verification step.\n"
            },
            "minTls": {
                "type": "string",
                "description": "The minimum required TLS version for API calls.Supported values: `1.0|1.1|1.2|1.3`. Defaults to `1.3`.\n"
            },
            "otp": {
                "type": "string",
                "description": "The one-time password for the Proxmox VE API.\n",
                "deprecationMessage": "The `otp` attribute is deprecated and will be removed in a future release. Please use the `api_token` attribute instead."
            },
            "password": {
                "type": "string",
                "description": "The password for the Proxmox VE API.\n",
                "secret": true
            },
            "ssh": {
                "$ref": "#/types/proxmoxve:index/ProviderSsh:ProviderSsh",
                "description": "The SSH configuration for the Proxmox nodes.\n"
            },
            "tmpDir": {
                "type": "string",
                "description": "The alternative temporary directory.\n"
            },
            "username": {
                "type": "string",
                "description": "The username for the Proxmox VE API.\n"
            }
        }
    },
    "resources": {
        "proxmoxve:Apt/repository:Repository": {
            "description": "Manages an APT repository of a Proxmox VE node.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@muhlba91/pulumi-proxmoxve\";\n\nconst example = new proxmoxve.apt.Repository(\"example\", {\n    enabled: true,\n    filePath: \"/etc/apt/sources.list\",\n    index: 0,\n    node: \"pve\",\n});\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\nexample = proxmoxve.apt.Repository(\"example\",\n    enabled=True,\n    file_path=\"/etc/apt/sources.list\",\n    index=0,\n    node=\"pve\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new ProxmoxVE.Apt.Repository(\"example\", new()\n    {\n        Enabled = true,\n        FilePath = \"/etc/apt/sources.list\",\n        Index = 0,\n        Node = \"pve\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Apt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Apt.NewRepository(ctx, \"example\", \u0026Apt.RepositoryArgs{\n\t\t\tEnabled:  pulumi.Bool(true),\n\t\t\tFilePath: pulumi.String(\"/etc/apt/sources.list\"),\n\t\t\tIndex:    pulumi.Int(0),\n\t\t\tNode:     pulumi.String(\"pve\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Apt.Repository;\nimport com.pulumi.proxmoxve.Apt.RepositoryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Repository(\"example\", RepositoryArgs.builder()\n            .enabled(true)\n            .filePath(\"/etc/apt/sources.list\")\n            .index(0)\n            .node(\"pve\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: proxmoxve:Apt:Repository\n    properties:\n      enabled: true\n      filePath: /etc/apt/sources.list\n      index: 0\n      node: pve\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n#!/usr/bin/env sh\n\nAn APT repository can be imported using a comma-separated list consisting of the name of the Proxmox VE node,\n\nthe absolute source list file path, and the index in the exact same order, e.g.:\n\n```sh\n$ pulumi import proxmoxve:Apt/repository:Repository example pve,/etc/apt/sources.list,0\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "The associated comment.\n"
                },
                "components": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of components.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates the activation status.\n"
                },
                "filePath": {
                    "type": "string",
                    "description": "The absolute path of the source list file that contains this repository.\n"
                },
                "fileType": {
                    "type": "string",
                    "description": "The format of the defining source list file.\n"
                },
                "index": {
                    "type": "integer",
                    "description": "The index within the defining source list file.\n"
                },
                "node": {
                    "type": "string",
                    "description": "The name of the target Proxmox VE node.\n"
                },
                "packageTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of package types.\n"
                },
                "suites": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of package distributions.\n"
                },
                "uris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of repository URIs.\n"
                }
            },
            "required": [
                "comment",
                "components",
                "enabled",
                "filePath",
                "fileType",
                "index",
                "node",
                "packageTypes",
                "suites",
                "uris"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates the activation status.\n"
                },
                "filePath": {
                    "type": "string",
                    "description": "The absolute path of the source list file that contains this repository.\n"
                },
                "index": {
                    "type": "integer",
                    "description": "The index within the defining source list file.\n"
                },
                "node": {
                    "type": "string",
                    "description": "The name of the target Proxmox VE node.\n"
                }
            },
            "requiredInputs": [
                "filePath",
                "index",
                "node"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Repository resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "The associated comment.\n"
                    },
                    "components": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of components.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Indicates the activation status.\n"
                    },
                    "filePath": {
                        "type": "string",
                        "description": "The absolute path of the source list file that contains this repository.\n"
                    },
                    "fileType": {
                        "type": "string",
                        "description": "The format of the defining source list file.\n"
                    },
                    "index": {
                        "type": "integer",
                        "description": "The index within the defining source list file.\n"
                    },
                    "node": {
                        "type": "string",
                        "description": "The name of the target Proxmox VE node.\n"
                    },
                    "packageTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of package types.\n"
                    },
                    "suites": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of package distributions.\n"
                    },
                    "uris": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of repository URIs.\n"
                    }
                },
                "type": "object"
            }
        },
        "proxmoxve:Apt/standard/repository:Repository": {
            "description": "Manages an APT standard repository of a Proxmox VE node.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@muhlba91/pulumi-proxmoxve\";\n\nconst exampleRepository = new proxmoxve.apt.standard.Repository(\"exampleRepository\", {\n    handle: \"no-subscription\",\n    node: \"pve\",\n});\nconst exampleApt_repositoryRepository = new proxmoxve.apt.Repository(\"exampleApt/repositoryRepository\", {\n    enabled: true,\n    filePath: exampleRepository.filePath,\n    index: exampleRepository.index,\n    node: exampleRepository.node,\n});\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\nexample_repository = proxmoxve.apt.standard.Repository(\"exampleRepository\",\n    handle=\"no-subscription\",\n    node=\"pve\")\nexample_apt_repository_repository = proxmoxve.apt.Repository(\"exampleApt/repositoryRepository\",\n    enabled=True,\n    file_path=example_repository.file_path,\n    index=example_repository.index,\n    node=example_repository.node)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleRepository = new ProxmoxVE.Apt.Standard.Repository(\"exampleRepository\", new()\n    {\n        Handle = \"no-subscription\",\n        Node = \"pve\",\n    });\n\n    var exampleApt_repositoryRepository = new ProxmoxVE.Apt.Repository(\"exampleApt/repositoryRepository\", new()\n    {\n        Enabled = true,\n        FilePath = exampleRepository.FilePath,\n        Index = exampleRepository.Index,\n        Node = exampleRepository.Node,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Apt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleRepository, err := Apt.NewRepository(ctx, \"exampleRepository\", \u0026Apt.RepositoryArgs{\n\t\t\tHandle: pulumi.String(\"no-subscription\"),\n\t\t\tNode:   pulumi.String(\"pve\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = Apt.NewRepository(ctx, \"exampleApt/repositoryRepository\", \u0026Apt.RepositoryArgs{\n\t\t\tEnabled:  pulumi.Bool(true),\n\t\t\tFilePath: exampleRepository.FilePath,\n\t\t\tIndex:    exampleRepository.Index,\n\t\t\tNode:     exampleRepository.Node,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Apt.Repository;\nimport com.pulumi.proxmoxve.Apt.RepositoryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleRepository = new Repository(\"exampleRepository\", RepositoryArgs.builder()\n            .handle(\"no-subscription\")\n            .node(\"pve\")\n            .build());\n\n        var exampleApt_repositoryRepository = new Repository(\"exampleApt/repositoryRepository\", RepositoryArgs.builder()\n            .enabled(true)\n            .filePath(exampleRepository.filePath())\n            .index(exampleRepository.index())\n            .node(exampleRepository.node())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleRepository:\n    type: proxmoxve:Apt/standard:Repository\n    properties:\n      handle: no-subscription\n      node: pve\n  exampleApt/repositoryRepository:\n    type: proxmoxve:Apt:Repository\n    properties:\n      enabled: true\n      filePath: ${exampleRepository.filePath}\n      index: ${exampleRepository.index}\n      node: ${exampleRepository.node}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n#!/usr/bin/env sh\n\nAn APT standard repository can be imported using a comma-separated list consisting of the name of the Proxmox VE node,\n\nand the standard repository handle in the exact same order, e.g.:\n\n```sh\n$ pulumi import proxmoxve:Apt/standard/repository:Repository example pve,no-subscription\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the APT standard repository.\n"
                },
                "filePath": {
                    "type": "string",
                    "description": "The absolute path of the source list file that contains this standard repository.\n"
                },
                "handle": {
                    "type": "string",
                    "description": "The handle of the APT standard repository. Must be `ceph-quincy-enterprise` | `ceph-quincy-no-subscription` | `ceph-quincy-test` | `ceph-reef-enterprise` | `ceph-reef-no-subscription` | `ceph-reef-test` | `enterprise` | `no-subscription` | `test`.\n"
                },
                "index": {
                    "type": "integer",
                    "description": "The index within the defining source list file.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the APT standard repository.\n"
                },
                "node": {
                    "type": "string",
                    "description": "The name of the target Proxmox VE node.\n"
                },
                "status": {
                    "type": "integer",
                    "description": "Indicates the activation status.\n"
                }
            },
            "required": [
                "description",
                "filePath",
                "handle",
                "index",
                "name",
                "node",
                "status"
            ],
            "inputProperties": {
                "handle": {
                    "type": "string",
                    "description": "The handle of the APT standard repository. Must be `ceph-quincy-enterprise` | `ceph-quincy-no-subscription` | `ceph-quincy-test` | `ceph-reef-enterprise` | `ceph-reef-no-subscription` | `ceph-reef-test` | `enterprise` | `no-subscription` | `test`.\n"
                },
                "node": {
                    "type": "string",
                    "description": "The name of the target Proxmox VE node.\n"
                }
            },
            "requiredInputs": [
                "handle",
                "node"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Repository resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the APT standard repository.\n"
                    },
                    "filePath": {
                        "type": "string",
                        "description": "The absolute path of the source list file that contains this standard repository.\n"
                    },
                    "handle": {
                        "type": "string",
                        "description": "The handle of the APT standard repository. Must be `ceph-quincy-enterprise` | `ceph-quincy-no-subscription` | `ceph-quincy-test` | `ceph-reef-enterprise` | `ceph-reef-no-subscription` | `ceph-reef-test` | `enterprise` | `no-subscription` | `test`.\n"
                    },
                    "index": {
                        "type": "integer",
                        "description": "The index within the defining source list file.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the APT standard repository.\n"
                    },
                    "node": {
                        "type": "string",
                        "description": "The name of the target Proxmox VE node.\n"
                    },
                    "status": {
                        "type": "integer",
                        "description": "Indicates the activation status.\n"
                    }
                },
                "type": "object"
            }
        },
        "proxmoxve:CT/container:Container": {
            "description": "Manages a container.\n\n## Import\n\nInstances can be imported using the `node_name` and the `vm_id`, e.g.,\n\nbash\n\n```sh\n$ pulumi import proxmoxve:CT/container:Container ubuntu_container first-node/1234\n```\n\n",
            "properties": {
                "clone": {
                    "$ref": "#/types/proxmoxve:CT/ContainerClone:ContainerClone",
                    "description": "The cloning configuration.\n"
                },
                "console": {
                    "$ref": "#/types/proxmoxve:CT/ContainerConsole:ContainerConsole",
                    "description": "The console configuration.\n"
                },
                "cpu": {
                    "$ref": "#/types/proxmoxve:CT/ContainerCpu:ContainerCpu",
                    "description": "The CPU configuration.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description.\n"
                },
                "disk": {
                    "$ref": "#/types/proxmoxve:CT/ContainerDisk:ContainerDisk",
                    "description": "The disk configuration.\n"
                },
                "features": {
                    "$ref": "#/types/proxmoxve:CT/ContainerFeatures:ContainerFeatures",
                    "description": "The container feature flags. Changing flags (except nesting) is only allowed for `root@pam` authenticated user.\n"
                },
                "hookScriptFileId": {
                    "type": "string",
                    "description": "The identifier for a file containing a hook script (needs to be executable, e.g. by using the `proxmox_virtual_environment_file.file_mode` attribute).\n"
                },
                "initialization": {
                    "$ref": "#/types/proxmoxve:CT/ContainerInitialization:ContainerInitialization",
                    "description": "The initialization configuration.\n"
                },
                "memory": {
                    "$ref": "#/types/proxmoxve:CT/ContainerMemory:ContainerMemory",
                    "description": "The memory configuration.\n"
                },
                "mountPoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/proxmoxve:CT/ContainerMountPoint:ContainerMountPoint"
                    },
                    "description": "A mount point\n"
                },
                "networkInterfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/proxmoxve:CT/ContainerNetworkInterface:ContainerNetworkInterface"
                    },
                    "description": "A network interface (multiple blocks\nsupported).\n"
                },
                "nodeName": {
                    "type": "string",
                    "description": "The name of the node to assign the container to.\n"
                },
                "operatingSystem": {
                    "$ref": "#/types/proxmoxve:CT/ContainerOperatingSystem:ContainerOperatingSystem",
                    "description": "The Operating System configuration.\n"
                },
                "poolId": {
                    "type": "string",
                    "description": "The identifier for a pool to assign the container to.\n"
                },
                "protection": {
                    "type": "boolean",
                    "description": "Whether to set the protection flag of the container (defaults to `false`). This will prevent the container itself and its disk for remove/update operations.\n"
                },
                "startOnBoot": {
                    "type": "boolean",
                    "description": "Automatically start container when the host\nsystem boots (defaults to `true`).\n"
                },
                "started": {
                    "type": "boolean",
                    "description": "Whether to start the container (defaults to `true`).\n"
                },
                "startup": {
                    "$ref": "#/types/proxmoxve:CT/ContainerStartup:ContainerStartup",
                    "description": "Defines startup and shutdown behavior of the container.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags the container tags. This is only meta\ninformation (defaults to `[]`). Note: Proxmox always sorts the container tags.\nIf the list in template is not sorted, then Proxmox will always report a\ndifference on the resource. You may use the `ignore_changes` lifecycle\nmeta-argument to ignore changes to this attribute.\n"
                },
                "template": {
                    "type": "boolean",
                    "description": "Whether to create a template (defaults to `false`).\n"
                },
                "timeoutClone": {
                    "type": "integer",
                    "description": "Timeout for cloning a container in seconds (defaults to 1800).\n"
                },
                "timeoutCreate": {
                    "type": "integer",
                    "description": "Timeout for creating a container in seconds (defaults to 1800).\n"
                },
                "timeoutDelete": {
                    "type": "integer",
                    "description": "Timeout for deleting a container in seconds (defaults to 60).\n"
                },
                "timeoutStart": {
                    "type": "integer",
                    "description": "Start container timeout\n",
                    "deprecationMessage": "This field is deprecated and will be removed in a future release. An overall operation timeout (`timeout_create` / `timeout_clone`) is used instead."
                },
                "timeoutUpdate": {
                    "type": "integer",
                    "description": "Timeout for updating a container in seconds (defaults to 1800).\n"
                },
                "unprivileged": {
                    "type": "boolean",
                    "description": "Whether the container runs as unprivileged on\nthe host (defaults to `false`).\n"
                },
                "vmId": {
                    "type": "integer",
                    "description": "The container identifier\n"
                }
            },
            "required": [
                "nodeName",
                "vmId"
            ],
            "inputProperties": {
                "clone": {
                    "$ref": "#/types/proxmoxve:CT/ContainerClone:ContainerClone",
                    "description": "The cloning configuration.\n"
                },
                "console": {
                    "$ref": "#/types/proxmoxve:CT/ContainerConsole:ContainerConsole",
                    "description": "The console configuration.\n"
                },
                "cpu": {
                    "$ref": "#/types/proxmoxve:CT/ContainerCpu:ContainerCpu",
                    "description": "The CPU configuration.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description.\n"
                },
                "disk": {
                    "$ref": "#/types/proxmoxve:CT/ContainerDisk:ContainerDisk",
                    "description": "The disk configuration.\n",
                    "willReplaceOnChanges": true
                },
                "features": {
                    "$ref": "#/types/proxmoxve:CT/ContainerFeatures:ContainerFeatures",
                    "description": "The container feature flags. Changing flags (except nesting) is only allowed for `root@pam` authenticated user.\n"
                },
                "hookScriptFileId": {
                    "type": "string",
                    "description": "The identifier for a file containing a hook script (needs to be executable, e.g. by using the `proxmox_virtual_environment_file.file_mode` attribute).\n"
                },
                "initialization": {
                    "$ref": "#/types/proxmoxve:CT/ContainerInitialization:ContainerInitialization",
                    "description": "The initialization configuration.\n"
                },
                "memory": {
                    "$ref": "#/types/proxmoxve:CT/ContainerMemory:ContainerMemory",
                    "description": "The memory configuration.\n"
                },
                "mountPoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/proxmoxve:CT/ContainerMountPoint:ContainerMountPoint"
                    },
                    "description": "A mount point\n"
                },
                "networkInterfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/proxmoxve:CT/ContainerNetworkInterface:ContainerNetworkInterface"
                    },
                    "description": "A network interface (multiple blocks\nsupported).\n"
                },
                "nodeName": {
                    "type": "string",
                    "description": "The name of the node to assign the container to.\n",
                    "willReplaceOnChanges": true
                },
                "operatingSystem": {
                    "$ref": "#/types/proxmoxve:CT/ContainerOperatingSystem:ContainerOperatingSystem",
                    "description": "The Operating System configuration.\n",
                    "willReplaceOnChanges": true
                },
                "poolId": {
                    "type": "string",
                    "description": "The identifier for a pool to assign the container to.\n",
                    "willReplaceOnChanges": true
                },
                "protection": {
                    "type": "boolean",
                    "description": "Whether to set the protection flag of the container (defaults to `false`). This will prevent the container itself and its disk for remove/update operations.\n"
                },
                "startOnBoot": {
                    "type": "boolean",
                    "description": "Automatically start container when the host\nsystem boots (defaults to `true`).\n"
                },
                "started": {
                    "type": "boolean",
                    "description": "Whether to start the container (defaults to `true`).\n"
                },
                "startup": {
                    "$ref": "#/types/proxmoxve:CT/ContainerStartup:ContainerStartup",
                    "description": "Defines startup and shutdown behavior of the container.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags the container tags. This is only meta\ninformation (defaults to `[]`). Note: Proxmox always sorts the container tags.\nIf the list in template is not sorted, then Proxmox will always report a\ndifference on the resource. You may use the `ignore_changes` lifecycle\nmeta-argument to ignore changes to this attribute.\n"
                },
                "template": {
                    "type": "boolean",
                    "description": "Whether to create a template (defaults to `false`).\n",
                    "willReplaceOnChanges": true
                },
                "timeoutClone": {
                    "type": "integer",
                    "description": "Timeout for cloning a container in seconds (defaults to 1800).\n"
                },
                "timeoutCreate": {
                    "type": "integer",
                    "description": "Timeout for creating a container in seconds (defaults to 1800).\n"
                },
                "timeoutDelete": {
                    "type": "integer",
                    "description": "Timeout for deleting a container in seconds (defaults to 60).\n"
                },
                "timeoutStart": {
                    "type": "integer",
                    "description": "Start container timeout\n",
                    "deprecationMessage": "This field is deprecated and will be removed in a future release. An overall operation timeout (`timeout_create` / `timeout_clone`) is used instead."
                },
                "timeoutUpdate": {
                    "type": "integer",
                    "description": "Timeout for updating a container in seconds (defaults to 1800).\n"
                },
                "unprivileged": {
                    "type": "boolean",
                    "description": "Whether the container runs as unprivileged on\nthe host (defaults to `false`).\n",
                    "willReplaceOnChanges": true
                },
                "vmId": {
                    "type": "integer",
                    "description": "The container identifier\n"
                }
            },
            "requiredInputs": [
                "nodeName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Container resources.\n",
                "properties": {
                    "clone": {
                        "$ref": "#/types/proxmoxve:CT/ContainerClone:ContainerClone",
                        "description": "The cloning configuration.\n"
                    },
                    "console": {
                        "$ref": "#/types/proxmoxve:CT/ContainerConsole:ContainerConsole",
                        "description": "The console configuration.\n"
                    },
                    "cpu": {
                        "$ref": "#/types/proxmoxve:CT/ContainerCpu:ContainerCpu",
                        "description": "The CPU configuration.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description.\n"
                    },
                    "disk": {
                        "$ref": "#/types/proxmoxve:CT/ContainerDisk:ContainerDisk",
                        "description": "The disk configuration.\n",
                        "willReplaceOnChanges": true
                    },
                    "features": {
                        "$ref": "#/types/proxmoxve:CT/ContainerFeatures:ContainerFeatures",
                        "description": "The container feature flags. Changing flags (except nesting) is only allowed for `root@pam` authenticated user.\n"
                    },
                    "hookScriptFileId": {
                        "type": "string",
                        "description": "The identifier for a file containing a hook script (needs to be executable, e.g. by using the `proxmox_virtual_environment_file.file_mode` attribute).\n"
                    },
                    "initialization": {
                        "$ref": "#/types/proxmoxve:CT/ContainerInitialization:ContainerInitialization",
                        "description": "The initialization configuration.\n"
                    },
                    "memory": {
                        "$ref": "#/types/proxmoxve:CT/ContainerMemory:ContainerMemory",
                        "description": "The memory configuration.\n"
                    },
                    "mountPoints": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/proxmoxve:CT/ContainerMountPoint:ContainerMountPoint"
                        },
                        "description": "A mount point\n"
                    },
                    "networkInterfaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/proxmoxve:CT/ContainerNetworkInterface:ContainerNetworkInterface"
                        },
                        "description": "A network interface (multiple blocks\nsupported).\n"
                    },
                    "nodeName": {
                        "type": "string",
                        "description": "The name of the node to assign the container to.\n",
                        "willReplaceOnChanges": true
                    },
                    "operatingSystem": {
                        "$ref": "#/types/proxmoxve:CT/ContainerOperatingSystem:ContainerOperatingSystem",
                        "description": "The Operating System configuration.\n",
                        "willReplaceOnChanges": true
                    },
                    "poolId": {
                        "type": "string",
                        "description": "The identifier for a pool to assign the container to.\n",
                        "willReplaceOnChanges": true
                    },
                    "protection": {
                        "type": "boolean",
                        "description": "Whether to set the protection flag of the container (defaults to `false`). This will prevent the container itself and its disk for remove/update operations.\n"
                    },
                    "startOnBoot": {
                        "type": "boolean",
                        "description": "Automatically start container when the host\nsystem boots (defaults to `true`).\n"
                    },
                    "started": {
                        "type": "boolean",
                        "description": "Whether to start the container (defaults to `true`).\n"
                    },
                    "startup": {
                        "$ref": "#/types/proxmoxve:CT/ContainerStartup:ContainerStartup",
                        "description": "Defines startup and shutdown behavior of the container.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags the container tags. This is only meta\ninformation (defaults to `[]`). Note: Proxmox always sorts the container tags.\nIf the list in template is not sorted, then Proxmox will always report a\ndifference on the resource. You may use the `ignore_changes` lifecycle\nmeta-argument to ignore changes to this attribute.\n"
                    },
                    "template": {
                        "type": "boolean",
                        "description": "Whether to create a template (defaults to `false`).\n",
                        "willReplaceOnChanges": true
                    },
                    "timeoutClone": {
                        "type": "integer",
                        "description": "Timeout for cloning a container in seconds (defaults to 1800).\n"
                    },
                    "timeoutCreate": {
                        "type": "integer",
                        "description": "Timeout for creating a container in seconds (defaults to 1800).\n"
                    },
                    "timeoutDelete": {
                        "type": "integer",
                        "description": "Timeout for deleting a container in seconds (defaults to 60).\n"
                    },
                    "timeoutStart": {
                        "type": "integer",
                        "description": "Start container timeout\n",
                        "deprecationMessage": "This field is deprecated and will be removed in a future release. An overall operation timeout (`timeout_create` / `timeout_clone`) is used instead."
                    },
                    "timeoutUpdate": {
                        "type": "integer",
                        "description": "Timeout for updating a container in seconds (defaults to 1800).\n"
                    },
                    "unprivileged": {
                        "type": "boolean",
                        "description": "Whether the container runs as unprivileged on\nthe host (defaults to `false`).\n",
                        "willReplaceOnChanges": true
                    },
                    "vmId": {
                        "type": "integer",
                        "description": "The container identifier\n"
                    }
                },
                "type": "object"
            }
        },
        "proxmoxve:Cluster/options:Options": {
            "description": "Manages Proxmox VE Cluster Datacenter options.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Cluster.Options;\nimport com.pulumi.proxmoxve.Cluster.OptionsArgs;\nimport com.pulumi.proxmoxve.Cluster.inputs.OptionsNextIdArgs;\nimport com.pulumi.proxmoxve.Cluster.inputs.OptionsNotifyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var options = new Options(\"options\", OptionsArgs.builder()\n            .bandwidthLimitDefault(666666)\n            .bandwidthLimitMigration(555555)\n            .emailFrom(\"ged@gont.earthsea\")\n            .keyboard(\"pl\")\n            .language(\"en\")\n            .maxWorkers(5)\n            .migrationCidr(\"10.0.0.0/8\")\n            .migrationType(\"secure\")\n            .nextId(OptionsNextIdArgs.builder()\n                .lower(100)\n                .upper(999999999)\n                .build())\n            .notify(OptionsNotifyArgs.builder()\n                .ha_fencing_mode(\"never\")\n                .ha_fencing_target(\"default-matcher\")\n                .package_replication(\"always\")\n                .package_replication_target(\"default-matcher\")\n                .package_updates(\"always\")\n                .package_updates_target(\"default-matcher\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  options:\n    type: proxmoxve:Cluster:Options\n    properties:\n      bandwidthLimitDefault: 666666\n      bandwidthLimitMigration: 555555\n      emailFrom: ged@gont.earthsea\n      keyboard: pl\n      language: en\n      maxWorkers: 5\n      migrationCidr: 10.0.0.0/8\n      migrationType: secure\n      nextId:\n        lower: 100\n        upper: 9.99999999e+08\n      notify:\n        ha_fencing_mode: never\n        ha_fencing_target: default-matcher\n        package_replication: always\n        package_replication_target: default-matcher\n        package_updates: always\n        package_updates_target: default-matcher\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n#!/usr/bin/env sh\n\nCluster options are global and can be imported using e.g.:\n\n```sh\n$ pulumi import proxmoxve:Cluster/options:Options options cluster\n```\n\n",
            "properties": {
                "bandwidthLimitClone": {
                    "type": "integer",
                    "description": "Clone I/O bandwidth limit in KiB/s.\n"
                },
                "bandwidthLimitDefault": {
                    "type": "integer",
                    "description": "Default I/O bandwidth limit in KiB/s.\n"
                },
                "bandwidthLimitMigration": {
                    "type": "integer",
                    "description": "Migration I/O bandwidth limit in KiB/s.\n"
                },
                "bandwidthLimitMove": {
                    "type": "integer",
                    "description": "Move I/O bandwidth limit in KiB/s.\n"
                },
                "bandwidthLimitRestore": {
                    "type": "integer",
                    "description": "Restore I/O bandwidth limit in KiB/s.\n"
                },
                "console": {
                    "type": "string",
                    "description": "Select the default Console viewer. Must be `applet` | `vv`| `html5` | `xtermjs`. You can either use the builtin java applet (VNC; deprecated and maps to html5), an external virt-viewer compatible application (SPICE), an HTML5 based vnc viewer (noVNC), or an HTML5 based console client (xtermjs). If the selected viewer is not available (e.g. SPICE not activated for the VM), the fallback is noVNC.\n"
                },
                "crsHa": {
                    "type": "string",
                    "description": "Cluster resource scheduling setting for HA. Must be `static` | `basic` (default is `basic`).\n"
                },
                "crsHaRebalanceOnStart": {
                    "type": "boolean",
                    "description": "Cluster resource scheduling setting for HA rebalance on start.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Datacenter description. Shown in the web-interface datacenter notes panel. This is saved as comment inside the configuration file.\n"
                },
                "emailFrom": {
                    "type": "string",
                    "description": "email address to send notification from (default is root@$hostname).\n"
                },
                "haShutdownPolicy": {
                    "type": "string",
                    "description": "Cluster wide HA shutdown policy (). Must be `freeze` | `failover` | `migrate` | `conditional` (default is `conditional`).\n"
                },
                "httpProxy": {
                    "type": "string",
                    "description": "Specify external http proxy which is used for downloads (example: `http://username:password@host:port/`).\n"
                },
                "keyboard": {
                    "type": "string",
                    "description": "Default keyboard layout for vnc server. Must be `de` | `de-ch` | `da` | `en-gb` | `en-us` | `es` | `fi` | `fr` | `fr-be` | `fr-ca` | `fr-ch` | `hu` | `is` | `it` | `ja` | `lt` | `mk` | `nl` | `no` | `pl` | `pt` | `pt-br` | `sv` | `sl` | `tr`.\n"
                },
                "language": {
                    "type": "string",
                    "description": "Default GUI language. Must be `ca` | `da` | `de` | `en` | `es` | `eu` | `fa` | `fr` | `he` | `it` | `ja` | `nb` | `nn` | `pl` | `pt_BR` | `ru` | `sl` | `sv` | `tr` | `zh_CN` | `zh_TW`.\n"
                },
                "macPrefix": {
                    "type": "string",
                    "description": "Prefix for autogenerated MAC addresses.\n"
                },
                "maxWorkers": {
                    "type": "integer",
                    "description": "Defines how many workers (per node) are maximal started on actions like 'stopall VMs' or task from the ha-manager.\n"
                },
                "migrationCidr": {
                    "type": "string",
                    "description": "Cluster wide migration network CIDR.\n"
                },
                "migrationType": {
                    "type": "string",
                    "description": "Cluster wide migration type. Must be `secure` | `unsecure` (default is `secure`).\n"
                },
                "nextId": {
                    "$ref": "#/types/proxmoxve:Cluster/OptionsNextId:OptionsNextId",
                    "description": "The ranges for the next free VM ID auto-selection pool.\n"
                },
                "notify": {
                    "$ref": "#/types/proxmoxve:Cluster/OptionsNotify:OptionsNotify",
                    "description": "Cluster-wide notification settings.\n"
                }
            },
            "required": [
                "crsHa",
                "macPrefix"
            ],
            "inputProperties": {
                "bandwidthLimitClone": {
                    "type": "integer",
                    "description": "Clone I/O bandwidth limit in KiB/s.\n"
                },
                "bandwidthLimitDefault": {
                    "type": "integer",
                    "description": "Default I/O bandwidth limit in KiB/s.\n"
                },
                "bandwidthLimitMigration": {
                    "type": "integer",
                    "description": "Migration I/O bandwidth limit in KiB/s.\n"
                },
                "bandwidthLimitMove": {
                    "type": "integer",
                    "description": "Move I/O bandwidth limit in KiB/s.\n"
                },
                "bandwidthLimitRestore": {
                    "type": "integer",
                    "description": "Restore I/O bandwidth limit in KiB/s.\n"
                },
                "console": {
                    "type": "string",
                    "description": "Select the default Console viewer. Must be `applet` | `vv`| `html5` | `xtermjs`. You can either use the builtin java applet (VNC; deprecated and maps to html5), an external virt-viewer compatible application (SPICE), an HTML5 based vnc viewer (noVNC), or an HTML5 based console client (xtermjs). If the selected viewer is not available (e.g. SPICE not activated for the VM), the fallback is noVNC.\n"
                },
                "crsHa": {
                    "type": "string",
                    "description": "Cluster resource scheduling setting for HA. Must be `static` | `basic` (default is `basic`).\n"
                },
                "crsHaRebalanceOnStart": {
                    "type": "boolean",
                    "description": "Cluster resource scheduling setting for HA rebalance on start.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Datacenter description. Shown in the web-interface datacenter notes panel. This is saved as comment inside the configuration file.\n"
                },
                "emailFrom": {
                    "type": "string",
                    "description": "email address to send notification from (default is root@$hostname).\n"
                },
                "haShutdownPolicy": {
                    "type": "string",
                    "description": "Cluster wide HA shutdown policy (). Must be `freeze` | `failover` | `migrate` | `conditional` (default is `conditional`).\n"
                },
                "httpProxy": {
                    "type": "string",
                    "description": "Specify external http proxy which is used for downloads (example: `http://username:password@host:port/`).\n"
                },
                "keyboard": {
                    "type": "string",
                    "description": "Default keyboard layout for vnc server. Must be `de` | `de-ch` | `da` | `en-gb` | `en-us` | `es` | `fi` | `fr` | `fr-be` | `fr-ca` | `fr-ch` | `hu` | `is` | `it` | `ja` | `lt` | `mk` | `nl` | `no` | `pl` | `pt` | `pt-br` | `sv` | `sl` | `tr`.\n"
                },
                "language": {
                    "type": "string",
                    "description": "Default GUI language. Must be `ca` | `da` | `de` | `en` | `es` | `eu` | `fa` | `fr` | `he` | `it` | `ja` | `nb` | `nn` | `pl` | `pt_BR` | `ru` | `sl` | `sv` | `tr` | `zh_CN` | `zh_TW`.\n"
                },
                "macPrefix": {
                    "type": "string",
                    "description": "Prefix for autogenerated MAC addresses.\n"
                },
                "maxWorkers": {
                    "type": "integer",
                    "description": "Defines how many workers (per node) are maximal started on actions like 'stopall VMs' or task from the ha-manager.\n"
                },
                "migrationCidr": {
                    "type": "string",
                    "description": "Cluster wide migration network CIDR.\n"
                },
                "migrationType": {
                    "type": "string",
                    "description": "Cluster wide migration type. Must be `secure` | `unsecure` (default is `secure`).\n"
                },
                "nextId": {
                    "$ref": "#/types/proxmoxve:Cluster/OptionsNextId:OptionsNextId",
                    "description": "The ranges for the next free VM ID auto-selection pool.\n"
                },
                "notify": {
                    "$ref": "#/types/proxmoxve:Cluster/OptionsNotify:OptionsNotify",
                    "description": "Cluster-wide notification settings.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Options resources.\n",
                "properties": {
                    "bandwidthLimitClone": {
                        "type": "integer",
                        "description": "Clone I/O bandwidth limit in KiB/s.\n"
                    },
                    "bandwidthLimitDefault": {
                        "type": "integer",
                        "description": "Default I/O bandwidth limit in KiB/s.\n"
                    },
                    "bandwidthLimitMigration": {
                        "type": "integer",
                        "description": "Migration I/O bandwidth limit in KiB/s.\n"
                    },
                    "bandwidthLimitMove": {
                        "type": "integer",
                        "description": "Move I/O bandwidth limit in KiB/s.\n"
                    },
                    "bandwidthLimitRestore": {
                        "type": "integer",
                        "description": "Restore I/O bandwidth limit in KiB/s.\n"
                    },
                    "console": {
                        "type": "string",
                        "description": "Select the default Console viewer. Must be `applet` | `vv`| `html5` | `xtermjs`. You can either use the builtin java applet (VNC; deprecated and maps to html5), an external virt-viewer compatible application (SPICE), an HTML5 based vnc viewer (noVNC), or an HTML5 based console client (xtermjs). If the selected viewer is not available (e.g. SPICE not activated for the VM), the fallback is noVNC.\n"
                    },
                    "crsHa": {
                        "type": "string",
                        "description": "Cluster resource scheduling setting for HA. Must be `static` | `basic` (default is `basic`).\n"
                    },
                    "crsHaRebalanceOnStart": {
                        "type": "boolean",
                        "description": "Cluster resource scheduling setting for HA rebalance on start.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Datacenter description. Shown in the web-interface datacenter notes panel. This is saved as comment inside the configuration file.\n"
                    },
                    "emailFrom": {
                        "type": "string",
                        "description": "email address to send notification from (default is root@$hostname).\n"
                    },
                    "haShutdownPolicy": {
                        "type": "string",
                        "description": "Cluster wide HA shutdown policy (). Must be `freeze` | `failover` | `migrate` | `conditional` (default is `conditional`).\n"
                    },
                    "httpProxy": {
                        "type": "string",
                        "description": "Specify external http proxy which is used for downloads (example: `http://username:password@host:port/`).\n"
                    },
                    "keyboard": {
                        "type": "string",
                        "description": "Default keyboard layout for vnc server. Must be `de` | `de-ch` | `da` | `en-gb` | `en-us` | `es` | `fi` | `fr` | `fr-be` | `fr-ca` | `fr-ch` | `hu` | `is` | `it` | `ja` | `lt` | `mk` | `nl` | `no` | `pl` | `pt` | `pt-br` | `sv` | `sl` | `tr`.\n"
                    },
                    "language": {
                        "type": "string",
                        "description": "Default GUI language. Must be `ca` | `da` | `de` | `en` | `es` | `eu` | `fa` | `fr` | `he` | `it` | `ja` | `nb` | `nn` | `pl` | `pt_BR` | `ru` | `sl` | `sv` | `tr` | `zh_CN` | `zh_TW`.\n"
                    },
                    "macPrefix": {
                        "type": "string",
                        "description": "Prefix for autogenerated MAC addresses.\n"
                    },
                    "maxWorkers": {
                        "type": "integer",
                        "description": "Defines how many workers (per node) are maximal started on actions like 'stopall VMs' or task from the ha-manager.\n"
                    },
                    "migrationCidr": {
                        "type": "string",
                        "description": "Cluster wide migration network CIDR.\n"
                    },
                    "migrationType": {
                        "type": "string",
                        "description": "Cluster wide migration type. Must be `secure` | `unsecure` (default is `secure`).\n"
                    },
                    "nextId": {
                        "$ref": "#/types/proxmoxve:Cluster/OptionsNextId:OptionsNextId",
                        "description": "The ranges for the next free VM ID auto-selection pool.\n"
                    },
                    "notify": {
                        "$ref": "#/types/proxmoxve:Cluster/OptionsNotify:OptionsNotify",
                        "description": "Cluster-wide notification settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "proxmoxve:Download/file:File": {
            "description": "Manages files upload using PVE download-url API. It can be fully compatible and faster replacement for image files created using `proxmoxve.Storage.File`. Supports images for VMs (ISO images) and LXC (CT Templates).\n\n\u003e Besides the `Datastore.AllocateTemplate` privilege, this resource requires both the `Sys.Audit` and `Sys.Modify` privileges.\u003cbr\u003e\u003cbr\u003e\nFor more details, see the [`download-url`](https://pve.proxmox.com/pve-docs/api-viewer/index.html#/nodes/{node}/storage/{storage}/download-url) API documentation under the \"Required permissions\" section.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@muhlba91/pulumi-proxmoxve\";\n\nconst release20231228Debian12BookwormQcow2Img = new proxmoxve.download.File(\"release20231228Debian12BookwormQcow2Img\", {\n    checksum: \"d2fbcf11fb28795842e91364d8c7b69f1870db09ff299eb94e4fbbfa510eb78d141e74c1f4bf6dfa0b7e33d0c3b66e6751886feadb4e9916f778bab1776bdf1b\",\n    checksumAlgorithm: \"sha512\",\n    contentType: \"iso\",\n    datastoreId: \"local\",\n    fileName: \"debian-12-generic-amd64-20231228-1609.img\",\n    nodeName: \"pve\",\n    url: \"https://cloud.debian.org/images/cloud/bookworm/20231228-1609/debian-12-generic-amd64-20231228-1609.qcow2\",\n});\nconst latestDebian12BookwormQcow2Img = new proxmoxve.download.File(\"latestDebian12BookwormQcow2Img\", {\n    contentType: \"iso\",\n    datastoreId: \"local\",\n    fileName: \"debian-12-generic-amd64.qcow2.img\",\n    nodeName: \"pve\",\n    url: \"https://cloud.debian.org/images/cloud/bookworm/latest/debian-12-generic-amd64.qcow2\",\n});\nconst latestUbuntu22JammyQcow2Img = new proxmoxve.download.File(\"latestUbuntu22JammyQcow2Img\", {\n    contentType: \"iso\",\n    datastoreId: \"local\",\n    nodeName: \"pve\",\n    url: \"https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.img\",\n});\nconst latestStaticUbuntu24NobleQcow2Img = new proxmoxve.download.File(\"latestStaticUbuntu24NobleQcow2Img\", {\n    contentType: \"iso\",\n    datastoreId: \"local\",\n    nodeName: \"pve\",\n    overwrite: false,\n    url: \"https://cloud-images.ubuntu.com/noble/current/noble-server-cloudimg-amd64.img\",\n});\nconst release20231211Ubuntu22JammyLxcImg = new proxmoxve.download.File(\"release20231211Ubuntu22JammyLxcImg\", {\n    checksum: \"c9997dcfea5d826fd04871f960c513665f2e87dd7450bba99f68a97e60e4586e\",\n    checksumAlgorithm: \"sha256\",\n    contentType: \"vztmpl\",\n    datastoreId: \"local\",\n    nodeName: \"pve\",\n    uploadTimeout: 4444,\n    url: \"https://cloud-images.ubuntu.com/releases/22.04/release-20231211/ubuntu-22.04-server-cloudimg-amd64-root.tar.xz\",\n});\nconst latestUbuntu22JammyLxcImg = new proxmoxve.download.File(\"latestUbuntu22JammyLxcImg\", {\n    contentType: \"vztmpl\",\n    datastoreId: \"local\",\n    nodeName: \"pve\",\n    url: \"https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.tar.gz\",\n});\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\nrelease20231228_debian12_bookworm_qcow2_img = proxmoxve.download.File(\"release20231228Debian12BookwormQcow2Img\",\n    checksum=\"d2fbcf11fb28795842e91364d8c7b69f1870db09ff299eb94e4fbbfa510eb78d141e74c1f4bf6dfa0b7e33d0c3b66e6751886feadb4e9916f778bab1776bdf1b\",\n    checksum_algorithm=\"sha512\",\n    content_type=\"iso\",\n    datastore_id=\"local\",\n    file_name=\"debian-12-generic-amd64-20231228-1609.img\",\n    node_name=\"pve\",\n    url=\"https://cloud.debian.org/images/cloud/bookworm/20231228-1609/debian-12-generic-amd64-20231228-1609.qcow2\")\nlatest_debian12_bookworm_qcow2_img = proxmoxve.download.File(\"latestDebian12BookwormQcow2Img\",\n    content_type=\"iso\",\n    datastore_id=\"local\",\n    file_name=\"debian-12-generic-amd64.qcow2.img\",\n    node_name=\"pve\",\n    url=\"https://cloud.debian.org/images/cloud/bookworm/latest/debian-12-generic-amd64.qcow2\")\nlatest_ubuntu22_jammy_qcow2_img = proxmoxve.download.File(\"latestUbuntu22JammyQcow2Img\",\n    content_type=\"iso\",\n    datastore_id=\"local\",\n    node_name=\"pve\",\n    url=\"https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.img\")\nlatest_static_ubuntu24_noble_qcow2_img = proxmoxve.download.File(\"latestStaticUbuntu24NobleQcow2Img\",\n    content_type=\"iso\",\n    datastore_id=\"local\",\n    node_name=\"pve\",\n    overwrite=False,\n    url=\"https://cloud-images.ubuntu.com/noble/current/noble-server-cloudimg-amd64.img\")\nrelease20231211_ubuntu22_jammy_lxc_img = proxmoxve.download.File(\"release20231211Ubuntu22JammyLxcImg\",\n    checksum=\"c9997dcfea5d826fd04871f960c513665f2e87dd7450bba99f68a97e60e4586e\",\n    checksum_algorithm=\"sha256\",\n    content_type=\"vztmpl\",\n    datastore_id=\"local\",\n    node_name=\"pve\",\n    upload_timeout=4444,\n    url=\"https://cloud-images.ubuntu.com/releases/22.04/release-20231211/ubuntu-22.04-server-cloudimg-amd64-root.tar.xz\")\nlatest_ubuntu22_jammy_lxc_img = proxmoxve.download.File(\"latestUbuntu22JammyLxcImg\",\n    content_type=\"vztmpl\",\n    datastore_id=\"local\",\n    node_name=\"pve\",\n    url=\"https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.tar.gz\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var release20231228Debian12BookwormQcow2Img = new ProxmoxVE.Download.File(\"release20231228Debian12BookwormQcow2Img\", new()\n    {\n        Checksum = \"d2fbcf11fb28795842e91364d8c7b69f1870db09ff299eb94e4fbbfa510eb78d141e74c1f4bf6dfa0b7e33d0c3b66e6751886feadb4e9916f778bab1776bdf1b\",\n        ChecksumAlgorithm = \"sha512\",\n        ContentType = \"iso\",\n        DatastoreId = \"local\",\n        FileName = \"debian-12-generic-amd64-20231228-1609.img\",\n        NodeName = \"pve\",\n        Url = \"https://cloud.debian.org/images/cloud/bookworm/20231228-1609/debian-12-generic-amd64-20231228-1609.qcow2\",\n    });\n\n    var latestDebian12BookwormQcow2Img = new ProxmoxVE.Download.File(\"latestDebian12BookwormQcow2Img\", new()\n    {\n        ContentType = \"iso\",\n        DatastoreId = \"local\",\n        FileName = \"debian-12-generic-amd64.qcow2.img\",\n        NodeName = \"pve\",\n        Url = \"https://cloud.debian.org/images/cloud/bookworm/latest/debian-12-generic-amd64.qcow2\",\n    });\n\n    var latestUbuntu22JammyQcow2Img = new ProxmoxVE.Download.File(\"latestUbuntu22JammyQcow2Img\", new()\n    {\n        ContentType = \"iso\",\n        DatastoreId = \"local\",\n        NodeName = \"pve\",\n        Url = \"https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.img\",\n    });\n\n    var latestStaticUbuntu24NobleQcow2Img = new ProxmoxVE.Download.File(\"latestStaticUbuntu24NobleQcow2Img\", new()\n    {\n        ContentType = \"iso\",\n        DatastoreId = \"local\",\n        NodeName = \"pve\",\n        Overwrite = false,\n        Url = \"https://cloud-images.ubuntu.com/noble/current/noble-server-cloudimg-amd64.img\",\n    });\n\n    var release20231211Ubuntu22JammyLxcImg = new ProxmoxVE.Download.File(\"release20231211Ubuntu22JammyLxcImg\", new()\n    {\n        Checksum = \"c9997dcfea5d826fd04871f960c513665f2e87dd7450bba99f68a97e60e4586e\",\n        ChecksumAlgorithm = \"sha256\",\n        ContentType = \"vztmpl\",\n        DatastoreId = \"local\",\n        NodeName = \"pve\",\n        UploadTimeout = 4444,\n        Url = \"https://cloud-images.ubuntu.com/releases/22.04/release-20231211/ubuntu-22.04-server-cloudimg-amd64-root.tar.xz\",\n    });\n\n    var latestUbuntu22JammyLxcImg = new ProxmoxVE.Download.File(\"latestUbuntu22JammyLxcImg\", new()\n    {\n        ContentType = \"vztmpl\",\n        DatastoreId = \"local\",\n        NodeName = \"pve\",\n        Url = \"https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.tar.gz\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Download\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Download.NewFile(ctx, \"release20231228Debian12BookwormQcow2Img\", \u0026Download.FileArgs{\n\t\t\tChecksum:          pulumi.String(\"d2fbcf11fb28795842e91364d8c7b69f1870db09ff299eb94e4fbbfa510eb78d141e74c1f4bf6dfa0b7e33d0c3b66e6751886feadb4e9916f778bab1776bdf1b\"),\n\t\t\tChecksumAlgorithm: pulumi.String(\"sha512\"),\n\t\t\tContentType:       pulumi.String(\"iso\"),\n\t\t\tDatastoreId:       pulumi.String(\"local\"),\n\t\t\tFileName:          pulumi.String(\"debian-12-generic-amd64-20231228-1609.img\"),\n\t\t\tNodeName:          pulumi.String(\"pve\"),\n\t\t\tUrl:               pulumi.String(\"https://cloud.debian.org/images/cloud/bookworm/20231228-1609/debian-12-generic-amd64-20231228-1609.qcow2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = Download.NewFile(ctx, \"latestDebian12BookwormQcow2Img\", \u0026Download.FileArgs{\n\t\t\tContentType: pulumi.String(\"iso\"),\n\t\t\tDatastoreId: pulumi.String(\"local\"),\n\t\t\tFileName:    pulumi.String(\"debian-12-generic-amd64.qcow2.img\"),\n\t\t\tNodeName:    pulumi.String(\"pve\"),\n\t\t\tUrl:         pulumi.String(\"https://cloud.debian.org/images/cloud/bookworm/latest/debian-12-generic-amd64.qcow2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = Download.NewFile(ctx, \"latestUbuntu22JammyQcow2Img\", \u0026Download.FileArgs{\n\t\t\tContentType: pulumi.String(\"iso\"),\n\t\t\tDatastoreId: pulumi.String(\"local\"),\n\t\t\tNodeName:    pulumi.String(\"pve\"),\n\t\t\tUrl:         pulumi.String(\"https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.img\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = Download.NewFile(ctx, \"latestStaticUbuntu24NobleQcow2Img\", \u0026Download.FileArgs{\n\t\t\tContentType: pulumi.String(\"iso\"),\n\t\t\tDatastoreId: pulumi.String(\"local\"),\n\t\t\tNodeName:    pulumi.String(\"pve\"),\n\t\t\tOverwrite:   pulumi.Bool(false),\n\t\t\tUrl:         pulumi.String(\"https://cloud-images.ubuntu.com/noble/current/noble-server-cloudimg-amd64.img\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = Download.NewFile(ctx, \"release20231211Ubuntu22JammyLxcImg\", \u0026Download.FileArgs{\n\t\t\tChecksum:          pulumi.String(\"c9997dcfea5d826fd04871f960c513665f2e87dd7450bba99f68a97e60e4586e\"),\n\t\t\tChecksumAlgorithm: pulumi.String(\"sha256\"),\n\t\t\tContentType:       pulumi.String(\"vztmpl\"),\n\t\t\tDatastoreId:       pulumi.String(\"local\"),\n\t\t\tNodeName:          pulumi.String(\"pve\"),\n\t\t\tUploadTimeout:     pulumi.Int(4444),\n\t\t\tUrl:               pulumi.String(\"https://cloud-images.ubuntu.com/releases/22.04/release-20231211/ubuntu-22.04-server-cloudimg-amd64-root.tar.xz\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = Download.NewFile(ctx, \"latestUbuntu22JammyLxcImg\", \u0026Download.FileArgs{\n\t\t\tContentType: pulumi.String(\"vztmpl\"),\n\t\t\tDatastoreId: pulumi.String(\"local\"),\n\t\t\tNodeName:    pulumi.String(\"pve\"),\n\t\t\tUrl:         pulumi.String(\"https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.tar.gz\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Download.File;\nimport com.pulumi.proxmoxve.Download.FileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var release20231228Debian12BookwormQcow2Img = new File(\"release20231228Debian12BookwormQcow2Img\", FileArgs.builder()\n            .checksum(\"d2fbcf11fb28795842e91364d8c7b69f1870db09ff299eb94e4fbbfa510eb78d141e74c1f4bf6dfa0b7e33d0c3b66e6751886feadb4e9916f778bab1776bdf1b\")\n            .checksumAlgorithm(\"sha512\")\n            .contentType(\"iso\")\n            .datastoreId(\"local\")\n            .fileName(\"debian-12-generic-amd64-20231228-1609.img\")\n            .nodeName(\"pve\")\n            .url(\"https://cloud.debian.org/images/cloud/bookworm/20231228-1609/debian-12-generic-amd64-20231228-1609.qcow2\")\n            .build());\n\n        var latestDebian12BookwormQcow2Img = new File(\"latestDebian12BookwormQcow2Img\", FileArgs.builder()\n            .contentType(\"iso\")\n            .datastoreId(\"local\")\n            .fileName(\"debian-12-generic-amd64.qcow2.img\")\n            .nodeName(\"pve\")\n            .url(\"https://cloud.debian.org/images/cloud/bookworm/latest/debian-12-generic-amd64.qcow2\")\n            .build());\n\n        var latestUbuntu22JammyQcow2Img = new File(\"latestUbuntu22JammyQcow2Img\", FileArgs.builder()\n            .contentType(\"iso\")\n            .datastoreId(\"local\")\n            .nodeName(\"pve\")\n            .url(\"https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.img\")\n            .build());\n\n        var latestStaticUbuntu24NobleQcow2Img = new File(\"latestStaticUbuntu24NobleQcow2Img\", FileArgs.builder()\n            .contentType(\"iso\")\n            .datastoreId(\"local\")\n            .nodeName(\"pve\")\n            .overwrite(false)\n            .url(\"https://cloud-images.ubuntu.com/noble/current/noble-server-cloudimg-amd64.img\")\n            .build());\n\n        var release20231211Ubuntu22JammyLxcImg = new File(\"release20231211Ubuntu22JammyLxcImg\", FileArgs.builder()\n            .checksum(\"c9997dcfea5d826fd04871f960c513665f2e87dd7450bba99f68a97e60e4586e\")\n            .checksumAlgorithm(\"sha256\")\n            .contentType(\"vztmpl\")\n            .datastoreId(\"local\")\n            .nodeName(\"pve\")\n            .uploadTimeout(4444)\n            .url(\"https://cloud-images.ubuntu.com/releases/22.04/release-20231211/ubuntu-22.04-server-cloudimg-amd64-root.tar.xz\")\n            .build());\n\n        var latestUbuntu22JammyLxcImg = new File(\"latestUbuntu22JammyLxcImg\", FileArgs.builder()\n            .contentType(\"vztmpl\")\n            .datastoreId(\"local\")\n            .nodeName(\"pve\")\n            .url(\"https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.tar.gz\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  release20231228Debian12BookwormQcow2Img:\n    type: proxmoxve:Download:File\n    properties:\n      checksum: d2fbcf11fb28795842e91364d8c7b69f1870db09ff299eb94e4fbbfa510eb78d141e74c1f4bf6dfa0b7e33d0c3b66e6751886feadb4e9916f778bab1776bdf1b\n      checksumAlgorithm: sha512\n      contentType: iso\n      datastoreId: local\n      fileName: debian-12-generic-amd64-20231228-1609.img\n      nodeName: pve\n      url: https://cloud.debian.org/images/cloud/bookworm/20231228-1609/debian-12-generic-amd64-20231228-1609.qcow2\n  latestDebian12BookwormQcow2Img:\n    type: proxmoxve:Download:File\n    properties:\n      contentType: iso\n      datastoreId: local\n      fileName: debian-12-generic-amd64.qcow2.img\n      nodeName: pve\n      url: https://cloud.debian.org/images/cloud/bookworm/latest/debian-12-generic-amd64.qcow2\n  latestUbuntu22JammyQcow2Img:\n    type: proxmoxve:Download:File\n    properties:\n      contentType: iso\n      datastoreId: local\n      nodeName: pve\n      url: https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.img\n  latestStaticUbuntu24NobleQcow2Img:\n    type: proxmoxve:Download:File\n    properties:\n      contentType: iso\n      datastoreId: local\n      nodeName: pve\n      overwrite: false\n      url: https://cloud-images.ubuntu.com/noble/current/noble-server-cloudimg-amd64.img\n  release20231211Ubuntu22JammyLxcImg:\n    type: proxmoxve:Download:File\n    properties:\n      checksum: c9997dcfea5d826fd04871f960c513665f2e87dd7450bba99f68a97e60e4586e\n      checksumAlgorithm: sha256\n      contentType: vztmpl\n      datastoreId: local\n      nodeName: pve\n      uploadTimeout: 4444\n      url: https://cloud-images.ubuntu.com/releases/22.04/release-20231211/ubuntu-22.04-server-cloudimg-amd64-root.tar.xz\n  latestUbuntu22JammyLxcImg:\n    type: proxmoxve:Download:File\n    properties:\n      contentType: vztmpl\n      datastoreId: local\n      nodeName: pve\n      url: https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.tar.gz\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "checksum": {
                    "type": "string",
                    "description": "The expected checksum of the file.\n"
                },
                "checksumAlgorithm": {
                    "type": "string",
                    "description": "The algorithm to calculate the checksum of the file. Must be `md5` | `sha1` | `sha224` | `sha256` | `sha384` | `sha512`.\n"
                },
                "contentType": {
                    "type": "string",
                    "description": "The file content type. Must be `iso` for VM images or `vztmpl` for LXC images.\n"
                },
                "datastoreId": {
                    "type": "string",
                    "description": "The identifier for the target datastore.\n"
                },
                "decompressionAlgorithm": {
                    "type": "string",
                    "description": "Decompress the downloaded file using the specified compression algorithm. Must be one of `gz` | `lzo` | `zst`.\n"
                },
                "fileName": {
                    "type": "string",
                    "description": "The file name. If not provided, it is calculated using `url`. PVE will raise 'wrong file extension' error for some popular extensions file `.raw` or `.qcow2`. Workaround is to use e.g. `.img` instead.\n"
                },
                "nodeName": {
                    "type": "string",
                    "description": "The node name.\n"
                },
                "overwrite": {
                    "type": "boolean",
                    "description": "If `true` and size of uploaded file is different, than size from `url` Content-Length header, file will be downloaded again. If `false`, there will be no checks.\n"
                },
                "overwriteUnmanaged": {
                    "type": "boolean",
                    "description": "If `true` and a file with the same name already exists in the datastore, it will be deleted and the new file will be downloaded. If `false` and the file already exists, an error will be returned.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The file size.\n"
                },
                "uploadTimeout": {
                    "type": "integer",
                    "description": "The file download timeout seconds. Default is 600 (10min).\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL to download the file from. Format `https?://.*`.\n"
                },
                "verify": {
                    "type": "boolean",
                    "description": "By default `true`. If `false`, no SSL/TLS certificates will be verified.\n"
                }
            },
            "required": [
                "contentType",
                "datastoreId",
                "fileName",
                "nodeName",
                "overwrite",
                "overwriteUnmanaged",
                "size",
                "uploadTimeout",
                "url",
                "verify"
            ],
            "inputProperties": {
                "checksum": {
                    "type": "string",
                    "description": "The expected checksum of the file.\n"
                },
                "checksumAlgorithm": {
                    "type": "string",
                    "description": "The algorithm to calculate the checksum of the file. Must be `md5` | `sha1` | `sha224` | `sha256` | `sha384` | `sha512`.\n"
                },
                "contentType": {
                    "type": "string",
                    "description": "The file content type. Must be `iso` for VM images or `vztmpl` for LXC images.\n"
                },
                "datastoreId": {
                    "type": "string",
                    "description": "The identifier for the target datastore.\n"
                },
                "decompressionAlgorithm": {
                    "type": "string",
                    "description": "Decompress the downloaded file using the specified compression algorithm. Must be one of `gz` | `lzo` | `zst`.\n"
                },
                "fileName": {
                    "type": "string",
                    "description": "The file name. If not provided, it is calculated using `url`. PVE will raise 'wrong file extension' error for some popular extensions file `.raw` or `.qcow2`. Workaround is to use e.g. `.img` instead.\n"
                },
                "nodeName": {
                    "type": "string",
                    "description": "The node name.\n"
                },
                "overwrite": {
                    "type": "boolean",
                    "description": "If `true` and size of uploaded file is different, than size from `url` Content-Length header, file will be downloaded again. If `false`, there will be no checks.\n"
                },
                "overwriteUnmanaged": {
                    "type": "boolean",
                    "description": "If `true` and a file with the same name already exists in the datastore, it will be deleted and the new file will be downloaded. If `false` and the file already exists, an error will be returned.\n"
                },
                "uploadTimeout": {
                    "type": "integer",
                    "description": "The file download timeout seconds. Default is 600 (10min).\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL to download the file from. Format `https?://.*`.\n"
                },
                "verify": {
                    "type": "boolean",
                    "description": "By default `true`. If `false`, no SSL/TLS certificates will be verified.\n"
                }
            },
            "requiredInputs": [
                "contentType",
                "datastoreId",
                "nodeName",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering File resources.\n",
                "properties": {
                    "checksum": {
                        "type": "string",
                        "description": "The expected checksum of the file.\n"
                    },
                    "checksumAlgorithm": {
                        "type": "string",
                        "description": "The algorithm to calculate the checksum of the file. Must be `md5` | `sha1` | `sha224` | `sha256` | `sha384` | `sha512`.\n"
                    },
                    "contentType": {
                        "type": "string",
                        "description": "The file content type. Must be `iso` for VM images or `vztmpl` for LXC images.\n"
                    },
                    "datastoreId": {
                        "type": "string",
                        "description": "The identifier for the target datastore.\n"
                    },
                    "decompressionAlgorithm": {
                        "type": "string",
                        "description": "Decompress the downloaded file using the specified compression algorithm. Must be one of `gz` | `lzo` | `zst`.\n"
                    },
                    "fileName": {
                        "type": "string",
                        "description": "The file name. If not provided, it is calculated using `url`. PVE will raise 'wrong file extension' error for some popular extensions file `.raw` or `.qcow2`. Workaround is to use e.g. `.img` instead.\n"
                    },
                    "nodeName": {
                        "type": "string",
                        "description": "The node name.\n"
                    },
                    "overwrite": {
                        "type": "boolean",
                        "description": "If `true` and size of uploaded file is different, than size from `url` Content-Length header, file will be downloaded again. If `false`, there will be no checks.\n"
                    },
                    "overwriteUnmanaged": {
                        "type": "boolean",
                        "description": "If `true` and a file with the same name already exists in the datastore, it will be deleted and the new file will be downloaded. If `false` and the file already exists, an error will be returned.\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "The file size.\n"
                    },
                    "uploadTimeout": {
                        "type": "integer",
                        "description": "The file download timeout seconds. Default is 600 (10min).\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL to download the file from. Format `https?://.*`.\n"
                    },
                    "verify": {
                        "type": "boolean",
                        "description": "By default `true`. If `false`, no SSL/TLS certificates will be verified.\n"
                    }
                },
                "type": "object"
            }
        },
        "proxmoxve:HA/hAGroup:HAGroup": {
            "description": "Manages a High Availability group in a Proxmox VE cluster.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@muhlba91/pulumi-proxmoxve\";\n\nconst example = new proxmoxve.ha.HAGroup(\"example\", {\n    group: \"example\",\n    comment: \"This is a comment.\",\n    nodes: {\n        node1: undefined,\n        node2: 2,\n        node3: 1,\n    },\n    restricted: true,\n    noFailback: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\nexample = proxmoxve.ha.HAGroup(\"example\",\n    group=\"example\",\n    comment=\"This is a comment.\",\n    nodes={\n        \"node1\": None,\n        \"node2\": 2,\n        \"node3\": 1,\n    },\n    restricted=True,\n    no_failback=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new ProxmoxVE.HA.HAGroup(\"example\", new()\n    {\n        Group = \"example\",\n        Comment = \"This is a comment.\",\n        Nodes = \n        {\n            { \"node1\", null },\n            { \"node2\", 2 },\n            { \"node3\", 1 },\n        },\n        Restricted = true,\n        NoFailback = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/HA\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := HA.NewHAGroup(ctx, \"example\", \u0026HA.HAGroupArgs{\n\t\t\tGroup:   pulumi.String(\"example\"),\n\t\t\tComment: pulumi.String(\"This is a comment.\"),\n\t\t\tNodes: pulumi.IntMap{\n\t\t\t\t\"node1\": nil,\n\t\t\t\t\"node2\": pulumi.Int(2),\n\t\t\t\t\"node3\": pulumi.Int(1),\n\t\t\t},\n\t\t\tRestricted: pulumi.Bool(true),\n\t\t\tNoFailback: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.HA.HAGroup;\nimport com.pulumi.proxmoxve.HA.HAGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new HAGroup(\"example\", HAGroupArgs.builder()\n            .group(\"example\")\n            .comment(\"This is a comment.\")\n            .nodes(Map.ofEntries(\n                Map.entry(\"node1\", null),\n                Map.entry(\"node2\", 2),\n                Map.entry(\"node3\", 1)\n            ))\n            .restricted(true)\n            .noFailback(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: proxmoxve:HA:HAGroup\n    properties:\n      group: example\n      comment: This is a comment.\n      # Member nodes, with or without priority.\n      nodes:\n        node1: null\n        node2: 2\n        node3: 1\n      restricted: true\n      noFailback: false\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n#!/usr/bin/env sh\n\nHA groups can be imported using their name, e.g.:\n\n```sh\n$ pulumi import proxmoxve:HA/hAGroup:HAGroup example example\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "The comment associated with this group\n"
                },
                "group": {
                    "type": "string",
                    "description": "The identifier of the High Availability group to manage.\n"
                },
                "noFailback": {
                    "type": "boolean",
                    "description": "A flag that indicates that failing back to a higher priority node is disabled for this HA group. Defaults to `false`.\n"
                },
                "nodes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    },
                    "description": "The member nodes for this group. They are provided as a map, where the keys are the node names and the values represent their priority: integers for known priorities or `null` for unset priorities.\n"
                },
                "restricted": {
                    "type": "boolean",
                    "description": "A flag that indicates that other nodes may not be used to run resources associated to this HA group. Defaults to `false`.\n"
                }
            },
            "required": [
                "group",
                "noFailback",
                "nodes",
                "restricted"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "The comment associated with this group\n"
                },
                "group": {
                    "type": "string",
                    "description": "The identifier of the High Availability group to manage.\n"
                },
                "noFailback": {
                    "type": "boolean",
                    "description": "A flag that indicates that failing back to a higher priority node is disabled for this HA group. Defaults to `false`.\n"
                },
                "nodes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    },
                    "description": "The member nodes for this group. They are provided as a map, where the keys are the node names and the values represent their priority: integers for known priorities or `null` for unset priorities.\n"
                },
                "restricted": {
                    "type": "boolean",
                    "description": "A flag that indicates that other nodes may not be used to run resources associated to this HA group. Defaults to `false`.\n"
                }
            },
            "requiredInputs": [
                "group",
                "nodes"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering HAGroup resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "The comment associated with this group\n"
                    },
                    "group": {
                        "type": "string",
                        "description": "The identifier of the High Availability group to manage.\n"
                    },
                    "noFailback": {
                        "type": "boolean",
                        "description": "A flag that indicates that failing back to a higher priority node is disabled for this HA group. Defaults to `false`.\n"
                    },
                    "nodes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "integer"
                        },
                        "description": "The member nodes for this group. They are provided as a map, where the keys are the node names and the values represent their priority: integers for known priorities or `null` for unset priorities.\n"
                    },
                    "restricted": {
                        "type": "boolean",
                        "description": "A flag that indicates that other nodes may not be used to run resources associated to this HA group. Defaults to `false`.\n"
                    }
                },
                "type": "object"
            }
        },
        "proxmoxve:HA/hAResource:HAResource": {
            "description": "Manages Proxmox HA resources.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@muhlba91/pulumi-proxmoxve\";\n\nconst example = new proxmoxve.ha.HAResource(\"example\", {\n    resourceId: \"vm:123\",\n    state: \"started\",\n    group: \"example\",\n    comment: \"Managed by Terraform\",\n}, {\n    dependsOn: [proxmox_virtual_environment_hagroup.example],\n});\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\nexample = proxmoxve.ha.HAResource(\"example\",\n    resource_id=\"vm:123\",\n    state=\"started\",\n    group=\"example\",\n    comment=\"Managed by Terraform\",\n    opts = pulumi.ResourceOptions(depends_on=[proxmox_virtual_environment_hagroup[\"example\"]]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new ProxmoxVE.HA.HAResource(\"example\", new()\n    {\n        ResourceId = \"vm:123\",\n        State = \"started\",\n        Group = \"example\",\n        Comment = \"Managed by Terraform\",\n    }, new CustomResourceOptions\n    {\n        DependsOn =\n        {\n            proxmox_virtual_environment_hagroup.Example,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/HA\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := HA.NewHAResource(ctx, \"example\", \u0026HA.HAResourceArgs{\n\t\t\tResourceId: pulumi.String(\"vm:123\"),\n\t\t\tState:      pulumi.String(\"started\"),\n\t\t\tGroup:      pulumi.String(\"example\"),\n\t\t\tComment:    pulumi.String(\"Managed by Terraform\"),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tproxmox_virtual_environment_hagroup.Example,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.HA.HAResource;\nimport com.pulumi.proxmoxve.HA.HAResourceArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new HAResource(\"example\", HAResourceArgs.builder()\n            .resourceId(\"vm:123\")\n            .state(\"started\")\n            .group(\"example\")\n            .comment(\"Managed by Terraform\")\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(proxmox_virtual_environment_hagroup.example())\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: proxmoxve:HA:HAResource\n    properties:\n      resourceId: vm:123\n      state: started\n      group: example\n      comment: Managed by Terraform\n    options:\n      dependson:\n        - ${proxmox_virtual_environment_hagroup.example}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n#!/usr/bin/env sh\n\nHA resources can be imported using their identifiers, e.g.:\n\n```sh\n$ pulumi import proxmoxve:HA/hAResource:HAResource example vm:123\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "The comment associated with this resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The identifier of the High Availability group this resource is a member of.\n"
                },
                "maxRelocate": {
                    "type": "integer",
                    "description": "The maximal number of relocation attempts.\n"
                },
                "maxRestart": {
                    "type": "integer",
                    "description": "The maximal number of restart attempts.\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "The Proxmox HA resource identifier\n"
                },
                "state": {
                    "type": "string",
                    "description": "The desired state of the resource.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of HA resources to create. If unset, it will be deduced from the `resource_id`.\n"
                }
            },
            "required": [
                "resourceId",
                "state",
                "type"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "The comment associated with this resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The identifier of the High Availability group this resource is a member of.\n"
                },
                "maxRelocate": {
                    "type": "integer",
                    "description": "The maximal number of relocation attempts.\n"
                },
                "maxRestart": {
                    "type": "integer",
                    "description": "The maximal number of restart attempts.\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "The Proxmox HA resource identifier\n"
                },
                "state": {
                    "type": "string",
                    "description": "The desired state of the resource.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of HA resources to create. If unset, it will be deduced from the `resource_id`.\n"
                }
            },
            "requiredInputs": [
                "resourceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering HAResource resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "The comment associated with this resource.\n"
                    },
                    "group": {
                        "type": "string",
                        "description": "The identifier of the High Availability group this resource is a member of.\n"
                    },
                    "maxRelocate": {
                        "type": "integer",
                        "description": "The maximal number of relocation attempts.\n"
                    },
                    "maxRestart": {
                        "type": "integer",
                        "description": "The maximal number of restart attempts.\n"
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "The Proxmox HA resource identifier\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The desired state of the resource.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of HA resources to create. If unset, it will be deduced from the `resource_id`.\n"
                    }
                },
                "type": "object"
            }
        },
        "proxmoxve:Hardware/mapping/pci:Pci": {
            "description": "Manages a PCI hardware mapping in a Proxmox VE cluster.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Hardware.Pci;\nimport com.pulumi.proxmoxve.Hardware.PciArgs;\nimport com.pulumi.proxmoxve.Hardware.inputs.PciMapArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Pci(\"example\", PciArgs.builder()\n            .comment(\"This is a comment\")\n            .maps(PciMapArgs.builder()\n                .comment(\"This is a device specific comment\")\n                .id(\"8086:5916\")\n                .iommu_group(0)\n                .node(\"pve\")\n                .path(\"0000:00:02.0\")\n                .subsystem_id(\"8086:2068\")\n                .build())\n            .mediatedDevices(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: proxmoxve:Hardware/mapping:Pci\n    properties:\n      comment: This is a comment\n      # The actual map of devices.\n      maps:\n        - comment: This is a device specific comment\n          id: 8086:5916\n          iommu_group: 0\n          node: pve\n          path: 0000:00:02.0\n          subsystem_id: 8086:2068\n      mediatedDevices: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n#!/usr/bin/env sh\n\nA PCI hardware mapping can be imported using their name, e.g.:\n\n```sh\n$ pulumi import proxmoxve:Hardware/mapping/pci:Pci example example\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "The comment of this PCI hardware mapping.\n"
                },
                "maps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/proxmoxve:Hardware/mapping/PciMap:PciMap"
                    },
                    "description": "The actual map of devices for the PCI hardware mapping.\n"
                },
                "mediatedDevices": {
                    "type": "boolean",
                    "description": "Indicates whether to enable mediated devices.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of this PCI hardware mapping.\n"
                }
            },
            "required": [
                "maps",
                "mediatedDevices",
                "name"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "The comment of this PCI hardware mapping.\n"
                },
                "maps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/proxmoxve:Hardware/mapping/PciMap:PciMap"
                    },
                    "description": "The actual map of devices for the PCI hardware mapping.\n"
                },
                "mediatedDevices": {
                    "type": "boolean",
                    "description": "Indicates whether to enable mediated devices.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of this PCI hardware mapping.\n"
                }
            },
            "requiredInputs": [
                "maps"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Pci resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "The comment of this PCI hardware mapping.\n"
                    },
                    "maps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/proxmoxve:Hardware/mapping/PciMap:PciMap"
                        },
                        "description": "The actual map of devices for the PCI hardware mapping.\n"
                    },
                    "mediatedDevices": {
                        "type": "boolean",
                        "description": "Indicates whether to enable mediated devices.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of this PCI hardware mapping.\n"
                    }
                },
                "type": "object"
            }
        },
        "proxmoxve:Hardware/mapping/usb:Usb": {
            "description": "Manages a USB hardware mapping in a Proxmox VE cluster.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@muhlba91/pulumi-proxmoxve\";\n\nconst example = new proxmoxve.hardware.mapping.Usb(\"example\", {\n    comment: \"This is a comment\",\n    maps: [{\n        comment: \"This is a device specific comment\",\n        id: \"8087:0a2b\",\n        node: \"pve\",\n        path: \"1-8.2\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\nexample = proxmoxve.hardware.mapping.Usb(\"example\",\n    comment=\"This is a comment\",\n    maps=[{\n        \"comment\": \"This is a device specific comment\",\n        \"id\": \"8087:0a2b\",\n        \"node\": \"pve\",\n        \"path\": \"1-8.2\",\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new ProxmoxVE.Hardware.Mapping.Usb(\"example\", new()\n    {\n        Comment = \"This is a comment\",\n        Maps = new[]\n        {\n            new ProxmoxVE.Hardware.Mapping.Inputs.UsbMapArgs\n            {\n                Comment = \"This is a device specific comment\",\n                Id = \"8087:0a2b\",\n                Node = \"pve\",\n                Path = \"1-8.2\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Hardware\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Hardware.NewUsb(ctx, \"example\", \u0026Hardware.UsbArgs{\n\t\t\tComment: pulumi.String(\"This is a comment\"),\n\t\t\tMaps: mapping.UsbMapTypeArray{\n\t\t\t\t\u0026mapping.UsbMapTypeArgs{\n\t\t\t\t\tComment: pulumi.String(\"This is a device specific comment\"),\n\t\t\t\t\tId:      pulumi.String(\"8087:0a2b\"),\n\t\t\t\t\tNode:    pulumi.String(\"pve\"),\n\t\t\t\t\tPath:    pulumi.String(\"1-8.2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Hardware.Usb;\nimport com.pulumi.proxmoxve.Hardware.UsbArgs;\nimport com.pulumi.proxmoxve.Hardware.inputs.UsbMapArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Usb(\"example\", UsbArgs.builder()\n            .comment(\"This is a comment\")\n            .maps(UsbMapArgs.builder()\n                .comment(\"This is a device specific comment\")\n                .id(\"8087:0a2b\")\n                .node(\"pve\")\n                .path(\"1-8.2\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: proxmoxve:Hardware/mapping:Usb\n    properties:\n      comment: This is a comment\n      # The actual map of devices.\n      maps:\n        - comment: This is a device specific comment\n          id: 8087:0a2b\n          node: pve\n          path: 1-8.2\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n#!/usr/bin/env sh\n\nA USB hardware mapping can be imported using their name, e.g.:\n\n```sh\n$ pulumi import proxmoxve:Hardware/mapping/usb:Usb example example\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "The comment of this USB hardware mapping.\n"
                },
                "maps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/proxmoxve:Hardware/mapping/UsbMap:UsbMap"
                    },
                    "description": "The actual map of devices for the hardware mapping.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of this hardware mapping.\n"
                }
            },
            "required": [
                "maps",
                "name"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "The comment of this USB hardware mapping.\n"
                },
                "maps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/proxmoxve:Hardware/mapping/UsbMap:UsbMap"
                    },
                    "description": "The actual map of devices for the hardware mapping.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of this hardware mapping.\n"
                }
            },
            "requiredInputs": [
                "maps"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Usb resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "The comment of this USB hardware mapping.\n"
                    },
                    "maps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/proxmoxve:Hardware/mapping/UsbMap:UsbMap"
                        },
                        "description": "The actual map of devices for the hardware mapping.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of this hardware mapping.\n"
                    }
                },
                "type": "object"
            }
        },
        "proxmoxve:Network/firewall:Firewall": {
            "description": "Manages firewall options on the cluster level.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@muhlba91/pulumi-proxmoxve\";\n\nconst example = new proxmoxve.network.Firewall(\"example\", {\n    ebtables: false,\n    enabled: false,\n    inputPolicy: \"DROP\",\n    logRatelimit: {\n        burst: 10,\n        enabled: false,\n        rate: \"5/second\",\n    },\n    outputPolicy: \"ACCEPT\",\n});\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\nexample = proxmoxve.network.Firewall(\"example\",\n    ebtables=False,\n    enabled=False,\n    input_policy=\"DROP\",\n    log_ratelimit={\n        \"burst\": 10,\n        \"enabled\": False,\n        \"rate\": \"5/second\",\n    },\n    output_policy=\"ACCEPT\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new ProxmoxVE.Network.Firewall(\"example\", new()\n    {\n        Ebtables = false,\n        Enabled = false,\n        InputPolicy = \"DROP\",\n        LogRatelimit = new ProxmoxVE.Network.Inputs.FirewallLogRatelimitArgs\n        {\n            Burst = 10,\n            Enabled = false,\n            Rate = \"5/second\",\n        },\n        OutputPolicy = \"ACCEPT\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Network\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Network.NewFirewall(ctx, \"example\", \u0026Network.FirewallArgs{\n\t\t\tEbtables:    pulumi.Bool(false),\n\t\t\tEnabled:     pulumi.Bool(false),\n\t\t\tInputPolicy: pulumi.String(\"DROP\"),\n\t\t\tLogRatelimit: \u0026network.FirewallLogRatelimitArgs{\n\t\t\t\tBurst:   pulumi.Int(10),\n\t\t\t\tEnabled: pulumi.Bool(false),\n\t\t\t\tRate:    pulumi.String(\"5/second\"),\n\t\t\t},\n\t\t\tOutputPolicy: pulumi.String(\"ACCEPT\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Network.Firewall;\nimport com.pulumi.proxmoxve.Network.FirewallArgs;\nimport com.pulumi.proxmoxve.Network.inputs.FirewallLogRatelimitArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Firewall(\"example\", FirewallArgs.builder()\n            .ebtables(false)\n            .enabled(false)\n            .inputPolicy(\"DROP\")\n            .logRatelimit(FirewallLogRatelimitArgs.builder()\n                .burst(10)\n                .enabled(false)\n                .rate(\"5/second\")\n                .build())\n            .outputPolicy(\"ACCEPT\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: proxmoxve:Network:Firewall\n    properties:\n      ebtables: false\n      enabled: false\n      inputPolicy: DROP\n      logRatelimit:\n        burst: 10\n        enabled: false\n        rate: 5/second\n      outputPolicy: ACCEPT\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Important Notes\n\nBe careful not to use this resource multiple times for the same node.\n\n## Import\n\nInstances can be imported without an ID, but you still need to pass one, e.g.,\n\nbash\n\n```sh\n$ pulumi import proxmoxve:Network/firewall:Firewall example example\n```\n\n",
            "properties": {
                "ebtables": {
                    "type": "boolean",
                    "description": "Enable ebtables rules cluster wide.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable or disable the firewall cluster wide.\n"
                },
                "inputPolicy": {
                    "type": "string",
                    "description": "The default input policy (`ACCEPT`, `DROP`, `REJECT`).\n"
                },
                "logRatelimit": {
                    "$ref": "#/types/proxmoxve:Network/FirewallLogRatelimit:FirewallLogRatelimit",
                    "description": "The log rate limit.\n"
                },
                "outputPolicy": {
                    "type": "string",
                    "description": "The default output policy (`ACCEPT`, `DROP`, `REJECT`).\n"
                }
            },
            "inputProperties": {
                "ebtables": {
                    "type": "boolean",
                    "description": "Enable ebtables rules cluster wide.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable or disable the firewall cluster wide.\n"
                },
                "inputPolicy": {
                    "type": "string",
                    "description": "The default input policy (`ACCEPT`, `DROP`, `REJECT`).\n"
                },
                "logRatelimit": {
                    "$ref": "#/types/proxmoxve:Network/FirewallLogRatelimit:FirewallLogRatelimit",
                    "description": "The log rate limit.\n"
                },
                "outputPolicy": {
                    "type": "string",
                    "description": "The default output policy (`ACCEPT`, `DROP`, `REJECT`).\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Firewall resources.\n",
                "properties": {
                    "ebtables": {
                        "type": "boolean",
                        "description": "Enable ebtables rules cluster wide.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable or disable the firewall cluster wide.\n"
                    },
                    "inputPolicy": {
                        "type": "string",
                        "description": "The default input policy (`ACCEPT`, `DROP`, `REJECT`).\n"
                    },
                    "logRatelimit": {
                        "$ref": "#/types/proxmoxve:Network/FirewallLogRatelimit:FirewallLogRatelimit",
                        "description": "The log rate limit.\n"
                    },
                    "outputPolicy": {
                        "type": "string",
                        "description": "The default output policy (`ACCEPT`, `DROP`, `REJECT`).\n"
                    }
                },
                "type": "object"
            }
        },
        "proxmoxve:Network/firewallAlias:FirewallAlias": {
            "description": "Aliases are used to see what devices or group of devices are affected by a rule.\nWe can create aliases to identify an IP address or a network. Aliases can be\ncreated on the cluster level, on VM / Container level.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@muhlba91/pulumi-proxmoxve\";\n\nconst localNetwork = new proxmoxve.network.FirewallAlias(\"localNetwork\", {\n    nodeName: proxmox_virtual_environment_vm.example.node_name,\n    vmId: proxmox_virtual_environment_vm.example.vm_id,\n    cidr: \"192.168.0.0/23\",\n    comment: \"Managed by Terraform\",\n}, {\n    dependsOn: [proxmox_virtual_environment_vm.example],\n});\nconst ubuntuVm = new proxmoxve.network.FirewallAlias(\"ubuntuVm\", {\n    cidr: \"192.168.0.1\",\n    comment: \"Managed by Terraform\",\n});\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\nlocal_network = proxmoxve.network.FirewallAlias(\"localNetwork\",\n    node_name=proxmox_virtual_environment_vm[\"example\"][\"node_name\"],\n    vm_id=proxmox_virtual_environment_vm[\"example\"][\"vm_id\"],\n    cidr=\"192.168.0.0/23\",\n    comment=\"Managed by Terraform\",\n    opts = pulumi.ResourceOptions(depends_on=[proxmox_virtual_environment_vm[\"example\"]]))\nubuntu_vm = proxmoxve.network.FirewallAlias(\"ubuntuVm\",\n    cidr=\"192.168.0.1\",\n    comment=\"Managed by Terraform\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var localNetwork = new ProxmoxVE.Network.FirewallAlias(\"localNetwork\", new()\n    {\n        NodeName = proxmox_virtual_environment_vm.Example.Node_name,\n        VmId = proxmox_virtual_environment_vm.Example.Vm_id,\n        Cidr = \"192.168.0.0/23\",\n        Comment = \"Managed by Terraform\",\n    }, new CustomResourceOptions\n    {\n        DependsOn =\n        {\n            proxmox_virtual_environment_vm.Example,\n        },\n    });\n\n    var ubuntuVm = new ProxmoxVE.Network.FirewallAlias(\"ubuntuVm\", new()\n    {\n        Cidr = \"192.168.0.1\",\n        Comment = \"Managed by Terraform\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Network\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Network.NewFirewallAlias(ctx, \"localNetwork\", \u0026Network.FirewallAliasArgs{\n\t\t\tNodeName: pulumi.Any(proxmox_virtual_environment_vm.Example.Node_name),\n\t\t\tVmId:     pulumi.Any(proxmox_virtual_environment_vm.Example.Vm_id),\n\t\t\tCidr:     pulumi.String(\"192.168.0.0/23\"),\n\t\t\tComment:  pulumi.String(\"Managed by Terraform\"),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tproxmox_virtual_environment_vm.Example,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = Network.NewFirewallAlias(ctx, \"ubuntuVm\", \u0026Network.FirewallAliasArgs{\n\t\t\tCidr:    pulumi.String(\"192.168.0.1\"),\n\t\t\tComment: pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Network.FirewallAlias;\nimport com.pulumi.proxmoxve.Network.FirewallAliasArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var localNetwork = new FirewallAlias(\"localNetwork\", FirewallAliasArgs.builder()\n            .nodeName(proxmox_virtual_environment_vm.example().node_name())\n            .vmId(proxmox_virtual_environment_vm.example().vm_id())\n            .cidr(\"192.168.0.0/23\")\n            .comment(\"Managed by Terraform\")\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(proxmox_virtual_environment_vm.example())\n                .build());\n\n        var ubuntuVm = new FirewallAlias(\"ubuntuVm\", FirewallAliasArgs.builder()\n            .cidr(\"192.168.0.1\")\n            .comment(\"Managed by Terraform\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  localNetwork:\n    type: proxmoxve:Network:FirewallAlias\n    properties:\n      nodeName: ${proxmox_virtual_environment_vm.example.node_name}\n      vmId: ${proxmox_virtual_environment_vm.example.vm_id}\n      cidr: 192.168.0.0/23\n      comment: Managed by Terraform\n    options:\n      dependson:\n        - ${proxmox_virtual_environment_vm.example}\n  ubuntuVm:\n    type: proxmoxve:Network:FirewallAlias\n    properties:\n      cidr: 192.168.0.1\n      comment: Managed by Terraform\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "cidr": {
                    "type": "string",
                    "description": "Network/IP specification in CIDR format.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Alias comment.\n"
                },
                "containerId": {
                    "type": "integer",
                    "description": "Container ID. Leave empty for cluster level aliases.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Alias name.\n"
                },
                "nodeName": {
                    "type": "string",
                    "description": "Node name. Leave empty for cluster level aliases.\n"
                },
                "vmId": {
                    "type": "integer",
                    "description": "VM ID. Leave empty for cluster level aliases.\n"
                }
            },
            "required": [
                "cidr",
                "name"
            ],
            "inputProperties": {
                "cidr": {
                    "type": "string",
                    "description": "Network/IP specification in CIDR format.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Alias comment.\n"
                },
                "containerId": {
                    "type": "integer",
                    "description": "Container ID. Leave empty for cluster level aliases.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Alias name.\n"
                },
                "nodeName": {
                    "type": "string",
                    "description": "Node name. Leave empty for cluster level aliases.\n"
                },
                "vmId": {
                    "type": "integer",
                    "description": "VM ID. Leave empty for cluster level aliases.\n"
                }
            },
            "requiredInputs": [
                "cidr"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FirewallAlias resources.\n",
                "properties": {
                    "cidr": {
                        "type": "string",
                        "description": "Network/IP specification in CIDR format.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Alias comment.\n"
                    },
                    "containerId": {
                        "type": "integer",
                        "description": "Container ID. Leave empty for cluster level aliases.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Alias name.\n"
                    },
                    "nodeName": {
                        "type": "string",
                        "description": "Node name. Leave empty for cluster level aliases.\n"
                    },
                    "vmId": {
                        "type": "integer",
                        "description": "VM ID. Leave empty for cluster level aliases.\n"
                    }
                },
                "type": "object"
            }
        },
        "proxmoxve:Network/firewallIPSet:FirewallIPSet": {
            "description": "An IPSet allows us to group multiple IP addresses, IP subnets and aliases. Aliases can be\ncreated on the cluster level, on VM / Container level.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@muhlba91/pulumi-proxmoxve\";\n\nconst ipset = new proxmoxve.network.FirewallIPSet(\"ipset\", {\n    nodeName: proxmox_virtual_environment_vm.example.node_name,\n    vmId: proxmox_virtual_environment_vm.example.vm_id,\n    comment: \"Managed by Terraform\",\n    cidrs: [\n        {\n            name: \"192.168.0.0/23\",\n            comment: \"Local network 1\",\n        },\n        {\n            name: \"192.168.0.1\",\n            comment: \"Server 1\",\n            nomatch: true,\n        },\n        {\n            name: \"192.168.2.1\",\n            comment: \"Server 1\",\n        },\n    ],\n}, {\n    dependsOn: [proxmox_virtual_environment_vm.example],\n});\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\nipset = proxmoxve.network.FirewallIPSet(\"ipset\",\n    node_name=proxmox_virtual_environment_vm[\"example\"][\"node_name\"],\n    vm_id=proxmox_virtual_environment_vm[\"example\"][\"vm_id\"],\n    comment=\"Managed by Terraform\",\n    cidrs=[\n        {\n            \"name\": \"192.168.0.0/23\",\n            \"comment\": \"Local network 1\",\n        },\n        {\n            \"name\": \"192.168.0.1\",\n            \"comment\": \"Server 1\",\n            \"nomatch\": True,\n        },\n        {\n            \"name\": \"192.168.2.1\",\n            \"comment\": \"Server 1\",\n        },\n    ],\n    opts = pulumi.ResourceOptions(depends_on=[proxmox_virtual_environment_vm[\"example\"]]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ipset = new ProxmoxVE.Network.FirewallIPSet(\"ipset\", new()\n    {\n        NodeName = proxmox_virtual_environment_vm.Example.Node_name,\n        VmId = proxmox_virtual_environment_vm.Example.Vm_id,\n        Comment = \"Managed by Terraform\",\n        Cidrs = new[]\n        {\n            new ProxmoxVE.Network.Inputs.FirewallIPSetCidrArgs\n            {\n                Name = \"192.168.0.0/23\",\n                Comment = \"Local network 1\",\n            },\n            new ProxmoxVE.Network.Inputs.FirewallIPSetCidrArgs\n            {\n                Name = \"192.168.0.1\",\n                Comment = \"Server 1\",\n                Nomatch = true,\n            },\n            new ProxmoxVE.Network.Inputs.FirewallIPSetCidrArgs\n            {\n                Name = \"192.168.2.1\",\n                Comment = \"Server 1\",\n            },\n        },\n    }, new CustomResourceOptions\n    {\n        DependsOn =\n        {\n            proxmox_virtual_environment_vm.Example,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Network\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Network.NewFirewallIPSet(ctx, \"ipset\", \u0026Network.FirewallIPSetArgs{\n\t\t\tNodeName: pulumi.Any(proxmox_virtual_environment_vm.Example.Node_name),\n\t\t\tVmId:     pulumi.Any(proxmox_virtual_environment_vm.Example.Vm_id),\n\t\t\tComment:  pulumi.String(\"Managed by Terraform\"),\n\t\t\tCidrs: network.FirewallIPSetCidrArray{\n\t\t\t\t\u0026network.FirewallIPSetCidrArgs{\n\t\t\t\t\tName:    pulumi.String(\"192.168.0.0/23\"),\n\t\t\t\t\tComment: pulumi.String(\"Local network 1\"),\n\t\t\t\t},\n\t\t\t\t\u0026network.FirewallIPSetCidrArgs{\n\t\t\t\t\tName:    pulumi.String(\"192.168.0.1\"),\n\t\t\t\t\tComment: pulumi.String(\"Server 1\"),\n\t\t\t\t\tNomatch: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t\t\u0026network.FirewallIPSetCidrArgs{\n\t\t\t\t\tName:    pulumi.String(\"192.168.2.1\"),\n\t\t\t\t\tComment: pulumi.String(\"Server 1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tproxmox_virtual_environment_vm.Example,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Network.FirewallIPSet;\nimport com.pulumi.proxmoxve.Network.FirewallIPSetArgs;\nimport com.pulumi.proxmoxve.Network.inputs.FirewallIPSetCidrArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var ipset = new FirewallIPSet(\"ipset\", FirewallIPSetArgs.builder()\n            .nodeName(proxmox_virtual_environment_vm.example().node_name())\n            .vmId(proxmox_virtual_environment_vm.example().vm_id())\n            .comment(\"Managed by Terraform\")\n            .cidrs(            \n                FirewallIPSetCidrArgs.builder()\n                    .name(\"192.168.0.0/23\")\n                    .comment(\"Local network 1\")\n                    .build(),\n                FirewallIPSetCidrArgs.builder()\n                    .name(\"192.168.0.1\")\n                    .comment(\"Server 1\")\n                    .nomatch(true)\n                    .build(),\n                FirewallIPSetCidrArgs.builder()\n                    .name(\"192.168.2.1\")\n                    .comment(\"Server 1\")\n                    .build())\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(proxmox_virtual_environment_vm.example())\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ipset:\n    type: proxmoxve:Network:FirewallIPSet\n    properties:\n      nodeName: ${proxmox_virtual_environment_vm.example.node_name}\n      vmId: ${proxmox_virtual_environment_vm.example.vm_id}\n      comment: Managed by Terraform\n      cidrs:\n        - name: 192.168.0.0/23\n          comment: Local network 1\n        - name: 192.168.0.1\n          comment: Server 1\n          nomatch: true\n        - name: 192.168.2.1\n          comment: Server 1\n    options:\n      dependson:\n        - ${proxmox_virtual_environment_vm.example}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "cidrs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/proxmoxve:Network/FirewallIPSetCidr:FirewallIPSetCidr"
                    },
                    "description": "IP/CIDR block (multiple blocks supported).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "IPSet comment.\n"
                },
                "containerId": {
                    "type": "integer",
                    "description": "Container ID. Leave empty for cluster level aliases.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IPSet name.\n"
                },
                "nodeName": {
                    "type": "string",
                    "description": "Node name. Leave empty for cluster level aliases.\n"
                },
                "vmId": {
                    "type": "integer",
                    "description": "VM ID. Leave empty for cluster level aliases.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "cidrs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/proxmoxve:Network/FirewallIPSetCidr:FirewallIPSetCidr"
                    },
                    "description": "IP/CIDR block (multiple blocks supported).\n",
                    "willReplaceOnChanges": true
                },
                "comment": {
                    "type": "string",
                    "description": "IPSet comment.\n"
                },
                "containerId": {
                    "type": "integer",
                    "description": "Container ID. Leave empty for cluster level aliases.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IPSet name.\n"
                },
                "nodeName": {
                    "type": "string",
                    "description": "Node name. Leave empty for cluster level aliases.\n"
                },
                "vmId": {
                    "type": "integer",
                    "description": "VM ID. Leave empty for cluster level aliases.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FirewallIPSet resources.\n",
                "properties": {
                    "cidrs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/proxmoxve:Network/FirewallIPSetCidr:FirewallIPSetCidr"
                        },
                        "description": "IP/CIDR block (multiple blocks supported).\n",
                        "willReplaceOnChanges": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "IPSet comment.\n"
                    },
                    "containerId": {
                        "type": "integer",
                        "description": "Container ID. Leave empty for cluster level aliases.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "IPSet name.\n"
                    },
                    "nodeName": {
                        "type": "string",
                        "description": "Node name. Leave empty for cluster level aliases.\n"
                    },
                    "vmId": {
                        "type": "integer",
                        "description": "VM ID. Leave empty for cluster level aliases.\n"
                    }
                },
                "type": "object"
            }
        },
        "proxmoxve:Network/firewallOptions:FirewallOptions": {
            "description": "Manages firewall options on VM / Container level.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@muhlba91/pulumi-proxmoxve\";\n\nconst example = new proxmoxve.network.FirewallOptions(\"example\", {\n    nodeName: proxmox_virtual_environment_vm.example.node_name,\n    vmId: proxmox_virtual_environment_vm.example.vm_id,\n    dhcp: true,\n    enabled: false,\n    ipfilter: true,\n    logLevelIn: \"info\",\n    logLevelOut: \"info\",\n    macfilter: false,\n    ndp: true,\n    inputPolicy: \"ACCEPT\",\n    outputPolicy: \"ACCEPT\",\n    radv: true,\n}, {\n    dependsOn: [proxmox_virtual_environment_vm.example],\n});\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\nexample = proxmoxve.network.FirewallOptions(\"example\",\n    node_name=proxmox_virtual_environment_vm[\"example\"][\"node_name\"],\n    vm_id=proxmox_virtual_environment_vm[\"example\"][\"vm_id\"],\n    dhcp=True,\n    enabled=False,\n    ipfilter=True,\n    log_level_in=\"info\",\n    log_level_out=\"info\",\n    macfilter=False,\n    ndp=True,\n    input_policy=\"ACCEPT\",\n    output_policy=\"ACCEPT\",\n    radv=True,\n    opts = pulumi.ResourceOptions(depends_on=[proxmox_virtual_environment_vm[\"example\"]]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new ProxmoxVE.Network.FirewallOptions(\"example\", new()\n    {\n        NodeName = proxmox_virtual_environment_vm.Example.Node_name,\n        VmId = proxmox_virtual_environment_vm.Example.Vm_id,\n        Dhcp = true,\n        Enabled = false,\n        Ipfilter = true,\n        LogLevelIn = \"info\",\n        LogLevelOut = \"info\",\n        Macfilter = false,\n        Ndp = true,\n        InputPolicy = \"ACCEPT\",\n        OutputPolicy = \"ACCEPT\",\n        Radv = true,\n    }, new CustomResourceOptions\n    {\n        DependsOn =\n        {\n            proxmox_virtual_environment_vm.Example,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Network\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Network.NewFirewallOptions(ctx, \"example\", \u0026Network.FirewallOptionsArgs{\n\t\t\tNodeName:     pulumi.Any(proxmox_virtual_environment_vm.Example.Node_name),\n\t\t\tVmId:         pulumi.Any(proxmox_virtual_environment_vm.Example.Vm_id),\n\t\t\tDhcp:         pulumi.Bool(true),\n\t\t\tEnabled:      pulumi.Bool(false),\n\t\t\tIpfilter:     pulumi.Bool(true),\n\t\t\tLogLevelIn:   pulumi.String(\"info\"),\n\t\t\tLogLevelOut:  pulumi.String(\"info\"),\n\t\t\tMacfilter:    pulumi.Bool(false),\n\t\t\tNdp:          pulumi.Bool(true),\n\t\t\tInputPolicy:  pulumi.String(\"ACCEPT\"),\n\t\t\tOutputPolicy: pulumi.String(\"ACCEPT\"),\n\t\t\tRadv:         pulumi.Bool(true),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tproxmox_virtual_environment_vm.Example,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Network.FirewallOptions;\nimport com.pulumi.proxmoxve.Network.FirewallOptionsArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new FirewallOptions(\"example\", FirewallOptionsArgs.builder()\n            .nodeName(proxmox_virtual_environment_vm.example().node_name())\n            .vmId(proxmox_virtual_environment_vm.example().vm_id())\n            .dhcp(true)\n            .enabled(false)\n            .ipfilter(true)\n            .logLevelIn(\"info\")\n            .logLevelOut(\"info\")\n            .macfilter(false)\n            .ndp(true)\n            .inputPolicy(\"ACCEPT\")\n            .outputPolicy(\"ACCEPT\")\n            .radv(true)\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(proxmox_virtual_environment_vm.example())\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: proxmoxve:Network:FirewallOptions\n    properties:\n      nodeName: ${proxmox_virtual_environment_vm.example.node_name}\n      vmId: ${proxmox_virtual_environment_vm.example.vm_id}\n      dhcp: true\n      enabled: false\n      ipfilter: true\n      logLevelIn: info\n      logLevelOut: info\n      macfilter: false\n      ndp: true\n      inputPolicy: ACCEPT\n      outputPolicy: ACCEPT\n      radv: true\n    options:\n      dependson:\n        - ${proxmox_virtual_environment_vm.example}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "containerId": {
                    "type": "integer",
                    "description": "Container ID. Leave empty for cluster level aliases.\n"
                },
                "dhcp": {
                    "type": "boolean",
                    "description": "Enable DHCP.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable or disable the firewall.\n"
                },
                "inputPolicy": {
                    "type": "string",
                    "description": "The default input\npolicy (`ACCEPT`, `DROP`, `REJECT`).\n"
                },
                "ipfilter": {
                    "type": "boolean",
                    "description": "Enable default IP filters. This is equivalent to\nadding an empty `ipfilter-net\u003cid\u003e` ipset for every interface. Such ipsets\nimplicitly contain sane default restrictions such as restricting IPv6 link\nlocal addresses to the one derived from the interface's MAC address. For\ncontainers the configured IP addresses will be implicitly added.\n"
                },
                "logLevelIn": {
                    "type": "string",
                    "description": "Log level for incoming\npackets (`emerg`, `alert`, `crit`, `err`, `warning`, `notice`, `info`,\n`debug`, `nolog`).\n"
                },
                "logLevelOut": {
                    "type": "string",
                    "description": "Log level for outgoing\npackets (`emerg`, `alert`, `crit`, `err`, `warning`, `notice`, `info`,\n`debug`, `nolog`).\n"
                },
                "macfilter": {
                    "type": "boolean",
                    "description": "Enable/disable MAC address filter.\n"
                },
                "ndp": {
                    "type": "boolean",
                    "description": "Enable NDP (Neighbor Discovery Protocol).\n"
                },
                "nodeName": {
                    "type": "string",
                    "description": "Node name.\n"
                },
                "outputPolicy": {
                    "type": "string",
                    "description": "The default output\npolicy (`ACCEPT`, `DROP`, `REJECT`).\n"
                },
                "radv": {
                    "type": "boolean",
                    "description": "Enable Router Advertisement.\n"
                },
                "vmId": {
                    "type": "integer",
                    "description": "VM ID. Leave empty for cluster level aliases.\n"
                }
            },
            "required": [
                "nodeName"
            ],
            "inputProperties": {
                "containerId": {
                    "type": "integer",
                    "description": "Container ID. Leave empty for cluster level aliases.\n"
                },
                "dhcp": {
                    "type": "boolean",
                    "description": "Enable DHCP.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable or disable the firewall.\n"
                },
                "inputPolicy": {
                    "type": "string",
                    "description": "The default input\npolicy (`ACCEPT`, `DROP`, `REJECT`).\n"
                },
                "ipfilter": {
                    "type": "boolean",
                    "description": "Enable default IP filters. This is equivalent to\nadding an empty `ipfilter-net\u003cid\u003e` ipset for every interface. Such ipsets\nimplicitly contain sane default restrictions such as restricting IPv6 link\nlocal addresses to the one derived from the interface's MAC address. For\ncontainers the configured IP addresses will be implicitly added.\n"
                },
                "logLevelIn": {
                    "type": "string",
                    "description": "Log level for incoming\npackets (`emerg`, `alert`, `crit`, `err`, `warning`, `notice`, `info`,\n`debug`, `nolog`).\n"
                },
                "logLevelOut": {
                    "type": "string",
                    "description": "Log level for outgoing\npackets (`emerg`, `alert`, `crit`, `err`, `warning`, `notice`, `info`,\n`debug`, `nolog`).\n"
                },
                "macfilter": {
                    "type": "boolean",
                    "description": "Enable/disable MAC address filter.\n"
                },
                "ndp": {
                    "type": "boolean",
                    "description": "Enable NDP (Neighbor Discovery Protocol).\n"
                },
                "nodeName": {
                    "type": "string",
                    "description": "Node name.\n"
                },
                "outputPolicy": {
                    "type": "string",
                    "description": "The default output\npolicy (`ACCEPT`, `DROP`, `REJECT`).\n"
                },
                "radv": {
                    "type": "boolean",
                    "description": "Enable Router Advertisement.\n"
                },
                "vmId": {
                    "type": "integer",
                    "description": "VM ID. Leave empty for cluster level aliases.\n"
                }
            },
            "requiredInputs": [
                "nodeName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FirewallOptions resources.\n",
                "properties": {
                    "containerId": {
                        "type": "integer",
                        "description": "Container ID. Leave empty for cluster level aliases.\n"
                    },
                    "dhcp": {
                        "type": "boolean",
                        "description": "Enable DHCP.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable or disable the firewall.\n"
                    },
                    "inputPolicy": {
                        "type": "string",
                        "description": "The default input\npolicy (`ACCEPT`, `DROP`, `REJECT`).\n"
                    },
                    "ipfilter": {
                        "type": "boolean",
                        "description": "Enable default IP filters. This is equivalent to\nadding an empty `ipfilter-net\u003cid\u003e` ipset for every interface. Such ipsets\nimplicitly contain sane default restrictions such as restricting IPv6 link\nlocal addresses to the one derived from the interface's MAC address. For\ncontainers the configured IP addresses will be implicitly added.\n"
                    },
                    "logLevelIn": {
                        "type": "string",
                        "description": "Log level for incoming\npackets (`emerg`, `alert`, `crit`, `err`, `warning`, `notice`, `info`,\n`debug`, `nolog`).\n"
                    },
                    "logLevelOut": {
                        "type": "string",
                        "description": "Log level for outgoing\npackets (`emerg`, `alert`, `crit`, `err`, `warning`, `notice`, `info`,\n`debug`, `nolog`).\n"
                    },
                    "macfilter": {
                        "type": "boolean",
                        "description": "Enable/disable MAC address filter.\n"
                    },
                    "ndp": {
                        "type": "boolean",
                        "description": "Enable NDP (Neighbor Discovery Protocol).\n"
                    },
                    "nodeName": {
                        "type": "string",
                        "description": "Node name.\n"
                    },
                    "outputPolicy": {
                        "type": "string",
                        "description": "The default output\npolicy (`ACCEPT`, `DROP`, `REJECT`).\n"
                    },
                    "radv": {
                        "type": "boolean",
                        "description": "Enable Router Advertisement.\n"
                    },
                    "vmId": {
                        "type": "integer",
                        "description": "VM ID. Leave empty for cluster level aliases.\n"
                    }
                },
                "type": "object"
            }
        },
        "proxmoxve:Network/firewallRules:FirewallRules": {
            "description": "A security group is a collection of rules, defined at cluster level, which can\nbe used in all VMs' rules. For example, you can define a group named “webserver”\nwith rules to open the http and https ports. Rules can be created on the cluster\nlevel, on VM / Container level.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@muhlba91/pulumi-proxmoxve\";\n\nconst inbound = new proxmoxve.network.FirewallRules(\"inbound\", {\n    nodeName: proxmox_virtual_environment_vm.example.node_name,\n    vmId: proxmox_virtual_environment_vm.example.vm_id,\n    rules: [\n        {\n            type: \"in\",\n            action: \"ACCEPT\",\n            comment: \"Allow HTTP\",\n            dest: \"192.168.1.5\",\n            dport: \"80\",\n            proto: \"tcp\",\n            log: \"info\",\n        },\n        {\n            type: \"in\",\n            action: \"ACCEPT\",\n            comment: \"Allow HTTPS\",\n            dest: \"192.168.1.5\",\n            dport: \"443\",\n            proto: \"tcp\",\n            log: \"info\",\n        },\n        {\n            securityGroup: proxmox_virtual_environment_cluster_firewall_security_group.example.name,\n            comment: \"From security group\",\n            iface: \"net0\",\n        },\n    ],\n}, {\n    dependsOn: [\n        proxmox_virtual_environment_vm.example,\n        proxmox_virtual_environment_cluster_firewall_security_group.example,\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\ninbound = proxmoxve.network.FirewallRules(\"inbound\",\n    node_name=proxmox_virtual_environment_vm[\"example\"][\"node_name\"],\n    vm_id=proxmox_virtual_environment_vm[\"example\"][\"vm_id\"],\n    rules=[\n        {\n            \"type\": \"in\",\n            \"action\": \"ACCEPT\",\n            \"comment\": \"Allow HTTP\",\n            \"dest\": \"192.168.1.5\",\n            \"dport\": \"80\",\n            \"proto\": \"tcp\",\n            \"log\": \"info\",\n        },\n        {\n            \"type\": \"in\",\n            \"action\": \"ACCEPT\",\n            \"comment\": \"Allow HTTPS\",\n            \"dest\": \"192.168.1.5\",\n            \"dport\": \"443\",\n            \"proto\": \"tcp\",\n            \"log\": \"info\",\n        },\n        {\n            \"security_group\": proxmox_virtual_environment_cluster_firewall_security_group[\"example\"][\"name\"],\n            \"comment\": \"From security group\",\n            \"iface\": \"net0\",\n        },\n    ],\n    opts = pulumi.ResourceOptions(depends_on=[\n            proxmox_virtual_environment_vm[\"example\"],\n            proxmox_virtual_environment_cluster_firewall_security_group[\"example\"],\n        ]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var inbound = new ProxmoxVE.Network.FirewallRules(\"inbound\", new()\n    {\n        NodeName = proxmox_virtual_environment_vm.Example.Node_name,\n        VmId = proxmox_virtual_environment_vm.Example.Vm_id,\n        Rules = new[]\n        {\n            new ProxmoxVE.Network.Inputs.FirewallRulesRuleArgs\n            {\n                Type = \"in\",\n                Action = \"ACCEPT\",\n                Comment = \"Allow HTTP\",\n                Dest = \"192.168.1.5\",\n                Dport = \"80\",\n                Proto = \"tcp\",\n                Log = \"info\",\n            },\n            new ProxmoxVE.Network.Inputs.FirewallRulesRuleArgs\n            {\n                Type = \"in\",\n                Action = \"ACCEPT\",\n                Comment = \"Allow HTTPS\",\n                Dest = \"192.168.1.5\",\n                Dport = \"443\",\n                Proto = \"tcp\",\n                Log = \"info\",\n            },\n            new ProxmoxVE.Network.Inputs.FirewallRulesRuleArgs\n            {\n                SecurityGroup = proxmox_virtual_environment_cluster_firewall_security_group.Example.Name,\n                Comment = \"From security group\",\n                Iface = \"net0\",\n            },\n        },\n    }, new CustomResourceOptions\n    {\n        DependsOn =\n        {\n            proxmox_virtual_environment_vm.Example,\n            proxmox_virtual_environment_cluster_firewall_security_group.Example,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Network\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Network.NewFirewallRules(ctx, \"inbound\", \u0026Network.FirewallRulesArgs{\n\t\t\tNodeName: pulumi.Any(proxmox_virtual_environment_vm.Example.Node_name),\n\t\t\tVmId:     pulumi.Any(proxmox_virtual_environment_vm.Example.Vm_id),\n\t\t\tRules: network.FirewallRulesRuleArray{\n\t\t\t\t\u0026network.FirewallRulesRuleArgs{\n\t\t\t\t\tType:    pulumi.String(\"in\"),\n\t\t\t\t\tAction:  pulumi.String(\"ACCEPT\"),\n\t\t\t\t\tComment: pulumi.String(\"Allow HTTP\"),\n\t\t\t\t\tDest:    pulumi.String(\"192.168.1.5\"),\n\t\t\t\t\tDport:   pulumi.String(\"80\"),\n\t\t\t\t\tProto:   pulumi.String(\"tcp\"),\n\t\t\t\t\tLog:     pulumi.String(\"info\"),\n\t\t\t\t},\n\t\t\t\t\u0026network.FirewallRulesRuleArgs{\n\t\t\t\t\tType:    pulumi.String(\"in\"),\n\t\t\t\t\tAction:  pulumi.String(\"ACCEPT\"),\n\t\t\t\t\tComment: pulumi.String(\"Allow HTTPS\"),\n\t\t\t\t\tDest:    pulumi.String(\"192.168.1.5\"),\n\t\t\t\t\tDport:   pulumi.String(\"443\"),\n\t\t\t\t\tProto:   pulumi.String(\"tcp\"),\n\t\t\t\t\tLog:     pulumi.String(\"info\"),\n\t\t\t\t},\n\t\t\t\t\u0026network.FirewallRulesRuleArgs{\n\t\t\t\t\tSecurityGroup: pulumi.Any(proxmox_virtual_environment_cluster_firewall_security_group.Example.Name),\n\t\t\t\t\tComment:       pulumi.String(\"From security group\"),\n\t\t\t\t\tIface:         pulumi.String(\"net0\"),\n\t\t\t\t},\n\t\t\t},\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tproxmox_virtual_environment_vm.Example,\n\t\t\tproxmox_virtual_environment_cluster_firewall_security_group.Example,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Network.FirewallRules;\nimport com.pulumi.proxmoxve.Network.FirewallRulesArgs;\nimport com.pulumi.proxmoxve.Network.inputs.FirewallRulesRuleArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var inbound = new FirewallRules(\"inbound\", FirewallRulesArgs.builder()\n            .nodeName(proxmox_virtual_environment_vm.example().node_name())\n            .vmId(proxmox_virtual_environment_vm.example().vm_id())\n            .rules(            \n                FirewallRulesRuleArgs.builder()\n                    .type(\"in\")\n                    .action(\"ACCEPT\")\n                    .comment(\"Allow HTTP\")\n                    .dest(\"192.168.1.5\")\n                    .dport(\"80\")\n                    .proto(\"tcp\")\n                    .log(\"info\")\n                    .build(),\n                FirewallRulesRuleArgs.builder()\n                    .type(\"in\")\n                    .action(\"ACCEPT\")\n                    .comment(\"Allow HTTPS\")\n                    .dest(\"192.168.1.5\")\n                    .dport(\"443\")\n                    .proto(\"tcp\")\n                    .log(\"info\")\n                    .build(),\n                FirewallRulesRuleArgs.builder()\n                    .securityGroup(proxmox_virtual_environment_cluster_firewall_security_group.example().name())\n                    .comment(\"From security group\")\n                    .iface(\"net0\")\n                    .build())\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(                \n                    proxmox_virtual_environment_vm.example(),\n                    proxmox_virtual_environment_cluster_firewall_security_group.example())\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  inbound:\n    type: proxmoxve:Network:FirewallRules\n    properties:\n      nodeName: ${proxmox_virtual_environment_vm.example.node_name}\n      vmId: ${proxmox_virtual_environment_vm.example.vm_id}\n      rules:\n        - type: in\n          action: ACCEPT\n          comment: Allow HTTP\n          dest: 192.168.1.5\n          dport: '80'\n          proto: tcp\n          log: info\n        - type: in\n          action: ACCEPT\n          comment: Allow HTTPS\n          dest: 192.168.1.5\n          dport: '443'\n          proto: tcp\n          log: info\n        - securityGroup: ${proxmox_virtual_environment_cluster_firewall_security_group.example.name}\n          comment: From security group\n          iface: net0\n    options:\n      dependson:\n        - ${proxmox_virtual_environment_vm.example}\n        - ${proxmox_virtual_environment_cluster_firewall_security_group.example}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "containerId": {
                    "type": "integer",
                    "description": "Container ID. Leave empty for cluster level\nrules.\n"
                },
                "nodeName": {
                    "type": "string",
                    "description": "Node name. Leave empty for cluster level rules.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/proxmoxve:Network/FirewallRulesRule:FirewallRulesRule"
                    },
                    "description": "Firewall rule block (multiple blocks supported).\nThe provider supports two types of the `rule` blocks:\n- A rule definition block, which includes the following arguments:\n"
                },
                "vmId": {
                    "type": "integer",
                    "description": "VM ID. Leave empty for cluster level rules.\n"
                }
            },
            "required": [
                "rules"
            ],
            "inputProperties": {
                "containerId": {
                    "type": "integer",
                    "description": "Container ID. Leave empty for cluster level\nrules.\n"
                },
                "nodeName": {
                    "type": "string",
                    "description": "Node name. Leave empty for cluster level rules.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/proxmoxve:Network/FirewallRulesRule:FirewallRulesRule"
                    },
                    "description": "Firewall rule block (multiple blocks supported).\nThe provider supports two types of the `rule` blocks:\n- A rule definition block, which includes the following arguments:\n",
                    "willReplaceOnChanges": true
                },
                "vmId": {
                    "type": "integer",
                    "description": "VM ID. Leave empty for cluster level rules.\n"
                }
            },
            "requiredInputs": [
                "rules"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FirewallRules resources.\n",
                "properties": {
                    "containerId": {
                        "type": "integer",
                        "description": "Container ID. Leave empty for cluster level\nrules.\n"
                    },
                    "nodeName": {
                        "type": "string",
                        "description": "Node name. Leave empty for cluster level rules.\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/proxmoxve:Network/FirewallRulesRule:FirewallRulesRule"
                        },
                        "description": "Firewall rule block (multiple blocks supported).\nThe provider supports two types of the `rule` blocks:\n- A rule definition block, which includes the following arguments:\n",
                        "willReplaceOnChanges": true
                    },
                    "vmId": {
                        "type": "integer",
                        "description": "VM ID. Leave empty for cluster level rules.\n"
                    }
                },
                "type": "object"
            }
        },
        "proxmoxve:Network/firewallSecurityGroup:FirewallSecurityGroup": {
            "description": "A security group is a collection of rules, defined at cluster level, which can\nbe used in all VMs' rules. For example, you can define a group named “webserver”\nwith rules to open the http and https ports.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@muhlba91/pulumi-proxmoxve\";\n\nconst webserver = new proxmoxve.network.FirewallSecurityGroup(\"webserver\", {\n    comment: \"Managed by Terraform\",\n    rules: [\n        {\n            action: \"ACCEPT\",\n            comment: \"Allow HTTP\",\n            dest: \"192.168.1.5\",\n            dport: \"80\",\n            log: \"info\",\n            proto: \"tcp\",\n            type: \"in\",\n        },\n        {\n            action: \"ACCEPT\",\n            comment: \"Allow HTTPS\",\n            dest: \"192.168.1.5\",\n            dport: \"443\",\n            log: \"info\",\n            proto: \"tcp\",\n            type: \"in\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\nwebserver = proxmoxve.network.FirewallSecurityGroup(\"webserver\",\n    comment=\"Managed by Terraform\",\n    rules=[\n        {\n            \"action\": \"ACCEPT\",\n            \"comment\": \"Allow HTTP\",\n            \"dest\": \"192.168.1.5\",\n            \"dport\": \"80\",\n            \"log\": \"info\",\n            \"proto\": \"tcp\",\n            \"type\": \"in\",\n        },\n        {\n            \"action\": \"ACCEPT\",\n            \"comment\": \"Allow HTTPS\",\n            \"dest\": \"192.168.1.5\",\n            \"dport\": \"443\",\n            \"log\": \"info\",\n            \"proto\": \"tcp\",\n            \"type\": \"in\",\n        },\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var webserver = new ProxmoxVE.Network.FirewallSecurityGroup(\"webserver\", new()\n    {\n        Comment = \"Managed by Terraform\",\n        Rules = new[]\n        {\n            new ProxmoxVE.Network.Inputs.FirewallSecurityGroupRuleArgs\n            {\n                Action = \"ACCEPT\",\n                Comment = \"Allow HTTP\",\n                Dest = \"192.168.1.5\",\n                Dport = \"80\",\n                Log = \"info\",\n                Proto = \"tcp\",\n                Type = \"in\",\n            },\n            new ProxmoxVE.Network.Inputs.FirewallSecurityGroupRuleArgs\n            {\n                Action = \"ACCEPT\",\n                Comment = \"Allow HTTPS\",\n                Dest = \"192.168.1.5\",\n                Dport = \"443\",\n                Log = \"info\",\n                Proto = \"tcp\",\n                Type = \"in\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Network\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Network.NewFirewallSecurityGroup(ctx, \"webserver\", \u0026Network.FirewallSecurityGroupArgs{\n\t\t\tComment: pulumi.String(\"Managed by Terraform\"),\n\t\t\tRules: network.FirewallSecurityGroupRuleArray{\n\t\t\t\t\u0026network.FirewallSecurityGroupRuleArgs{\n\t\t\t\t\tAction:  pulumi.String(\"ACCEPT\"),\n\t\t\t\t\tComment: pulumi.String(\"Allow HTTP\"),\n\t\t\t\t\tDest:    pulumi.String(\"192.168.1.5\"),\n\t\t\t\t\tDport:   pulumi.String(\"80\"),\n\t\t\t\t\tLog:     pulumi.String(\"info\"),\n\t\t\t\t\tProto:   pulumi.String(\"tcp\"),\n\t\t\t\t\tType:    pulumi.String(\"in\"),\n\t\t\t\t},\n\t\t\t\t\u0026network.FirewallSecurityGroupRuleArgs{\n\t\t\t\t\tAction:  pulumi.String(\"ACCEPT\"),\n\t\t\t\t\tComment: pulumi.String(\"Allow HTTPS\"),\n\t\t\t\t\tDest:    pulumi.String(\"192.168.1.5\"),\n\t\t\t\t\tDport:   pulumi.String(\"443\"),\n\t\t\t\t\tLog:     pulumi.String(\"info\"),\n\t\t\t\t\tProto:   pulumi.String(\"tcp\"),\n\t\t\t\t\tType:    pulumi.String(\"in\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Network.FirewallSecurityGroup;\nimport com.pulumi.proxmoxve.Network.FirewallSecurityGroupArgs;\nimport com.pulumi.proxmoxve.Network.inputs.FirewallSecurityGroupRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var webserver = new FirewallSecurityGroup(\"webserver\", FirewallSecurityGroupArgs.builder()\n            .comment(\"Managed by Terraform\")\n            .rules(            \n                FirewallSecurityGroupRuleArgs.builder()\n                    .action(\"ACCEPT\")\n                    .comment(\"Allow HTTP\")\n                    .dest(\"192.168.1.5\")\n                    .dport(\"80\")\n                    .log(\"info\")\n                    .proto(\"tcp\")\n                    .type(\"in\")\n                    .build(),\n                FirewallSecurityGroupRuleArgs.builder()\n                    .action(\"ACCEPT\")\n                    .comment(\"Allow HTTPS\")\n                    .dest(\"192.168.1.5\")\n                    .dport(\"443\")\n                    .log(\"info\")\n                    .proto(\"tcp\")\n                    .type(\"in\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  webserver:\n    type: proxmoxve:Network:FirewallSecurityGroup\n    properties:\n      comment: Managed by Terraform\n      rules:\n        - action: ACCEPT\n          comment: Allow HTTP\n          dest: 192.168.1.5\n          dport: '80'\n          log: info\n          proto: tcp\n          type: in\n        - action: ACCEPT\n          comment: Allow HTTPS\n          dest: 192.168.1.5\n          dport: '443'\n          log: info\n          proto: tcp\n          type: in\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nInstances can be imported using the `name`, e.g.,\n\nbash\n\n```sh\n$ pulumi import proxmoxve:Network/firewallSecurityGroup:FirewallSecurityGroup webserver webserver\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Security group comment.\n"
                },
                "containerId": {
                    "type": "integer",
                    "description": "The ID of the container to manage the firewall for.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Security group name.\n"
                },
                "nodeName": {
                    "type": "string",
                    "description": "The name of the node.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/proxmoxve:Network/FirewallSecurityGroupRule:FirewallSecurityGroupRule"
                    },
                    "description": "Firewall rule block (multiple blocks supported).\n"
                },
                "vmId": {
                    "type": "integer",
                    "description": "The ID of the VM to manage the firewall for.\n"
                }
            },
            "required": [
                "name",
                "rules"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Security group comment.\n"
                },
                "containerId": {
                    "type": "integer",
                    "description": "The ID of the container to manage the firewall for.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Security group name.\n"
                },
                "nodeName": {
                    "type": "string",
                    "description": "The name of the node.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/proxmoxve:Network/FirewallSecurityGroupRule:FirewallSecurityGroupRule"
                    },
                    "description": "Firewall rule block (multiple blocks supported).\n",
                    "willReplaceOnChanges": true
                },
                "vmId": {
                    "type": "integer",
                    "description": "The ID of the VM to manage the firewall for.\n"
                }
            },
            "requiredInputs": [
                "rules"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FirewallSecurityGroup resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Security group comment.\n"
                    },
                    "containerId": {
                        "type": "integer",
                        "description": "The ID of the container to manage the firewall for.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Security group name.\n"
                    },
                    "nodeName": {
                        "type": "string",
                        "description": "The name of the node.\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/proxmoxve:Network/FirewallSecurityGroupRule:FirewallSecurityGroupRule"
                        },
                        "description": "Firewall rule block (multiple blocks supported).\n",
                        "willReplaceOnChanges": true
                    },
                    "vmId": {
                        "type": "integer",
                        "description": "The ID of the VM to manage the firewall for.\n"
                    }
                },
                "type": "object"
            }
        },
        "proxmoxve:Network/networkBridge:NetworkBridge": {
            "description": "Manages a Linux Bridge network interface in a Proxmox VE node.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@muhlba91/pulumi-proxmoxve\";\n\nconst vlan99 = new proxmoxve.network.NetworkVlan(\"vlan99\", {nodeName: \"pve\"});\n//# or alternatively, use custom name:\n// name      = \"vlan_lab\"\n// interface = \"eno0\"\n// vlan      = 98\nconst vmbr99 = new proxmoxve.network.NetworkBridge(\"vmbr99\", {\n    nodeName: \"pve\",\n    address: \"99.99.99.99/16\",\n    comment: \"vmbr99 comment\",\n    ports: [\"ens18.99\"],\n}, {\n    dependsOn: [vlan99],\n});\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\nvlan99 = proxmoxve.network.NetworkVlan(\"vlan99\", node_name=\"pve\")\n## or alternatively, use custom name:\n# name      = \"vlan_lab\"\n# interface = \"eno0\"\n# vlan      = 98\nvmbr99 = proxmoxve.network.NetworkBridge(\"vmbr99\",\n    node_name=\"pve\",\n    address=\"99.99.99.99/16\",\n    comment=\"vmbr99 comment\",\n    ports=[\"ens18.99\"],\n    opts = pulumi.ResourceOptions(depends_on=[vlan99]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var vlan99 = new ProxmoxVE.Network.NetworkVlan(\"vlan99\", new()\n    {\n        NodeName = \"pve\",\n    });\n\n    //# or alternatively, use custom name:\n    // name      = \"vlan_lab\"\n    // interface = \"eno0\"\n    // vlan      = 98\n    var vmbr99 = new ProxmoxVE.Network.NetworkBridge(\"vmbr99\", new()\n    {\n        NodeName = \"pve\",\n        Address = \"99.99.99.99/16\",\n        Comment = \"vmbr99 comment\",\n        Ports = new[]\n        {\n            \"ens18.99\",\n        },\n    }, new CustomResourceOptions\n    {\n        DependsOn =\n        {\n            vlan99,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Network\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tvlan99, err := Network.NewNetworkVlan(ctx, \"vlan99\", \u0026Network.NetworkVlanArgs{\n\t\t\tNodeName: pulumi.String(\"pve\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = Network.NewNetworkBridge(ctx, \"vmbr99\", \u0026Network.NetworkBridgeArgs{\n\t\t\tNodeName: pulumi.String(\"pve\"),\n\t\t\tAddress:  pulumi.String(\"99.99.99.99/16\"),\n\t\t\tComment:  pulumi.String(\"vmbr99 comment\"),\n\t\t\tPorts: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ens18.99\"),\n\t\t\t},\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tvlan99,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Network.NetworkVlan;\nimport com.pulumi.proxmoxve.Network.NetworkVlanArgs;\nimport com.pulumi.proxmoxve.Network.NetworkBridge;\nimport com.pulumi.proxmoxve.Network.NetworkBridgeArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var vlan99 = new NetworkVlan(\"vlan99\", NetworkVlanArgs.builder()\n            .nodeName(\"pve\")\n            .build());\n\n        //# or alternatively, use custom name:\n        // name      = \"vlan_lab\"\n        // interface = \"eno0\"\n        // vlan      = 98\n        var vmbr99 = new NetworkBridge(\"vmbr99\", NetworkBridgeArgs.builder()\n            .nodeName(\"pve\")\n            .address(\"99.99.99.99/16\")\n            .comment(\"vmbr99 comment\")\n            .ports(\"ens18.99\")\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(vlan99)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  vmbr99:\n    type: proxmoxve:Network:NetworkBridge\n    properties:\n      nodeName: pve\n      address: 99.99.99.99/16\n      comment: vmbr99 comment\n      ports:\n        - ens18.99\n    options:\n      dependson:\n        - ${vlan99}\n  vlan99:\n    type: proxmoxve:Network:NetworkVlan\n    properties:\n      nodeName: pve\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n#!/usr/bin/env sh\n\n#Interfaces can be imported using the `node_name:iface` format, e.g.\n\n```sh\n$ pulumi import proxmoxve:Network/networkBridge:NetworkBridge vmbr99 pve:vmbr99\n```\n\n",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The interface IPv4/CIDR address.\n"
                },
                "address6": {
                    "type": "string",
                    "description": "The interface IPv6/CIDR address.\n"
                },
                "autostart": {
                    "type": "boolean",
                    "description": "Automatically start interface on boot (defaults to `true`).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Comment for the interface.\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "Default gateway address.\n"
                },
                "gateway6": {
                    "type": "string",
                    "description": "Default IPv6 gateway address.\n"
                },
                "mtu": {
                    "type": "integer",
                    "description": "The interface MTU.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The interface name. Must be `vmbrN`, where N is a number between 0 and 9999.\n"
                },
                "nodeName": {
                    "type": "string",
                    "description": "The name of the node.\n"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The interface bridge ports.\n"
                },
                "vlanAware": {
                    "type": "boolean",
                    "description": "Whether the interface bridge is VLAN aware (defaults to `false`).\n"
                }
            },
            "required": [
                "autostart",
                "name",
                "nodeName",
                "vlanAware"
            ],
            "inputProperties": {
                "address": {
                    "type": "string",
                    "description": "The interface IPv4/CIDR address.\n"
                },
                "address6": {
                    "type": "string",
                    "description": "The interface IPv6/CIDR address.\n"
                },
                "autostart": {
                    "type": "boolean",
                    "description": "Automatically start interface on boot (defaults to `true`).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Comment for the interface.\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "Default gateway address.\n"
                },
                "gateway6": {
                    "type": "string",
                    "description": "Default IPv6 gateway address.\n"
                },
                "mtu": {
                    "type": "integer",
                    "description": "The interface MTU.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The interface name. Must be `vmbrN`, where N is a number between 0 and 9999.\n"
                },
                "nodeName": {
                    "type": "string",
                    "description": "The name of the node.\n"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The interface bridge ports.\n"
                },
                "vlanAware": {
                    "type": "boolean",
                    "description": "Whether the interface bridge is VLAN aware (defaults to `false`).\n"
                }
            },
            "requiredInputs": [
                "nodeName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkBridge resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The interface IPv4/CIDR address.\n"
                    },
                    "address6": {
                        "type": "string",
                        "description": "The interface IPv6/CIDR address.\n"
                    },
                    "autostart": {
                        "type": "boolean",
                        "description": "Automatically start interface on boot (defaults to `true`).\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Comment for the interface.\n"
                    },
                    "gateway": {
                        "type": "string",
                        "description": "Default gateway address.\n"
                    },
                    "gateway6": {
                        "type": "string",
                        "description": "Default IPv6 gateway address.\n"
                    },
                    "mtu": {
                        "type": "integer",
                        "description": "The interface MTU.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The interface name. Must be `vmbrN`, where N is a number between 0 and 9999.\n"
                    },
                    "nodeName": {
                        "type": "string",
                        "description": "The name of the node.\n"
                    },
                    "ports": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The interface bridge ports.\n"
                    },
                    "vlanAware": {
                        "type": "boolean",
                        "description": "Whether the interface bridge is VLAN aware (defaults to `false`).\n"
                    }
                },
                "type": "object"
            }
        },
        "proxmoxve:Network/networkVlan:NetworkVlan": {
            "description": "Manages a Linux VLAN network interface in a Proxmox VE node.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@muhlba91/pulumi-proxmoxve\";\n\n// using VLAN tag\nconst vlan99 = new proxmoxve.network.NetworkVlan(\"vlan99\", {\n    comment: \"VLAN 99\",\n    nodeName: \"pve\",\n});\n// using custom network interface name\nconst vlan98 = new proxmoxve.network.NetworkVlan(\"vlan98\", {\n    comment: \"VLAN 98\",\n    \"interface\": \"eno0\",\n    nodeName: \"pve\",\n    vlan: 98,\n});\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\n# using VLAN tag\nvlan99 = proxmoxve.network.NetworkVlan(\"vlan99\",\n    comment=\"VLAN 99\",\n    node_name=\"pve\")\n# using custom network interface name\nvlan98 = proxmoxve.network.NetworkVlan(\"vlan98\",\n    comment=\"VLAN 98\",\n    interface=\"eno0\",\n    node_name=\"pve\",\n    vlan=98)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // using VLAN tag\n    var vlan99 = new ProxmoxVE.Network.NetworkVlan(\"vlan99\", new()\n    {\n        Comment = \"VLAN 99\",\n        NodeName = \"pve\",\n    });\n\n    // using custom network interface name\n    var vlan98 = new ProxmoxVE.Network.NetworkVlan(\"vlan98\", new()\n    {\n        Comment = \"VLAN 98\",\n        Interface = \"eno0\",\n        NodeName = \"pve\",\n        Vlan = 98,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Network\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// using VLAN tag\n\t\t_, err := Network.NewNetworkVlan(ctx, \"vlan99\", \u0026Network.NetworkVlanArgs{\n\t\t\tComment:  pulumi.String(\"VLAN 99\"),\n\t\t\tNodeName: pulumi.String(\"pve\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// using custom network interface name\n\t\t_, err = Network.NewNetworkVlan(ctx, \"vlan98\", \u0026Network.NetworkVlanArgs{\n\t\t\tComment:   pulumi.String(\"VLAN 98\"),\n\t\t\tInterface: pulumi.String(\"eno0\"),\n\t\t\tNodeName:  pulumi.String(\"pve\"),\n\t\t\tVlan:      pulumi.Int(98),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Network.NetworkVlan;\nimport com.pulumi.proxmoxve.Network.NetworkVlanArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // using VLAN tag\n        var vlan99 = new NetworkVlan(\"vlan99\", NetworkVlanArgs.builder()\n            .comment(\"VLAN 99\")\n            .nodeName(\"pve\")\n            .build());\n\n        // using custom network interface name\n        var vlan98 = new NetworkVlan(\"vlan98\", NetworkVlanArgs.builder()\n            .comment(\"VLAN 98\")\n            .interface_(\"eno0\")\n            .nodeName(\"pve\")\n            .vlan(98)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # using VLAN tag\n  vlan99:\n    type: proxmoxve:Network:NetworkVlan\n    properties:\n      comment: VLAN 99\n      nodeName: pve\n  # using custom network interface name\n  vlan98:\n    type: proxmoxve:Network:NetworkVlan\n    properties:\n      comment: VLAN 98\n      interface: eno0\n      nodeName: pve\n      vlan: 98\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n#!/usr/bin/env sh\n\n#Interfaces can be imported using the `node_name:iface` format, e.g.\n\n```sh\n$ pulumi import proxmoxve:Network/networkVlan:NetworkVlan vlan99 pve:vlan99\n```\n\n",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The interface IPv4/CIDR address.\n"
                },
                "address6": {
                    "type": "string",
                    "description": "The interface IPv6/CIDR address.\n"
                },
                "autostart": {
                    "type": "boolean",
                    "description": "Automatically start interface on boot (defaults to `true`).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Comment for the interface.\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "Default gateway address.\n"
                },
                "gateway6": {
                    "type": "string",
                    "description": "Default IPv6 gateway address.\n"
                },
                "interface": {
                    "type": "string",
                    "description": "The VLAN raw device. See also `name`.\n"
                },
                "mtu": {
                    "type": "integer",
                    "description": "The interface MTU.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The interface name. Either add the VLAN tag number to an existing interface name, e.g. `ens18.21` (and do not set `interface` and `vlan`), or use custom name, e.g. `vlan_lab` (`interface` and `vlan` are then required).\n"
                },
                "nodeName": {
                    "type": "string",
                    "description": "The name of the node.\n"
                },
                "vlan": {
                    "type": "integer",
                    "description": "The VLAN tag. See also `name`.\n"
                }
            },
            "required": [
                "autostart",
                "interface",
                "name",
                "nodeName",
                "vlan"
            ],
            "inputProperties": {
                "address": {
                    "type": "string",
                    "description": "The interface IPv4/CIDR address.\n"
                },
                "address6": {
                    "type": "string",
                    "description": "The interface IPv6/CIDR address.\n"
                },
                "autostart": {
                    "type": "boolean",
                    "description": "Automatically start interface on boot (defaults to `true`).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Comment for the interface.\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "Default gateway address.\n"
                },
                "gateway6": {
                    "type": "string",
                    "description": "Default IPv6 gateway address.\n"
                },
                "interface": {
                    "type": "string",
                    "description": "The VLAN raw device. See also `name`.\n"
                },
                "mtu": {
                    "type": "integer",
                    "description": "The interface MTU.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The interface name. Either add the VLAN tag number to an existing interface name, e.g. `ens18.21` (and do not set `interface` and `vlan`), or use custom name, e.g. `vlan_lab` (`interface` and `vlan` are then required).\n"
                },
                "nodeName": {
                    "type": "string",
                    "description": "The name of the node.\n"
                },
                "vlan": {
                    "type": "integer",
                    "description": "The VLAN tag. See also `name`.\n"
                }
            },
            "requiredInputs": [
                "nodeName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkVlan resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The interface IPv4/CIDR address.\n"
                    },
                    "address6": {
                        "type": "string",
                        "description": "The interface IPv6/CIDR address.\n"
                    },
                    "autostart": {
                        "type": "boolean",
                        "description": "Automatically start interface on boot (defaults to `true`).\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Comment for the interface.\n"
                    },
                    "gateway": {
                        "type": "string",
                        "description": "Default gateway address.\n"
                    },
                    "gateway6": {
                        "type": "string",
                        "description": "Default IPv6 gateway address.\n"
                    },
                    "interface": {
                        "type": "string",
                        "description": "The VLAN raw device. See also `name`.\n"
                    },
                    "mtu": {
                        "type": "integer",
                        "description": "The interface MTU.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The interface name. Either add the VLAN tag number to an existing interface name, e.g. `ens18.21` (and do not set `interface` and `vlan`), or use custom name, e.g. `vlan_lab` (`interface` and `vlan` are then required).\n"
                    },
                    "nodeName": {
                        "type": "string",
                        "description": "The name of the node.\n"
                    },
                    "vlan": {
                        "type": "integer",
                        "description": "The VLAN tag. See also `name`.\n"
                    }
                },
                "type": "object"
            }
        },
        "proxmoxve:Permission/group:Group": {
            "description": "Manages a user group.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@muhlba91/pulumi-proxmoxve\";\n\nconst operationsTeam = new proxmoxve.permission.Group(\"operationsTeam\", {\n    comment: \"Managed by Terraform\",\n    groupId: \"operations-team\",\n});\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\noperations_team = proxmoxve.permission.Group(\"operationsTeam\",\n    comment=\"Managed by Terraform\",\n    group_id=\"operations-team\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var operationsTeam = new ProxmoxVE.Permission.Group(\"operationsTeam\", new()\n    {\n        Comment = \"Managed by Terraform\",\n        GroupId = \"operations-team\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Permission\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Permission.NewGroup(ctx, \"operationsTeam\", \u0026Permission.GroupArgs{\n\t\t\tComment: pulumi.String(\"Managed by Terraform\"),\n\t\t\tGroupId: pulumi.String(\"operations-team\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Permission.Group;\nimport com.pulumi.proxmoxve.Permission.GroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var operationsTeam = new Group(\"operationsTeam\", GroupArgs.builder()\n            .comment(\"Managed by Terraform\")\n            .groupId(\"operations-team\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  operationsTeam:\n    type: proxmoxve:Permission:Group\n    properties:\n      comment: Managed by Terraform\n      groupId: operations-team\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nInstances can be imported using the `group_id`, e.g.,\n\nbash\n\n```sh\n$ pulumi import proxmoxve:Permission/group:Group operations_team operations-team\n```\n\n",
            "properties": {
                "acls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/proxmoxve:Permission/GroupAcl:GroupAcl"
                    },
                    "description": "The access control list (multiple blocks supported).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "The group comment.\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "The group identifier.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The group members as a list of `username@realm` entries\n"
                }
            },
            "required": [
                "groupId",
                "members"
            ],
            "inputProperties": {
                "acls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/proxmoxve:Permission/GroupAcl:GroupAcl"
                    },
                    "description": "The access control list (multiple blocks supported).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "The group comment.\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "The group identifier.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "groupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Group resources.\n",
                "properties": {
                    "acls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/proxmoxve:Permission/GroupAcl:GroupAcl"
                        },
                        "description": "The access control list (multiple blocks supported).\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "The group comment.\n"
                    },
                    "groupId": {
                        "type": "string",
                        "description": "The group identifier.\n",
                        "willReplaceOnChanges": true
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The group members as a list of `username@realm` entries\n"
                    }
                },
                "type": "object"
            }
        },
        "proxmoxve:Permission/pool:Pool": {
            "description": "Manages a resource pool.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@muhlba91/pulumi-proxmoxve\";\n\nconst operationsPool = new proxmoxve.permission.Pool(\"operationsPool\", {\n    comment: \"Managed by Terraform\",\n    poolId: \"operations-pool\",\n});\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\noperations_pool = proxmoxve.permission.Pool(\"operationsPool\",\n    comment=\"Managed by Terraform\",\n    pool_id=\"operations-pool\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var operationsPool = new ProxmoxVE.Permission.Pool(\"operationsPool\", new()\n    {\n        Comment = \"Managed by Terraform\",\n        PoolId = \"operations-pool\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Permission\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Permission.NewPool(ctx, \"operationsPool\", \u0026Permission.PoolArgs{\n\t\t\tComment: pulumi.String(\"Managed by Terraform\"),\n\t\t\tPoolId:  pulumi.String(\"operations-pool\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Permission.Pool;\nimport com.pulumi.proxmoxve.Permission.PoolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var operationsPool = new Pool(\"operationsPool\", PoolArgs.builder()\n            .comment(\"Managed by Terraform\")\n            .poolId(\"operations-pool\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  operationsPool:\n    type: proxmoxve:Permission:Pool\n    properties:\n      comment: Managed by Terraform\n      poolId: operations-pool\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nInstances can be imported using the `pool_id`, e.g.,\n\nbash\n\n```sh\n$ pulumi import proxmoxve:Permission/pool:Pool operations_pool operations-pool\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "The pool comment.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/proxmoxve:Permission/PoolMember:PoolMember"
                    },
                    "description": "The pool members.\n"
                },
                "poolId": {
                    "type": "string",
                    "description": "The pool identifier.\n"
                }
            },
            "required": [
                "members",
                "poolId"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "The pool comment.\n"
                },
                "poolId": {
                    "type": "string",
                    "description": "The pool identifier.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "poolId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Pool resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "The pool comment.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/proxmoxve:Permission/PoolMember:PoolMember"
                        },
                        "description": "The pool members.\n"
                    },
                    "poolId": {
                        "type": "string",
                        "description": "The pool identifier.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "proxmoxve:Permission/role:Role": {
            "description": "Manages a role.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@muhlba91/pulumi-proxmoxve\";\n\nconst operationsMonitoring = new proxmoxve.permission.Role(\"operationsMonitoring\", {\n    privileges: [\"VM.Monitor\"],\n    roleId: \"operations-monitoring\",\n});\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\noperations_monitoring = proxmoxve.permission.Role(\"operationsMonitoring\",\n    privileges=[\"VM.Monitor\"],\n    role_id=\"operations-monitoring\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var operationsMonitoring = new ProxmoxVE.Permission.Role(\"operationsMonitoring\", new()\n    {\n        Privileges = new[]\n        {\n            \"VM.Monitor\",\n        },\n        RoleId = \"operations-monitoring\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Permission\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Permission.NewRole(ctx, \"operationsMonitoring\", \u0026Permission.RoleArgs{\n\t\t\tPrivileges: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"VM.Monitor\"),\n\t\t\t},\n\t\t\tRoleId: pulumi.String(\"operations-monitoring\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Permission.Role;\nimport com.pulumi.proxmoxve.Permission.RoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var operationsMonitoring = new Role(\"operationsMonitoring\", RoleArgs.builder()\n            .privileges(\"VM.Monitor\")\n            .roleId(\"operations-monitoring\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  operationsMonitoring:\n    type: proxmoxve:Permission:Role\n    properties:\n      privileges:\n        - VM.Monitor\n      roleId: operations-monitoring\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nInstances can be imported using the `role_id`, e.g.,\n\nbash\n\n```sh\n$ pulumi import proxmoxve:Permission/role:Role operations_monitoring operations-monitoring\n```\n\n",
            "properties": {
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The role privileges.\n"
                },
                "roleId": {
                    "type": "string",
                    "description": "The role identifier.\n"
                }
            },
            "required": [
                "privileges",
                "roleId"
            ],
            "inputProperties": {
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The role privileges.\n"
                },
                "roleId": {
                    "type": "string",
                    "description": "The role identifier.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "privileges",
                "roleId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Role resources.\n",
                "properties": {
                    "privileges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The role privileges.\n"
                    },
                    "roleId": {
                        "type": "string",
                        "description": "The role identifier.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "proxmoxve:Permission/user:User": {
            "description": "Manages a user.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@muhlba91/pulumi-proxmoxve\";\n\nconst operationsMonitoring = new proxmoxve.permission.Role(\"operationsMonitoring\", {\n    roleId: \"operations-monitoring\",\n    privileges: [\"VM.Monitor\"],\n});\nconst operationsAutomation = new proxmoxve.permission.User(\"operationsAutomation\", {\n    acls: [{\n        path: \"/vms/1234\",\n        propagate: true,\n        roleId: operationsMonitoring.roleId,\n    }],\n    comment: \"Managed by Terraform\",\n    password: \"a-strong-password\",\n    userId: \"operations-automation@pve\",\n});\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\noperations_monitoring = proxmoxve.permission.Role(\"operationsMonitoring\",\n    role_id=\"operations-monitoring\",\n    privileges=[\"VM.Monitor\"])\noperations_automation = proxmoxve.permission.User(\"operationsAutomation\",\n    acls=[{\n        \"path\": \"/vms/1234\",\n        \"propagate\": True,\n        \"role_id\": operations_monitoring.role_id,\n    }],\n    comment=\"Managed by Terraform\",\n    password=\"a-strong-password\",\n    user_id=\"operations-automation@pve\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var operationsMonitoring = new ProxmoxVE.Permission.Role(\"operationsMonitoring\", new()\n    {\n        RoleId = \"operations-monitoring\",\n        Privileges = new[]\n        {\n            \"VM.Monitor\",\n        },\n    });\n\n    var operationsAutomation = new ProxmoxVE.Permission.User(\"operationsAutomation\", new()\n    {\n        Acls = new[]\n        {\n            new ProxmoxVE.Permission.Inputs.UserAclArgs\n            {\n                Path = \"/vms/1234\",\n                Propagate = true,\n                RoleId = operationsMonitoring.RoleId,\n            },\n        },\n        Comment = \"Managed by Terraform\",\n        Password = \"a-strong-password\",\n        UserId = \"operations-automation@pve\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Permission\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\toperationsMonitoring, err := Permission.NewRole(ctx, \"operationsMonitoring\", \u0026Permission.RoleArgs{\n\t\t\tRoleId: pulumi.String(\"operations-monitoring\"),\n\t\t\tPrivileges: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"VM.Monitor\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = Permission.NewUser(ctx, \"operationsAutomation\", \u0026Permission.UserArgs{\n\t\t\tAcls: permission.UserAclArray{\n\t\t\t\t\u0026permission.UserAclArgs{\n\t\t\t\t\tPath:      pulumi.String(\"/vms/1234\"),\n\t\t\t\t\tPropagate: pulumi.Bool(true),\n\t\t\t\t\tRoleId:    operationsMonitoring.RoleId,\n\t\t\t\t},\n\t\t\t},\n\t\t\tComment:  pulumi.String(\"Managed by Terraform\"),\n\t\t\tPassword: pulumi.String(\"a-strong-password\"),\n\t\t\tUserId:   pulumi.String(\"operations-automation@pve\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Permission.Role;\nimport com.pulumi.proxmoxve.Permission.RoleArgs;\nimport com.pulumi.proxmoxve.Permission.User;\nimport com.pulumi.proxmoxve.Permission.UserArgs;\nimport com.pulumi.proxmoxve.Permission.inputs.UserAclArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var operationsMonitoring = new Role(\"operationsMonitoring\", RoleArgs.builder()\n            .roleId(\"operations-monitoring\")\n            .privileges(\"VM.Monitor\")\n            .build());\n\n        var operationsAutomation = new User(\"operationsAutomation\", UserArgs.builder()\n            .acls(UserAclArgs.builder()\n                .path(\"/vms/1234\")\n                .propagate(true)\n                .roleId(operationsMonitoring.roleId())\n                .build())\n            .comment(\"Managed by Terraform\")\n            .password(\"a-strong-password\")\n            .userId(\"operations-automation@pve\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  operationsAutomation:\n    type: proxmoxve:Permission:User\n    properties:\n      acls:\n        - path: /vms/1234\n          propagate: true\n          roleId: ${operationsMonitoring.roleId}\n      comment: Managed by Terraform\n      password: a-strong-password\n      userId: operations-automation@pve\n  operationsMonitoring:\n    type: proxmoxve:Permission:Role\n    properties:\n      roleId: operations-monitoring\n      privileges:\n        - VM.Monitor\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nInstances can be imported using the `user_id`, e.g.,\n\nbash\n\n```sh\n$ pulumi import proxmoxve:Permission/user:User operations_automation operations-automation@pve\n```\n\n",
            "properties": {
                "acls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/proxmoxve:Permission/UserAcl:UserAcl"
                    },
                    "description": "The access control list (multiple blocks supported).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "The user comment.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The user's email address.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the user account is enabled.\n"
                },
                "expirationDate": {
                    "type": "string",
                    "description": "The user account's expiration date (RFC 3339).\n"
                },
                "firstName": {
                    "type": "string",
                    "description": "The user's first name.\n"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The user's groups.\n"
                },
                "keys": {
                    "type": "string",
                    "description": "The user's keys.\n"
                },
                "lastName": {
                    "type": "string",
                    "description": "The user's last name.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The user's password. Required for PVE or PAM realms.\n",
                    "secret": true
                },
                "userId": {
                    "type": "string",
                    "description": "The user identifier.\n"
                }
            },
            "required": [
                "userId"
            ],
            "inputProperties": {
                "acls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/proxmoxve:Permission/UserAcl:UserAcl"
                    },
                    "description": "The access control list (multiple blocks supported).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "The user comment.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The user's email address.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the user account is enabled.\n"
                },
                "expirationDate": {
                    "type": "string",
                    "description": "The user account's expiration date (RFC 3339).\n"
                },
                "firstName": {
                    "type": "string",
                    "description": "The user's first name.\n"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The user's groups.\n"
                },
                "keys": {
                    "type": "string",
                    "description": "The user's keys.\n"
                },
                "lastName": {
                    "type": "string",
                    "description": "The user's last name.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The user's password. Required for PVE or PAM realms.\n",
                    "secret": true
                },
                "userId": {
                    "type": "string",
                    "description": "The user identifier.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "acls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/proxmoxve:Permission/UserAcl:UserAcl"
                        },
                        "description": "The access control list (multiple blocks supported).\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "The user comment.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "The user's email address.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the user account is enabled.\n"
                    },
                    "expirationDate": {
                        "type": "string",
                        "description": "The user account's expiration date (RFC 3339).\n"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "The user's first name.\n"
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The user's groups.\n"
                    },
                    "keys": {
                        "type": "string",
                        "description": "The user's keys.\n"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "The user's last name.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The user's password. Required for PVE or PAM realms.\n",
                        "secret": true
                    },
                    "userId": {
                        "type": "string",
                        "description": "The user identifier.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "proxmoxve:Storage/file:File": {
            "description": "Manages a file.\n\n## Example Usage\n\n### Backups (`dump`)\n\n\u003e The resource with this content type uses SSH access to the node. You might need to configure the `ssh` option in the `provider` section.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@muhlba91/pulumi-proxmoxve\";\n\nconst backup = new proxmoxve.storage.File(\"backup\", {\n    contentType: \"dump\",\n    datastoreId: \"local\",\n    nodeName: \"pve\",\n    sourceFile: {\n        path: \"vzdump-lxc-100-2023_11_08-23_10_05.tar\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\nbackup = proxmoxve.storage.File(\"backup\",\n    content_type=\"dump\",\n    datastore_id=\"local\",\n    node_name=\"pve\",\n    source_file={\n        \"path\": \"vzdump-lxc-100-2023_11_08-23_10_05.tar\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var backup = new ProxmoxVE.Storage.File(\"backup\", new()\n    {\n        ContentType = \"dump\",\n        DatastoreId = \"local\",\n        NodeName = \"pve\",\n        SourceFile = new ProxmoxVE.Storage.Inputs.FileSourceFileArgs\n        {\n            Path = \"vzdump-lxc-100-2023_11_08-23_10_05.tar\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Storage\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Storage.NewFile(ctx, \"backup\", \u0026Storage.FileArgs{\n\t\t\tContentType: pulumi.String(\"dump\"),\n\t\t\tDatastoreId: pulumi.String(\"local\"),\n\t\t\tNodeName:    pulumi.String(\"pve\"),\n\t\t\tSourceFile: \u0026storage.FileSourceFileArgs{\n\t\t\t\tPath: pulumi.String(\"vzdump-lxc-100-2023_11_08-23_10_05.tar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Storage.File;\nimport com.pulumi.proxmoxve.Storage.FileArgs;\nimport com.pulumi.proxmoxve.Storage.inputs.FileSourceFileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var backup = new File(\"backup\", FileArgs.builder()\n            .contentType(\"dump\")\n            .datastoreId(\"local\")\n            .nodeName(\"pve\")\n            .sourceFile(FileSourceFileArgs.builder()\n                .path(\"vzdump-lxc-100-2023_11_08-23_10_05.tar\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  backup:\n    type: proxmoxve:Storage:File\n    properties:\n      contentType: dump\n      datastoreId: local\n      nodeName: pve\n      sourceFile:\n        path: vzdump-lxc-100-2023_11_08-23_10_05.tar\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Images\n\n\u003e Consider using `proxmoxve.Download.File` resource instead. Using this resource for images is less efficient (requires to transfer uploaded image to node) though still supported.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@muhlba91/pulumi-proxmoxve\";\n\nconst ubuntuContainerTemplate = new proxmoxve.storage.File(\"ubuntuContainerTemplate\", {\n    contentType: \"iso\",\n    datastoreId: \"local\",\n    nodeName: \"pve\",\n    sourceFile: {\n        path: \"https://cloud-images.ubuntu.com/jammy/20230929/jammy-server-cloudimg-amd64-disk-kvm.img\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\nubuntu_container_template = proxmoxve.storage.File(\"ubuntuContainerTemplate\",\n    content_type=\"iso\",\n    datastore_id=\"local\",\n    node_name=\"pve\",\n    source_file={\n        \"path\": \"https://cloud-images.ubuntu.com/jammy/20230929/jammy-server-cloudimg-amd64-disk-kvm.img\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ubuntuContainerTemplate = new ProxmoxVE.Storage.File(\"ubuntuContainerTemplate\", new()\n    {\n        ContentType = \"iso\",\n        DatastoreId = \"local\",\n        NodeName = \"pve\",\n        SourceFile = new ProxmoxVE.Storage.Inputs.FileSourceFileArgs\n        {\n            Path = \"https://cloud-images.ubuntu.com/jammy/20230929/jammy-server-cloudimg-amd64-disk-kvm.img\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Storage\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Storage.NewFile(ctx, \"ubuntuContainerTemplate\", \u0026Storage.FileArgs{\n\t\t\tContentType: pulumi.String(\"iso\"),\n\t\t\tDatastoreId: pulumi.String(\"local\"),\n\t\t\tNodeName:    pulumi.String(\"pve\"),\n\t\t\tSourceFile: \u0026storage.FileSourceFileArgs{\n\t\t\t\tPath: pulumi.String(\"https://cloud-images.ubuntu.com/jammy/20230929/jammy-server-cloudimg-amd64-disk-kvm.img\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Storage.File;\nimport com.pulumi.proxmoxve.Storage.FileArgs;\nimport com.pulumi.proxmoxve.Storage.inputs.FileSourceFileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var ubuntuContainerTemplate = new File(\"ubuntuContainerTemplate\", FileArgs.builder()\n            .contentType(\"iso\")\n            .datastoreId(\"local\")\n            .nodeName(\"pve\")\n            .sourceFile(FileSourceFileArgs.builder()\n                .path(\"https://cloud-images.ubuntu.com/jammy/20230929/jammy-server-cloudimg-amd64-disk-kvm.img\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ubuntuContainerTemplate:\n    type: proxmoxve:Storage:File\n    properties:\n      contentType: iso\n      datastoreId: local\n      nodeName: pve\n      sourceFile:\n        path: https://cloud-images.ubuntu.com/jammy/20230929/jammy-server-cloudimg-amd64-disk-kvm.img\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Container Template (`vztmpl`)\n\n\u003e Consider using `proxmoxve.Download.File` resource instead. Using this resource for container images is less efficient (requires to transfer uploaded image to node) though still supported.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@muhlba91/pulumi-proxmoxve\";\n\nconst ubuntuContainerTemplate = new proxmoxve.storage.File(\"ubuntuContainerTemplate\", {\n    contentType: \"vztmpl\",\n    datastoreId: \"local\",\n    nodeName: \"first-node\",\n    sourceFile: {\n        path: \"https://download.proxmox.com/images/system/ubuntu-20.04-standard_20.04-1_amd64.tar.gz\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\nubuntu_container_template = proxmoxve.storage.File(\"ubuntuContainerTemplate\",\n    content_type=\"vztmpl\",\n    datastore_id=\"local\",\n    node_name=\"first-node\",\n    source_file={\n        \"path\": \"https://download.proxmox.com/images/system/ubuntu-20.04-standard_20.04-1_amd64.tar.gz\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ubuntuContainerTemplate = new ProxmoxVE.Storage.File(\"ubuntuContainerTemplate\", new()\n    {\n        ContentType = \"vztmpl\",\n        DatastoreId = \"local\",\n        NodeName = \"first-node\",\n        SourceFile = new ProxmoxVE.Storage.Inputs.FileSourceFileArgs\n        {\n            Path = \"https://download.proxmox.com/images/system/ubuntu-20.04-standard_20.04-1_amd64.tar.gz\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Storage\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Storage.NewFile(ctx, \"ubuntuContainerTemplate\", \u0026Storage.FileArgs{\n\t\t\tContentType: pulumi.String(\"vztmpl\"),\n\t\t\tDatastoreId: pulumi.String(\"local\"),\n\t\t\tNodeName:    pulumi.String(\"first-node\"),\n\t\t\tSourceFile: \u0026storage.FileSourceFileArgs{\n\t\t\t\tPath: pulumi.String(\"https://download.proxmox.com/images/system/ubuntu-20.04-standard_20.04-1_amd64.tar.gz\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Storage.File;\nimport com.pulumi.proxmoxve.Storage.FileArgs;\nimport com.pulumi.proxmoxve.Storage.inputs.FileSourceFileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var ubuntuContainerTemplate = new File(\"ubuntuContainerTemplate\", FileArgs.builder()\n            .contentType(\"vztmpl\")\n            .datastoreId(\"local\")\n            .nodeName(\"first-node\")\n            .sourceFile(FileSourceFileArgs.builder()\n                .path(\"https://download.proxmox.com/images/system/ubuntu-20.04-standard_20.04-1_amd64.tar.gz\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ubuntuContainerTemplate:\n    type: proxmoxve:Storage:File\n    properties:\n      contentType: vztmpl\n      datastoreId: local\n      nodeName: first-node\n      sourceFile:\n        path: https://download.proxmox.com/images/system/ubuntu-20.04-standard_20.04-1_amd64.tar.gz\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Important Notes\n\nThe Proxmox VE API endpoint for file uploads does not support chunked transfer\nencoding, which means that we must first store the source file as a temporary\nfile locally before uploading it.\n\nYou must ensure that you have at least `Size-in-MB * 2 + 1` MB of storage space\navailable (twice the size plus overhead because a multipart payload needs to be\ncreated as another temporary file).\n\nBy default, if the specified file already exists, the resource will\nunconditionally replace it and take ownership of the resource. On destruction,\nthe file will be deleted as if it did not exist before. If you want to prevent\nthe resource from replacing the file, set `overwrite` to `false`.\n\n## Import\n\nInstances can be imported using the `node_name`, `datastore_id`, `content_type`\n\nand the `file_name` in the following format:\n\ntext\n\nnode_name:datastore_id/content_type/file_name\n\nExample:\n\nbash\n\n```sh\n$ pulumi import proxmoxve:Storage/file:File cloud_config pve/local:snippets/example.cloud-config.yaml\n```\n\n",
            "properties": {
                "contentType": {
                    "type": "string",
                    "description": "The content type. If not specified, the content\ntype will be inferred from the file extension. Valid values are:\n"
                },
                "datastoreId": {
                    "type": "string",
                    "description": "The datastore id.\n"
                },
                "fileMode": {
                    "type": "string",
                    "description": "The file mode in octal format, e.g. `0700` or `600`. Note that the prefixes `0o` and `0x` is not supported! Setting this attribute is also only allowed for `root@pam` authenticated user.\n"
                },
                "fileModificationDate": {
                    "type": "string",
                    "description": "The file modification date (RFC 3339).\n"
                },
                "fileName": {
                    "type": "string",
                    "description": "The file name.\n"
                },
                "fileSize": {
                    "type": "integer",
                    "description": "The file size in bytes.\n"
                },
                "fileTag": {
                    "type": "string",
                    "description": "The file tag.\n"
                },
                "nodeName": {
                    "type": "string",
                    "description": "The node name.\n"
                },
                "overwrite": {
                    "type": "boolean",
                    "description": "Whether to overwrite an existing file (defaults to\n`true`).\n"
                },
                "sourceFile": {
                    "$ref": "#/types/proxmoxve:Storage/FileSourceFile:FileSourceFile",
                    "description": "The source file (conflicts with `source_raw`),\ncould be a local file or a URL. If the source file is a URL, the file will\nbe downloaded and stored locally before uploading it to Proxmox VE.\n"
                },
                "sourceRaw": {
                    "$ref": "#/types/proxmoxve:Storage/FileSourceRaw:FileSourceRaw",
                    "description": "The raw source (conflicts with `source_file`).\n"
                },
                "timeoutUpload": {
                    "type": "integer",
                    "description": "Timeout for uploading ISO/VSTMPL files in\nseconds (defaults to 1800).\n"
                }
            },
            "required": [
                "contentType",
                "datastoreId",
                "fileModificationDate",
                "fileName",
                "fileSize",
                "fileTag",
                "nodeName"
            ],
            "inputProperties": {
                "contentType": {
                    "type": "string",
                    "description": "The content type. If not specified, the content\ntype will be inferred from the file extension. Valid values are:\n",
                    "willReplaceOnChanges": true
                },
                "datastoreId": {
                    "type": "string",
                    "description": "The datastore id.\n",
                    "willReplaceOnChanges": true
                },
                "fileMode": {
                    "type": "string",
                    "description": "The file mode in octal format, e.g. `0700` or `600`. Note that the prefixes `0o` and `0x` is not supported! Setting this attribute is also only allowed for `root@pam` authenticated user.\n",
                    "willReplaceOnChanges": true
                },
                "nodeName": {
                    "type": "string",
                    "description": "The node name.\n",
                    "willReplaceOnChanges": true
                },
                "overwrite": {
                    "type": "boolean",
                    "description": "Whether to overwrite an existing file (defaults to\n`true`).\n"
                },
                "sourceFile": {
                    "$ref": "#/types/proxmoxve:Storage/FileSourceFile:FileSourceFile",
                    "description": "The source file (conflicts with `source_raw`),\ncould be a local file or a URL. If the source file is a URL, the file will\nbe downloaded and stored locally before uploading it to Proxmox VE.\n",
                    "willReplaceOnChanges": true
                },
                "sourceRaw": {
                    "$ref": "#/types/proxmoxve:Storage/FileSourceRaw:FileSourceRaw",
                    "description": "The raw source (conflicts with `source_file`).\n",
                    "willReplaceOnChanges": true
                },
                "timeoutUpload": {
                    "type": "integer",
                    "description": "Timeout for uploading ISO/VSTMPL files in\nseconds (defaults to 1800).\n"
                }
            },
            "requiredInputs": [
                "datastoreId",
                "nodeName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering File resources.\n",
                "properties": {
                    "contentType": {
                        "type": "string",
                        "description": "The content type. If not specified, the content\ntype will be inferred from the file extension. Valid values are:\n",
                        "willReplaceOnChanges": true
                    },
                    "datastoreId": {
                        "type": "string",
                        "description": "The datastore id.\n",
                        "willReplaceOnChanges": true
                    },
                    "fileMode": {
                        "type": "string",
                        "description": "The file mode in octal format, e.g. `0700` or `600`. Note that the prefixes `0o` and `0x` is not supported! Setting this attribute is also only allowed for `root@pam` authenticated user.\n",
                        "willReplaceOnChanges": true
                    },
                    "fileModificationDate": {
                        "type": "string",
                        "description": "The file modification date (RFC 3339).\n",
                        "willReplaceOnChanges": true
                    },
                    "fileName": {
                        "type": "string",
                        "description": "The file name.\n"
                    },
                    "fileSize": {
                        "type": "integer",
                        "description": "The file size in bytes.\n",
                        "willReplaceOnChanges": true
                    },
                    "fileTag": {
                        "type": "string",
                        "description": "The file tag.\n",
                        "willReplaceOnChanges": true
                    },
                    "nodeName": {
                        "type": "string",
                        "description": "The node name.\n",
                        "willReplaceOnChanges": true
                    },
                    "overwrite": {
                        "type": "boolean",
                        "description": "Whether to overwrite an existing file (defaults to\n`true`).\n"
                    },
                    "sourceFile": {
                        "$ref": "#/types/proxmoxve:Storage/FileSourceFile:FileSourceFile",
                        "description": "The source file (conflicts with `source_raw`),\ncould be a local file or a URL. If the source file is a URL, the file will\nbe downloaded and stored locally before uploading it to Proxmox VE.\n",
                        "willReplaceOnChanges": true
                    },
                    "sourceRaw": {
                        "$ref": "#/types/proxmoxve:Storage/FileSourceRaw:FileSourceRaw",
                        "description": "The raw source (conflicts with `source_file`).\n",
                        "willReplaceOnChanges": true
                    },
                    "timeoutUpload": {
                        "type": "integer",
                        "description": "Timeout for uploading ISO/VSTMPL files in\nseconds (defaults to 1800).\n"
                    }
                },
                "type": "object"
            }
        },
        "proxmoxve:User/token:Token": {
            "description": "User API tokens.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@muhlba91/pulumi-proxmoxve\";\n\n// if creating a user token, the user must be created first\nconst user = new proxmoxve.permission.User(\"user\", {\n    comment: \"Managed by Terraform\",\n    email: \"user@pve\",\n    enabled: true,\n    expirationDate: \"2034-01-01T22:00:00Z\",\n    userId: \"user@pve\",\n});\nconst userToken = new proxmoxve.user.Token(\"userToken\", {\n    comment: \"Managed by Terraform\",\n    expirationDate: \"2033-01-01T22:00:00Z\",\n    tokenName: \"tk1\",\n    userId: user.userId,\n});\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\n# if creating a user token, the user must be created first\nuser = proxmoxve.permission.User(\"user\",\n    comment=\"Managed by Terraform\",\n    email=\"user@pve\",\n    enabled=True,\n    expiration_date=\"2034-01-01T22:00:00Z\",\n    user_id=\"user@pve\")\nuser_token = proxmoxve.user.Token(\"userToken\",\n    comment=\"Managed by Terraform\",\n    expiration_date=\"2033-01-01T22:00:00Z\",\n    token_name=\"tk1\",\n    user_id=user.user_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // if creating a user token, the user must be created first\n    var user = new ProxmoxVE.Permission.User(\"user\", new()\n    {\n        Comment = \"Managed by Terraform\",\n        Email = \"user@pve\",\n        Enabled = true,\n        ExpirationDate = \"2034-01-01T22:00:00Z\",\n        UserId = \"user@pve\",\n    });\n\n    var userToken = new ProxmoxVE.User.Token(\"userToken\", new()\n    {\n        Comment = \"Managed by Terraform\",\n        ExpirationDate = \"2033-01-01T22:00:00Z\",\n        TokenName = \"tk1\",\n        UserId = user.UserId,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Permission\"\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/User\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// if creating a user token, the user must be created first\n\t\tuser, err := Permission.NewUser(ctx, \"user\", \u0026Permission.UserArgs{\n\t\t\tComment:        pulumi.String(\"Managed by Terraform\"),\n\t\t\tEmail:          pulumi.String(\"user@pve\"),\n\t\t\tEnabled:        pulumi.Bool(true),\n\t\t\tExpirationDate: pulumi.String(\"2034-01-01T22:00:00Z\"),\n\t\t\tUserId:         pulumi.String(\"user@pve\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = User.NewToken(ctx, \"userToken\", \u0026User.TokenArgs{\n\t\t\tComment:        pulumi.String(\"Managed by Terraform\"),\n\t\t\tExpirationDate: pulumi.String(\"2033-01-01T22:00:00Z\"),\n\t\t\tTokenName:      pulumi.String(\"tk1\"),\n\t\t\tUserId:         user.UserId,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Permission.User;\nimport com.pulumi.proxmoxve.Permission.UserArgs;\nimport com.pulumi.proxmoxve.User.Token;\nimport com.pulumi.proxmoxve.User.TokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // if creating a user token, the user must be created first\n        var user = new User(\"user\", UserArgs.builder()\n            .comment(\"Managed by Terraform\")\n            .email(\"user@pve\")\n            .enabled(true)\n            .expirationDate(\"2034-01-01T22:00:00Z\")\n            .userId(\"user@pve\")\n            .build());\n\n        var userToken = new Token(\"userToken\", TokenArgs.builder()\n            .comment(\"Managed by Terraform\")\n            .expirationDate(\"2033-01-01T22:00:00Z\")\n            .tokenName(\"tk1\")\n            .userId(user.userId())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # if creating a user token, the user must be created first\n  user:\n    type: proxmoxve:Permission:User\n    properties:\n      comment: Managed by Terraform\n      email: user@pve\n      enabled: true\n      expirationDate: 2034-01-01T22:00:00Z\n      userId: user@pve\n  userToken:\n    type: proxmoxve:User:Token\n    properties:\n      comment: Managed by Terraform\n      expirationDate: 2033-01-01T22:00:00Z\n      tokenName: tk1\n      userId: ${user.userId}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n#!/usr/bin/env sh\n\n#Tokens can be imported using they identifiers in format `user_id!token_name` format, e.g.:\n\n```sh\n$ pulumi import proxmoxve:User/token:Token token1 user@pve!token1\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Comment for the token.\n"
                },
                "expirationDate": {
                    "type": "string",
                    "description": "Expiration date for the token.\n"
                },
                "privilegesSeparation": {
                    "type": "boolean",
                    "description": "Restrict API token privileges with separate ACLs (default), or give full privileges of corresponding user.\n"
                },
                "tokenName": {
                    "type": "string",
                    "description": "User-specific token identifier.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "User identifier.\n"
                },
                "value": {
                    "type": "string",
                    "description": "API token value used for authentication. It is populated only when creating a new token, and can't be retrieved at import.\n",
                    "secret": true
                }
            },
            "required": [
                "privilegesSeparation",
                "tokenName",
                "userId",
                "value"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Comment for the token.\n"
                },
                "expirationDate": {
                    "type": "string",
                    "description": "Expiration date for the token.\n"
                },
                "privilegesSeparation": {
                    "type": "boolean",
                    "description": "Restrict API token privileges with separate ACLs (default), or give full privileges of corresponding user.\n"
                },
                "tokenName": {
                    "type": "string",
                    "description": "User-specific token identifier.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "User identifier.\n"
                }
            },
            "requiredInputs": [
                "tokenName",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Token resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Comment for the token.\n"
                    },
                    "expirationDate": {
                        "type": "string",
                        "description": "Expiration date for the token.\n"
                    },
                    "privilegesSeparation": {
                        "type": "boolean",
                        "description": "Restrict API token privileges with separate ACLs (default), or give full privileges of corresponding user.\n"
                    },
                    "tokenName": {
                        "type": "string",
                        "description": "User-specific token identifier.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "User identifier.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "API token value used for authentication. It is populated only when creating a new token, and can't be retrieved at import.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "proxmoxve:VM/virtualMachine2:VirtualMachine2": {
            "description": "!\u003e **DO NOT USE**\nThis is an experimental implementation of a Proxmox VM resource using Plugin Framework.\u003cbr\u003e\u003cbr\u003eIt is a Proof of Concept, highly experimental and **will** change in future. It does not support all features of the Proxmox API for VMs and **MUST NOT** be used in production.\n\n\u003e Many attributes are marked as **optional** _and_ **computed** in the schema,\nhence you may seem added to the plan with \"(known after apply)\" status, even if they are not set in the configuration.\nThis is done to support the `clone` operation, when a VM is created from an existing VM or template,\nand the source attributes are copied to the clone.\u003cbr\u003e\u003cbr\u003e\nComputed attributes allow the provider to set those attributes without user input.\nThe attributes are also marked as optional to allow the practitioner to set (or overwrite) them if needed.\n",
            "properties": {
                "cdrom": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/proxmoxve:VM/VirtualMachine2Cdrom:VirtualMachine2Cdrom"
                    },
                    "description": "The CD-ROM configuration. The key is the interface of the CD-ROM, could be one of `ideN`, `sataN`, `scsiN`, where N is the index of the interface. Note that `q35` machine type only supports `ide0` and `ide2` of IDE interfaces.\n"
                },
                "clone": {
                    "$ref": "#/types/proxmoxve:VM/VirtualMachine2Clone:VirtualMachine2Clone",
                    "description": "The cloning configuration.\n"
                },
                "cpu": {
                    "$ref": "#/types/proxmoxve:VM/VirtualMachine2Cpu:VirtualMachine2Cpu",
                    "description": "The CPU configuration.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the VM.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the VM. Doesn't have to be unique.\n"
                },
                "nodeName": {
                    "type": "string",
                    "description": "The name of the node where the VM is provisioned.\n"
                },
                "stopOnDestroy": {
                    "type": "boolean",
                    "description": "Set to true to stop (rather than shutdown) the VM on destroy (defaults to `false`).\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags assigned to the VM.\n"
                },
                "template": {
                    "type": "boolean",
                    "description": "Set to true to create a VM template.\n"
                },
                "timeouts": {
                    "$ref": "#/types/proxmoxve:VM/VirtualMachine2Timeouts:VirtualMachine2Timeouts"
                },
                "vga": {
                    "$ref": "#/types/proxmoxve:VM/VirtualMachine2Vga:VirtualMachine2Vga",
                    "description": "Configure the VGA Hardware. If you want to use high resolution modes (\u003e= 1280x1024x16) you may need to increase the vga memory option. Since QEMU 2.9 the default VGA display type is `std` for all OS types besides some Windows versions (XP and older) which use `cirrus`. The `qxl` option enables the SPICE display server. For win* OS you can select how many independent displays you want, Linux guests can add displays themself. You can also run without any graphic card, using a serial device as terminal. See the [Proxmox documentation](https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm_virtual_machines_settings) section 10.2.8 for more information and available configuration parameters.\n"
                }
            },
            "required": [
                "cdrom",
                "cpu",
                "name",
                "nodeName",
                "stopOnDestroy",
                "tags",
                "vga"
            ],
            "inputProperties": {
                "cdrom": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/proxmoxve:VM/VirtualMachine2Cdrom:VirtualMachine2Cdrom"
                    },
                    "description": "The CD-ROM configuration. The key is the interface of the CD-ROM, could be one of `ideN`, `sataN`, `scsiN`, where N is the index of the interface. Note that `q35` machine type only supports `ide0` and `ide2` of IDE interfaces.\n"
                },
                "clone": {
                    "$ref": "#/types/proxmoxve:VM/VirtualMachine2Clone:VirtualMachine2Clone",
                    "description": "The cloning configuration.\n"
                },
                "cpu": {
                    "$ref": "#/types/proxmoxve:VM/VirtualMachine2Cpu:VirtualMachine2Cpu",
                    "description": "The CPU configuration.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the VM.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the VM. Doesn't have to be unique.\n"
                },
                "nodeName": {
                    "type": "string",
                    "description": "The name of the node where the VM is provisioned.\n"
                },
                "stopOnDestroy": {
                    "type": "boolean",
                    "description": "Set to true to stop (rather than shutdown) the VM on destroy (defaults to `false`).\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags assigned to the VM.\n"
                },
                "template": {
                    "type": "boolean",
                    "description": "Set to true to create a VM template.\n"
                },
                "timeouts": {
                    "$ref": "#/types/proxmoxve:VM/VirtualMachine2Timeouts:VirtualMachine2Timeouts"
                },
                "vga": {
                    "$ref": "#/types/proxmoxve:VM/VirtualMachine2Vga:VirtualMachine2Vga",
                    "description": "Configure the VGA Hardware. If you want to use high resolution modes (\u003e= 1280x1024x16) you may need to increase the vga memory option. Since QEMU 2.9 the default VGA display type is `std` for all OS types besides some Windows versions (XP and older) which use `cirrus`. The `qxl` option enables the SPICE display server. For win* OS you can select how many independent displays you want, Linux guests can add displays themself. You can also run without any graphic card, using a serial device as terminal. See the [Proxmox documentation](https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm_virtual_machines_settings) section 10.2.8 for more information and available configuration parameters.\n"
                }
            },
            "requiredInputs": [
                "nodeName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VirtualMachine2 resources.\n",
                "properties": {
                    "cdrom": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/proxmoxve:VM/VirtualMachine2Cdrom:VirtualMachine2Cdrom"
                        },
                        "description": "The CD-ROM configuration. The key is the interface of the CD-ROM, could be one of `ideN`, `sataN`, `scsiN`, where N is the index of the interface. Note that `q35` machine type only supports `ide0` and `ide2` of IDE interfaces.\n"
                    },
                    "clone": {
                        "$ref": "#/types/proxmoxve:VM/VirtualMachine2Clone:VirtualMachine2Clone",
                        "description": "The cloning configuration.\n"
                    },
                    "cpu": {
                        "$ref": "#/types/proxmoxve:VM/VirtualMachine2Cpu:VirtualMachine2Cpu",
                        "description": "The CPU configuration.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the VM.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the VM. Doesn't have to be unique.\n"
                    },
                    "nodeName": {
                        "type": "string",
                        "description": "The name of the node where the VM is provisioned.\n"
                    },
                    "stopOnDestroy": {
                        "type": "boolean",
                        "description": "Set to true to stop (rather than shutdown) the VM on destroy (defaults to `false`).\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags assigned to the VM.\n"
                    },
                    "template": {
                        "type": "boolean",
                        "description": "Set to true to create a VM template.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/proxmoxve:VM/VirtualMachine2Timeouts:VirtualMachine2Timeouts"
                    },
                    "vga": {
                        "$ref": "#/types/proxmoxve:VM/VirtualMachine2Vga:VirtualMachine2Vga",
                        "description": "Configure the VGA Hardware. If you want to use high resolution modes (\u003e= 1280x1024x16) you may need to increase the vga memory option. Since QEMU 2.9 the default VGA display type is `std` for all OS types besides some Windows versions (XP and older) which use `cirrus`. The `qxl` option enables the SPICE display server. For win* OS you can select how many independent displays you want, Linux guests can add displays themself. You can also run without any graphic card, using a serial device as terminal. See the [Proxmox documentation](https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm_virtual_machines_settings) section 10.2.8 for more information and available configuration parameters.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "proxmoxve:index/vm2:Vm2"
                }
            ]
        },
        "proxmoxve:VM/virtualMachine:VirtualMachine": {
            "description": "Manages a virtual machine.\n\n\u003e This resource uses SSH access to the node. You might need to configure the `ssh` option in the `provider` section.\n\n## Import\n\nInstances can be imported using the `node_name` and the `vm_id`, e.g.,\n\nbash\n\n```sh\n$ pulumi import proxmoxve:VM/virtualMachine:VirtualMachine ubuntu_vm first-node/4321\n```\n\n",
            "properties": {
                "acpi": {
                    "type": "boolean",
                    "description": "Whether to enable ACPI (defaults to `true`).\n"
                },
                "agent": {
                    "$ref": "#/types/proxmoxve:VM/VirtualMachineAgent:VirtualMachineAgent",
                    "description": "The QEMU agent configuration.\n"
                },
                "audioDevice": {
                    "$ref": "#/types/proxmoxve:VM/VirtualMachineAudioDevice:VirtualMachineAudioDevice",
                    "description": "An audio device.\n"
                },
                "bios": {
                    "type": "string",
                    "description": "The BIOS implementation (defaults to `seabios`).\n"
                },
                "bootOrders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify a list of devices to boot from in the order\nthey appear in the list (defaults to `[]`).\n"
                },
                "cdrom": {
                    "$ref": "#/types/proxmoxve:VM/VirtualMachineCdrom:VirtualMachineCdrom",
                    "description": "The CDROM configuration.\n"
                },
                "clone": {
                    "$ref": "#/types/proxmoxve:VM/VirtualMachineClone:VirtualMachineClone",
                    "description": "The cloning configuration.\n"
                },
                "cpu": {
                    "$ref": "#/types/proxmoxve:VM/VirtualMachineCpu:VirtualMachineCpu",
                    "description": "The CPU configuration.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description.\n"
                },
                "disks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/proxmoxve:VM/VirtualMachineDisk:VirtualMachineDisk"
                    },
                    "description": "A disk (multiple blocks supported).\n"
                },
                "efiDisk": {
                    "$ref": "#/types/proxmoxve:VM/VirtualMachineEfiDisk:VirtualMachineEfiDisk",
                    "description": "The efi disk device (required if `bios` is set\nto `ovmf`)\n"
                },
                "hookScriptFileId": {
                    "type": "string",
                    "description": "The identifier for a file containing a hook script (needs to be executable, e.g. by using the `proxmox_virtual_environment_file.file_mode` attribute).\n"
                },
                "hostpcis": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/proxmoxve:VM/VirtualMachineHostpci:VirtualMachineHostpci"
                    },
                    "description": "A host PCI device mapping (multiple blocks supported).\n"
                },
                "initialization": {
                    "$ref": "#/types/proxmoxve:VM/VirtualMachineInitialization:VirtualMachineInitialization",
                    "description": "The cloud-init configuration.\n"
                },
                "ipv4Addresses": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "description": "The IPv4 addresses per network interface published by the\nQEMU agent (empty list when `agent.enabled` is `false`)\n"
                },
                "ipv6Addresses": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "description": "The IPv6 addresses per network interface published by the\nQEMU agent (empty list when `agent.enabled` is `false`)\n"
                },
                "keyboardLayout": {
                    "type": "string",
                    "description": "The keyboard layout (defaults to `en-us`).\n"
                },
                "kvmArguments": {
                    "type": "string",
                    "description": "Arbitrary arguments passed to kvm.\n"
                },
                "macAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The MAC addresses published by the QEMU agent with fallback\nto the network device configuration, if the agent is disabled\n"
                },
                "machine": {
                    "type": "string",
                    "description": "The VM machine type (defaults to `pc`).\n"
                },
                "memory": {
                    "$ref": "#/types/proxmoxve:VM/VirtualMachineMemory:VirtualMachineMemory",
                    "description": "The memory configuration.\n"
                },
                "migrate": {
                    "type": "boolean",
                    "description": "Migrate the VM on node change instead of re-creating\nit (defaults to `false`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The virtual machine name.\n"
                },
                "networkDevices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/proxmoxve:VM/VirtualMachineNetworkDevice:VirtualMachineNetworkDevice"
                    },
                    "description": "A network device (multiple blocks supported).\n"
                },
                "networkInterfaceNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The network interface names published by the QEMU\nagent (empty list when `agent.enabled` is `false`)\n"
                },
                "nodeName": {
                    "type": "string",
                    "description": "The name of the node to assign the virtual machine\nto.\n"
                },
                "numas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/proxmoxve:VM/VirtualMachineNuma:VirtualMachineNuma"
                    },
                    "description": "The NUMA configuration.\n"
                },
                "onBoot": {
                    "type": "boolean",
                    "description": "Specifies whether a VM will be started during system\nboot. (defaults to `true`)\n"
                },
                "operatingSystem": {
                    "$ref": "#/types/proxmoxve:VM/VirtualMachineOperatingSystem:VirtualMachineOperatingSystem",
                    "description": "The Operating System configuration.\n"
                },
                "poolId": {
                    "type": "string",
                    "description": "The identifier for a pool to assign the virtual machine to.\n"
                },
                "protection": {
                    "type": "boolean",
                    "description": "Sets the protection flag of the VM. This will disable the remove VM and remove disk operations (defaults to `false`).\n"
                },
                "reboot": {
                    "type": "boolean",
                    "description": "Reboot the VM after initial creation. (defaults to `false`)\n"
                },
                "scsiHardware": {
                    "type": "string",
                    "description": "The SCSI hardware type (defaults to\n`virtio-scsi-pci`).\n"
                },
                "serialDevices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/proxmoxve:VM/VirtualMachineSerialDevice:VirtualMachineSerialDevice"
                    },
                    "description": "A serial device (multiple blocks supported).\n"
                },
                "smbios": {
                    "$ref": "#/types/proxmoxve:VM/VirtualMachineSmbios:VirtualMachineSmbios",
                    "description": "The SMBIOS (type1) settings for the VM.\n"
                },
                "started": {
                    "type": "boolean",
                    "description": "Whether to start the virtual machine (defaults\nto `true`).\n"
                },
                "startup": {
                    "$ref": "#/types/proxmoxve:VM/VirtualMachineStartup:VirtualMachineStartup",
                    "description": "Defines startup and shutdown behavior of the VM.\n"
                },
                "stopOnDestroy": {
                    "type": "boolean",
                    "description": "Whether to stop rather than shutdown on VM destroy (defaults to `false`)\n"
                },
                "tabletDevice": {
                    "type": "boolean",
                    "description": "Whether to enable the USB tablet device (defaults\nto `true`).\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags of the VM. This is only meta information (\ndefaults to `[]`). Note: Proxmox always sorts the VM tags. If the list in\ntemplate is not sorted, then Proxmox will always report a difference on the\nresource. You may use the `ignore_changes` lifecycle meta-argument to ignore\nchanges to this attribute.\n"
                },
                "template": {
                    "type": "boolean",
                    "description": "Whether to create a template (defaults to `false`).\n"
                },
                "timeoutClone": {
                    "type": "integer",
                    "description": "Timeout for cloning a VM in seconds (defaults to\n1800).\n"
                },
                "timeoutCreate": {
                    "type": "integer",
                    "description": "Timeout for creating a VM in seconds (defaults to\n1800).\n"
                },
                "timeoutMigrate": {
                    "type": "integer",
                    "description": "Timeout for migrating the VM (defaults to\n1800).\n"
                },
                "timeoutMoveDisk": {
                    "type": "integer",
                    "description": "MoveDisk timeout\n",
                    "deprecationMessage": "This field is deprecated and will be removed in a future release. An overall operation timeout (timeout_create / timeout_clone / timeout_migrate) is used instead."
                },
                "timeoutReboot": {
                    "type": "integer",
                    "description": "Timeout for rebooting a VM in seconds (defaults\nto 1800).\n"
                },
                "timeoutShutdownVm": {
                    "type": "integer",
                    "description": "Timeout for shutting down a VM in seconds (\ndefaults to 1800).\n"
                },
                "timeoutStartVm": {
                    "type": "integer",
                    "description": "Timeout for starting a VM in seconds (defaults\nto 1800).\n"
                },
                "timeoutStopVm": {
                    "type": "integer",
                    "description": "Timeout for stopping a VM in seconds (defaults\nto 300).\n"
                },
                "tpmState": {
                    "$ref": "#/types/proxmoxve:VM/VirtualMachineTpmState:VirtualMachineTpmState",
                    "description": "The TPM state device.\n"
                },
                "usbs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/proxmoxve:VM/VirtualMachineUsb:VirtualMachineUsb"
                    },
                    "description": "A host USB device mapping (multiple blocks supported).\n"
                },
                "vga": {
                    "$ref": "#/types/proxmoxve:VM/VirtualMachineVga:VirtualMachineVga",
                    "description": "The VGA configuration.\n"
                },
                "vmId": {
                    "type": "integer",
                    "description": "The VM identifier.\n"
                }
            },
            "required": [
                "ipv4Addresses",
                "ipv6Addresses",
                "macAddresses",
                "name",
                "networkInterfaceNames",
                "nodeName",
                "vmId"
            ],
            "inputProperties": {
                "acpi": {
                    "type": "boolean",
                    "description": "Whether to enable ACPI (defaults to `true`).\n"
                },
                "agent": {
                    "$ref": "#/types/proxmoxve:VM/VirtualMachineAgent:VirtualMachineAgent",
                    "description": "The QEMU agent configuration.\n"
                },
                "audioDevice": {
                    "$ref": "#/types/proxmoxve:VM/VirtualMachineAudioDevice:VirtualMachineAudioDevice",
                    "description": "An audio device.\n"
                },
                "bios": {
                    "type": "string",
                    "description": "The BIOS implementation (defaults to `seabios`).\n"
                },
                "bootOrders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify a list of devices to boot from in the order\nthey appear in the list (defaults to `[]`).\n"
                },
                "cdrom": {
                    "$ref": "#/types/proxmoxve:VM/VirtualMachineCdrom:VirtualMachineCdrom",
                    "description": "The CDROM configuration.\n"
                },
                "clone": {
                    "$ref": "#/types/proxmoxve:VM/VirtualMachineClone:VirtualMachineClone",
                    "description": "The cloning configuration.\n"
                },
                "cpu": {
                    "$ref": "#/types/proxmoxve:VM/VirtualMachineCpu:VirtualMachineCpu",
                    "description": "The CPU configuration.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description.\n"
                },
                "disks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/proxmoxve:VM/VirtualMachineDisk:VirtualMachineDisk"
                    },
                    "description": "A disk (multiple blocks supported).\n"
                },
                "efiDisk": {
                    "$ref": "#/types/proxmoxve:VM/VirtualMachineEfiDisk:VirtualMachineEfiDisk",
                    "description": "The efi disk device (required if `bios` is set\nto `ovmf`)\n",
                    "willReplaceOnChanges": true
                },
                "hookScriptFileId": {
                    "type": "string",
                    "description": "The identifier for a file containing a hook script (needs to be executable, e.g. by using the `proxmox_virtual_environment_file.file_mode` attribute).\n"
                },
                "hostpcis": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/proxmoxve:VM/VirtualMachineHostpci:VirtualMachineHostpci"
                    },
                    "description": "A host PCI device mapping (multiple blocks supported).\n"
                },
                "initialization": {
                    "$ref": "#/types/proxmoxve:VM/VirtualMachineInitialization:VirtualMachineInitialization",
                    "description": "The cloud-init configuration.\n"
                },
                "keyboardLayout": {
                    "type": "string",
                    "description": "The keyboard layout (defaults to `en-us`).\n"
                },
                "kvmArguments": {
                    "type": "string",
                    "description": "Arbitrary arguments passed to kvm.\n"
                },
                "macAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The MAC addresses published by the QEMU agent with fallback\nto the network device configuration, if the agent is disabled\n"
                },
                "machine": {
                    "type": "string",
                    "description": "The VM machine type (defaults to `pc`).\n"
                },
                "memory": {
                    "$ref": "#/types/proxmoxve:VM/VirtualMachineMemory:VirtualMachineMemory",
                    "description": "The memory configuration.\n"
                },
                "migrate": {
                    "type": "boolean",
                    "description": "Migrate the VM on node change instead of re-creating\nit (defaults to `false`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The virtual machine name.\n"
                },
                "networkDevices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/proxmoxve:VM/VirtualMachineNetworkDevice:VirtualMachineNetworkDevice"
                    },
                    "description": "A network device (multiple blocks supported).\n"
                },
                "nodeName": {
                    "type": "string",
                    "description": "The name of the node to assign the virtual machine\nto.\n"
                },
                "numas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/proxmoxve:VM/VirtualMachineNuma:VirtualMachineNuma"
                    },
                    "description": "The NUMA configuration.\n"
                },
                "onBoot": {
                    "type": "boolean",
                    "description": "Specifies whether a VM will be started during system\nboot. (defaults to `true`)\n"
                },
                "operatingSystem": {
                    "$ref": "#/types/proxmoxve:VM/VirtualMachineOperatingSystem:VirtualMachineOperatingSystem",
                    "description": "The Operating System configuration.\n"
                },
                "poolId": {
                    "type": "string",
                    "description": "The identifier for a pool to assign the virtual machine to.\n"
                },
                "protection": {
                    "type": "boolean",
                    "description": "Sets the protection flag of the VM. This will disable the remove VM and remove disk operations (defaults to `false`).\n"
                },
                "reboot": {
                    "type": "boolean",
                    "description": "Reboot the VM after initial creation. (defaults to `false`)\n"
                },
                "scsiHardware": {
                    "type": "string",
                    "description": "The SCSI hardware type (defaults to\n`virtio-scsi-pci`).\n"
                },
                "serialDevices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/proxmoxve:VM/VirtualMachineSerialDevice:VirtualMachineSerialDevice"
                    },
                    "description": "A serial device (multiple blocks supported).\n"
                },
                "smbios": {
                    "$ref": "#/types/proxmoxve:VM/VirtualMachineSmbios:VirtualMachineSmbios",
                    "description": "The SMBIOS (type1) settings for the VM.\n"
                },
                "started": {
                    "type": "boolean",
                    "description": "Whether to start the virtual machine (defaults\nto `true`).\n"
                },
                "startup": {
                    "$ref": "#/types/proxmoxve:VM/VirtualMachineStartup:VirtualMachineStartup",
                    "description": "Defines startup and shutdown behavior of the VM.\n"
                },
                "stopOnDestroy": {
                    "type": "boolean",
                    "description": "Whether to stop rather than shutdown on VM destroy (defaults to `false`)\n"
                },
                "tabletDevice": {
                    "type": "boolean",
                    "description": "Whether to enable the USB tablet device (defaults\nto `true`).\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags of the VM. This is only meta information (\ndefaults to `[]`). Note: Proxmox always sorts the VM tags. If the list in\ntemplate is not sorted, then Proxmox will always report a difference on the\nresource. You may use the `ignore_changes` lifecycle meta-argument to ignore\nchanges to this attribute.\n"
                },
                "template": {
                    "type": "boolean",
                    "description": "Whether to create a template (defaults to `false`).\n",
                    "willReplaceOnChanges": true
                },
                "timeoutClone": {
                    "type": "integer",
                    "description": "Timeout for cloning a VM in seconds (defaults to\n1800).\n"
                },
                "timeoutCreate": {
                    "type": "integer",
                    "description": "Timeout for creating a VM in seconds (defaults to\n1800).\n"
                },
                "timeoutMigrate": {
                    "type": "integer",
                    "description": "Timeout for migrating the VM (defaults to\n1800).\n"
                },
                "timeoutMoveDisk": {
                    "type": "integer",
                    "description": "MoveDisk timeout\n",
                    "deprecationMessage": "This field is deprecated and will be removed in a future release. An overall operation timeout (timeout_create / timeout_clone / timeout_migrate) is used instead."
                },
                "timeoutReboot": {
                    "type": "integer",
                    "description": "Timeout for rebooting a VM in seconds (defaults\nto 1800).\n"
                },
                "timeoutShutdownVm": {
                    "type": "integer",
                    "description": "Timeout for shutting down a VM in seconds (\ndefaults to 1800).\n"
                },
                "timeoutStartVm": {
                    "type": "integer",
                    "description": "Timeout for starting a VM in seconds (defaults\nto 1800).\n"
                },
                "timeoutStopVm": {
                    "type": "integer",
                    "description": "Timeout for stopping a VM in seconds (defaults\nto 300).\n"
                },
                "tpmState": {
                    "$ref": "#/types/proxmoxve:VM/VirtualMachineTpmState:VirtualMachineTpmState",
                    "description": "The TPM state device.\n",
                    "willReplaceOnChanges": true
                },
                "usbs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/proxmoxve:VM/VirtualMachineUsb:VirtualMachineUsb"
                    },
                    "description": "A host USB device mapping (multiple blocks supported).\n"
                },
                "vga": {
                    "$ref": "#/types/proxmoxve:VM/VirtualMachineVga:VirtualMachineVga",
                    "description": "The VGA configuration.\n"
                },
                "vmId": {
                    "type": "integer",
                    "description": "The VM identifier.\n"
                }
            },
            "requiredInputs": [
                "nodeName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VirtualMachine resources.\n",
                "properties": {
                    "acpi": {
                        "type": "boolean",
                        "description": "Whether to enable ACPI (defaults to `true`).\n"
                    },
                    "agent": {
                        "$ref": "#/types/proxmoxve:VM/VirtualMachineAgent:VirtualMachineAgent",
                        "description": "The QEMU agent configuration.\n"
                    },
                    "audioDevice": {
                        "$ref": "#/types/proxmoxve:VM/VirtualMachineAudioDevice:VirtualMachineAudioDevice",
                        "description": "An audio device.\n"
                    },
                    "bios": {
                        "type": "string",
                        "description": "The BIOS implementation (defaults to `seabios`).\n"
                    },
                    "bootOrders": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specify a list of devices to boot from in the order\nthey appear in the list (defaults to `[]`).\n"
                    },
                    "cdrom": {
                        "$ref": "#/types/proxmoxve:VM/VirtualMachineCdrom:VirtualMachineCdrom",
                        "description": "The CDROM configuration.\n"
                    },
                    "clone": {
                        "$ref": "#/types/proxmoxve:VM/VirtualMachineClone:VirtualMachineClone",
                        "description": "The cloning configuration.\n"
                    },
                    "cpu": {
                        "$ref": "#/types/proxmoxve:VM/VirtualMachineCpu:VirtualMachineCpu",
                        "description": "The CPU configuration.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description.\n"
                    },
                    "disks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/proxmoxve:VM/VirtualMachineDisk:VirtualMachineDisk"
                        },
                        "description": "A disk (multiple blocks supported).\n"
                    },
                    "efiDisk": {
                        "$ref": "#/types/proxmoxve:VM/VirtualMachineEfiDisk:VirtualMachineEfiDisk",
                        "description": "The efi disk device (required if `bios` is set\nto `ovmf`)\n",
                        "willReplaceOnChanges": true
                    },
                    "hookScriptFileId": {
                        "type": "string",
                        "description": "The identifier for a file containing a hook script (needs to be executable, e.g. by using the `proxmox_virtual_environment_file.file_mode` attribute).\n"
                    },
                    "hostpcis": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/proxmoxve:VM/VirtualMachineHostpci:VirtualMachineHostpci"
                        },
                        "description": "A host PCI device mapping (multiple blocks supported).\n"
                    },
                    "initialization": {
                        "$ref": "#/types/proxmoxve:VM/VirtualMachineInitialization:VirtualMachineInitialization",
                        "description": "The cloud-init configuration.\n"
                    },
                    "ipv4Addresses": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "The IPv4 addresses per network interface published by the\nQEMU agent (empty list when `agent.enabled` is `false`)\n"
                    },
                    "ipv6Addresses": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "The IPv6 addresses per network interface published by the\nQEMU agent (empty list when `agent.enabled` is `false`)\n"
                    },
                    "keyboardLayout": {
                        "type": "string",
                        "description": "The keyboard layout (defaults to `en-us`).\n"
                    },
                    "kvmArguments": {
                        "type": "string",
                        "description": "Arbitrary arguments passed to kvm.\n"
                    },
                    "macAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The MAC addresses published by the QEMU agent with fallback\nto the network device configuration, if the agent is disabled\n"
                    },
                    "machine": {
                        "type": "string",
                        "description": "The VM machine type (defaults to `pc`).\n"
                    },
                    "memory": {
                        "$ref": "#/types/proxmoxve:VM/VirtualMachineMemory:VirtualMachineMemory",
                        "description": "The memory configuration.\n"
                    },
                    "migrate": {
                        "type": "boolean",
                        "description": "Migrate the VM on node change instead of re-creating\nit (defaults to `false`).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The virtual machine name.\n"
                    },
                    "networkDevices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/proxmoxve:VM/VirtualMachineNetworkDevice:VirtualMachineNetworkDevice"
                        },
                        "description": "A network device (multiple blocks supported).\n"
                    },
                    "networkInterfaceNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The network interface names published by the QEMU\nagent (empty list when `agent.enabled` is `false`)\n"
                    },
                    "nodeName": {
                        "type": "string",
                        "description": "The name of the node to assign the virtual machine\nto.\n"
                    },
                    "numas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/proxmoxve:VM/VirtualMachineNuma:VirtualMachineNuma"
                        },
                        "description": "The NUMA configuration.\n"
                    },
                    "onBoot": {
                        "type": "boolean",
                        "description": "Specifies whether a VM will be started during system\nboot. (defaults to `true`)\n"
                    },
                    "operatingSystem": {
                        "$ref": "#/types/proxmoxve:VM/VirtualMachineOperatingSystem:VirtualMachineOperatingSystem",
                        "description": "The Operating System configuration.\n"
                    },
                    "poolId": {
                        "type": "string",
                        "description": "The identifier for a pool to assign the virtual machine to.\n"
                    },
                    "protection": {
                        "type": "boolean",
                        "description": "Sets the protection flag of the VM. This will disable the remove VM and remove disk operations (defaults to `false`).\n"
                    },
                    "reboot": {
                        "type": "boolean",
                        "description": "Reboot the VM after initial creation. (defaults to `false`)\n"
                    },
                    "scsiHardware": {
                        "type": "string",
                        "description": "The SCSI hardware type (defaults to\n`virtio-scsi-pci`).\n"
                    },
                    "serialDevices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/proxmoxve:VM/VirtualMachineSerialDevice:VirtualMachineSerialDevice"
                        },
                        "description": "A serial device (multiple blocks supported).\n"
                    },
                    "smbios": {
                        "$ref": "#/types/proxmoxve:VM/VirtualMachineSmbios:VirtualMachineSmbios",
                        "description": "The SMBIOS (type1) settings for the VM.\n"
                    },
                    "started": {
                        "type": "boolean",
                        "description": "Whether to start the virtual machine (defaults\nto `true`).\n"
                    },
                    "startup": {
                        "$ref": "#/types/proxmoxve:VM/VirtualMachineStartup:VirtualMachineStartup",
                        "description": "Defines startup and shutdown behavior of the VM.\n"
                    },
                    "stopOnDestroy": {
                        "type": "boolean",
                        "description": "Whether to stop rather than shutdown on VM destroy (defaults to `false`)\n"
                    },
                    "tabletDevice": {
                        "type": "boolean",
                        "description": "Whether to enable the USB tablet device (defaults\nto `true`).\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags of the VM. This is only meta information (\ndefaults to `[]`). Note: Proxmox always sorts the VM tags. If the list in\ntemplate is not sorted, then Proxmox will always report a difference on the\nresource. You may use the `ignore_changes` lifecycle meta-argument to ignore\nchanges to this attribute.\n"
                    },
                    "template": {
                        "type": "boolean",
                        "description": "Whether to create a template (defaults to `false`).\n",
                        "willReplaceOnChanges": true
                    },
                    "timeoutClone": {
                        "type": "integer",
                        "description": "Timeout for cloning a VM in seconds (defaults to\n1800).\n"
                    },
                    "timeoutCreate": {
                        "type": "integer",
                        "description": "Timeout for creating a VM in seconds (defaults to\n1800).\n"
                    },
                    "timeoutMigrate": {
                        "type": "integer",
                        "description": "Timeout for migrating the VM (defaults to\n1800).\n"
                    },
                    "timeoutMoveDisk": {
                        "type": "integer",
                        "description": "MoveDisk timeout\n",
                        "deprecationMessage": "This field is deprecated and will be removed in a future release. An overall operation timeout (timeout_create / timeout_clone / timeout_migrate) is used instead."
                    },
                    "timeoutReboot": {
                        "type": "integer",
                        "description": "Timeout for rebooting a VM in seconds (defaults\nto 1800).\n"
                    },
                    "timeoutShutdownVm": {
                        "type": "integer",
                        "description": "Timeout for shutting down a VM in seconds (\ndefaults to 1800).\n"
                    },
                    "timeoutStartVm": {
                        "type": "integer",
                        "description": "Timeout for starting a VM in seconds (defaults\nto 1800).\n"
                    },
                    "timeoutStopVm": {
                        "type": "integer",
                        "description": "Timeout for stopping a VM in seconds (defaults\nto 300).\n"
                    },
                    "tpmState": {
                        "$ref": "#/types/proxmoxve:VM/VirtualMachineTpmState:VirtualMachineTpmState",
                        "description": "The TPM state device.\n",
                        "willReplaceOnChanges": true
                    },
                    "usbs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/proxmoxve:VM/VirtualMachineUsb:VirtualMachineUsb"
                        },
                        "description": "A host USB device mapping (multiple blocks supported).\n"
                    },
                    "vga": {
                        "$ref": "#/types/proxmoxve:VM/VirtualMachineVga:VirtualMachineVga",
                        "description": "The VGA configuration.\n"
                    },
                    "vmId": {
                        "type": "integer",
                        "description": "The VM identifier.\n"
                    }
                },
                "type": "object"
            }
        },
        "proxmoxve:index/acl:Acl": {
            "description": "Manages ACLs on the Proxmox cluster.\n\nACLs are used to control access to resources in the Proxmox cluster.\nEach ACL consists of a path, a user, group or token, a role, and a flag to allow propagation of permissions.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@muhlba91/pulumi-proxmoxve\";\n\nconst operationsAutomation = new proxmoxve.permission.User(\"operationsAutomation\", {\n    comment: \"Managed by Terraform\",\n    password: \"a-strong-password\",\n    userId: \"operations-automation@pve\",\n});\nconst operationsMonitoring = new proxmoxve.permission.Role(\"operationsMonitoring\", {\n    roleId: \"operations-monitoring\",\n    privileges: [\"VM.Monitor\"],\n});\nconst operationsAutomationMonitoring = new proxmoxve.Acl(\"operationsAutomationMonitoring\", {\n    userId: operationsAutomation.userId,\n    roleId: operationsMonitoring.roleId,\n    path: \"/vms/1234\",\n    propagate: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\noperations_automation = proxmoxve.permission.User(\"operationsAutomation\",\n    comment=\"Managed by Terraform\",\n    password=\"a-strong-password\",\n    user_id=\"operations-automation@pve\")\noperations_monitoring = proxmoxve.permission.Role(\"operationsMonitoring\",\n    role_id=\"operations-monitoring\",\n    privileges=[\"VM.Monitor\"])\noperations_automation_monitoring = proxmoxve.Acl(\"operationsAutomationMonitoring\",\n    user_id=operations_automation.user_id,\n    role_id=operations_monitoring.role_id,\n    path=\"/vms/1234\",\n    propagate=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var operationsAutomation = new ProxmoxVE.Permission.User(\"operationsAutomation\", new()\n    {\n        Comment = \"Managed by Terraform\",\n        Password = \"a-strong-password\",\n        UserId = \"operations-automation@pve\",\n    });\n\n    var operationsMonitoring = new ProxmoxVE.Permission.Role(\"operationsMonitoring\", new()\n    {\n        RoleId = \"operations-monitoring\",\n        Privileges = new[]\n        {\n            \"VM.Monitor\",\n        },\n    });\n\n    var operationsAutomationMonitoring = new ProxmoxVE.Acl(\"operationsAutomationMonitoring\", new()\n    {\n        UserId = operationsAutomation.UserId,\n        RoleId = operationsMonitoring.RoleId,\n        Path = \"/vms/1234\",\n        Propagate = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve\"\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Permission\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\toperationsAutomation, err := Permission.NewUser(ctx, \"operationsAutomation\", \u0026Permission.UserArgs{\n\t\t\tComment:  pulumi.String(\"Managed by Terraform\"),\n\t\t\tPassword: pulumi.String(\"a-strong-password\"),\n\t\t\tUserId:   pulumi.String(\"operations-automation@pve\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\toperationsMonitoring, err := Permission.NewRole(ctx, \"operationsMonitoring\", \u0026Permission.RoleArgs{\n\t\t\tRoleId: pulumi.String(\"operations-monitoring\"),\n\t\t\tPrivileges: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"VM.Monitor\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = proxmoxve.NewAcl(ctx, \"operationsAutomationMonitoring\", \u0026proxmoxve.AclArgs{\n\t\t\tUserId:    operationsAutomation.UserId,\n\t\t\tRoleId:    operationsMonitoring.RoleId,\n\t\t\tPath:      pulumi.String(\"/vms/1234\"),\n\t\t\tPropagate: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Permission.User;\nimport com.pulumi.proxmoxve.Permission.UserArgs;\nimport com.pulumi.proxmoxve.Permission.Role;\nimport com.pulumi.proxmoxve.Permission.RoleArgs;\nimport com.pulumi.proxmoxve.Acl;\nimport com.pulumi.proxmoxve.AclArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var operationsAutomation = new User(\"operationsAutomation\", UserArgs.builder()\n            .comment(\"Managed by Terraform\")\n            .password(\"a-strong-password\")\n            .userId(\"operations-automation@pve\")\n            .build());\n\n        var operationsMonitoring = new Role(\"operationsMonitoring\", RoleArgs.builder()\n            .roleId(\"operations-monitoring\")\n            .privileges(\"VM.Monitor\")\n            .build());\n\n        var operationsAutomationMonitoring = new Acl(\"operationsAutomationMonitoring\", AclArgs.builder()\n            .userId(operationsAutomation.userId())\n            .roleId(operationsMonitoring.roleId())\n            .path(\"/vms/1234\")\n            .propagate(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  operationsAutomation:\n    type: proxmoxve:Permission:User\n    properties:\n      comment: Managed by Terraform\n      password: a-strong-password\n      userId: operations-automation@pve\n  operationsMonitoring:\n    type: proxmoxve:Permission:Role\n    properties:\n      roleId: operations-monitoring\n      privileges:\n        - VM.Monitor\n  operationsAutomationMonitoring:\n    type: proxmoxve:Acl\n    properties:\n      userId: ${operationsAutomation.userId}\n      roleId: ${operationsMonitoring.roleId}\n      path: /vms/1234\n      propagate: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n#!/usr/bin/env sh\n\nACL can be imported using its unique identifier, e.g.: {path}?{group|user@realm|user@realm!token}?{role}\n\n```sh\n$ pulumi import proxmoxve:index/acl:Acl operations_automation_monitoring /?monitor@pve?operations-monitoring\n```\n\n",
            "properties": {
                "groupId": {
                    "type": "string",
                    "description": "The group the ACL should apply to (mutually exclusive with `token_id` and `user_id`)\n"
                },
                "path": {
                    "type": "string",
                    "description": "Access control path\n"
                },
                "propagate": {
                    "type": "boolean",
                    "description": "Allow to propagate (inherit) permissions.\n"
                },
                "roleId": {
                    "type": "string",
                    "description": "The role to apply\n"
                },
                "tokenId": {
                    "type": "string",
                    "description": "The token the ACL should apply to (mutually exclusive with `group_id` and `user_id`)\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The user the ACL should apply to (mutually exclusive with `group_id` and `token_id`)\n"
                }
            },
            "required": [
                "path",
                "propagate",
                "roleId"
            ],
            "inputProperties": {
                "groupId": {
                    "type": "string",
                    "description": "The group the ACL should apply to (mutually exclusive with `token_id` and `user_id`)\n"
                },
                "path": {
                    "type": "string",
                    "description": "Access control path\n"
                },
                "propagate": {
                    "type": "boolean",
                    "description": "Allow to propagate (inherit) permissions.\n"
                },
                "roleId": {
                    "type": "string",
                    "description": "The role to apply\n"
                },
                "tokenId": {
                    "type": "string",
                    "description": "The token the ACL should apply to (mutually exclusive with `group_id` and `user_id`)\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The user the ACL should apply to (mutually exclusive with `group_id` and `token_id`)\n"
                }
            },
            "requiredInputs": [
                "path",
                "roleId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Acl resources.\n",
                "properties": {
                    "groupId": {
                        "type": "string",
                        "description": "The group the ACL should apply to (mutually exclusive with `token_id` and `user_id`)\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "Access control path\n"
                    },
                    "propagate": {
                        "type": "boolean",
                        "description": "Allow to propagate (inherit) permissions.\n"
                    },
                    "roleId": {
                        "type": "string",
                        "description": "The role to apply\n"
                    },
                    "tokenId": {
                        "type": "string",
                        "description": "The token the ACL should apply to (mutually exclusive with `group_id` and `user_id`)\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The user the ACL should apply to (mutually exclusive with `group_id` and `token_id`)\n"
                    }
                },
                "type": "object"
            }
        },
        "proxmoxve:index/acmeAccount:AcmeAccount": {
            "description": "Manages an ACME account in a Proxmox VE cluster.\n\n\u003e This resource requires `root@pam` authentication.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@muhlba91/pulumi-proxmoxve\";\n\nconst example = new proxmoxve.AcmeAccount(\"example\", {\n    contact: \"example@email.com\",\n    directory: \"https://acme-staging-v02.api.letsencrypt.org/directory\",\n    tos: \"https://letsencrypt.org/documents/LE-SA-v1.3-September-21-2022.pdf\",\n});\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\nexample = proxmoxve.AcmeAccount(\"example\",\n    contact=\"example@email.com\",\n    directory=\"https://acme-staging-v02.api.letsencrypt.org/directory\",\n    tos=\"https://letsencrypt.org/documents/LE-SA-v1.3-September-21-2022.pdf\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new ProxmoxVE.AcmeAccount(\"example\", new()\n    {\n        Contact = \"example@email.com\",\n        Directory = \"https://acme-staging-v02.api.letsencrypt.org/directory\",\n        Tos = \"https://letsencrypt.org/documents/LE-SA-v1.3-September-21-2022.pdf\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := proxmoxve.NewAcmeAccount(ctx, \"example\", \u0026proxmoxve.AcmeAccountArgs{\n\t\t\tContact:   pulumi.String(\"example@email.com\"),\n\t\t\tDirectory: pulumi.String(\"https://acme-staging-v02.api.letsencrypt.org/directory\"),\n\t\t\tTos:       pulumi.String(\"https://letsencrypt.org/documents/LE-SA-v1.3-September-21-2022.pdf\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.AcmeAccount;\nimport com.pulumi.proxmoxve.AcmeAccountArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new AcmeAccount(\"example\", AcmeAccountArgs.builder()\n            .contact(\"example@email.com\")\n            .directory(\"https://acme-staging-v02.api.letsencrypt.org/directory\")\n            .tos(\"https://letsencrypt.org/documents/LE-SA-v1.3-September-21-2022.pdf\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: proxmoxve:AcmeAccount\n    properties:\n      contact: example@email.com\n      directory: https://acme-staging-v02.api.letsencrypt.org/directory\n      tos: https://letsencrypt.org/documents/LE-SA-v1.3-September-21-2022.pdf\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n#!/usr/bin/env sh\n\nACME accounts can be imported using their name, e.g.:\n\n```sh\n$ pulumi import proxmoxve:index/acmeAccount:AcmeAccount example example\n```\n\n",
            "properties": {
                "contact": {
                    "type": "string",
                    "description": "The contact email addresses.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The timestamp of the ACME account creation.\n"
                },
                "directory": {
                    "type": "string",
                    "description": "The URL of the ACME CA directory endpoint.\n"
                },
                "eabHmacKey": {
                    "type": "string",
                    "description": "The HMAC key for External Account Binding.\n"
                },
                "eabKid": {
                    "type": "string",
                    "description": "The Key Identifier for External Account Binding.\n"
                },
                "location": {
                    "type": "string",
                    "description": "The location of the ACME account.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The ACME account config file name.\n"
                },
                "tos": {
                    "type": "string",
                    "description": "The URL of CA TermsOfService - setting this indicates agreement.\n"
                }
            },
            "required": [
                "contact",
                "createdAt",
                "location",
                "name"
            ],
            "inputProperties": {
                "contact": {
                    "type": "string",
                    "description": "The contact email addresses.\n"
                },
                "directory": {
                    "type": "string",
                    "description": "The URL of the ACME CA directory endpoint.\n"
                },
                "eabHmacKey": {
                    "type": "string",
                    "description": "The HMAC key for External Account Binding.\n"
                },
                "eabKid": {
                    "type": "string",
                    "description": "The Key Identifier for External Account Binding.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The ACME account config file name.\n"
                },
                "tos": {
                    "type": "string",
                    "description": "The URL of CA TermsOfService - setting this indicates agreement.\n"
                }
            },
            "requiredInputs": [
                "contact"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AcmeAccount resources.\n",
                "properties": {
                    "contact": {
                        "type": "string",
                        "description": "The contact email addresses.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The timestamp of the ACME account creation.\n"
                    },
                    "directory": {
                        "type": "string",
                        "description": "The URL of the ACME CA directory endpoint.\n"
                    },
                    "eabHmacKey": {
                        "type": "string",
                        "description": "The HMAC key for External Account Binding.\n"
                    },
                    "eabKid": {
                        "type": "string",
                        "description": "The Key Identifier for External Account Binding.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "The location of the ACME account.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The ACME account config file name.\n"
                    },
                    "tos": {
                        "type": "string",
                        "description": "The URL of CA TermsOfService - setting this indicates agreement.\n"
                    }
                },
                "type": "object"
            }
        },
        "proxmoxve:index/acmeDnsPlugin:AcmeDnsPlugin": {
            "description": "Manages an ACME plugin in a Proxmox VE cluster.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@muhlba91/pulumi-proxmoxve\";\n\nconst example = new proxmoxve.AcmeDnsPlugin(\"example\", {\n    api: \"aws\",\n    data: {\n        AWS_ACCESS_KEY_ID: \"EXAMPLE\",\n        AWS_SECRET_ACCESS_KEY: \"EXAMPLE\",\n    },\n    plugin: \"test\",\n});\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\nexample = proxmoxve.AcmeDnsPlugin(\"example\",\n    api=\"aws\",\n    data={\n        \"AWS_ACCESS_KEY_ID\": \"EXAMPLE\",\n        \"AWS_SECRET_ACCESS_KEY\": \"EXAMPLE\",\n    },\n    plugin=\"test\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new ProxmoxVE.AcmeDnsPlugin(\"example\", new()\n    {\n        Api = \"aws\",\n        Data = \n        {\n            { \"AWS_ACCESS_KEY_ID\", \"EXAMPLE\" },\n            { \"AWS_SECRET_ACCESS_KEY\", \"EXAMPLE\" },\n        },\n        Plugin = \"test\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := proxmoxve.NewAcmeDnsPlugin(ctx, \"example\", \u0026proxmoxve.AcmeDnsPluginArgs{\n\t\t\tApi: pulumi.String(\"aws\"),\n\t\t\tData: pulumi.StringMap{\n\t\t\t\t\"AWS_ACCESS_KEY_ID\":     pulumi.String(\"EXAMPLE\"),\n\t\t\t\t\"AWS_SECRET_ACCESS_KEY\": pulumi.String(\"EXAMPLE\"),\n\t\t\t},\n\t\t\tPlugin: pulumi.String(\"test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.AcmeDnsPlugin;\nimport com.pulumi.proxmoxve.AcmeDnsPluginArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new AcmeDnsPlugin(\"example\", AcmeDnsPluginArgs.builder()\n            .api(\"aws\")\n            .data(Map.ofEntries(\n                Map.entry(\"AWS_ACCESS_KEY_ID\", \"EXAMPLE\"),\n                Map.entry(\"AWS_SECRET_ACCESS_KEY\", \"EXAMPLE\")\n            ))\n            .plugin(\"test\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: proxmoxve:AcmeDnsPlugin\n    properties:\n      api: aws\n      data:\n        AWS_ACCESS_KEY_ID: EXAMPLE\n        AWS_SECRET_ACCESS_KEY: EXAMPLE\n      plugin: test\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n#!/usr/bin/env sh\n\nACME accounts can be imported using their name, e.g.:\n\n```sh\n$ pulumi import proxmoxve:index/acmeDnsPlugin:AcmeDnsPlugin example test\n```\n\n",
            "properties": {
                "api": {
                    "type": "string",
                    "description": "API plugin name.\n"
                },
                "data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "DNS plugin data.\n"
                },
                "digest": {
                    "type": "string",
                    "description": "SHA1 digest of the current configuration. Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.\n"
                },
                "disable": {
                    "type": "boolean",
                    "description": "Flag to disable the config.\n"
                },
                "plugin": {
                    "type": "string",
                    "description": "ACME Plugin ID name.\n"
                },
                "validationDelay": {
                    "type": "integer",
                    "description": "Extra delay in seconds to wait before requesting validation. Allows to cope with a long TTL of DNS records (0 - 172800).\n"
                }
            },
            "required": [
                "api",
                "digest",
                "plugin",
                "validationDelay"
            ],
            "inputProperties": {
                "api": {
                    "type": "string",
                    "description": "API plugin name.\n"
                },
                "data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "DNS plugin data.\n"
                },
                "digest": {
                    "type": "string",
                    "description": "SHA1 digest of the current configuration. Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.\n"
                },
                "disable": {
                    "type": "boolean",
                    "description": "Flag to disable the config.\n"
                },
                "plugin": {
                    "type": "string",
                    "description": "ACME Plugin ID name.\n"
                },
                "validationDelay": {
                    "type": "integer",
                    "description": "Extra delay in seconds to wait before requesting validation. Allows to cope with a long TTL of DNS records (0 - 172800).\n"
                }
            },
            "requiredInputs": [
                "api",
                "plugin"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AcmeDnsPlugin resources.\n",
                "properties": {
                    "api": {
                        "type": "string",
                        "description": "API plugin name.\n"
                    },
                    "data": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "DNS plugin data.\n"
                    },
                    "digest": {
                        "type": "string",
                        "description": "SHA1 digest of the current configuration. Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.\n"
                    },
                    "disable": {
                        "type": "boolean",
                        "description": "Flag to disable the config.\n"
                    },
                    "plugin": {
                        "type": "string",
                        "description": "ACME Plugin ID name.\n"
                    },
                    "validationDelay": {
                        "type": "integer",
                        "description": "Extra delay in seconds to wait before requesting validation. Allows to cope with a long TTL of DNS records (0 - 172800).\n"
                    }
                },
                "type": "object"
            }
        },
        "proxmoxve:index/certifi:Certifi": {
            "description": "Manages the custom SSL/TLS certificate for a specific node.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```yaml\nresources:\n  example:\n    type: proxmoxve:Certifi\n    properties:\n      certificate: ${proxmoxVirtualEnvironmentCertificateSelfSignedCert.certPem}\n      nodeName: first-node\n      privateKey: ${proxmoxVirtualEnvironmentCertificatePrivateKey.privateKeyPem}\n  proxmoxVirtualEnvironmentCertificatePrivateKey:\n    type: tls:PrivateKey\n    properties:\n      algorithm: RSA\n      rsaBits: 2048\n  proxmoxVirtualEnvironmentCertificateSelfSignedCert:\n    type: tls:SelfSignedCert\n    properties:\n      keyAlgorithm: ${proxmoxVirtualEnvironmentCertificatePrivateKey.algorithm}\n      privateKeyPem: ${proxmoxVirtualEnvironmentCertificatePrivateKey.privateKeyPem}\n      subject:\n        commonName: example.com\n        organization: Terraform Provider for Proxmox\n      validityPeriodHours: 8760\n      allowedUses:\n        - key_encipherment\n        - digital_signature\n        - server_auth\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "certificate": {
                    "type": "string",
                    "description": "The PEM encoded certificate.\n"
                },
                "certificateChain": {
                    "type": "string",
                    "description": "The PEM encoded certificate chain.\n"
                },
                "expirationDate": {
                    "type": "string",
                    "description": "The expiration date (RFC 3339).\n"
                },
                "fileName": {
                    "type": "string",
                    "description": "The file name.\n"
                },
                "issuer": {
                    "type": "string",
                    "description": "The issuer.\n"
                },
                "nodeName": {
                    "type": "string",
                    "description": "A node name.\n"
                },
                "overwrite": {
                    "type": "boolean",
                    "description": "Whether to overwrite an existing certificate\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "The PEM encoded private key.\n",
                    "secret": true
                },
                "publicKeySize": {
                    "type": "integer",
                    "description": "The public key size.\n"
                },
                "publicKeyType": {
                    "type": "string",
                    "description": "The public key type.\n"
                },
                "sslFingerprint": {
                    "type": "string",
                    "description": "The SSL fingerprint.\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The start date (RFC 3339).\n"
                },
                "subject": {
                    "type": "string",
                    "description": "The subject.\n"
                },
                "subjectAlternativeNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The subject alternative names.\n"
                }
            },
            "required": [
                "certificate",
                "expirationDate",
                "fileName",
                "issuer",
                "nodeName",
                "privateKey",
                "publicKeySize",
                "publicKeyType",
                "sslFingerprint",
                "startDate",
                "subject",
                "subjectAlternativeNames"
            ],
            "inputProperties": {
                "certificate": {
                    "type": "string",
                    "description": "The PEM encoded certificate.\n"
                },
                "certificateChain": {
                    "type": "string",
                    "description": "The PEM encoded certificate chain.\n"
                },
                "nodeName": {
                    "type": "string",
                    "description": "A node name.\n",
                    "willReplaceOnChanges": true
                },
                "overwrite": {
                    "type": "boolean",
                    "description": "Whether to overwrite an existing certificate\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "The PEM encoded private key.\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "certificate",
                "nodeName",
                "privateKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Certifi resources.\n",
                "properties": {
                    "certificate": {
                        "type": "string",
                        "description": "The PEM encoded certificate.\n"
                    },
                    "certificateChain": {
                        "type": "string",
                        "description": "The PEM encoded certificate chain.\n"
                    },
                    "expirationDate": {
                        "type": "string",
                        "description": "The expiration date (RFC 3339).\n"
                    },
                    "fileName": {
                        "type": "string",
                        "description": "The file name.\n"
                    },
                    "issuer": {
                        "type": "string",
                        "description": "The issuer.\n"
                    },
                    "nodeName": {
                        "type": "string",
                        "description": "A node name.\n",
                        "willReplaceOnChanges": true
                    },
                    "overwrite": {
                        "type": "boolean",
                        "description": "Whether to overwrite an existing certificate\n"
                    },
                    "privateKey": {
                        "type": "string",
                        "description": "The PEM encoded private key.\n",
                        "secret": true
                    },
                    "publicKeySize": {
                        "type": "integer",
                        "description": "The public key size.\n"
                    },
                    "publicKeyType": {
                        "type": "string",
                        "description": "The public key type.\n"
                    },
                    "sslFingerprint": {
                        "type": "string",
                        "description": "The SSL fingerprint.\n"
                    },
                    "startDate": {
                        "type": "string",
                        "description": "The start date (RFC 3339).\n"
                    },
                    "subject": {
                        "type": "string",
                        "description": "The subject.\n"
                    },
                    "subjectAlternativeNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The subject alternative names.\n"
                    }
                },
                "type": "object"
            }
        },
        "proxmoxve:index/dNS:DNS": {
            "description": "Manages the DNS configuration for a specific node.\n\n## Import\n\nInstances can be imported using the `node_name`, e.g.,\n\nbash\n\n```sh\n$ pulumi import proxmoxve:index/dNS:DNS first_node first-node\n```\n\n",
            "properties": {
                "domain": {
                    "type": "string",
                    "description": "The DNS search domain.\n"
                },
                "nodeName": {
                    "type": "string",
                    "description": "A node name.\n"
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The DNS servers.\n"
                }
            },
            "required": [
                "domain",
                "nodeName"
            ],
            "inputProperties": {
                "domain": {
                    "type": "string",
                    "description": "The DNS search domain.\n"
                },
                "nodeName": {
                    "type": "string",
                    "description": "A node name.\n",
                    "willReplaceOnChanges": true
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The DNS servers.\n"
                }
            },
            "requiredInputs": [
                "domain",
                "nodeName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DNS resources.\n",
                "properties": {
                    "domain": {
                        "type": "string",
                        "description": "The DNS search domain.\n"
                    },
                    "nodeName": {
                        "type": "string",
                        "description": "A node name.\n",
                        "willReplaceOnChanges": true
                    },
                    "servers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The DNS servers.\n"
                    }
                },
                "type": "object"
            }
        },
        "proxmoxve:index/hosts:Hosts": {
            "description": "Manages the host entries on a specific node.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```yaml\nresources:\n  firstNodeHostEntries:\n    type: proxmoxve:Hosts\n    properties:\n      entries:\n        - address: 127.0.0.1\n          hostnames:\n            - localhost\n            - localhost.localdomain\n      nodeName: first-node\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Important Notes\n\nBe careful not to use this resource multiple times for the same node.\n\n## Import\n\nInstances can be imported using the `node_name`, e.g.,\n\nbash\n\n```sh\n$ pulumi import proxmoxve:index/hosts:Hosts first_node_host_entries first-node\n```\n\n",
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IP addresses.\n"
                },
                "digest": {
                    "type": "string",
                    "description": "The SHA1 digest.\n"
                },
                "entries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/proxmoxve:index/HostsEntry:HostsEntry"
                    },
                    "description": "The host entries (conversion of `addresses` and `hostnames` into\nobjects).\n"
                },
                "entry": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/proxmoxve:index/HostsEntry:HostsEntry"
                    },
                    "description": "A host entry (multiple blocks supported).\n"
                },
                "hostnames": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "description": "The hostnames associated with each of the IP addresses.\n"
                },
                "nodeName": {
                    "type": "string",
                    "description": "A node name.\n"
                }
            },
            "required": [
                "addresses",
                "digest",
                "entries",
                "entry",
                "hostnames",
                "nodeName"
            ],
            "inputProperties": {
                "entry": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/proxmoxve:index/HostsEntry:HostsEntry"
                    },
                    "description": "A host entry (multiple blocks supported).\n"
                },
                "nodeName": {
                    "type": "string",
                    "description": "A node name.\n"
                }
            },
            "requiredInputs": [
                "entry",
                "nodeName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Hosts resources.\n",
                "properties": {
                    "addresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IP addresses.\n"
                    },
                    "digest": {
                        "type": "string",
                        "description": "The SHA1 digest.\n"
                    },
                    "entries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/proxmoxve:index/HostsEntry:HostsEntry"
                        },
                        "description": "The host entries (conversion of `addresses` and `hostnames` into\nobjects).\n"
                    },
                    "entry": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/proxmoxve:index/HostsEntry:HostsEntry"
                        },
                        "description": "A host entry (multiple blocks supported).\n"
                    },
                    "hostnames": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "The hostnames associated with each of the IP addresses.\n"
                    },
                    "nodeName": {
                        "type": "string",
                        "description": "A node name.\n"
                    }
                },
                "type": "object"
            }
        },
        "proxmoxve:index/time:Time": {
            "description": "Manages the time for a specific node.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@muhlba91/pulumi-proxmoxve\";\n\nconst firstNodeTime = new proxmoxve.Time(\"firstNodeTime\", {\n    nodeName: \"first-node\",\n    timeZone: \"UTC\",\n});\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\nfirst_node_time = proxmoxve.Time(\"firstNodeTime\",\n    node_name=\"first-node\",\n    time_zone=\"UTC\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var firstNodeTime = new ProxmoxVE.Time(\"firstNodeTime\", new()\n    {\n        NodeName = \"first-node\",\n        TimeZone = \"UTC\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := proxmoxve.NewTime(ctx, \"firstNodeTime\", \u0026proxmoxve.TimeArgs{\n\t\t\tNodeName: pulumi.String(\"first-node\"),\n\t\t\tTimeZone: pulumi.String(\"UTC\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Time;\nimport com.pulumi.proxmoxve.TimeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var firstNodeTime = new Time(\"firstNodeTime\", TimeArgs.builder()\n            .nodeName(\"first-node\")\n            .timeZone(\"UTC\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  firstNodeTime:\n    type: proxmoxve:Time\n    properties:\n      nodeName: first-node\n      timeZone: UTC\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nInstances can be imported using the `node_name`, e.g.,\n\nbash\n\n```sh\n$ pulumi import proxmoxve:index/time:Time first_node first-node\n```\n\n",
            "properties": {
                "localTime": {
                    "type": "string",
                    "description": "The node's local time.\n"
                },
                "nodeName": {
                    "type": "string",
                    "description": "A node name.\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "The node's time zone.\n"
                },
                "utcTime": {
                    "type": "string",
                    "description": "The node's local time formatted as UTC.\n"
                }
            },
            "required": [
                "localTime",
                "nodeName",
                "timeZone",
                "utcTime"
            ],
            "inputProperties": {
                "nodeName": {
                    "type": "string",
                    "description": "A node name.\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "The node's time zone.\n"
                }
            },
            "requiredInputs": [
                "nodeName",
                "timeZone"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Time resources.\n",
                "properties": {
                    "localTime": {
                        "type": "string",
                        "description": "The node's local time.\n"
                    },
                    "nodeName": {
                        "type": "string",
                        "description": "A node name.\n"
                    },
                    "timeZone": {
                        "type": "string",
                        "description": "The node's time zone.\n"
                    },
                    "utcTime": {
                        "type": "string",
                        "description": "The node's local time formatted as UTC.\n"
                    }
                },
                "type": "object"
            }
        },
        "proxmoxve:index/vm2:Vm2": {
            "description": "!\u003e **DO NOT USE**\nThis is an experimental implementation of a Proxmox VM resource using Plugin Framework.\u003cbr\u003e\u003cbr\u003eIt is a Proof of Concept, highly experimental and **will** change in future. It does not support all features of the Proxmox API for VMs and **MUST NOT** be used in production.\n\n\u003e Many attributes are marked as **optional** _and_ **computed** in the schema,\nhence you may seem added to the plan with \"(known after apply)\" status, even if they are not set in the configuration.\nThis is done to support the `clone` operation, when a VM is created from an existing VM or template,\nand the source attributes are copied to the clone.\u003cbr\u003e\u003cbr\u003e\nComputed attributes allow the provider to set those attributes without user input.\nThe attributes are also marked as optional to allow the practitioner to set (or overwrite) them if needed.\n",
            "properties": {
                "cdrom": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/proxmoxve:index/Vm2Cdrom:Vm2Cdrom"
                    },
                    "description": "The CD-ROM configuration. The key is the interface of the CD-ROM, could be one of `ideN`, `sataN`, `scsiN`, where N is the index of the interface. Note that `q35` machine type only supports `ide0` and `ide2` of IDE interfaces.\n"
                },
                "clone": {
                    "$ref": "#/types/proxmoxve:index/Vm2Clone:Vm2Clone",
                    "description": "The cloning configuration.\n"
                },
                "cpu": {
                    "$ref": "#/types/proxmoxve:index/Vm2Cpu:Vm2Cpu",
                    "description": "The CPU configuration.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the VM.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the VM. Doesn't have to be unique.\n"
                },
                "nodeName": {
                    "type": "string",
                    "description": "The name of the node where the VM is provisioned.\n"
                },
                "stopOnDestroy": {
                    "type": "boolean",
                    "description": "Set to true to stop (rather than shutdown) the VM on destroy (defaults to `false`).\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags assigned to the VM.\n"
                },
                "template": {
                    "type": "boolean",
                    "description": "Set to true to create a VM template.\n"
                },
                "timeouts": {
                    "$ref": "#/types/proxmoxve:index/Vm2Timeouts:Vm2Timeouts"
                },
                "vga": {
                    "$ref": "#/types/proxmoxve:index/Vm2Vga:Vm2Vga",
                    "description": "Configure the VGA Hardware. If you want to use high resolution modes (\u003e= 1280x1024x16) you may need to increase the vga memory option. Since QEMU 2.9 the default VGA display type is `std` for all OS types besides some Windows versions (XP and older) which use `cirrus`. The `qxl` option enables the SPICE display server. For win* OS you can select how many independent displays you want, Linux guests can add displays themself. You can also run without any graphic card, using a serial device as terminal. See the [Proxmox documentation](https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm_virtual_machines_settings) section 10.2.8 for more information and available configuration parameters.\n"
                }
            },
            "required": [
                "cdrom",
                "cpu",
                "name",
                "nodeName",
                "stopOnDestroy",
                "tags",
                "vga"
            ],
            "inputProperties": {
                "cdrom": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/proxmoxve:index/Vm2Cdrom:Vm2Cdrom"
                    },
                    "description": "The CD-ROM configuration. The key is the interface of the CD-ROM, could be one of `ideN`, `sataN`, `scsiN`, where N is the index of the interface. Note that `q35` machine type only supports `ide0` and `ide2` of IDE interfaces.\n"
                },
                "clone": {
                    "$ref": "#/types/proxmoxve:index/Vm2Clone:Vm2Clone",
                    "description": "The cloning configuration.\n"
                },
                "cpu": {
                    "$ref": "#/types/proxmoxve:index/Vm2Cpu:Vm2Cpu",
                    "description": "The CPU configuration.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the VM.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the VM. Doesn't have to be unique.\n"
                },
                "nodeName": {
                    "type": "string",
                    "description": "The name of the node where the VM is provisioned.\n"
                },
                "stopOnDestroy": {
                    "type": "boolean",
                    "description": "Set to true to stop (rather than shutdown) the VM on destroy (defaults to `false`).\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags assigned to the VM.\n"
                },
                "template": {
                    "type": "boolean",
                    "description": "Set to true to create a VM template.\n"
                },
                "timeouts": {
                    "$ref": "#/types/proxmoxve:index/Vm2Timeouts:Vm2Timeouts"
                },
                "vga": {
                    "$ref": "#/types/proxmoxve:index/Vm2Vga:Vm2Vga",
                    "description": "Configure the VGA Hardware. If you want to use high resolution modes (\u003e= 1280x1024x16) you may need to increase the vga memory option. Since QEMU 2.9 the default VGA display type is `std` for all OS types besides some Windows versions (XP and older) which use `cirrus`. The `qxl` option enables the SPICE display server. For win* OS you can select how many independent displays you want, Linux guests can add displays themself. You can also run without any graphic card, using a serial device as terminal. See the [Proxmox documentation](https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm_virtual_machines_settings) section 10.2.8 for more information and available configuration parameters.\n"
                }
            },
            "requiredInputs": [
                "nodeName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Vm2 resources.\n",
                "properties": {
                    "cdrom": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/proxmoxve:index/Vm2Cdrom:Vm2Cdrom"
                        },
                        "description": "The CD-ROM configuration. The key is the interface of the CD-ROM, could be one of `ideN`, `sataN`, `scsiN`, where N is the index of the interface. Note that `q35` machine type only supports `ide0` and `ide2` of IDE interfaces.\n"
                    },
                    "clone": {
                        "$ref": "#/types/proxmoxve:index/Vm2Clone:Vm2Clone",
                        "description": "The cloning configuration.\n"
                    },
                    "cpu": {
                        "$ref": "#/types/proxmoxve:index/Vm2Cpu:Vm2Cpu",
                        "description": "The CPU configuration.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the VM.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the VM. Doesn't have to be unique.\n"
                    },
                    "nodeName": {
                        "type": "string",
                        "description": "The name of the node where the VM is provisioned.\n"
                    },
                    "stopOnDestroy": {
                        "type": "boolean",
                        "description": "Set to true to stop (rather than shutdown) the VM on destroy (defaults to `false`).\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags assigned to the VM.\n"
                    },
                    "template": {
                        "type": "boolean",
                        "description": "Set to true to create a VM template.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/proxmoxve:index/Vm2Timeouts:Vm2Timeouts"
                    },
                    "vga": {
                        "$ref": "#/types/proxmoxve:index/Vm2Vga:Vm2Vga",
                        "description": "Configure the VGA Hardware. If you want to use high resolution modes (\u003e= 1280x1024x16) you may need to increase the vga memory option. Since QEMU 2.9 the default VGA display type is `std` for all OS types besides some Windows versions (XP and older) which use `cirrus`. The `qxl` option enables the SPICE display server. For win* OS you can select how many independent displays you want, Linux guests can add displays themself. You can also run without any graphic card, using a serial device as terminal. See the [Proxmox documentation](https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm_virtual_machines_settings) section 10.2.8 for more information and available configuration parameters.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "proxmoxve.index/vm2.Vm2 has been deprecated in favor of proxmoxve.vm/virtualmachine2.VirtualMachine2"
        }
    },
    "functions": {
        "proxmoxve:Acme/getAccount:getAccount": {
            "description": "Retrieves information about a specific ACME account.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@pulumi/proxmoxve\";\n\nconst all = proxmoxve.Acme.getAccounts({});\nconst example = all.then(all =\u003e .map(([, ]) =\u003e (proxmoxve.Acme.getAccount({\n    name: __value,\n}))));\nexport const dataProxmoxVirtualEnvironmentAcmeAccount = example;\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\nall = proxmoxve.Acme.get_accounts()\nexample = [proxmoxve.Acme.get_account(name=__value) for __key, __value in all.accounts]\npulumi.export(\"dataProxmoxVirtualEnvironmentAcmeAccount\", example)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = ProxmoxVE.Acme.GetAccounts.Invoke();\n\n    var example = .Select(__value =\u003e \n    {\n        return ProxmoxVE.Acme.GetAccount.Invoke(new()\n        {\n            Name = __value,\n        });\n    }).ToList();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"dataProxmoxVirtualEnvironmentAcmeAccount\"] = example,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Acme\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tall, err := Acme.GetAccounts(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample := \"TODO: For expression\"\n\t\tctx.Export(\"dataProxmoxVirtualEnvironmentAcmeAccount\", example)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Acme.AcmeFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = AcmeFunctions.getAccounts();\n\n        final var example = \"TODO: ForExpression\";\n\n        ctx.export(\"dataProxmoxVirtualEnvironmentAcmeAccount\", example);\n    }\n}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAccount.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The identifier of the ACME account to read.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAccount.\n",
                "properties": {
                    "account": {
                        "$ref": "#/types/proxmoxve:Acme/getAccountAccount:getAccountAccount",
                        "description": "The ACME account information.\n"
                    },
                    "directory": {
                        "type": "string",
                        "description": "The directory URL of the ACME account.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "The location URL of the ACME account.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The identifier of the ACME account to read.\n"
                    },
                    "tos": {
                        "type": "string",
                        "description": "The URL of the terms of service of the ACME account.\n"
                    }
                },
                "type": "object",
                "required": [
                    "account",
                    "directory",
                    "location",
                    "tos",
                    "id"
                ]
            }
        },
        "proxmoxve:Acme/getAccounts:getAccounts": {
            "description": "Retrieves the list of ACME accounts.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@pulumi/proxmoxve\";\n\nconst example = proxmoxve.Acme.getAccounts({});\nexport const dataProxmoxVirtualEnvironmentAcmeAccounts = example.then(example =\u003e example.accounts);\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\nexample = proxmoxve.Acme.get_accounts()\npulumi.export(\"dataProxmoxVirtualEnvironmentAcmeAccounts\", example.accounts)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = ProxmoxVE.Acme.GetAccounts.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"dataProxmoxVirtualEnvironmentAcmeAccounts\"] = example.Apply(getAccountsResult =\u003e getAccountsResult.Accounts),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Acme\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := Acme.GetAccounts(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"dataProxmoxVirtualEnvironmentAcmeAccounts\", example.Accounts)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Acme.AcmeFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AcmeFunctions.getAccounts();\n\n        ctx.export(\"dataProxmoxVirtualEnvironmentAcmeAccounts\", example.applyValue(getAccountsResult -\u003e getAccountsResult.accounts()));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: proxmoxve:Acme:getAccounts\n      Arguments: {}\noutputs:\n  dataProxmoxVirtualEnvironmentAcmeAccounts: ${example.accounts}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getAccounts.\n",
                "properties": {
                    "accounts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The identifiers of the ACME accounts.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accounts",
                    "id"
                ]
            }
        },
        "proxmoxve:Acme/getPlugin:getPlugin": {
            "description": "Retrieves a single ACME plugin by plugin ID name.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@pulumi/proxmoxve\";\n\nconst example = proxmoxve.Acme.getPlugin({\n    plugin: \"standalone\",\n});\nexport const dataProxmoxVirtualEnvironmentAcmePlugin = example;\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\nexample = proxmoxve.Acme.get_plugin(plugin=\"standalone\")\npulumi.export(\"dataProxmoxVirtualEnvironmentAcmePlugin\", example)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = ProxmoxVE.Acme.GetPlugin.Invoke(new()\n    {\n        Plugin = \"standalone\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"dataProxmoxVirtualEnvironmentAcmePlugin\"] = example,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Acme\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := Acme.GetPlugin(ctx, \u0026acme.GetPluginArgs{\n\t\t\tPlugin: \"standalone\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"dataProxmoxVirtualEnvironmentAcmePlugin\", example)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Acme.AcmeFunctions;\nimport com.pulumi.proxmoxve.Acme.inputs.GetPluginArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AcmeFunctions.getPlugin(GetPluginArgs.builder()\n            .plugin(\"standalone\")\n            .build());\n\n        ctx.export(\"dataProxmoxVirtualEnvironmentAcmePlugin\", example.applyValue(getPluginResult -\u003e getPluginResult));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: proxmoxve:Acme:getPlugin\n      Arguments:\n        plugin: standalone\noutputs:\n  dataProxmoxVirtualEnvironmentAcmePlugin: ${example}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPlugin.\n",
                "properties": {
                    "plugin": {
                        "type": "string",
                        "description": "ACME Plugin ID name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "plugin"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPlugin.\n",
                "properties": {
                    "api": {
                        "type": "string",
                        "description": "API plugin name.\n"
                    },
                    "data": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "DNS plugin data.\n"
                    },
                    "digest": {
                        "type": "string",
                        "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "plugin": {
                        "type": "string",
                        "description": "ACME Plugin ID name.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "ACME challenge type (dns, standalone).\n"
                    },
                    "validationDelay": {
                        "type": "integer",
                        "description": "Extra delay in seconds to wait before requesting validation. Allows to cope with a long TTL of DNS records (0 - 172800).\n"
                    }
                },
                "type": "object",
                "required": [
                    "api",
                    "data",
                    "digest",
                    "plugin",
                    "type",
                    "validationDelay",
                    "id"
                ]
            }
        },
        "proxmoxve:Acme/getPlugins:getPlugins": {
            "description": "Retrieves the list of ACME plugins.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@pulumi/proxmoxve\";\n\nconst example = proxmoxve.Acme.getPlugins({});\nexport const dataProxmoxVirtualEnvironmentAcmePlugins = example.then(example =\u003e example.plugins);\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\nexample = proxmoxve.Acme.get_plugins()\npulumi.export(\"dataProxmoxVirtualEnvironmentAcmePlugins\", example.plugins)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = ProxmoxVE.Acme.GetPlugins.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"dataProxmoxVirtualEnvironmentAcmePlugins\"] = example.Apply(getPluginsResult =\u003e getPluginsResult.Plugins),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Acme\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := Acme.GetPlugins(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"dataProxmoxVirtualEnvironmentAcmePlugins\", example.Plugins)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Acme.AcmeFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AcmeFunctions.getPlugins();\n\n        ctx.export(\"dataProxmoxVirtualEnvironmentAcmePlugins\", example.applyValue(getPluginsResult -\u003e getPluginsResult.plugins()));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: proxmoxve:Acme:getPlugins\n      Arguments: {}\noutputs:\n  dataProxmoxVirtualEnvironmentAcmePlugins: ${example.plugins}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getPlugins.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "plugins": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/proxmoxve:Acme/getPluginsPlugin:getPluginsPlugin"
                        },
                        "description": "List of ACME plugins\n"
                    }
                },
                "type": "object",
                "required": [
                    "plugins",
                    "id"
                ]
            }
        },
        "proxmoxve:Apt/getRepository:getRepository": {
            "description": "Retrieves an APT repository from a Proxmox VE cluster.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@pulumi/proxmoxve\";\n\nconst example = proxmoxve.Apt.getRepository({\n    filePath: \"/etc/apt/sources.list\",\n    index: 0,\n    node: \"pve\",\n});\nexport const proxmoxVirtualEnvironmentAptRepository = example;\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\nexample = proxmoxve.Apt.get_repository(file_path=\"/etc/apt/sources.list\",\n    index=0,\n    node=\"pve\")\npulumi.export(\"proxmoxVirtualEnvironmentAptRepository\", example)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = ProxmoxVE.Apt.GetRepository.Invoke(new()\n    {\n        FilePath = \"/etc/apt/sources.list\",\n        Index = 0,\n        Node = \"pve\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"proxmoxVirtualEnvironmentAptRepository\"] = example,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Apt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := Apt.GetRepository(ctx, \u0026apt.GetRepositoryArgs{\n\t\t\tFilePath: \"/etc/apt/sources.list\",\n\t\t\tIndex:    0,\n\t\t\tNode:     \"pve\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"proxmoxVirtualEnvironmentAptRepository\", example)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Apt.AptFunctions;\nimport com.pulumi.proxmoxve.Apt.inputs.GetRepositoryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AptFunctions.getRepository(GetRepositoryArgs.builder()\n            .filePath(\"/etc/apt/sources.list\")\n            .index(0)\n            .node(\"pve\")\n            .build());\n\n        ctx.export(\"proxmoxVirtualEnvironmentAptRepository\", example.applyValue(getRepositoryResult -\u003e getRepositoryResult));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: proxmoxve:Apt:getRepository\n      Arguments:\n        filePath: /etc/apt/sources.list\n        index: 0\n        node: pve\noutputs:\n  proxmoxVirtualEnvironmentAptRepository: ${example}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRepository.\n",
                "properties": {
                    "filePath": {
                        "type": "string",
                        "description": "The absolute path of the source list file that contains this repository.\n"
                    },
                    "index": {
                        "type": "integer",
                        "description": "The index within the defining source list file.\n"
                    },
                    "node": {
                        "type": "string",
                        "description": "The name of the target Proxmox VE node.\n"
                    }
                },
                "type": "object",
                "required": [
                    "filePath",
                    "index",
                    "node"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRepository.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "The associated comment.\n"
                    },
                    "components": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of components.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Indicates the activation status.\n"
                    },
                    "filePath": {
                        "type": "string",
                        "description": "The absolute path of the source list file that contains this repository.\n"
                    },
                    "fileType": {
                        "type": "string",
                        "description": "The format of the defining source list file.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of this APT repository data source.\n"
                    },
                    "index": {
                        "type": "integer",
                        "description": "The index within the defining source list file.\n"
                    },
                    "node": {
                        "type": "string",
                        "description": "The name of the target Proxmox VE node.\n"
                    },
                    "packageTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of package types.\n"
                    },
                    "suites": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of package distributions.\n"
                    },
                    "uris": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of repository URIs.\n"
                    }
                },
                "type": "object",
                "required": [
                    "comment",
                    "components",
                    "enabled",
                    "filePath",
                    "fileType",
                    "id",
                    "index",
                    "node",
                    "packageTypes",
                    "suites",
                    "uris"
                ]
            }
        },
        "proxmoxve:Apt/standard/getRepository:getRepository": {
            "description": "Retrieves an APT standard repository from a Proxmox VE cluster.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@pulumi/proxmoxve\";\n\nconst example = proxmoxve.Apt.standard.getRepository({\n    handle: \"no-subscription\",\n    node: \"pve\",\n});\nexport const proxmoxVirtualEnvironmentAptStandardRepository = example;\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\nexample = proxmoxve.Apt.standard.get_repository(handle=\"no-subscription\",\n    node=\"pve\")\npulumi.export(\"proxmoxVirtualEnvironmentAptStandardRepository\", example)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = ProxmoxVE.Apt.Standard.GetRepository.Invoke(new()\n    {\n        Handle = \"no-subscription\",\n        Node = \"pve\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"proxmoxVirtualEnvironmentAptStandardRepository\"] = example,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Apt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := Apt.GetRepository(ctx, \u0026standard.GetRepositoryArgs{\n\t\t\tHandle: \"no-subscription\",\n\t\t\tNode:   \"pve\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"proxmoxVirtualEnvironmentAptStandardRepository\", example)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Apt_standard.Apt_standardFunctions;\nimport com.pulumi.proxmoxve.Apt.inputs.GetRepositoryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = Apt/standardFunctions.getRepository(GetRepositoryArgs.builder()\n            .handle(\"no-subscription\")\n            .node(\"pve\")\n            .build());\n\n        ctx.export(\"proxmoxVirtualEnvironmentAptStandardRepository\", example.applyValue(getRepositoryResult -\u003e getRepositoryResult));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: proxmoxve:Apt/standard:getRepository\n      Arguments:\n        handle: no-subscription\n        node: pve\noutputs:\n  proxmoxVirtualEnvironmentAptStandardRepository: ${example}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRepository.\n",
                "properties": {
                    "handle": {
                        "type": "string",
                        "description": "The handle of the APT standard repository.\n"
                    },
                    "node": {
                        "type": "string",
                        "description": "The name of the target Proxmox VE node.\n"
                    }
                },
                "type": "object",
                "required": [
                    "handle",
                    "node"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRepository.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the APT standard repository.\n"
                    },
                    "filePath": {
                        "type": "string",
                        "description": "The absolute path of the source list file that contains this standard repository.\n"
                    },
                    "handle": {
                        "type": "string",
                        "description": "The handle of the APT standard repository.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of this APT standard repository data source.\n"
                    },
                    "index": {
                        "type": "integer",
                        "description": "The index within the defining source list file.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the APT standard repository.\n"
                    },
                    "node": {
                        "type": "string",
                        "description": "The name of the target Proxmox VE node.\n"
                    },
                    "status": {
                        "type": "integer",
                        "description": "Indicates the activation status.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "filePath",
                    "handle",
                    "id",
                    "index",
                    "name",
                    "node",
                    "status"
                ]
            }
        },
        "proxmoxve:Cluster/getNodes:getNodes": {
            "description": "Retrieves information about all available nodes.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@pulumi/proxmoxve\";\n\nconst availableNodes = proxmoxve.Cluster.getNodes({});\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\navailable_nodes = proxmoxve.Cluster.get_nodes()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var availableNodes = ProxmoxVE.Cluster.GetNodes.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Cluster\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Cluster.GetNodes(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Cluster.ClusterFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var availableNodes = ClusterFunctions.getNodes();\n\n    }\n}\n```\n```yaml\nvariables:\n  availableNodes:\n    fn::invoke:\n      Function: proxmoxve:Cluster:getNodes\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getNodes.\n",
                "properties": {
                    "cpuCounts": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "The CPU count for each node.\n"
                    },
                    "cpuUtilizations": {
                        "type": "array",
                        "items": {
                            "type": "number"
                        },
                        "description": "The CPU utilization on each node.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "memoryAvailables": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "The memory available on each node.\n"
                    },
                    "memoryUseds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "The memory used on each node.\n"
                    },
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The node names.\n"
                    },
                    "onlines": {
                        "type": "array",
                        "items": {
                            "type": "boolean"
                        },
                        "description": "Whether a node is online.\n"
                    },
                    "sslFingerprints": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The SSL fingerprint for each node.\n"
                    },
                    "supportLevels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The support level for each node.\n"
                    },
                    "uptimes": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "The uptime in seconds for each node.\n"
                    }
                },
                "type": "object",
                "required": [
                    "cpuCounts",
                    "cpuUtilizations",
                    "memoryAvailables",
                    "memoryUseds",
                    "names",
                    "onlines",
                    "sslFingerprints",
                    "supportLevels",
                    "uptimes",
                    "id"
                ]
            }
        },
        "proxmoxve:HA/getHAGroup:getHAGroup": {
            "description": "Retrieves information about a specific High Availability group.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@pulumi/proxmoxve\";\n\nconst all = proxmoxve.HA.getHAGroups({});\nconst example = all.then(all =\u003e .map(([, ]) =\u003e (proxmoxve.HA.getHAGroup({\n    group: __value,\n}))));\nexport const proxmoxVirtualEnvironmentHagroupsFull = example;\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\nall = proxmoxve.HA.get_ha_groups()\nexample = [proxmoxve.HA.get_ha_group(group=__value) for __key, __value in all.group_ids]\npulumi.export(\"proxmoxVirtualEnvironmentHagroupsFull\", example)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = ProxmoxVE.HA.GetHAGroups.Invoke();\n\n    var example = .Select(__value =\u003e \n    {\n        return ProxmoxVE.HA.GetHAGroup.Invoke(new()\n        {\n            Group = __value,\n        });\n    }).ToList();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"proxmoxVirtualEnvironmentHagroupsFull\"] = example,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/HA\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tall, err := HA.GetHAGroups(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample := \"TODO: For expression\"\n\t\tctx.Export(\"proxmoxVirtualEnvironmentHagroupsFull\", example)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.HA.HAFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = HAFunctions.getHAGroups();\n\n        final var example = \"TODO: ForExpression\";\n\n        ctx.export(\"proxmoxVirtualEnvironmentHagroupsFull\", example);\n    }\n}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getHAGroup.\n",
                "properties": {
                    "group": {
                        "type": "string",
                        "description": "The identifier of the High Availability group to read.\n"
                    }
                },
                "type": "object",
                "required": [
                    "group"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getHAGroup.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "The comment associated with this group\n"
                    },
                    "group": {
                        "type": "string",
                        "description": "The identifier of the High Availability group to read.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of this resource.\n"
                    },
                    "noFailback": {
                        "type": "boolean",
                        "description": "A flag that indicates that failing back to a higher priority node is disabled for this HA group.\n"
                    },
                    "nodes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "integer"
                        },
                        "description": "The member nodes for this group. They are provided as a map, where the keys are the node names and the values represent their priority: integers for known priorities or `null` for unset priorities.\n"
                    },
                    "restricted": {
                        "type": "boolean",
                        "description": "A flag that indicates that other nodes may not be used to run resources associated to this HA group.\n"
                    }
                },
                "type": "object",
                "required": [
                    "comment",
                    "group",
                    "id",
                    "noFailback",
                    "nodes",
                    "restricted"
                ]
            }
        },
        "proxmoxve:HA/getHAGroups:getHAGroups": {
            "description": "Retrieves the list of High Availability groups.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@pulumi/proxmoxve\";\n\nconst example = proxmoxve.HA.getHAGroups({});\nexport const dataProxmoxVirtualEnvironmentHagroups = example.then(example =\u003e example.groupIds);\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\nexample = proxmoxve.HA.get_ha_groups()\npulumi.export(\"dataProxmoxVirtualEnvironmentHagroups\", example.group_ids)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = ProxmoxVE.HA.GetHAGroups.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"dataProxmoxVirtualEnvironmentHagroups\"] = example.Apply(getHAGroupsResult =\u003e getHAGroupsResult.GroupIds),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/HA\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := HA.GetHAGroups(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"dataProxmoxVirtualEnvironmentHagroups\", example.GroupIds)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.HA.HAFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = HAFunctions.getHAGroups();\n\n        ctx.export(\"dataProxmoxVirtualEnvironmentHagroups\", example.applyValue(getHAGroupsResult -\u003e getHAGroupsResult.groupIds()));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: proxmoxve:HA:getHAGroups\n      Arguments: {}\noutputs:\n  dataProxmoxVirtualEnvironmentHagroups: ${example.groupIds}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getHAGroups.\n",
                "properties": {
                    "groupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The identifiers of the High Availability groups.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of this resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "groupIds",
                    "id"
                ]
            }
        },
        "proxmoxve:HA/getHAResource:getHAResource": {
            "description": "Retrieves the list of High Availability resources.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@pulumi/proxmoxve\";\n\nconst all = proxmoxve.HA.getHAResources({});\nconst example = all.then(all =\u003e .map(([, ]) =\u003e (proxmoxve.HA.getHAResource({\n    resourceId: __value,\n}))));\nexport const proxmoxVirtualEnvironmentHaresourcesFull = example;\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\nall = proxmoxve.HA.get_ha_resources()\nexample = [proxmoxve.HA.get_ha_resource(resource_id=__value) for __key, __value in all.resource_ids]\npulumi.export(\"proxmoxVirtualEnvironmentHaresourcesFull\", example)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = ProxmoxVE.HA.GetHAResources.Invoke();\n\n    var example = .Select(__value =\u003e \n    {\n        return ProxmoxVE.HA.GetHAResource.Invoke(new()\n        {\n            ResourceId = __value,\n        });\n    }).ToList();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"proxmoxVirtualEnvironmentHaresourcesFull\"] = example,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/HA\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tall, err := HA.GetHAResources(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample := \"TODO: For expression\"\n\t\tctx.Export(\"proxmoxVirtualEnvironmentHaresourcesFull\", example)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.HA.HAFunctions;\nimport com.pulumi.proxmoxve.HA.inputs.GetHAResourcesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = HAFunctions.getHAResources();\n\n        final var example = \"TODO: ForExpression\";\n\n        ctx.export(\"proxmoxVirtualEnvironmentHaresourcesFull\", example);\n    }\n}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getHAResource.\n",
                "properties": {
                    "resourceId": {
                        "type": "string",
                        "description": "The identifier of the Proxmox HA resource to read.\n"
                    }
                },
                "type": "object",
                "required": [
                    "resourceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getHAResource.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "The comment associated with this resource.\n"
                    },
                    "group": {
                        "type": "string",
                        "description": "The identifier of the High Availability group this resource is a member of.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of this resource.\n"
                    },
                    "maxRelocate": {
                        "type": "integer",
                        "description": "The maximal number of relocation attempts.\n"
                    },
                    "maxRestart": {
                        "type": "integer",
                        "description": "The maximal number of restart attempts.\n"
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "The identifier of the Proxmox HA resource to read.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The desired state of the resource.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of High Availability resource (`vm` or `ct`).\n"
                    }
                },
                "type": "object",
                "required": [
                    "comment",
                    "group",
                    "id",
                    "maxRelocate",
                    "maxRestart",
                    "resourceId",
                    "state",
                    "type"
                ]
            }
        },
        "proxmoxve:HA/getHAResources:getHAResources": {
            "description": "Retrieves the list of High Availability resources.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@pulumi/proxmoxve\";\n\nconst exampleAll = proxmoxve.HA.getHAResources({});\nconst exampleVm = proxmoxve.HA.getHAResources({\n    type: \"vm\",\n});\nexport const dataProxmoxVirtualEnvironmentHaresources = {\n    all: exampleAll.then(exampleAll =\u003e exampleAll.resourceIds),\n    vms: exampleVm.then(exampleVm =\u003e exampleVm.resourceIds),\n};\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\nexample_all = proxmoxve.HA.get_ha_resources()\nexample_vm = proxmoxve.HA.get_ha_resources(type=\"vm\")\npulumi.export(\"dataProxmoxVirtualEnvironmentHaresources\", {\n    \"all\": example_all.resource_ids,\n    \"vms\": example_vm.resource_ids,\n})\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleAll = ProxmoxVE.HA.GetHAResources.Invoke();\n\n    var exampleVm = ProxmoxVE.HA.GetHAResources.Invoke(new()\n    {\n        Type = \"vm\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"dataProxmoxVirtualEnvironmentHaresources\"] = \n        {\n            { \"all\", exampleAll.Apply(getHAResourcesResult =\u003e getHAResourcesResult.ResourceIds) },\n            { \"vms\", exampleVm.Apply(getHAResourcesResult =\u003e getHAResourcesResult.ResourceIds) },\n        },\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/HA\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\nfunc main() {\npulumi.Run(func(ctx *pulumi.Context) error {\nexampleAll, err := HA.GetHAResources(ctx, nil, nil);\nif err != nil {\nreturn err\n}\nexampleVm, err := HA.GetHAResources(ctx, \u0026ha.GetHAResourcesArgs{\nType: pulumi.StringRef(\"vm\"),\n}, nil);\nif err != nil {\nreturn err\n}\nctx.Export(\"dataProxmoxVirtualEnvironmentHaresources\", interface{}Map{\n\"all\": exampleAll.ResourceIds,\n\"vms\": exampleVm.ResourceIds,\n})\nreturn nil\n})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.HA.HAFunctions;\nimport com.pulumi.proxmoxve.HA.inputs.GetHAResourcesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleAll = HAFunctions.getHAResources();\n\n        final var exampleVm = HAFunctions.getHAResources(GetHAResourcesArgs.builder()\n            .type(\"vm\")\n            .build());\n\n        ctx.export(\"dataProxmoxVirtualEnvironmentHaresources\", %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference));\n    }\n}\n```\n```yaml\nvariables:\n  exampleAll:\n    fn::invoke:\n      Function: proxmoxve:HA:getHAResources\n      Arguments: {}\n  exampleVm:\n    fn::invoke:\n      Function: proxmoxve:HA:getHAResources\n      Arguments:\n        type: vm\noutputs:\n  dataProxmoxVirtualEnvironmentHaresources:\n    all: ${exampleAll.resourceIds}\n    vms: ${exampleVm.resourceIds}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getHAResources.\n",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "The type of High Availability resources to fetch (`vm` or `ct`). All resources will be fetched if this option is unset.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getHAResources.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of this resource.\n"
                    },
                    "resourceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The identifiers of the High Availability resources.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of High Availability resources to fetch (`vm` or `ct`). All resources will be fetched if this option is unset.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "resourceIds"
                ]
            }
        },
        "proxmoxve:Hardware/getMappings:getMappings": {
            "description": "Retrieves a list of hardware mapping resources.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@pulumi/proxmoxve\";\n\nconst example-pci = proxmoxve.Hardware.getMappings({\n    checkNode: \"pve\",\n    type: \"pci\",\n});\nconst example-usb = proxmoxve.Hardware.getMappings({\n    checkNode: \"pve\",\n    type: \"usb\",\n});\nexport const dataProxmoxVirtualEnvironmentHardwareMappingsPci = example_pci;\nexport const dataProxmoxVirtualEnvironmentHardwareMappingsUsb = example_usb;\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\nexample_pci = proxmoxve.Hardware.get_mappings(check_node=\"pve\",\n    type=\"pci\")\nexample_usb = proxmoxve.Hardware.get_mappings(check_node=\"pve\",\n    type=\"usb\")\npulumi.export(\"dataProxmoxVirtualEnvironmentHardwareMappingsPci\", example_pci)\npulumi.export(\"dataProxmoxVirtualEnvironmentHardwareMappingsUsb\", example_usb)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example_pci = ProxmoxVE.Hardware.GetMappings.Invoke(new()\n    {\n        CheckNode = \"pve\",\n        Type = \"pci\",\n    });\n\n    var example_usb = ProxmoxVE.Hardware.GetMappings.Invoke(new()\n    {\n        CheckNode = \"pve\",\n        Type = \"usb\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"dataProxmoxVirtualEnvironmentHardwareMappingsPci\"] = example_pci,\n        [\"dataProxmoxVirtualEnvironmentHardwareMappingsUsb\"] = example_usb,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Hardware\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample_pci, err := Hardware.GetMappings(ctx, \u0026hardware.GetMappingsArgs{\n\t\t\tCheckNode: pulumi.StringRef(\"pve\"),\n\t\t\tType:      \"pci\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample_usb, err := Hardware.GetMappings(ctx, \u0026hardware.GetMappingsArgs{\n\t\t\tCheckNode: pulumi.StringRef(\"pve\"),\n\t\t\tType:      \"usb\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"dataProxmoxVirtualEnvironmentHardwareMappingsPci\", example_pci)\n\t\tctx.Export(\"dataProxmoxVirtualEnvironmentHardwareMappingsUsb\", example_usb)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Hardware.HardwareFunctions;\nimport com.pulumi.proxmoxve.Hardware.inputs.GetMappingsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example-pci = HardwareFunctions.getMappings(GetMappingsArgs.builder()\n            .checkNode(\"pve\")\n            .type(\"pci\")\n            .build());\n\n        final var example-usb = HardwareFunctions.getMappings(GetMappingsArgs.builder()\n            .checkNode(\"pve\")\n            .type(\"usb\")\n            .build());\n\n        ctx.export(\"dataProxmoxVirtualEnvironmentHardwareMappingsPci\", example_pci);\n        ctx.export(\"dataProxmoxVirtualEnvironmentHardwareMappingsUsb\", example_usb);\n    }\n}\n```\n```yaml\nvariables:\n  example-pci:\n    fn::invoke:\n      Function: proxmoxve:Hardware:getMappings\n      Arguments:\n        checkNode: pve\n        type: pci\n  example-usb:\n    fn::invoke:\n      Function: proxmoxve:Hardware:getMappings\n      Arguments:\n        checkNode: pve\n        type: usb\noutputs:\n  dataProxmoxVirtualEnvironmentHardwareMappingsPci: ${[\"example-pci\"]}\n  dataProxmoxVirtualEnvironmentHardwareMappingsUsb: ${[\"example-usb\"]}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getMappings.\n",
                "properties": {
                    "checkNode": {
                        "type": "string",
                        "description": "The name of the node whose configurations should be checked for correctness.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the hardware mappings.\n"
                    }
                },
                "type": "object",
                "required": [
                    "type"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getMappings.\n",
                "properties": {
                    "checkNode": {
                        "type": "string",
                        "description": "The name of the node whose configurations should be checked for correctness.\n"
                    },
                    "checks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/proxmoxve:Hardware/getMappingsCheck:getMappingsCheck"
                        },
                        "description": "Might contain relevant diagnostics about incorrect configurations.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of this hardware mappings data source.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The identifiers of the hardware mappings.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the hardware mappings.\n"
                    }
                },
                "type": "object",
                "required": [
                    "checks",
                    "id",
                    "ids",
                    "type"
                ]
            }
        },
        "proxmoxve:Hardware/mapping/getPci:getPci": {
            "description": "Retrieves a PCI hardware mapping from a Proxmox VE cluster.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@pulumi/proxmoxve\";\n\nconst example = proxmoxve.Hardware.mapping.getPci({\n    name: \"example\",\n});\nexport const dataProxmoxVirtualEnvironmentHardwareMappingPci = example;\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\nexample = proxmoxve.Hardware.mapping.get_pci(name=\"example\")\npulumi.export(\"dataProxmoxVirtualEnvironmentHardwareMappingPci\", example)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = ProxmoxVE.Hardware.Mapping.GetPci.Invoke(new()\n    {\n        Name = \"example\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"dataProxmoxVirtualEnvironmentHardwareMappingPci\"] = example,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Hardware\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := Hardware.GetPci(ctx, \u0026mapping.GetPciArgs{\n\t\t\tName: \"example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"dataProxmoxVirtualEnvironmentHardwareMappingPci\", example)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Hardware_mapping.Hardware_mappingFunctions;\nimport com.pulumi.proxmoxve.Hardware.inputs.GetPciArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = Hardware/mappingFunctions.getPci(GetPciArgs.builder()\n            .name(\"example\")\n            .build());\n\n        ctx.export(\"dataProxmoxVirtualEnvironmentHardwareMappingPci\", example.applyValue(getPciResult -\u003e getPciResult));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: proxmoxve:Hardware/mapping:getPci\n      Arguments:\n        name: example\noutputs:\n  dataProxmoxVirtualEnvironmentHardwareMappingPci: ${example}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPci.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of this PCI hardware mapping.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPci.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "The comment of this PCI hardware mapping.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of this PCI hardware mapping data source.\n"
                    },
                    "maps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/proxmoxve:Hardware/mapping/getPciMap:getPciMap"
                        },
                        "description": "The actual map of devices for the hardware mapping.\n"
                    },
                    "mediatedDevices": {
                        "type": "boolean",
                        "description": "Indicates whether to use with mediated devices.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of this PCI hardware mapping.\n"
                    }
                },
                "type": "object",
                "required": [
                    "comment",
                    "id",
                    "maps",
                    "mediatedDevices",
                    "name"
                ]
            }
        },
        "proxmoxve:Hardware/mapping/getUsb:getUsb": {
            "description": "Retrieves a USB hardware mapping from a Proxmox VE cluster.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@pulumi/proxmoxve\";\n\nconst example = proxmoxve.Hardware.mapping.getUsb({\n    name: \"example\",\n});\nexport const dataProxmoxVirtualEnvironmentHardwareMappingUsb = example;\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\nexample = proxmoxve.Hardware.mapping.get_usb(name=\"example\")\npulumi.export(\"dataProxmoxVirtualEnvironmentHardwareMappingUsb\", example)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = ProxmoxVE.Hardware.Mapping.GetUsb.Invoke(new()\n    {\n        Name = \"example\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"dataProxmoxVirtualEnvironmentHardwareMappingUsb\"] = example,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Hardware\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := Hardware.GetUsb(ctx, \u0026mapping.GetUsbArgs{\n\t\t\tName: \"example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"dataProxmoxVirtualEnvironmentHardwareMappingUsb\", example)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Hardware_mapping.Hardware_mappingFunctions;\nimport com.pulumi.proxmoxve.Hardware.inputs.GetUsbArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = Hardware/mappingFunctions.getUsb(GetUsbArgs.builder()\n            .name(\"example\")\n            .build());\n\n        ctx.export(\"dataProxmoxVirtualEnvironmentHardwareMappingUsb\", example.applyValue(getUsbResult -\u003e getUsbResult));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: proxmoxve:Hardware/mapping:getUsb\n      Arguments:\n        name: example\noutputs:\n  dataProxmoxVirtualEnvironmentHardwareMappingUsb: ${example}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUsb.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of this USB hardware mapping.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getUsb.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "The comment of this USB hardware mapping.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of this USB hardware mapping data source.\n"
                    },
                    "maps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/proxmoxve:Hardware/mapping/getUsbMap:getUsbMap"
                        },
                        "description": "The actual map of devices for the hardware mapping.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of this USB hardware mapping.\n"
                    }
                },
                "type": "object",
                "required": [
                    "comment",
                    "id",
                    "maps",
                    "name"
                ]
            }
        },
        "proxmoxve:Network/getDNS:getDNS": {
            "description": "Retrieves the DNS configuration for a specific node.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@pulumi/proxmoxve\";\n\nconst firstNode = proxmoxve.Network.getDNS({\n    nodeName: \"first-node\",\n});\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\nfirst_node = proxmoxve.Network.get_dns(node_name=\"first-node\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var firstNode = ProxmoxVE.Network.GetDNS.Invoke(new()\n    {\n        NodeName = \"first-node\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Network\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Network.GetDNS(ctx, \u0026network.GetDNSArgs{\n\t\t\tNodeName: \"first-node\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Network.NetworkFunctions;\nimport com.pulumi.proxmoxve.Network.inputs.GetDNSArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var firstNode = NetworkFunctions.getDNS(GetDNSArgs.builder()\n            .nodeName(\"first-node\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  firstNode:\n    fn::invoke:\n      Function: proxmoxve:Network:getDNS\n      Arguments:\n        nodeName: first-node\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDNS.\n",
                "properties": {
                    "nodeName": {
                        "type": "string",
                        "description": "A node name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "nodeName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDNS.\n",
                "properties": {
                    "domain": {
                        "type": "string",
                        "description": "The DNS search domain.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "nodeName": {
                        "type": "string"
                    },
                    "servers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The DNS servers.\n"
                    }
                },
                "type": "object",
                "required": [
                    "domain",
                    "nodeName",
                    "servers",
                    "id"
                ]
            }
        },
        "proxmoxve:Network/getHosts:getHosts": {
            "description": "Retrieves all the host entries from a specific node.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@pulumi/proxmoxve\";\n\nconst firstNodeHostEntries = proxmoxve.Network.getHosts({\n    nodeName: \"first-node\",\n});\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\nfirst_node_host_entries = proxmoxve.Network.get_hosts(node_name=\"first-node\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var firstNodeHostEntries = ProxmoxVE.Network.GetHosts.Invoke(new()\n    {\n        NodeName = \"first-node\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Network\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Network.GetHosts(ctx, \u0026network.GetHostsArgs{\n\t\t\tNodeName: \"first-node\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Network.NetworkFunctions;\nimport com.pulumi.proxmoxve.Network.inputs.GetHostsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var firstNodeHostEntries = NetworkFunctions.getHosts(GetHostsArgs.builder()\n            .nodeName(\"first-node\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  firstNodeHostEntries:\n    fn::invoke:\n      Function: proxmoxve:Network:getHosts\n      Arguments:\n        nodeName: first-node\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getHosts.\n",
                "properties": {
                    "nodeName": {
                        "type": "string",
                        "description": "A node name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "nodeName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getHosts.\n",
                "properties": {
                    "addresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IP addresses.\n"
                    },
                    "digest": {
                        "type": "string",
                        "description": "The SHA1 digest.\n"
                    },
                    "entries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/proxmoxve:Network/getHostsEntry:getHostsEntry"
                        },
                        "description": "The host entries (conversion of `addresses` and `hostnames` into\nobjects).\n"
                    },
                    "hostnames": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "The hostnames associated with each of the IP addresses.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "nodeName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "addresses",
                    "digest",
                    "entries",
                    "hostnames",
                    "nodeName",
                    "id"
                ]
            }
        },
        "proxmoxve:Network/getTime:getTime": {
            "description": "Retrieves the current time for a specific node.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@pulumi/proxmoxve\";\n\nconst firstNodeTime = proxmoxve.Network.getTime({\n    nodeName: \"first-node\",\n});\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\nfirst_node_time = proxmoxve.Network.get_time(node_name=\"first-node\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var firstNodeTime = ProxmoxVE.Network.GetTime.Invoke(new()\n    {\n        NodeName = \"first-node\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Network\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Network.GetTime(ctx, \u0026network.GetTimeArgs{\n\t\t\tNodeName: \"first-node\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Network.NetworkFunctions;\nimport com.pulumi.proxmoxve.Network.inputs.GetTimeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var firstNodeTime = NetworkFunctions.getTime(GetTimeArgs.builder()\n            .nodeName(\"first-node\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  firstNodeTime:\n    fn::invoke:\n      Function: proxmoxve:Network:getTime\n      Arguments:\n        nodeName: first-node\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTime.\n",
                "properties": {
                    "nodeName": {
                        "type": "string",
                        "description": "A node name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "nodeName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTime.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "localTime": {
                        "type": "string",
                        "description": "The node's local time.\n"
                    },
                    "nodeName": {
                        "type": "string"
                    },
                    "timeZone": {
                        "type": "string",
                        "description": "The node's time zone.\n"
                    },
                    "utcTime": {
                        "type": "string",
                        "description": "The node's local time formatted as UTC.\n"
                    }
                },
                "type": "object",
                "required": [
                    "localTime",
                    "nodeName",
                    "timeZone",
                    "utcTime",
                    "id"
                ]
            }
        },
        "proxmoxve:Network/getVersion:getVersion": {
            "description": "Retrieves API version details.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@pulumi/proxmoxve\";\n\nconst example = proxmoxve.Network.getVersion({});\nexport const dataProxmoxVirtualEnvironmentVersion = {\n    release: example.then(example =\u003e example.release),\n    repository_id: example.then(example =\u003e example.repositoryId),\n    version: example.then(example =\u003e example.version),\n};\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\nexample = proxmoxve.Network.get_version()\npulumi.export(\"dataProxmoxVirtualEnvironmentVersion\", {\n    \"release\": example.release,\n    \"repository_id\": example.repository_id,\n    \"version\": example.version,\n})\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = ProxmoxVE.Network.GetVersion.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"dataProxmoxVirtualEnvironmentVersion\"] = \n        {\n            { \"release\", example.Apply(getVersionResult =\u003e getVersionResult.Release) },\n            { \"repository_id\", example.Apply(getVersionResult =\u003e getVersionResult.RepositoryId) },\n            { \"version\", example.Apply(getVersionResult =\u003e getVersionResult.Version) },\n        },\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Network\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := Network.GetVersion(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"dataProxmoxVirtualEnvironmentVersion\", pulumi.StringMap{\n\t\t\t\"release\":       example.Release,\n\t\t\t\"repository_id\": example.RepositoryId,\n\t\t\t\"version\":       example.Version,\n\t\t})\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Network.NetworkFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = NetworkFunctions.getVersion();\n\n        ctx.export(\"dataProxmoxVirtualEnvironmentVersion\", %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: proxmoxve:Network:getVersion\n      Arguments: {}\noutputs:\n  dataProxmoxVirtualEnvironmentVersion:\n    release: ${example.release}\n    repository_id: ${example.repositoryId}\n    version: ${example.version}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getVersion.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Placeholder identifier attribute.\n"
                    },
                    "release": {
                        "type": "string",
                        "description": "The current Proxmox VE point release in `x.y` format.\n"
                    },
                    "repositoryId": {
                        "type": "string",
                        "description": "The short git revision from which this version was build.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The full pve-manager package version of this node.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "release",
                    "repositoryId",
                    "version"
                ]
            }
        },
        "proxmoxve:Permission/getGroup:getGroup": {
            "description": "Retrieves information about a specific user group.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@pulumi/proxmoxve\";\n\nconst operationsTeam = proxmoxve.Permission.getGroup({\n    groupId: \"operations-team\",\n});\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\noperations_team = proxmoxve.Permission.get_group(group_id=\"operations-team\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var operationsTeam = ProxmoxVE.Permission.GetGroup.Invoke(new()\n    {\n        GroupId = \"operations-team\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Permission\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Permission.GetGroup(ctx, \u0026permission.GetGroupArgs{\n\t\t\tGroupId: \"operations-team\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Permission.PermissionFunctions;\nimport com.pulumi.proxmoxve.Permission.inputs.GetGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var operationsTeam = PermissionFunctions.getGroup(GetGroupArgs.builder()\n            .groupId(\"operations-team\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  operationsTeam:\n    fn::invoke:\n      Function: proxmoxve:Permission:getGroup\n      Arguments:\n        groupId: operations-team\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGroup.\n",
                "properties": {
                    "groupId": {
                        "type": "string",
                        "description": "The group identifier.\n"
                    }
                },
                "type": "object",
                "required": [
                    "groupId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGroup.\n",
                "properties": {
                    "acls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/proxmoxve:Permission/getGroupAcl:getGroupAcl"
                        },
                        "description": "The access control list.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "The group comment.\n"
                    },
                    "groupId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The group members as a list with `username@realm` entries.\n"
                    }
                },
                "type": "object",
                "required": [
                    "acls",
                    "comment",
                    "groupId",
                    "members",
                    "id"
                ]
            }
        },
        "proxmoxve:Permission/getGroups:getGroups": {
            "description": "Retrieves basic information about all available user groups.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@pulumi/proxmoxve\";\n\nconst availableGroups = proxmoxve.Permission.getGroups({});\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\navailable_groups = proxmoxve.Permission.get_groups()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var availableGroups = ProxmoxVE.Permission.GetGroups.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Permission\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Permission.GetGroups(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Permission.PermissionFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var availableGroups = PermissionFunctions.getGroups();\n\n    }\n}\n```\n```yaml\nvariables:\n  availableGroups:\n    fn::invoke:\n      Function: proxmoxve:Permission:getGroups\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getGroups.\n",
                "properties": {
                    "comments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The group comments.\n"
                    },
                    "groupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The group identifiers.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "comments",
                    "groupIds",
                    "id"
                ]
            }
        },
        "proxmoxve:Permission/getPool:getPool": {
            "description": "Retrieves information about a specific resource pool.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@pulumi/proxmoxve\";\n\nconst operationsPool = proxmoxve.Permission.getPool({\n    poolId: \"operations\",\n});\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\noperations_pool = proxmoxve.Permission.get_pool(pool_id=\"operations\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var operationsPool = ProxmoxVE.Permission.GetPool.Invoke(new()\n    {\n        PoolId = \"operations\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Permission\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Permission.GetPool(ctx, \u0026permission.GetPoolArgs{\n\t\t\tPoolId: \"operations\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Permission.PermissionFunctions;\nimport com.pulumi.proxmoxve.Permission.inputs.GetPoolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var operationsPool = PermissionFunctions.getPool(GetPoolArgs.builder()\n            .poolId(\"operations\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  operationsPool:\n    fn::invoke:\n      Function: proxmoxve:Permission:getPool\n      Arguments:\n        poolId: operations\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPool.\n",
                "properties": {
                    "poolId": {
                        "type": "string",
                        "description": "The pool identifier.\n"
                    }
                },
                "type": "object",
                "required": [
                    "poolId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPool.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "The pool comment.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/proxmoxve:Permission/getPoolMember:getPoolMember"
                        },
                        "description": "The pool members.\n"
                    },
                    "poolId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "comment",
                    "members",
                    "poolId",
                    "id"
                ]
            }
        },
        "proxmoxve:Permission/getPools:getPools": {
            "description": "Retrieves the identifiers for all the available resource pools.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@pulumi/proxmoxve\";\n\nconst availablePools = proxmoxve.Permission.getPools({});\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\navailable_pools = proxmoxve.Permission.get_pools()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var availablePools = ProxmoxVE.Permission.GetPools.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Permission\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Permission.GetPools(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Permission.PermissionFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var availablePools = PermissionFunctions.getPools();\n\n    }\n}\n```\n```yaml\nvariables:\n  availablePools:\n    fn::invoke:\n      Function: proxmoxve:Permission:getPools\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getPools.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "poolIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The pool identifiers.\n"
                    }
                },
                "type": "object",
                "required": [
                    "poolIds",
                    "id"
                ]
            }
        },
        "proxmoxve:Permission/getRole:getRole": {
            "description": "Retrieves information about a specific role.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@pulumi/proxmoxve\";\n\nconst operationsRole = proxmoxve.Permission.getRole({\n    roleId: \"operations\",\n});\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\noperations_role = proxmoxve.Permission.get_role(role_id=\"operations\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var operationsRole = ProxmoxVE.Permission.GetRole.Invoke(new()\n    {\n        RoleId = \"operations\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Permission\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Permission.GetRole(ctx, \u0026permission.GetRoleArgs{\n\t\t\tRoleId: \"operations\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Permission.PermissionFunctions;\nimport com.pulumi.proxmoxve.Permission.inputs.GetRoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var operationsRole = PermissionFunctions.getRole(GetRoleArgs.builder()\n            .roleId(\"operations\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  operationsRole:\n    fn::invoke:\n      Function: proxmoxve:Permission:getRole\n      Arguments:\n        roleId: operations\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRole.\n",
                "properties": {
                    "roleId": {
                        "type": "string",
                        "description": "The role identifier.\n"
                    }
                },
                "type": "object",
                "required": [
                    "roleId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRole.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "privileges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The role privileges\n"
                    },
                    "roleId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "privileges",
                    "roleId",
                    "id"
                ]
            }
        },
        "proxmoxve:Permission/getRoles:getRoles": {
            "description": "Retrieves information about all the available roles.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@pulumi/proxmoxve\";\n\nconst availableRoles = proxmoxve.Permission.getRoles({});\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\navailable_roles = proxmoxve.Permission.get_roles()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var availableRoles = ProxmoxVE.Permission.GetRoles.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Permission\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Permission.GetRoles(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Permission.PermissionFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var availableRoles = PermissionFunctions.getRoles();\n\n    }\n}\n```\n```yaml\nvariables:\n  availableRoles:\n    fn::invoke:\n      Function: proxmoxve:Permission:getRoles\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getRoles.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "privileges": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "The role privileges.\n"
                    },
                    "roleIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The role identifiers.\n"
                    },
                    "specials": {
                        "type": "array",
                        "items": {
                            "type": "boolean"
                        },
                        "description": "Whether the role is special (built-in).\n"
                    }
                },
                "type": "object",
                "required": [
                    "privileges",
                    "roleIds",
                    "specials",
                    "id"
                ]
            }
        },
        "proxmoxve:Permission/getUser:getUser": {
            "description": "Retrieves information about a specific user.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@pulumi/proxmoxve\";\n\nconst operationsUser = proxmoxve.Permission.getUser({\n    userId: \"operation@pam\",\n});\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\noperations_user = proxmoxve.Permission.get_user(user_id=\"operation@pam\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var operationsUser = ProxmoxVE.Permission.GetUser.Invoke(new()\n    {\n        UserId = \"operation@pam\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Permission\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Permission.GetUser(ctx, \u0026permission.GetUserArgs{\n\t\t\tUserId: \"operation@pam\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Permission.PermissionFunctions;\nimport com.pulumi.proxmoxve.Permission.inputs.GetUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var operationsUser = PermissionFunctions.getUser(GetUserArgs.builder()\n            .userId(\"operation@pam\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  operationsUser:\n    fn::invoke:\n      Function: proxmoxve:Permission:getUser\n      Arguments:\n        userId: operation@pam\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "userId": {
                        "type": "string",
                        "description": "The user identifier.\n"
                    }
                },
                "type": "object",
                "required": [
                    "userId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "acls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/proxmoxve:Permission/getUserAcl:getUserAcl"
                        },
                        "description": "The access control list.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "The user comment.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "The user's email address.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the user account is enabled.\n"
                    },
                    "expirationDate": {
                        "type": "string",
                        "description": "The user account's expiration date (RFC 3339).\n"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "The user's first name.\n"
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The user's groups.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "keys": {
                        "type": "string",
                        "description": "The user's keys.\n"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "The user's last name.\n"
                    },
                    "userId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "acls",
                    "comment",
                    "email",
                    "enabled",
                    "expirationDate",
                    "firstName",
                    "groups",
                    "keys",
                    "lastName",
                    "userId",
                    "id"
                ]
            }
        },
        "proxmoxve:Permission/getUsers:getUsers": {
            "description": "Retrieves information about all the available users.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@pulumi/proxmoxve\";\n\nconst availableUsers = proxmoxve.Permission.getUsers({});\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\navailable_users = proxmoxve.Permission.get_users()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var availableUsers = ProxmoxVE.Permission.GetUsers.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Permission\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Permission.GetUsers(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Permission.PermissionFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var availableUsers = PermissionFunctions.getUsers();\n\n    }\n}\n```\n```yaml\nvariables:\n  availableUsers:\n    fn::invoke:\n      Function: proxmoxve:Permission:getUsers\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getUsers.\n",
                "properties": {
                    "comments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The user comments.\n"
                    },
                    "emails": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The users' email addresses.\n"
                    },
                    "enableds": {
                        "type": "array",
                        "items": {
                            "type": "boolean"
                        },
                        "description": "Whether a user account is enabled.\n"
                    },
                    "expirationDates": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The user accounts' expiration dates (RFC 3339).\n"
                    },
                    "firstNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The users' first names.\n"
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "The users' groups.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "keys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The users' keys.\n"
                    },
                    "lastNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The users' last names.\n"
                    },
                    "userIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The user identifiers.\n"
                    }
                },
                "type": "object",
                "required": [
                    "comments",
                    "emails",
                    "enableds",
                    "expirationDates",
                    "firstNames",
                    "groups",
                    "keys",
                    "lastNames",
                    "userIds",
                    "id"
                ]
            }
        },
        "proxmoxve:Storage/getDatastores:getDatastores": {
            "description": "Retrieves information about all the datastores available to a specific node.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@pulumi/proxmoxve\";\n\nconst firstNode = proxmoxve.Storage.getDatastores({\n    nodeName: \"first-node\",\n});\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\nfirst_node = proxmoxve.Storage.get_datastores(node_name=\"first-node\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var firstNode = ProxmoxVE.Storage.GetDatastores.Invoke(new()\n    {\n        NodeName = \"first-node\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/Storage\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Storage.GetDatastores(ctx, \u0026storage.GetDatastoresArgs{\n\t\t\tNodeName: \"first-node\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.Storage.StorageFunctions;\nimport com.pulumi.proxmoxve.Storage.inputs.GetDatastoresArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var firstNode = StorageFunctions.getDatastores(GetDatastoresArgs.builder()\n            .nodeName(\"first-node\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  firstNode:\n    fn::invoke:\n      Function: proxmoxve:Storage:getDatastores\n      Arguments:\n        nodeName: first-node\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDatastores.\n",
                "properties": {
                    "nodeName": {
                        "type": "string",
                        "description": "A node name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "nodeName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDatastores.\n",
                "properties": {
                    "actives": {
                        "type": "array",
                        "items": {
                            "type": "boolean"
                        },
                        "description": "Whether the datastore is active.\n"
                    },
                    "contentTypes": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "The allowed content types.\n"
                    },
                    "datastoreIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The datastore identifiers.\n"
                    },
                    "enableds": {
                        "type": "array",
                        "items": {
                            "type": "boolean"
                        },
                        "description": "Whether the datastore is enabled.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "nodeName": {
                        "type": "string"
                    },
                    "shareds": {
                        "type": "array",
                        "items": {
                            "type": "boolean"
                        },
                        "description": "Whether the datastore is shared.\n"
                    },
                    "spaceAvailables": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "The available space in bytes.\n"
                    },
                    "spaceTotals": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "The total space in bytes.\n"
                    },
                    "spaceUseds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "The used space in bytes.\n"
                    },
                    "types": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The storage types.\n"
                    }
                },
                "type": "object",
                "required": [
                    "actives",
                    "contentTypes",
                    "datastoreIds",
                    "enableds",
                    "nodeName",
                    "shareds",
                    "spaceAvailables",
                    "spaceTotals",
                    "spaceUseds",
                    "types",
                    "id"
                ]
            }
        },
        "proxmoxve:VM/getVirtualMachine:getVirtualMachine": {
            "description": "Retrieves information about a specific VM.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@pulumi/proxmoxve\";\n\nconst testVm = proxmoxve.VM.getVirtualMachine({\n    nodeName: \"test\",\n    vmId: 100,\n});\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\ntest_vm = proxmoxve.VM.get_virtual_machine(node_name=\"test\",\n    vm_id=100)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testVm = ProxmoxVE.VM.GetVirtualMachine.Invoke(new()\n    {\n        NodeName = \"test\",\n        VmId = 100,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/VM\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := VM.GetVirtualMachine(ctx, \u0026vm.GetVirtualMachineArgs{\n\t\t\tNodeName: \"test\",\n\t\t\tVmId:     100,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.VM.VMFunctions;\nimport com.pulumi.proxmoxve.VM.inputs.GetVirtualMachineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var testVm = VMFunctions.getVirtualMachine(GetVirtualMachineArgs.builder()\n            .nodeName(\"test\")\n            .vmId(100)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  testVm:\n    fn::invoke:\n      Function: proxmoxve:VM:getVirtualMachine\n      Arguments:\n        nodeName: test\n        vmId: 100\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVirtualMachine.\n",
                "properties": {
                    "nodeName": {
                        "type": "string",
                        "description": "The node name.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the VM\n"
                    },
                    "template": {
                        "type": "boolean",
                        "description": "Is VM a template (true) or a regular VM (false)\n"
                    },
                    "vmId": {
                        "type": "integer",
                        "description": "The VM identifier.\n"
                    }
                },
                "type": "object",
                "required": [
                    "nodeName",
                    "vmId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVirtualMachine.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The virtual machine name.\n"
                    },
                    "nodeName": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the VM\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags of the VM.\n"
                    },
                    "template": {
                        "type": "boolean",
                        "description": "Is VM a template (true) or a regular VM (false)\n"
                    },
                    "vmId": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "nodeName",
                    "tags",
                    "vmId",
                    "id"
                ]
            }
        },
        "proxmoxve:VM/getVirtualMachines:getVirtualMachines": {
            "description": "Retrieves information about all VMs in the Proxmox cluster.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@pulumi/proxmoxve\";\n\nconst ubuntuVms = proxmoxve.VM.getVirtualMachines({\n    tags: [\"ubuntu\"],\n});\nconst ubuntuTemplates = proxmoxve.VM.getVirtualMachines({\n    filters: [\n        {\n            name: \"template\",\n            values: [\"true\"],\n        },\n        {\n            name: \"status\",\n            values: [\"stopped\"],\n        },\n        {\n            name: \"name\",\n            regex: true,\n            values: [\"^ubuntu-20.*$\"],\n        },\n        {\n            name: \"node_name\",\n            regex: true,\n            values: [\n                \"node_us_[1-3]\",\n                \"node_eu_[1-3]\",\n            ],\n        },\n    ],\n    tags: [\n        \"template\",\n        \"latest\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\nubuntu_vms = proxmoxve.VM.get_virtual_machines(tags=[\"ubuntu\"])\nubuntu_templates = proxmoxve.VM.get_virtual_machines(filters=[\n        {\n            \"name\": \"template\",\n            \"values\": [\"true\"],\n        },\n        {\n            \"name\": \"status\",\n            \"values\": [\"stopped\"],\n        },\n        {\n            \"name\": \"name\",\n            \"regex\": True,\n            \"values\": [\"^ubuntu-20.*$\"],\n        },\n        {\n            \"name\": \"node_name\",\n            \"regex\": True,\n            \"values\": [\n                \"node_us_[1-3]\",\n                \"node_eu_[1-3]\",\n            ],\n        },\n    ],\n    tags=[\n        \"template\",\n        \"latest\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ubuntuVms = ProxmoxVE.VM.GetVirtualMachines.Invoke(new()\n    {\n        Tags = new[]\n        {\n            \"ubuntu\",\n        },\n    });\n\n    var ubuntuTemplates = ProxmoxVE.VM.GetVirtualMachines.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new ProxmoxVE.VM.Inputs.GetVirtualMachinesFilterInputArgs\n            {\n                Name = \"template\",\n                Values = new[]\n                {\n                    \"true\",\n                },\n            },\n            new ProxmoxVE.VM.Inputs.GetVirtualMachinesFilterInputArgs\n            {\n                Name = \"status\",\n                Values = new[]\n                {\n                    \"stopped\",\n                },\n            },\n            new ProxmoxVE.VM.Inputs.GetVirtualMachinesFilterInputArgs\n            {\n                Name = \"name\",\n                Regex = true,\n                Values = new[]\n                {\n                    \"^ubuntu-20.*$\",\n                },\n            },\n            new ProxmoxVE.VM.Inputs.GetVirtualMachinesFilterInputArgs\n            {\n                Name = \"node_name\",\n                Regex = true,\n                Values = new[]\n                {\n                    \"node_us_[1-3]\",\n                    \"node_eu_[1-3]\",\n                },\n            },\n        },\n        Tags = new[]\n        {\n            \"template\",\n            \"latest\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve/VM\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := VM.GetVirtualMachines(ctx, \u0026vm.GetVirtualMachinesArgs{\n\t\t\tTags: []string{\n\t\t\t\t\"ubuntu\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = VM.GetVirtualMachines(ctx, \u0026vm.GetVirtualMachinesArgs{\n\t\t\tFilters: []vm.GetVirtualMachinesFilter{\n\t\t\t\t{\n\t\t\t\t\tName: \"template\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"true\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tName: \"status\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"stopped\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tName:  \"name\",\n\t\t\t\t\tRegex: pulumi.BoolRef(true),\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"^ubuntu-20.*$\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tName:  \"node_name\",\n\t\t\t\t\tRegex: pulumi.BoolRef(true),\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"node_us_[1-3]\",\n\t\t\t\t\t\t\"node_eu_[1-3]\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tTags: []string{\n\t\t\t\t\"template\",\n\t\t\t\t\"latest\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.VM.VMFunctions;\nimport com.pulumi.proxmoxve.VM.inputs.GetVirtualMachinesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var ubuntuVms = VMFunctions.getVirtualMachines(GetVirtualMachinesArgs.builder()\n            .tags(\"ubuntu\")\n            .build());\n\n        final var ubuntuTemplates = VMFunctions.getVirtualMachines(GetVirtualMachinesArgs.builder()\n            .filters(            \n                GetVirtualMachinesFilterArgs.builder()\n                    .name(\"template\")\n                    .values(true)\n                    .build(),\n                GetVirtualMachinesFilterArgs.builder()\n                    .name(\"status\")\n                    .values(\"stopped\")\n                    .build(),\n                GetVirtualMachinesFilterArgs.builder()\n                    .name(\"name\")\n                    .regex(true)\n                    .values(\"^ubuntu-20.*$\")\n                    .build(),\n                GetVirtualMachinesFilterArgs.builder()\n                    .name(\"node_name\")\n                    .regex(true)\n                    .values(                    \n                        \"node_us_[1-3]\",\n                        \"node_eu_[1-3]\")\n                    .build())\n            .tags(            \n                \"template\",\n                \"latest\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  ubuntuVms:\n    fn::invoke:\n      Function: proxmoxve:VM:getVirtualMachines\n      Arguments:\n        tags:\n          - ubuntu\n  ubuntuTemplates:\n    fn::invoke:\n      Function: proxmoxve:VM:getVirtualMachines\n      Arguments:\n        filters:\n          - name: template\n            values:\n              - true\n          - name: status\n            values:\n              - stopped\n          - name: name\n            regex: true\n            values:\n              - ^ubuntu-20.*$\n          - name: node_name\n            regex: true\n            values:\n              - node_us_[1-3]\n              - node_eu_[1-3]\n        tags:\n          - template\n          - latest\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVirtualMachines.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/proxmoxve:VM/getVirtualMachinesFilter:getVirtualMachinesFilter"
                        },
                        "description": "Filter blocks. The VM must satisfy all filter blocks to be included in the result.\n"
                    },
                    "nodeName": {
                        "type": "string",
                        "description": "The node name. All cluster nodes will be queried in case this is omitted\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags to filter the VMs. The VM must have all\nthe tags to be included in the result.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVirtualMachines.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/proxmoxve:VM/getVirtualMachinesFilter:getVirtualMachinesFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "nodeName": {
                        "type": "string",
                        "description": "The node name.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags of the VM.\n"
                    },
                    "vms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/proxmoxve:VM/getVirtualMachinesVm:getVirtualMachinesVm"
                        },
                        "description": "The VMs list.\n"
                    }
                },
                "type": "object",
                "required": [
                    "vms",
                    "id"
                ]
            }
        },
        "proxmoxve:index/getNode:getNode": {
            "description": "Retrieves information about node.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as proxmoxve from \"@pulumi/proxmoxve\";\n\nconst node = proxmoxve.getNode({});\n```\n```python\nimport pulumi\nimport pulumi_proxmoxve as proxmoxve\n\nnode = proxmoxve.get_node()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing ProxmoxVE = Pulumi.ProxmoxVE;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var node = ProxmoxVE.GetNode.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/muhlba91/pulumi-proxmoxve/sdk/v6/go/proxmoxve\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := proxmoxve.GetNode(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.proxmoxve.ProxmoxveFunctions;\nimport com.pulumi.proxmoxve.inputs.GetNodeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var node = ProxmoxveFunctions.getNode();\n\n    }\n}\n```\n```yaml\nvariables:\n  node:\n    fn::invoke:\n      Function: proxmoxve:getNode\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNode.\n",
                "properties": {
                    "nodeName": {
                        "type": "string",
                        "description": "The node name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "nodeName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNode.\n",
                "properties": {
                    "cpuCount": {
                        "type": "integer",
                        "description": "The CPU count on the node.\n"
                    },
                    "cpuModel": {
                        "type": "string",
                        "description": "The CPU model on the node.\n"
                    },
                    "cpuSockets": {
                        "type": "integer",
                        "description": "The CPU utilization on the node.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "memoryAvailable": {
                        "type": "integer",
                        "description": "The memory available on the node.\n"
                    },
                    "memoryTotal": {
                        "type": "integer",
                        "description": "The total memory on the node.\n"
                    },
                    "memoryUsed": {
                        "type": "integer",
                        "description": "The memory used on the node.\n"
                    },
                    "nodeName": {
                        "type": "string"
                    },
                    "uptime": {
                        "type": "integer",
                        "description": "The uptime in seconds on the node.\n"
                    }
                },
                "type": "object",
                "required": [
                    "cpuCount",
                    "cpuModel",
                    "cpuSockets",
                    "memoryAvailable",
                    "memoryTotal",
                    "memoryUsed",
                    "nodeName",
                    "uptime",
                    "id"
                ]
            }
        },
        "proxmoxve:index/getVm2:getVm2": {
            "description": "!\u003e **DO NOT USE**\nThis is an experimental implementation of a Proxmox VM datasource using Plugin Framework.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVm2.\n",
                "properties": {
                    "clone": {
                        "$ref": "#/types/proxmoxve:index/getVm2Clone:getVm2Clone",
                        "description": "The cloning configuration.\n"
                    },
                    "cpu": {
                        "$ref": "#/types/proxmoxve:index/getVm2Cpu:getVm2Cpu",
                        "description": "The CPU configuration.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the VM.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "The unique identifier of the VM in the Proxmox cluster.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the VM.\n"
                    },
                    "nodeName": {
                        "type": "string",
                        "description": "The name of the node where the VM is provisioned.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags assigned to the VM.\n"
                    },
                    "template": {
                        "type": "boolean",
                        "description": "Whether the VM is a template.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/proxmoxve:index/getVm2Timeouts:getVm2Timeouts"
                    },
                    "vga": {
                        "$ref": "#/types/proxmoxve:index/getVm2Vga:getVm2Vga",
                        "description": "The VGA configuration.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "nodeName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVm2.\n",
                "properties": {
                    "clone": {
                        "$ref": "#/types/proxmoxve:index/getVm2Clone:getVm2Clone",
                        "description": "The cloning configuration.\n"
                    },
                    "cpu": {
                        "$ref": "#/types/proxmoxve:index/getVm2Cpu:getVm2Cpu",
                        "description": "The CPU configuration.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the VM.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "The unique identifier of the VM in the Proxmox cluster.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the VM.\n"
                    },
                    "nodeName": {
                        "type": "string",
                        "description": "The name of the node where the VM is provisioned.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags assigned to the VM.\n"
                    },
                    "template": {
                        "type": "boolean",
                        "description": "Whether the VM is a template.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/proxmoxve:index/getVm2Timeouts:getVm2Timeouts"
                    },
                    "vga": {
                        "$ref": "#/types/proxmoxve:index/getVm2Vga:getVm2Vga",
                        "description": "The VGA configuration.\n"
                    }
                },
                "type": "object",
                "required": [
                    "cpu",
                    "id",
                    "nodeName",
                    "tags",
                    "vga"
                ]
            }
        }
    }
}